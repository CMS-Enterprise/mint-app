#! /usr/bin/ruby

require "rake"
require "json"
require "yaml"
require "irb"        # debugging
require "io/console" # for IO#getch

# ExtraArguments is a hack that alters how the command line arguments are parsed.
#
# Rake has a few ways to handle arguments, but the simplest one uses bracket characters
# which are problematic in the default zsh config and the others require using flags.
#
# With this code, a task can specify :consume_args as a prerequisite and any options after
# the task name will be pulled into that task's args. You can only specify a single task
# to run in this case, but that's the most common usage anyhow.
module ExtraArguments
  def execute(args)
    if prereqs.include? "consume_args"
      new_args = Rake::TaskArguments.new(args.names, args.to_a.concat($extra_args || []))
      super new_args
    else
      super
    end
  end
end

class Rake::Task
  prepend ExtraArguments
end

@needed = []
def needs(executable, install_with:nil)
  @needed << [executable, install_with]
end

needs "direnv", install_with: "brew install direnv"
needs "pre-commit", install_with: "pre-commit"
needs "docker-compose"
needs "yarn"
needs "curl"
needs "node"
needs "go"

needs "psql", install_with: "brew install postgresql"
needs "air", install_with: "go get -u github.com/cosmtrek/air"
needs "gotest", install_with: "go get -u github.com/rakyll/gotest"
needs "goimports", install_with: "go get -u golang.org/x/tools/cmd/goimports"
needs "pgcli", install_with: "brew install pgcli"

needs "swagger"
needs "jq"

# Gracefully handle folks trying to explore using common help flags
["--help", "-help", "--h", "-h"].each do |flag|
  if ARGV == [flag]
    puts "** Showing the available tasks. If you really want to see rake's command line options, use rake --help. **"
    puts
    ARGV.delete(flag)
  end
end

Rake.application.init("scripts/dev")

def ask?(question)
  puts question
  response = STDIN.getch
  ["y", "Y", "\r"].include?(response)
end

def ask_to_install(executable, install_with)
  if ask?("Do you want to install it? (Y/n)")
    sh install_with
    check_bin(executable)
    # TODO let the user know that their path is not configured correctly
  end
end

def check_bin(executable, install_with: nil)
  if `which #{executable}` == ""
    puts "#{executable} not found on path"
    if install_with
      ask_to_install(executable, install_with)
    end
  end
end

def wait_for_success(message, command)
  printf(message)
  loop do
    break if system(command)
    printf(".")
    sleep 3
  end
  puts " ✨ done ✨"
end

def contribsys_docker_login
  attempt = `docker pull docker.contribsys.com/contribsys/faktory-ent:latest 2>&1 >/dev/null | tail -n 1`

  if attempt.include?('no basic auth credentials')
    puts '🔐 Login to docker.contribsys.com (creds are in 1Password) 🔐'
    return system('docker login docker.contribsys.com', exception: true)
  end

end

desc "Check to see if the app's prerequisites are installed"
task :prereqs do
  @needed.each do |executable, install_with|
    check_bin(executable, install_with: install_with)
  end
  Rake::Task["hosts:check"].invoke
end

task :consume_args do |t, args|
  $extra_args = Rake.application.top_level_tasks.slice!(1..-1)
end


### Tasks

def up(frontend_included, *args, debug:false, wait:false)
  conf=" "
  if debug
    conf =ENV["AIR_CONFIG_DEBUG"]
    if wait
      conf =ENV["AIR_CONFIG_DEBUG_WAIT"]
    end
  end
  environment = {
    "COMPOSE_HTTP_TIMEOUT" => "120",
    "AIR_CONFIG" =>conf,
  }

  contribsys_docker_login

  command = "docker-compose #{"--profile frontend" if frontend_included } up --build"

  if args.any?
    command = "#{command} #{args.join(' ')}"
  end
  sh(environment, command, verbose: true)

  if !wait
    wait_for_success("Waiting for the back end to build...", "curl --silent --output /dev/null -m 1 localhost:8085/api/v1/healthcheck")
  else
    check = "echo '{\"method\":\"RPCServer.State\",\"params\":[],\"id\":1}' | nc -w 1 localhost 2350 | grep 'result' -q"
    wait_for_success("Waiting for backend debug server...", check)
    puts "✨ Make sure to connect the debugger, or the backend service won't start ✨ "
  end

  if frontend_included
    wait_for_success("Waiting for the front end to build...", "curl --silent --output /dev/null -m 1 localhost:3005")
  end
end

desc "Starts all services in the project"
task :up do
  up(true, "-d")
end

namespace :up do
  desc "Starts all services in the project in the foreground"
  task :watch do
    up(true)
  end

  desc "Starts all services in the project. With backend DEBUGGING"
  task :debug do
    up(true, "-d", debug: true)
  end
  desc "Starts all services in the project. With backend DEBUGGING, and also will wait to start the backend service until the debugger attaches"
  namespace :debug do
    task :wait do
      up(true, "-d", debug: true, wait: true)
    end
  end

  desc "Starts all services except the frontend (runs more quickly, if frontend isn't needed)"
  task :backend do
    up(false, "-d")
  end

  desc "Starts all services in the foreground except the frontend (runs more quickly, if frontend isn't needed)"
  namespace :backend do
    task :watch do
      up(false)
    end

    desc "Starts all services in the foreground except the frontend (runs more quickly, if frontend isn't needed). With DEBUGGING"
    task :debug do
      up(false, "-d", debug: true)
    end
    desc "Starts all services in the foreground except the frontend (runs more quickly, if frontend isn't needed). With DEBUGGING, and also will wait to start the backend service until the debugger attaches"
    namespace :debug do
      task :wait do
        up(false, "-d", debug: true, wait: true)
      end

    end

  end
end

desc "Stops all services in the project"
task :down do
  sh "docker-compose --profile frontend down"
end

desc "Restart the specified container"
task restart: :consume_args do |t, args|
  yml = `docker-compose --profile frontend config`
  config = YAML.load(yml)["services"]
  services = config.keys.sort

  args.to_a.each do |service|
    unless services.include?(service)
      puts "service #{service} not one of defined services: #{services.join(', ')}"
      next
    end
    sh "docker-compose rm -s --force #{service}"
  end

  Rake::Task["up"].invoke
end

desc "Run app and expose to other machines over Tailscale"
task :tailscale do

  puts "Running app on #{ENV["TAILSCALE_CLIENT_ADDRESS"]}"
  environment = {
    "COMPOSE_HTTP_TIMEOUT" => "120"
  }
  command = "docker-compose --profile frontend -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.tailscale.yml up"
  sh(environment, command, verbose: true)
end

namespace :docker do
  desc "Delete all dangling volumes"
  task :sweep do
    sh "docker volume rm $(docker volume ls -qf dangling=true)"
  end
end

def each_minio_file(&block)
  output = `docker-compose run --entrypoint="mc --no-color --json ls -r s3local/mint-app-file-uploads" minio_mc`
  json = "[#{output.gsub(/\}\s*\{/, "},{")}]" # convert sort-of-jsonl into conventional json
  files = JSON.parse(json)

  files.each do |file|
    yield file
  end
end

def set_file_tag(key, status)
  command = %Q{mc tag set 's3local/mint-app-file-uploads/#{key}' 'av-status=#{status}'}
  sh %Q{docker-compose run --entrypoint="#{command}" minio_mc}
end

namespace :minio do
  task :list do
    each_minio_file do |file|
      puts file["key"]
    end
  end

  desc "Mark all files in minio as clean (no viruses found)"
  task :clean do
    each_minio_file do |file|
      set_file_tag(file["key"], "CLEAN")
    end
  end

  desc "Mark all files in minio as infected (virus found)"
  task :infected do
    each_minio_file do |file|
      set_file_tag(file["key"], "INFECTED")
    end
  end

  desc "Mark all files in minio as pending (waiting for scan)"
  task :pending do
    each_minio_file do |file|
      set_file_tag(file["key"], "")
    end
  end
end

desc "Resets application to an empty state"
task :reset => :up do
  # close any hanging connections to the database
  Rake::Task["db:drop_connections"].invoke

  # drop and recreate the database
  Rake::Task["db:recreate"].invoke

  # run migrations
  Rake::Task["db:migrate"].invoke

  # load development data
  Rake::Task["db:seed"].invoke

  # The backend may have lost its database connection
  sh("docker-compose restart mint", verbose: true)
end

namespace :hosts do
  desc "Verify that hosts for local development are configured"
  task :check do
    lookup = `dscacheutil -q host -a name minio`.strip
    if lookup.size == 0 && ask?("Host 'minio' can't be resolved. Do you want to configure it now? (Y/n)")
      Rake::Task["hosts:install"].invoke

      Rake::Task["hosts:install"].reenable
      Rake::Task["hosts:check"].invoke
    elsif lookup.include?("ip_address: 127.0.0.1")
      puts "Host 'minio' is resolving correctly."
    else
      puts "Host 'minio' resolved, but not to the correct IP:"
      puts lookup
      exit(1)
    end
  end

  task :install do
    sh("echo '127.0.0.1 minio' | sudo tee -a /etc/hosts") &&
      sh("sudo killall -HUP mDNSResponder") &&
      sh("sudo dscacheutil -flushcache")
  end
end

namespace :db do
  desc "Runs database migrations and wait for them to complete"
  task :migrate do
    sh "docker-compose start db_migrate"
    loop do
      sleep 0.5
      status = `docker-compose ps | grep "db_migrate-1"`
      match = /exited \((\d+)\)/.match(status)
      if match
        unless match[1] == "0"
          puts "\n\n🚨 Migration failed! 🚨 Displaying logs from that container:\n\n"
          sh("docker-compose logs db_migrate")
          exit(1)
        end
        break
      end
    end
  end

  desc "Destroys the database container and recreates it"
  task :recreate do
    sh "docker-compose kill db && docker-compose rm -fv db && docker-compose up -d db"
  end

  desc "Seed local database with development data"
  task :seed do
    sh "go run ./cmd/dbseed"
  end

  task :drop_connections do
    `echo "select pg_terminate_backend(pg_stat_activity.pid) from pg_stat_activity where datname='postgres' AND state='idle'" | psql`
  end

  desc "Deletes all rows from all tables"
  task :clean do
    tableList = "
    analyzed_audit,
    nda_agreement,
    discussion_reply,
    plan_basics,
    plan_collaborator,
    plan_discussion,
    plan_document_solution_link,
    plan_document,
    plan_general_characteristics,
    plan_beneficiaries,
    plan_participants_and_providers,
    plan_ops_eval_and_learning,
    plan_payments,
    plan_favorite,
    plan_cr_tdl,
    operational_solution_subtask,
    operational_solution,
    operational_need,
    model_plan,
    audit.change"

    puts "Cleaning database..."
    `echo "TRUNCATE #{tableList}" | psql`

    #remove all non system accounts
    systemAccounts =  "( 'UNKNOWN_USER','MINT_SYSTEM')"
    `echo "DELETE FROM user_account WHERE username NOT IN #{systemAccounts}" | psql`

  end
end


namespace :gql do
  task :lint_schema do
    sh "yarn run graphql-schema-linter pkg/graph/schema.graphql"
  end

  namespace :generate do
    task :yarn do
      ENV["FORCE_COLOR"] = "true"

      sh "yarn generate"
    end

    task :go do
      sh "go generate ./..." do |ok|
        sh "goimports -w -local github.com/cmsgov/mint-app pkg/graph/schema.resolvers.go" if ok
      end
    end
  end

  # Runs prereqs in parallel
  multitask generate: ["gql:generate:yarn", "gql:generate:go"]
end

desc "Generate code from GraphQL schema"
task gql: ["gql:lint_schema", "gql:generate"]

desc "Run all tests in parallel"
multitask test: ["test:go", "test:js"]

namespace :test do
  desc "Runs Go tests"
  task :go => "db:clean" do
    sh "go test -short -count=1 -p=1 ./..."
  end
  namespace :go do
    desc "Runs Go tests, including long ones"
    task :long => "db:clean" do
      sh "go test -count=1 -p=1 ./..."
    end
    desc "Run targeted Go tests (pass full package name as additional options)"
    task :only => ["db:clean", :consume_args] do |t, args|
      sh "go", "test", "-short", "-count=1", "-v", "-p=1", *args
    end
  end

  desc "Run JS tests (pass path to scope to that location)"
  task :js => :consume_args do |t, args|
    sh "yarn", "run", "craco", "test", "--watchAll=false", *args
  end
  namespace :js do
    desc "Run JS tests with a matching name (pass needle as additional option)"
    task :named => :consume_args do |t, args|
      sh "yarn", "run", "craco", "test", "--watchAll=false", "-t", *args
    end
  end
end

desc "Build the Go application"
task :build do
  sh("go build -a -o bin/mint ./cmd/mint")
end

task :default do
  puts "Please provide a task to run:\n\n"
  Rake::Task["list"].invoke
  exit(1)
end

desc "List available tasks"
task :list do
  puts `scripts/dev -T`
end

desc "Run all linters and checks managed by pre-commit"
task :lint do
  sh "pre-commit run -a"
end

begin
  Rake.application.top_level
rescue RuntimeError => e
  message = e.message
  if /know how to build task/ =~ message
    message.sub!("rake --tasks", "scripts/dev list")
  end
  puts e.message
  exit 1
end
