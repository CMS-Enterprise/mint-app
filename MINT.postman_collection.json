{
	"info": {
		"_postman_id": "a437b9e0-04f7-42ce-b174-3a5b100263c1",
		"name": "MINT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20435042"
	},
	"item": [
		{
			"name": "Model Plan",
			"item": [
				{
					"name": "Create Model Plan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createModelPlan",
									"",
									"modelPlanID = responseData.id",
									"pm.collectionVariables.set(\"modelPlanID\", modelPlanID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createModelPlan ($modelName: String!) {\n    createModelPlan (modelName: $modelName) {\n        id\n        modelName\n        archived\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        status\n        isFavorite\n        isCollaborator\n    }\n}",
								"variables": "{\n  \"modelName\": \"Test\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Model Plan",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateModelPlan ($id: UUID!, $changes: ModelPlanChanges!) {\n    updateModelPlan (id: $id, changes: $changes) {\n        id\n        modelName\n        archived\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        status\n        isFavorite\n        isCollaborator\n    }\n}",
								"variables": "{\n  \"id\": \"{{modelPlanID}}\",\n  \"changes\": {\n    \"modelName\": \"My Updated Model\",\n    \"archived\": true,\n    \"status\": \"PLAN_DRAFT\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Model Plan",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query modelPlan ($id: UUID!) {\n    modelPlan (id: $id) {\n        id\n        modelName\n        archived\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        status\n        isFavorite\n        isCollaborator\n    }\n}",
								"variables": "{\n  \"id\": \"{{modelPlanID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Model Plans CRTDL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query modelPlanCollection {\n    modelPlanCollection(filter: WITH_CR_TDLS) {\n        id\n        modelName\n        archived\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        status\n        isFavorite\n        isCollaborator\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Model Plans",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query modelPlanCollection($filter: ModelPlanFilter!) {\n    modelPlanCollection(filter: $filter) {\n        id\n        modelName\n        archived\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        status\n        isFavorite\n        isCollaborator\n    }\n}",
								"variables": "{\n    \"filter\": \"INCLUDE_ALL\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Plan Favorite",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addPlanFavorite ($modelPlanID: UUID!) {\n    addPlanFavorite (modelPlanID: $modelPlanID) {\n        id\n        modelPlanID\n        userID\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"modelPlanID\": \"{{modelPlanID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Plan Favorite",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deletePlanFavorite ($modelPlanID: UUID!) {\n    deletePlanFavorite (modelPlanID: $modelPlanID) {\n        id\n        modelPlanID\n        userID\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"modelPlanID\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Task List Sections",
			"item": [
				{
					"name": "Update Plan Basics",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanBasics ($id: UUID!, $changes: PlanBasicsChanges!) {\n    updatePlanBasics (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        modelCategory\n        cmsCenters\n        cmsOther\n        cmmiGroups\n        modelType\n        problem\n        goal\n        testInterventions\n        note\n        completeICIP\n        clearanceStarts\n        clearanceEnds\n        announced\n        applicationsStart\n        applicationsEnd\n        performancePeriodStarts\n        performancePeriodEnds\n        wrapUpEnds\n        highLevelNote\n        phasedIn\n        phasedInNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        status\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }\n\n    }\n}",
								"variables": "{\n  \"id\": \"{{basicsID}}\",\n  \"changes\": {\n    \"modelCategory\": \"\",\n    \"cmsCenters\": [\n      \"\"\n    ],\n    \"cmsOther\": \"\",\n    \"cmmiGroups\": [\n      \"\"\n    ],\n    \"modelType\": \"\",\n    \"problem\": \"\",\n    \"goal\": \"\",\n    \"testInterventions\": \"\",\n    \"note\": \"\",\n    \"completeICIP\": \"\",\n    \"clearanceStarts\": \"\",\n    \"clearanceEnds\": \"\",\n    \"announced\": \"\",\n    \"applicationsStart\": \"\",\n    \"applicationsEnd\": \"\",\n    \"performancePeriodStarts\": \"\",\n    \"performancePeriodEnds\": \"\",\n    \"wrapUpEnds\": \"\",\n    \"highLevelNote\": \"\",\n    \"phasedIn\": true,\n    \"phasedInNote\": \"\",\n    \"status\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan General Characteristics",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanGeneralCharacteristics ($id: UUID!, $changes: PlanGeneralCharacteristicsChanges!) {\n    updatePlanGeneralCharacteristics (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        isNewModel\n        existingModel\n        resemblesExistingModel\n        resemblesExistingModelWhich\n        resemblesExistingModelHow\n        resemblesExistingModelNote\n        hasComponentsOrTracks\n        hasComponentsOrTracksDiffer\n        hasComponentsOrTracksNote\n        alternativePaymentModelTypes\n        alternativePaymentModelNote\n        keyCharacteristics\n        keyCharacteristicsOther\n        keyCharacteristicsNote\n        collectPlanBids\n        collectPlanBidsNote\n        managePartCDEnrollment\n        managePartCDEnrollmentNote\n        planContractUpdated\n        planContractUpdatedNote\n        careCoordinationInvolved\n        careCoordinationInvolvedDescription\n        careCoordinationInvolvedNote\n        additionalServicesInvolved\n        additionalServicesInvolvedDescription\n        additionalServicesInvolvedNote\n        communityPartnersInvolved\n        communityPartnersInvolvedDescription\n        communityPartnersInvolvedNote\n        geographiesTargeted\n        geographiesTargetedTypes\n        geographiesTargetedTypesOther\n        geographiesTargetedAppliedTo\n        geographiesTargetedAppliedToOther\n        geographiesTargetedNote\n        participationOptions\n        participationOptionsNote\n        agreementTypes\n        agreementTypesOther\n        multiplePatricipationAgreementsNeeded\n        multiplePatricipationAgreementsNeededNote\n        rulemakingRequired\n        rulemakingRequiredDescription\n        rulemakingRequiredNote\n        authorityAllowances\n        authorityAllowancesOther\n        authorityAllowancesNote\n        waiversRequired\n        waiversRequiredTypes\n        waiversRequiredNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        status\n\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }            \n    }\n}",
								"variables": "{\n  \"id\": \"{{generalCharacteristicsID}}\",\n  \"changes\": {\n    \"isNewModel\": true,\n    \"existingModel\": \"\",\n    \"resemblesExistingModel\": true,\n    \"resemblesExistingModelWhich\": [\n      \"\"\n    ],\n    \"resemblesExistingModelHow\": \"\",\n    \"resemblesExistingModelNote\": \"\",\n    \"hasComponentsOrTracks\": true,\n    \"hasComponentsOrTracksDiffer\": \"\",\n    \"hasComponentsOrTracksNote\": \"\",\n    \"alternativePaymentModelTypes\": [\n      \"\"\n    ],\n    \"alternativePaymentModelNote\": \"\",\n    \"keyCharacteristics\": [\n      \"\"\n    ],\n    \"keyCharacteristicsOther\": \"\",\n    \"keyCharacteristicsNote\": \"\",\n    \"collectPlanBids\": true,\n    \"collectPlanBidsNote\": \"\",\n    \"managePartCDEnrollment\": true,\n    \"managePartCDEnrollmentNote\": \"\",\n    \"planContractUpdated\": true,\n    \"planContractUpdatedNote\": \"\",\n    \"careCoordinationInvolved\": true,\n    \"careCoordinationInvolvedDescription\": \"\",\n    \"careCoordinationInvolvedNote\": \"\",\n    \"additionalServicesInvolved\": true,\n    \"additionalServicesInvolvedDescription\": \"\",\n    \"additionalServicesInvolvedNote\": \"\",\n    \"communityPartnersInvolved\": true,\n    \"communityPartnersInvolvedDescription\": \"\",\n    \"communityPartnersInvolvedNote\": \"\",\n    \"geographiesTargeted\": true,\n    \"geographiesTargetedTypes\": [\n      \"\"\n    ],\n    \"geographiesTargetedTypesOther\": \"\",\n    \"geographiesTargetedAppliedTo\": [\n      \"\"\n    ],\n    \"geographiesTargetedAppliedToOther\": \"\",\n    \"geographiesTargetedNote\": \"\",\n    \"participationOptions\": true,\n    \"participationOptionsNote\": \"\",\n    \"agreementTypes\": [\n      \"\"\n    ],\n    \"agreementTypesOther\": \"\",\n    \"multiplePatricipationAgreementsNeeded\": true,\n    \"multiplePatricipationAgreementsNeededNote\": \"\",\n    \"rulemakingRequired\": true,\n    \"rulemakingRequiredDescription\": \"\",\n    \"rulemakingRequiredNote\": \"\",\n    \"authorityAllowances\": [\n      \"\"\n    ],\n    \"authorityAllowancesOther\": \"\",\n    \"authorityAllowancesNote\": \"\",\n    \"waiversRequired\": true,\n    \"waiversRequiredTypes\": [\n      \"\"\n    ],\n    \"waiversRequiredNote\": \"\",\n    \"status\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan Participants And Providers",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanParticipantsAndProviders ($id: UUID!, $changes: PlanParticipantsAndProvidersChanges!) {\n    updatePlanParticipantsAndProviders (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        participants\n        medicareProviderType\n        statesEngagement\n        participantsOther\n        participantsNote\n        participantsCurrentlyInModels\n        participantsCurrentlyInModelsNote\n        modelApplicationLevel\n        expectedNumberOfParticipants\n        estimateConfidence\n        confidenceNote\n        recruitmentMethod\n        recruitmentOther\n        recruitmentNote\n        selectionMethod\n        selectionOther\n        selectionNote\n        communicationMethod\n        communicationMethodOther\n        communicationNote\n        participantAssumeRisk\n        riskType\n        riskOther\n        riskNote\n        willRiskChange\n        willRiskChangeNote\n        coordinateWork\n        coordinateWorkNote\n        gainsharePayments\n        gainsharePaymentsTrack\n        gainsharePaymentsNote\n        participantsIds\n        participantsIdsOther\n        participantsIDSNote\n        providerAdditionFrequency\n        providerAdditionFrequencyOther\n        providerAdditionFrequencyNote\n        providerAddMethod\n        providerAddMethodOther\n        providerAddMethodNote\n        providerLeaveMethod\n        providerLeaveMethodOther\n        providerLeaveMethodNote\n        providerOverlap\n        providerOverlapHierarchy\n        providerOverlapNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        \n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }\n\n\n        status\n    }\n}",
								"variables": "{\n  \"id\": \"{{participantsAndProvidersID}}\",\n  \"changes\": {\n    \"participants\": [\n      \"\"\n    ],\n    \"medicareProviderType\": \"\",\n    \"statesEngagement\": \"\",\n    \"participantsOther\": \"\",\n    \"participantsNote\": \"\",\n    \"participantsCurrentlyInModels\": true,\n    \"participantsCurrentlyInModelsNote\": \"\",\n    \"modelApplicationLevel\": \"\",\n    \"expectedNumberOfParticipants\": 0,\n    \"estimateConfidence\": \"\",\n    \"confidenceNote\": \"\",\n    \"recruitmentMethod\": \"\",\n    \"recruitmentOther\": \"\",\n    \"recruitmentNote\": \"\",\n    \"selectionMethod\": [\n      \"\"\n    ],\n    \"selectionOther\": \"\",\n    \"selectionNote\": \"\",\n    \"communicationMethod\": [\n      \"\"\n    ],\n    \"communicationMethodOther\": \"\",\n    \"communicationNote\": \"\",\n    \"participantAssumeRisk\": true,\n    \"riskType\": \"\",\n    \"riskOther\": \"\",\n    \"riskNote\": \"\",\n    \"willRiskChange\": true,\n    \"willRiskChangeNote\": \"\",\n    \"coordinateWork\": true,\n    \"coordinateWorkNote\": \"\",\n    \"gainsharePayments\": true,\n    \"gainsharePaymentsTrack\": true,\n    \"gainsharePaymentsNote\": \"\",\n    \"participantsIds\": [\n      \"\"\n    ],\n    \"participantsIdsOther\": \"\",\n    \"participantsIDSNote\": \"\",\n    \"providerAdditionFrequency\": \"\",\n    \"providerAdditionFrequencyOther\": \"\",\n    \"providerAdditionFrequencyNote\": \"\",\n    \"providerAddMethod\": [\n      \"\"\n    ],\n    \"providerAddMethodOther\": \"\",\n    \"providerAddMethodNote\": \"\",\n    \"providerLeaveMethod\": [\n      \"\"\n    ],\n    \"providerLeaveMethodOther\": \"\",\n    \"providerLeaveMethodNote\": \"\",\n    \"providerOverlap\": \"\",\n    \"providerOverlapHierarchy\": \"\",\n    \"providerOverlapNote\": \"\",\n    \"status\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan Beneficiaries",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanBeneficiaries ($id: UUID!, $changes: PlanBeneficiariesChanges!) {\n    updatePlanBeneficiaries (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        beneficiaries\n        beneficiariesOther\n        beneficiariesNote\n        treatDualElligibleDifferent\n        treatDualElligibleDifferentHow\n        treatDualElligibleDifferentNote\n        excludeCertainCharacteristics\n        excludeCertainCharacteristicsCriteria\n        excludeCertainCharacteristicsNote\n        numberPeopleImpacted\n        estimateConfidence\n        confidenceNote\n        beneficiarySelectionMethod\n        beneficiarySelectionOther\n        beneficiarySelectionNote\n        beneficiarySelectionFrequency\n        beneficiarySelectionFrequencyOther\n        beneficiarySelectionFrequencyNote\n        beneficiaryOverlap\n        beneficiaryOverlapNote\n        precedenceRules\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        status\n\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }        \n    }\n}",
								"variables": "{\n  \"id\": \"{{beneficiariesID}}\",\n  \"changes\": {\n    \"beneficiaries\": [\n      \"\"\n    ],\n    \"beneficiariesOther\": \"\",\n    \"beneficiariesNote\": \"\",\n    \"treatDualElligibleDifferent\": \"\",\n    \"treatDualElligibleDifferentHow\": \"\",\n    \"treatDualElligibleDifferentNote\": \"\",\n    \"excludeCertainCharacteristics\": \"\",\n    \"excludeCertainCharacteristicsCriteria\": \"\",\n    \"excludeCertainCharacteristicsNote\": \"\",\n    \"numberPeopleImpacted\": 0,\n    \"estimateConfidence\": \"\",\n    \"confidenceNote\": \"\",\n    \"beneficiarySelectionMethod\": [\n      \"\"\n    ],\n    \"beneficiarySelectionOther\": \"\",\n    \"beneficiarySelectionNote\": \"\",\n    \"beneficiarySelectionFrequency\": \"\",\n    \"beneficiarySelectionFrequencyOther\": \"\",\n    \"beneficiarySelectionFrequencyNote\": \"\",\n    \"beneficiaryOverlap\": \"\",\n    \"beneficiaryOverlapNote\": \"\",\n    \"precedenceRules\": \"\",\n    \"status\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan Ops Eval And Learning",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanOpsEvalAndLearning ($id: UUID!, $changes: PlanOpsEvalAndLearningChanges!) {\n    updatePlanOpsEvalAndLearning (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        agencyOrStateHelp\n        agencyOrStateHelpOther\n        agencyOrStateHelpNote\n        stakeholders\n        stakeholdersOther\n        stakeholdersNote\n        helpdeskUse\n        helpdeskUseNote\n        contractorSupport\n        contractorSupportOther\n        contractorSupportHow\n        contractorSupportNote\n        iddocSupport\n        iddocSupportNote\n        technicalContactsIdentified\n        technicalContactsIdentifiedDetail\n        technicalContactsIdentifiedNote\n        captureParticipantInfo\n        captureParticipantInfoNote\n        icdOwner\n        draftIcdDueDate\n        icdNote\n        uatNeeds\n        stcNeeds\n        testingTimelines\n        testingNote\n        dataMonitoringFileTypes\n        dataMonitoringFileOther\n        dataResponseType\n        dataResponseFileFrequency\n        dataFullTimeOrIncremental\n        eftSetUp\n        unsolicitedAdjustmentsIncluded\n        dataFlowDiagramsNeeded\n        produceBenefitEnhancementFiles\n        fileNamingConventions\n        dataMonitoringNote\n        benchmarkForPerformance\n        benchmarkForPerformanceNote\n        computePerformanceScores\n        computePerformanceScoresNote\n        riskAdjustPerformance\n        riskAdjustFeedback\n        riskAdjustPayments\n        riskAdjustOther\n        riskAdjustNote\n        appealPerformance\n        appealFeedback\n        appealPayments\n        appealOther\n        appealNote\n        evaluationApproaches\n        evaluationApproachOther\n        evalutaionApproachNote\n        ccmInvolvment\n        ccmInvolvmentOther\n        ccmInvolvmentNote\n        dataNeededForMonitoring\n        dataNeededForMonitoringOther\n        dataNeededForMonitoringNote\n        dataToSendParticicipants\n        dataToSendParticicipantsOther\n        dataToSendParticicipantsNote\n        shareCclfData\n        shareCclfDataNote\n        sendFilesBetweenCcw\n        sendFilesBetweenCcwNote\n        appToSendFilesToKnown\n        appToSendFilesToWhich\n        appToSendFilesToNote\n        useCcwForFileDistribiutionToParticipants\n        useCcwForFileDistribiutionToParticipantsNote\n        developNewQualityMeasures\n        developNewQualityMeasuresNote\n        qualityPerformanceImpactsPayment\n        qualityPerformanceImpactsPaymentNote\n        dataSharingStarts\n        dataSharingStartsOther\n        dataSharingFrequency\n        dataSharingFrequencyOther\n        dataSharingStartsNote\n        dataCollectionStarts\n        dataCollectionStartsOther\n        dataCollectionFrequency\n        dataCollectionFrequencyOther\n        dataCollectionFrequencyNote\n        qualityReportingStarts\n        qualityReportingStartsOther\n        qualityReportingStartsNote\n        modelLearningSystems\n        modelLearningSystemsOther\n        modelLearningSystemsNote\n        anticipatedChallenges\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        status\n                createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }\n    }\n}",
								"variables": "{\n  \"id\": \"{{opsEvalAndLearningID}}\",\n  \"changes\": {\n    \"agencyOrStateHelp\": [\n      \"\"\n    ],\n    \"agencyOrStateHelpOther\": \"\",\n    \"agencyOrStateHelpNote\": \"\",\n    \"stakeholders\": [\n      \"\"\n    ],\n    \"stakeholdersOther\": \"\",\n    \"stakeholdersNote\": \"\",\n    \"helpdeskUse\": true,\n    \"helpdeskUseNote\": \"\",\n    \"contractorSupport\": [\n      \"\"\n    ],\n    \"contractorSupportOther\": \"\",\n    \"contractorSupportHow\": \"\",\n    \"contractorSupportNote\": \"\",\n    \"iddocSupport\": true,\n    \"iddocSupportNote\": \"\",\n    \"technicalContactsIdentified\": true,\n    \"technicalContactsIdentifiedDetail\": \"\",\n    \"technicalContactsIdentifiedNote\": \"\",\n    \"captureParticipantInfo\": true,\n    \"captureParticipantInfoNote\": \"\",\n    \"icdOwner\": \"\",\n    \"draftIcdDueDate\": \"\",\n    \"icdNote\": \"\",\n    \"uatNeeds\": \"\",\n    \"stcNeeds\": \"\",\n    \"testingTimelines\": \"\",\n    \"testingNote\": \"\",\n    \"dataMonitoringFileTypes\": [\n      \"\"\n    ],\n    \"dataMonitoringFileOther\": \"\",\n    \"dataResponseType\": \"\",\n    \"dataResponseFileFrequency\": \"\",\n    \"dataFullTimeOrIncremental\": \"\",\n    \"eftSetUp\": true,\n    \"unsolicitedAdjustmentsIncluded\": true,\n    \"dataFlowDiagramsNeeded\": true,\n    \"produceBenefitEnhancementFiles\": true,\n    \"fileNamingConventions\": \"\",\n    \"dataMonitoringNote\": \"\",\n    \"benchmarkForPerformance\": \"\",\n    \"benchmarkForPerformanceNote\": \"\",\n    \"computePerformanceScores\": true,\n    \"computePerformanceScoresNote\": \"\",\n    \"riskAdjustPerformance\": true,\n    \"riskAdjustFeedback\": true,\n    \"riskAdjustPayments\": true,\n    \"riskAdjustOther\": true,\n    \"riskAdjustNote\": \"\",\n    \"appealPerformance\": true,\n    \"appealFeedback\": true,\n    \"appealPayments\": true,\n    \"appealOther\": true,\n    \"appealNote\": \"\",\n    \"evaluationApproaches\": [\n      \"\"\n    ],\n    \"evaluationApproachOther\": \"\",\n    \"evalutaionApproachNote\": \"\",\n    \"ccmInvolvment\": [\n      \"\"\n    ],\n    \"ccmInvolvmentOther\": \"\",\n    \"ccmInvolvmentNote\": \"\",\n    \"dataNeededForMonitoring\": [\n      \"\"\n    ],\n    \"dataNeededForMonitoringOther\": \"\",\n    \"dataNeededForMonitoringNote\": \"\",\n    \"dataToSendParticicipants\": [\n      \"\"\n    ],\n    \"dataToSendParticicipantsOther\": \"\",\n    \"dataToSendParticicipantsNote\": \"\",\n    \"shareCclfData\": true,\n    \"shareCclfDataNote\": \"\",\n    \"sendFilesBetweenCcw\": true,\n    \"sendFilesBetweenCcwNote\": \"\",\n    \"appToSendFilesToKnown\": true,\n    \"appToSendFilesToWhich\": \"\",\n    \"appToSendFilesToNote\": \"\",\n    \"useCcwForFileDistribiutionToParticipants\": true,\n    \"useCcwForFileDistribiutionToParticipantsNote\": \"\",\n    \"developNewQualityMeasures\": true,\n    \"developNewQualityMeasuresNote\": \"\",\n    \"qualityPerformanceImpactsPayment\": true,\n    \"qualityPerformanceImpactsPaymentNote\": \"\",\n    \"dataSharingStarts\": \"\",\n    \"dataSharingStartsOther\": \"\",\n    \"dataSharingFrequency\": [\n      \"\"\n    ],\n    \"dataSharingFrequencyOther\": \"\",\n    \"dataSharingStartsNote\": \"\",\n    \"dataCollectionStarts\": \"\",\n    \"dataCollectionStartsOther\": \"\",\n    \"dataCollectionFrequency\": [\n      \"\"\n    ],\n    \"dataCollectionFrequencyOther\": \"\",\n    \"dataCollectionFrequencyNote\": \"\",\n    \"qualityReportingStarts\": \"\",\n    \"qualityReportingStartsOther\": \"\",\n    \"qualityReportingStartsNote\": \"\",\n    \"modelLearningSystems\": [\n      \"\"\n    ],\n    \"modelLearningSystemsOther\": \"\",\n    \"modelLearningSystemsNote\": \"\",\n    \"anticipatedChallenges\": \"\",\n    \"status\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan Payments",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanPayments ($id: UUID!, $changes: PlanPaymentsChanges!) {\n    updatePlanPayments (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        fundingSource\n        fundingSourceTrustFund\n        fundingSourceOther\n        fundingSourceNote\n        fundingSourceR\n        fundingSourceRTrustFund\n        fundingSourceROther\n        fundingSourceRNote\n        payRecipients\n        payRecipientsOtherSpecification\n        payRecipientsNote\n        payType\n        payTypeNote\n        payClaims\n        payClaimsOther\n        payClaimsNote\n        shouldAnyProvidersExcludedFFSSystems\n        shouldAnyProviderExcludedFFSSystemsNote\n        changesMedicarePhysicianFeeSchedule\n        changesMedicarePhysicianFeeScheduleNote\n        affectsMedicareSecondaryPayerClaims\n        affectsMedicareSecondaryPayerClaimsHow\n        affectsMedicareSecondaryPayerClaimsNote\n        payModelDifferentiation\n        creatingDependenciesBetweenServices\n        creatingDependenciesBetweenServicesNote\n        needsClaimsDataCollection\n        needsClaimsDataCollectionNote\n        providingThirdPartyFile\n        isContractorAwareTestDataRequirements\n        beneficiaryCostSharingLevelAndHandling\n        waiveBeneficiaryCostSharingForAnyServices\n        waiveBeneficiaryCostSharingServiceSpecification\n        waiverOnlyAppliesPartOfPayment\n        waiveBeneficiaryCostSharingNote\n        nonClaimsPayments\n        nonClaimsPaymentOther\n        nonClaimsPaymentsNote\n        paymentCalculationOwner\n        numberPaymentsPerPayCycle\n        numberPaymentsPerPayCycleNote\n        sharedSystemsInvolvedAdditionalClaimPayment\n        sharedSystemsInvolvedAdditionalClaimPaymentNote\n        planningToUseInnovationPaymentContractor\n        planningToUseInnovationPaymentContractorNote\n        fundingStructure\n        expectedCalculationComplexityLevel\n        expectedCalculationComplexityLevelNote\n        canParticipantsSelectBetweenPaymentMechanisms\n        canParticipantsSelectBetweenPaymentMechanismsHow\n        canParticipantsSelectBetweenPaymentMechanismsNote\n        anticipatedPaymentFrequency\n        anticipatedPaymentFrequencyOther\n        anticipatedPaymentFrequencyNote\n        willRecoverPayments\n        willRecoverPaymentsNote\n        anticipateReconcilingPaymentsRetrospectively\n        anticipateReconcilingPaymentsRetrospectivelyNote\n        paymentStartDate\n        paymentStartDateNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        status\n\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }\n    }\n}",
								"variables": "{\n  \"id\": \"{{paymentsID}}\",\n  \"changes\": {\n    \"fundingSource\": [\n      \"\"\n    ],\n    \"fundingSourceTrustFund\": \"\",\n    \"fundingSourceOther\": \"\",\n    \"fundingSourceNote\": \"\",\n    \"fundingSourceR\": [\n      \"\"\n    ],\n    \"fundingSourceRTrustFund\": \"\",\n    \"fundingSourceROther\": \"\",\n    \"fundingSourceRNote\": \"\",\n    \"payRecipients\": [\n      \"\"\n    ],\n    \"payRecipientsOtherSpecification\": \"\",\n    \"payRecipientsNote\": \"\",\n    \"payType\": [\n      \"\"\n    ],\n    \"payTypeNote\": \"\",\n    \"payClaims\": [\n      \"\"\n    ],\n    \"payClaimsOther\": \"\",\n    \"payClaimsNote\": \"\",\n    \"shouldAnyProvidersExcludedFFSSystems\": true,\n    \"shouldAnyProviderExcludedFFSSystemsNote\": \"\",\n    \"changesMedicarePhysicianFeeSchedule\": true,\n    \"changesMedicarePhysicianFeeScheduleNote\": \"\",\n    \"affectsMedicareSecondaryPayerClaims\": true,\n    \"affectsMedicareSecondaryPayerClaimsHow\": \"\",\n    \"affectsMedicareSecondaryPayerClaimsNote\": \"\",\n    \"payModelDifferentiation\": \"\",\n    \"creatingDependenciesBetweenServices\": true,\n    \"creatingDependenciesBetweenServicesNote\": \"\",\n    \"needsClaimsDataCollection\": true,\n    \"needsClaimsDataCollectionNote\": \"\",\n    \"providingThirdPartyFile\": true,\n    \"isContractorAwareTestDataRequirements\": true,\n    \"beneficiaryCostSharingLevelAndHandling\": \"\",\n    \"waiveBeneficiaryCostSharingForAnyServices\": true,\n    \"waiveBeneficiaryCostSharingServiceSpecification\": \"\",\n    \"waiverOnlyAppliesPartOfPayment\": true,\n    \"waiveBeneficiaryCostSharingNote\": \"\",\n    \"nonClaimsPayments\": [\n      \"\"\n    ],\n    \"nonClaimsPaymentOther\": \"\",\n    \"nonClaimsPaymentsNote\": \"\",\n    \"paymentCalculationOwner\": \"\",\n    \"numberPaymentsPerPayCycle\": \"\",\n    \"numberPaymentsPerPayCycleNote\": \"\",\n    \"sharedSystemsInvolvedAdditionalClaimPayment\": true,\n    \"sharedSystemsInvolvedAdditionalClaimPaymentNote\": \"\",\n    \"planningToUseInnovationPaymentContractor\": true,\n    \"planningToUseInnovationPaymentContractorNote\": \"\",\n    \"fundingStructure\": \"\",\n    \"expectedCalculationComplexityLevel\": \"\",\n    \"expectedCalculationComplexityLevelNote\": \"\",\n    \"canParticipantsSelectBetweenPaymentMechanisms\": true,\n    \"canParticipantsSelectBetweenPaymentMechanismsHow\": \"\",\n    \"canParticipantsSelectBetweenPaymentMechanismsNote\": \"\",\n    \"anticipatedPaymentFrequency\": [\n      \"\"\n    ],\n    \"anticipatedPaymentFrequencyOther\": \"\",\n    \"anticipatedPaymentFrequencyNote\": \"\",\n    \"willRecoverPayments\": true,\n    \"willRecoverPaymentsNote\": \"\",\n    \"anticipateReconcilingPaymentsRetrospectively\": true,\n    \"anticipateReconcilingPaymentsRetrospectivelyNote\": \"\",\n    \"paymentStartDate\": \"\",\n    \"paymentStartDateNote\": \"\",\n    \"status\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Plan Payments (Deprecated)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query planPayments ($id: UUID!) {\n    planPayments (id: $id) {\n        id\n        modelPlanID\n        fundingSource\n        fundingSourceTrustFund\n        fundingSourceOther\n        fundingSourceNote\n        fundingSourceR\n        fundingSourceRTrustFund\n        fundingSourceROther\n        fundingSourceRNote\n        payRecipients\n        payRecipientsOtherSpecification\n        payRecipientsNote\n        payType\n        payTypeNote\n        payClaims\n        payClaimsOther\n        payClaimsNote\n        shouldAnyProvidersExcludedFFSSystems\n        shouldAnyProviderExcludedFFSSystemsNote\n        changesMedicarePhysicianFeeSchedule\n        changesMedicarePhysicianFeeScheduleNote\n        affectsMedicareSecondaryPayerClaims\n        affectsMedicareSecondaryPayerClaimsHow\n        affectsMedicareSecondaryPayerClaimsNote\n        payModelDifferentiation\n        creatingDependenciesBetweenServices\n        creatingDependenciesBetweenServicesNote\n        needsClaimsDataCollection\n        needsClaimsDataCollectionNote\n        providingThirdPartyFile\n        isContractorAwareTestDataRequirements\n        beneficiaryCostSharingLevelAndHandling\n        waiveBeneficiaryCostSharingForAnyServices\n        waiveBeneficiaryCostSharingServiceSpecification\n        waiverOnlyAppliesPartOfPayment\n        waiveBeneficiaryCostSharingNote\n        nonClaimsPayments\n        nonClaimsPaymentOther\n        paymentCalculationOwner\n        numberPaymentsPerPayCycle\n        numberPaymentsPerPayCycleNote\n        sharedSystemsInvolvedAdditionalClaimPayment\n        sharedSystemsInvolvedAdditionalClaimPaymentNote\n        planningToUseInnovationPaymentContractor\n        planningToUseInnovationPaymentContractorNote\n        fundingStructure\n        expectedCalculationComplexityLevel\n        expectedCalculationComplexityLevelNote\n        canParticipantsSelectBetweenPaymentMechanisms\n        canParticipantsSelectBetweenPaymentMechanismsHow\n        canParticipantsSelectBetweenPaymentMechanismsNote\n        anticipatedPaymentFrequency\n        anticipatedPaymentFrequencyOther\n        anticipatedPaymentFrequencyNote\n        willRecoverPayments\n        willRecoverPaymentsNote\n        anticipateReconcilingPaymentsRetrospectively\n        anticipateReconcilingPaymentsRetrospectivelyNote\n        paymentStartDate\n        paymentStartDateNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        readyForReviewBy\n        readyForReviewDts\n        status\n    }\n}",
								"variables": "{\n  \"id\": \"{{paymentsID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan IT Tools",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanItTools ($id: UUID!, $changes: PlanITToolsChanges!) {\n    updatePlanItTools (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        gcPartCD\n        gcPartCDOther\n        gcPartCDNote\n        gcCollectBids\n        gcCollectBidsOther\n        gcCollectBidsNote\n        gcUpdateContract\n        gcUpdateContractOther\n        gcUpdateContractNote\n        ppToAdvertise\n        ppToAdvertiseOther\n        ppToAdvertiseNote\n        ppCollectScoreReview\n        ppCollectScoreReviewOther\n        ppCollectScoreReviewNote\n        ppAppSupportContractor\n        ppAppSupportContractorOther\n        ppAppSupportContractorNote\n        ppCommunicateWithParticipant\n        ppCommunicateWithParticipantOther\n        ppCommunicateWithParticipantNote\n        ppManageProviderOverlap\n        ppManageProviderOverlapOther\n        ppManageProviderOverlapNote\n        bManageBeneficiaryOverlap\n        bManageBeneficiaryOverlapOther\n        bManageBeneficiaryOverlapNote\n        oelHelpdeskSupport\n        oelHelpdeskSupportOther\n        oelHelpdeskSupportNote\n        oelManageAco\n        oelManageAcoOther\n        oelManageAcoNote\n        oelPerformanceBenchmark\n        oelPerformanceBenchmarkOther\n        oelPerformanceBenchmarkNote\n        oelProcessAppeals\n        oelProcessAppealsOther\n        oelProcessAppealsNote\n        oelEvaluationContractor\n        oelEvaluationContractorOther\n        oelEvaluationContractorNote\n        oelCollectData\n        oelCollectDataOther\n        oelCollectDataNote\n        oelObtainData\n        oelObtainDataOther\n        oelObtainDataNote\n        oelClaimsBasedMeasures\n        oelClaimsBasedMeasuresOther\n        oelClaimsBasedMeasuresNote\n        oelQualityScores\n        oelQualityScoresOther\n        oelQualityScoresNote\n        oelSendReports\n        oelSendReportsOther\n        oelSendReportsNote\n        oelLearningContractor\n        oelLearningContractorOther\n        oelLearningContractorNote\n        oelParticipantCollaboration\n        oelParticipantCollaborationOther\n        oelParticipantCollaborationNote\n        oelEducateBeneficiaries\n        oelEducateBeneficiariesOther\n        oelEducateBeneficiariesNote\n        pMakeClaimsPayments\n        pMakeClaimsPaymentsOther\n        pMakeClaimsPaymentsNote\n        pInformFfs\n        pInformFfsOther\n        pInformFfsNote\n        pNonClaimsBasedPayments\n        pNonClaimsBasedPaymentsOther\n        pNonClaimsBasedPaymentsNote\n        pSharedSavingsPlan\n        pSharedSavingsPlanOther\n        pSharedSavingsPlanNote\n        pRecoverPayments\n        pRecoverPaymentsOther\n        pRecoverPaymentsNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        readyForReviewBy\n        readyForReviewDts\n        status\n    }\n}",
								"variables": "{\n  \"id\": \"{{itToolsID}}\",\n  \"changes\": {\n    \"gcPartCD\": [\n      \"\"\n    ],\n    \"gcPartCDOther\": \"\",\n    \"gcPartCDNote\": \"\",\n    \"gcCollectBids\": [\n      \"\"\n    ],\n    \"gcCollectBidsOther\": \"\",\n    \"gcCollectBidsNote\": \"\",\n    \"gcUpdateContract\": [\n      \"\"\n    ],\n    \"gcUpdateContractOther\": \"\",\n    \"gcUpdateContractNote\": \"\",\n    \"ppToAdvertise\": [\n      \"\"\n    ],\n    \"ppToAdvertiseOther\": \"\",\n    \"ppToAdvertiseNote\": \"\",\n    \"ppCollectScoreReview\": [\n      \"\"\n    ],\n    \"ppCollectScoreReviewOther\": \"\",\n    \"ppCollectScoreReviewNote\": \"\",\n    \"ppAppSupportContractor\": [\n      \"\"\n    ],\n    \"ppAppSupportContractorOther\": \"\",\n    \"ppAppSupportContractorNote\": \"\",\n    \"ppCommunicateWithParticipant\": [\n      \"\"\n    ],\n    \"ppCommunicateWithParticipantOther\": \"\",\n    \"ppCommunicateWithParticipantNote\": \"\",\n    \"ppManageProviderOverlap\": [\n      \"\"\n    ],\n    \"ppManageProviderOverlapOther\": \"\",\n    \"ppManageProviderOverlapNote\": \"\",\n    \"bManageBeneficiaryOverlap\": [\n      \"\"\n    ],\n    \"bManageBeneficiaryOverlapOther\": \"\",\n    \"bManageBeneficiaryOverlapNote\": \"\",\n    \"oelHelpdeskSupport\": [\n      \"\"\n    ],\n    \"oelHelpdeskSupportOther\": \"\",\n    \"oelHelpdeskSupportNote\": \"\",\n    \"oelManageAco\": [\n      \"\"\n    ],\n    \"oelManageAcoOther\": \"\",\n    \"oelManageAcoNote\": \"\",\n    \"oelPerformanceBenchmark\": [\n      \"\"\n    ],\n    \"oelPerformanceBenchmarkOther\": \"\",\n    \"oelPerformanceBenchmarkNote\": \"\",\n    \"oelProcessAppeals\": [\n      \"\"\n    ],\n    \"oelProcessAppealsOther\": \"\",\n    \"oelProcessAppealsNote\": \"\",\n    \"oelEvaluationContractor\": [\n      \"\"\n    ],\n    \"oelEvaluationContractorOther\": \"\",\n    \"oelEvaluationContractorNote\": \"\",\n    \"oelCollectData\": [\n      \"\"\n    ],\n    \"oelCollectDataOther\": \"\",\n    \"oelCollectDataNote\": \"\",\n    \"oelObtainData\": [\n      \"\"\n    ],\n    \"oelObtainDataOther\": \"\",\n    \"oelObtainDataNote\": \"\",\n    \"oelClaimsBasedMeasures\": [\n      \"\"\n    ],\n    \"oelClaimsBasedMeasuresOther\": \"\",\n    \"oelClaimsBasedMeasuresNote\": \"\",\n    \"oelQualityScores\": [\n      \"\"\n    ],\n    \"oelQualityScoresOther\": \"\",\n    \"oelQualityScoresNote\": \"\",\n    \"oelSendReports\": [\n      \"\"\n    ],\n    \"oelSendReportsOther\": \"\",\n    \"oelSendReportsNote\": \"\",\n    \"oelLearningContractor\": [\n      \"\"\n    ],\n    \"oelLearningContractorOther\": \"\",\n    \"oelLearningContractorNote\": \"\",\n    \"oelParticipantCollaboration\": [\n      \"\"\n    ],\n    \"oelParticipantCollaborationOther\": \"\",\n    \"oelParticipantCollaborationNote\": \"\",\n    \"oelEducateBeneficiaries\": [\n      \"\"\n    ],\n    \"oelEducateBeneficiariesOther\": \"\",\n    \"oelEducateBeneficiariesNote\": \"\",\n    \"pMakeClaimsPayments\": [\n      \"\"\n    ],\n    \"pMakeClaimsPaymentsOther\": \"\",\n    \"pMakeClaimsPaymentsNote\": \"\",\n    \"pInformFfs\": [\n      \"\"\n    ],\n    \"pInformFfsOther\": \"\",\n    \"pInformFfsNote\": \"\",\n    \"pNonClaimsBasedPayments\": [\n      \"\"\n    ],\n    \"pNonClaimsBasedPaymentsOther\": \"\",\n    \"pNonClaimsBasedPaymentsNote\": \"\",\n    \"pSharedSavingsPlan\": [\n      \"\"\n    ],\n    \"pSharedSavingsPlanOther\": \"\",\n    \"pSharedSavingsPlanNote\": \"\",\n    \"pRecoverPayments\": [\n      \"\"\n    ],\n    \"pRecoverPaymentsOther\": \"\",\n    \"pRecoverPaymentsNote\": \"\",\n    \"status\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Collaborators",
			"item": [
				{
					"name": "Create Plan Collaborator",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createPlanCollaborator ($input: PlanCollaboratorCreateInput!) {\n    createPlanCollaborator (input: $input) {\n    id\n    modelPlanID\n    userID\n    teamRole\n    userAccount \n    {\n        commonName\n        familyName\n        givenName\n        email\n        locale\n    }  \n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"input\": {\n    \"modelPlanID\": \"{{modelPlanID}}\",\n    \"userName\": \"CLAB\",\n    \"teamRole\": \"MODEL_LEAD\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan Collaborator",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanCollaborator ($id: UUID!, $newRole: TeamRole!) {\n    updatePlanCollaborator (id: $id, newRole: $newRole) {\n        id\n        modelPlanID\n        userID\n        userAccount \n        {\n            commonName\n            familyName\n            givenName\n            email\n            locale\n        }  \n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"{{modelLeadID}}\",\n  \"newRole\": \"LEARNING\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Plan Collaborator",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deletePlanCollaborator ($id: UUID!) {\n    deletePlanCollaborator (id: $id) {\n        id\n        modelPlanID\n        userID\n        userAccount \n        {\n            commonName\n            familyName\n            givenName\n            email\n            locale\n        }  \n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"{{modelLeadID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Plan Collaborator By ID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query planCollaboratorByID ($id: UUID!) {\n    planCollaboratorByID (id: $id) {\n        id\n        modelPlanID\n        userID\n        userAccount \n        {\n            commonName\n            familyName\n            givenName\n            email\n            locale\n        }  \n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"{{modelLeadID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Discussions & Replies",
			"item": [
				{
					"name": "Create Plan Discussion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createPlanDiscussion",
									"",
									"discussionID = responseData.id",
									"",
									"",
									"pm.collectionVariables.set(\"discussionID\", discussionID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createPlanDiscussion ($input: PlanDiscussionCreateInput!) {\n    createPlanDiscussion (input: $input) {\n        id\n        modelPlanID\n        content\n        status\n        isAssessment\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }             \n    }\n}",
								"variables": "{\n  \"input\": {\n    \"modelPlanID\": \"{{modelPlanID}}\",\n    \"content\": \"This is a question\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan Discussion",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanDiscussion ($id: UUID!, $changes: PlanDiscussionChanges!) {\n    updatePlanDiscussion (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        content\n        status\n        isAssessment\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }             \n    }\n}",
								"variables": "{\n  \"id\": \"{{discussionID}}\",\n  \"changes\": {\n    \"content\": \"Great Changes\",\n    \"status\": \"UNANSWERED\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Plan Discussion",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deletePlanDiscussion ($id: UUID!) {\n    deletePlanDiscussion (id: $id) {\n        id\n        modelPlanID\n        content\n        status\n        isAssessment\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }             \n    }\n}",
								"variables": "{\n  \"id\": \"{{discussionID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Discussion Reply",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createDiscussionReply",
									"",
									"discussionReplyID = responseData.id",
									"",
									"",
									"pm.collectionVariables.set(\"discussionReplyID\", discussionReplyID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createDiscussionReply ($input: DiscussionReplyCreateInput!) {\n    createDiscussionReply (input: $input) {\n        id\n        discussionID\n        content\n        resolution\n        isAssessment\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }             \n    }\n}",
								"variables": "{\n  \"input\": {\n    \"discussionID\": \"{{discussionID}}\",\n    \"content\": \"This is a resolution\",\n    \"resolution\": true\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Discussion Reply",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateDiscussionReply ($id: UUID!, $changes: DiscussionReplyChanges!) {\n    updateDiscussionReply (id: $id, changes: $changes) {\n        id\n        discussionID\n        content\n        resolution\n        isAssessment\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }             \n    }\n}",
								"variables": "{\n  \"id\": \"{{discussionReplyID}}\",\n  \"changes\": {\n    \"content\": \"This is a resolution\",\n    \"resolution\": true\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Discussion Reply",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteDiscussionReply ($id: UUID!) {\n    deleteDiscussionReply (id: $id) {\n        id\n        discussionID\n        content\n        resolution\n        isAssessment\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }             \n    }\n}",
								"variables": "{\n  \"id\": \"{{discussionReplyID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Plan Documents",
			"item": [
				{
					"name": "Create Plan Document",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createPlanDocument ($input: PlanDocumentInput!) {\n    createPlanDocument (input: $input) {\n        presignedURL\n    }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"\",\n    \"modelPlanID\": \"\",\n    \"documentParameters\": {\n      \"fileName\": \"\",\n      \"fileSize\": 0,\n      \"fileType\": \"\",\n      \"documentType\": \"\",\n      \"otherTypeDescription\": \"\",\n      \"optionalNotes\": \"\"\n    },\n    \"url\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan Document",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanDocument ($input: PlanDocumentInput!) {\n    updatePlanDocument (input: $input) {\n        presignedURL\n    }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"\",\n    \"modelPlanID\": \"\",\n    \"documentParameters\": {\n      \"fileName\": \"\",\n      \"fileSize\": 0,\n      \"fileType\": \"\",\n      \"documentType\": \"\",\n      \"otherTypeDescription\": \"\",\n      \"optionalNotes\": \"\"\n    },\n    \"url\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Plan Document",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deletePlanDocument ($input: PlanDocumentInput!) {\n    deletePlanDocument (input: $input)\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"\",\n    \"modelPlanID\": \"\",\n    \"documentParameters\": {\n      \"fileName\": \"\",\n      \"fileSize\": 0,\n      \"fileType\": \"\",\n      \"documentType\": \"\",\n      \"otherTypeDescription\": \"\",\n      \"optionalNotes\": \"\"\n    },\n    \"url\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Plan Document by ID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query planDocument ($id: UUID!) {\n    planDocument (id: $id) {\n        id\n        modelPlanID\n        fileType\n        bucket\n        fileKey\n        virusScanned\n        virusClean\n        fileName\n        fileSize\n        documentType\n        otherType\n        optionalNotes\n        deletedAt\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }            \n    }\n}",
								"variables": "{\n  \"id\": \"{{documentID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CRs and TDLs",
			"item": [
				{
					"name": "Create CR/TDL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createPlanCrTdl ($input: PlanCrTdlCreateInput!) {\n    createPlanCrTdl (input: $input) {\n        id\n        modelPlanID\n        idNumber\n        dateInitiated\n        title\n        note\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"input\": {\n    \"modelPlanID\": \"\",\n    \"idNumber\": \"\",\n    \"dateInitiated\": \"\",\n    \"title\": \"\",\n    \"note\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CR/TDL by ID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query crTdl ($id: UUID!) {\n    crTdl (id: $id) {\n        id\n        modelPlanID\n        idNumber\n        dateInitiated\n        title\n        note\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update CR/TDL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanCrTdl ($id: UUID!, $changes: PlanCrTdlChanges!) {\n    updatePlanCrTdl (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        idNumber\n        dateInitiated\n        title\n        note\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"\",\n  \"changes\": {\n    \"idNumber\": \"\",\n    \"dateInitiated\": \"\",\n    \"title\": \"\",\n    \"note\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete CR/TDL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deletePlanCrTdl ($id: UUID!) {\n    deletePlanCrTdl (id: $id) {\n        id\n        modelPlanID\n        idNumber\n        dateInitiated\n        title\n        note\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscriptions / Task List Locking",
			"item": [
				{
					"name": "[sub] onTaskListSectionLocksChanged",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "subscription onTaskListSectionLocksChanged ($modelPlanID: UUID!) {\n    onTaskListSectionLocksChanged (modelPlanID: $modelPlanID) {\n        changeType\n        actionType\n        lockStatus {\n            modelPlanID\n            section\n            lockedBy\n            isAssessment\n        }\n    }\n}",
								"variables": "{\n  \"modelPlanID\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[sub] onLockTaskListSectionContext",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "subscription onLockTaskListSectionContext ($modelPlanID: UUID!) {\n    onLockTaskListSectionContext (modelPlanID: $modelPlanID) {\n        changeType\n        actionType\n        lockStatus {\n            modelPlanID\n            section\n            lockedBy\n            isAssessment\n        }\n    }\n}",
								"variables": "{\n  \"modelPlanID\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Task List Section Locks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query taskListSectionLocks ($modelPlanID: UUID!) {\n    taskListSectionLocks (modelPlanID: $modelPlanID) {\n        modelPlanID\n        section\n        lockedBy\n        isAssessment\n    }\n}",
								"variables": "{\n  \"modelPlanID\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lock Task List Section",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation lockTaskListSection ($modelPlanID: UUID!, $section: TaskListSection!) {\n    lockTaskListSection (modelPlanID: $modelPlanID, section: $section)\n}",
								"variables": "{\n  \"modelPlanID\": \"\",\n  \"section\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlock Task List Section",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation unlockTaskListSection ($modelPlanID: UUID!, $section: TaskListSection!) {\n    unlockTaskListSection (modelPlanID: $modelPlanID, section: $section)\n}",
								"variables": "{\n  \"modelPlanID\": \"\",\n  \"section\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlock All Task List Sections",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation unlockAllTaskListSections ($modelPlanID: UUID!) {\n    unlockAllTaskListSections (modelPlanID: $modelPlanID) {\n        modelPlanID\n        section\n        lockedBy\n        isAssessment\n    }\n}",
								"variables": "{\n  \"modelPlanID\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NDA",
			"item": [
				{
					"name": "Agree To NDA",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation agreeToNDA ($agree: Boolean!) {\n    agreeToNDA (agree: $agree) {\n        agreed\n        agreedDts\n    }\n}",
								"variables": "{\n  \"agree\": true\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get NDA Info",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ndaInfo {\n    ndaInfo {\n        agreed\n        agreedDts\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Other",
			"item": [
				{
					"name": "Get CurrentUser",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query currentUser {\n    currentUser{\n        launchDarkly {\n            userKey\n        }\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing Model Collection",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query existingModelCollection {\n    existingModelCollection {\n        id\n        modelName\n        stage\n        numberOfParticipants\n        category\n        authority\n        description\n        numberOfBeneficiariesImpacted\n        numberOfPhysiciansImpacted\n        dateBegan\n        dateEnded\n        states\n        keywords\n        url\n        displayModelSummary\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Okta Users",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query searchOktaUsers ($searchTerm: String!) {\n    searchOktaUsers (searchTerm: $searchTerm) {\n        firstName\n        lastName\n        displayName\n        email\n        username\n    }\n}",
								"variables": "{\n  \"searchTerm\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Variables",
			"item": [
				{
					"name": "ModelPlanCreate AND SET VARIABLES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createModelPlan",
									"",
									"modelPlanID = responseData.id",
									"basicsID = responseData.basics.id",
									"generalCharacteristicsID = responseData.generalCharacteristics.id",
									"participantsAndProvidersID = responseData.participantsAndProviders.id",
									"beneficiariesID = responseData.beneficiaries.id",
									"opsEvalAndLearningID = responseData.opsEvalAndLearning.id",
									"modelLeadID = responseData.collaborators[0].id",
									"paymentsID = responseData.payments.id",
									"itToolsID = responseData.itTools.id",
									"",
									"",
									"pm.collectionVariables.set(\"modelPlanID\", modelPlanID);",
									"pm.collectionVariables.set(\"basicsID\", basicsID);",
									"",
									"pm.collectionVariables.set(\"generalCharacteristicsID\", generalCharacteristicsID);",
									"pm.collectionVariables.set(\"participantsAndProvidersID\", participantsAndProvidersID);",
									"pm.collectionVariables.set(\"beneficiariesID\", beneficiariesID);",
									"pm.collectionVariables.set(\"opsEvalAndLearningID\", opsEvalAndLearningID);",
									"pm.collectionVariables.set(\"modelLeadID\", modelLeadID);",
									"pm.collectionVariables.set(\"paymentsID\", paymentsID);",
									"pm.collectionVariables.set(\"itToolsID\", itToolsID);",
									"",
									"console.log(modelPlanID)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createModelPlan{\n  \n  createModelPlan(modelName:\"Excellent Model\" ){\n    id\n    basics{\n        id        \n    }\n    generalCharacteristics {\n        id\n    }\n    participantsAndProviders {\n        id\n    }\n    beneficiaries {\n        id\n    }\n    opsEvalAndLearning {\n        id\n    }\n    collaborators {\n      id\n      userID\n      teamRole\n    }\n    # documents{\n    #     id\n    # }\n    # discussions{\n    #     id\n    #     replies{\n    #         id\n    #     }\n    # }\n    payments{\n        id\n    }\n    itTools {\n        id\n    }\n    # crTdls{\n    #     id\n    # }\n    \n    \n  }\n  \n  \n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:8085/api/graph/query",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"api",
								"graph",
								"query"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Audit",
			"item": [
				{
					"name": "GetAuditChanges",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query auditChanges($tableName: String!, $primaryKey: UUID!){\n  auditChanges(tableName: $tableName,primaryKey: $primaryKey)\n   {\n        id\n        primaryKey\n        foreignKey\n        tableName\n        action\n        fields\n        modifiedBy\n        modifiedByUserAccount\n        {\n            commonName\n            familyName\n            givenName\n            email\n            locale\n        }  \n        modifiedDts\n  }\n}",
								"variables": "{\n  \"tableName\": \"model_plan\",\n  \"primaryKey\":\"{{modelPlanID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ModelPlanGet(NameHistory)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ModelPlan($id:UUID!,$sort: SortDirection!){\n  \n  modelPlan(id:$id){\n    id\n    modelName\n    nameHistory(sort: $sort)\n\n  }\n  \n  \n}",
								"variables": "{\n    \"id\": \"{{modelPlanID}}\",\n    \"sort\": \"ASC\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Operational Needs And Solutions",
			"item": [
				{
					"name": "ModelPlanCreateForOpNeeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createModelPlan",
									"",
									"modelPlanID = responseData.id",
									"basicsID = responseData.basics.id",
									"generalCharacteristicsID = responseData.generalCharacteristics.id",
									"participantsAndProvidersID = responseData.participantsAndProviders.id",
									"beneficiariesID = responseData.beneficiaries.id",
									"opsEvalAndLearningID = responseData.opsEvalAndLearning.id",
									"modelLeadID = responseData.collaborators[0].id",
									"paymentsID = responseData.payments.id",
									"",
									"pm.collectionVariables.set(\"modelPlanID\", modelPlanID);",
									"pm.collectionVariables.set(\"basicsID\", basicsID);",
									"",
									"pm.collectionVariables.set(\"generalCharacteristicsID\", generalCharacteristicsID);",
									"pm.collectionVariables.set(\"participantsAndProvidersID\", participantsAndProvidersID);",
									"pm.collectionVariables.set(\"beneficiariesID\", beneficiariesID);",
									"pm.collectionVariables.set(\"opsEvalAndLearningID\", opsEvalAndLearningID);",
									"pm.collectionVariables.set(\"modelLeadID\", modelLeadID);",
									"pm.collectionVariables.set(\"paymentsID\", paymentsID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createModelPlan{\n  \n  createModelPlan(modelName:\"Excellent Model\" ){\n    id\n\n    id\n    modelName\n    operationalNeeds {\n\n        id\n        modelPlanID\n        name\n        section\n        key\n        nameOther\n        needed\n        \n    solutions(includeNotNeeded:false) {\n        # id\n        # status\n        # mustStartDts\n        \n        \n        name\n        key   \n        needed\n        nameOther\n        pocEmail\n        pocName     \n        createdBy\n        createdDts\n    }\n                    \n        \n    }\n  \n    basics{\n        id        \n    }\n    generalCharacteristics {\n        id\n    }\n    participantsAndProviders {\n        id\n    }\n    beneficiaries {\n        id\n    }\n    opsEvalAndLearning {\n        id\n    }\n    collaborators {\n      id\n      userID\n      teamRole\n    }\n    # documents{\n    #     id\n    # }\n    # discussions{\n    #     id\n    #     replies{\n    #         id\n    #     }\n    # }\n    payments{\n        id\n    }\n    # crTdls{\n    #     id\n    # }\n    \n    \n  }\n  \n  \n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ModelPlanGetForOpNeeds",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ModelPlan{\n  \n  modelPlan(id:\"{{modelPlanID}}\"){\n    id\n    modelName\n    operationalNeeds {\n \n        id\n        modelPlanID\n        name\n        section\n        key\n        nameOther\n        needed\n                \n    solutions(includeNotNeeded:false) {\n        # id\n        # status\n        # mustStartDts\n        \n        \n        name\n        key   \n        needed\n        nameOther\n        pocEmail\n        pocName     \n        createdBy\n        createdDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }         \n    }\n                    \n\n\n\n    }\n  }\n  \n  \n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PossibleOperationalNeedsGet",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query PossibleOperationalNeeds{\n  \n  possibleOperationalNeeds{\n            name\n            key\n                possibleSolutions {\n                    id\n                    name\n                    key                    \n                } \n            createdByUserAccount \n            {\n                commonName\n            }   \n            modifiedByUserAccount\n            {\n                commonName\n            }       \n  }\n}\n  \n  ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperationNeedInsertUpdateOther",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.addOrUpdateCustomOperationalNeed",
									"",
									"operationalNeedID = responseData.id",
									"",
									"pm.collectionVariables.set(\"operationalNeedID\", operationalNeedID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation OperationalNeed{\n  \n  addOrUpdateCustomOperationalNeed(\n      modelPlanID:\"{{modelPlanID}}\"\n      ,customNeedType :\"To have a fun day\"\n      ,needed: true)\n      {\n    \n        id\n        modelPlanID\n\n        name\n        key\n        nameOther\n        needed\n        section\n        # solutions\n        \n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts     \n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }         \n    }\n  }\n  \n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperationNeedUpdateCustom",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.updateCustomOperationalNeedByID",
									"",
									"operationalNeedID = responseData.id",
									"",
									"pm.collectionVariables.set(\"operationalNeedID\", operationalNeedID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation OperationalNeed{\n  \n  updateCustomOperationalNeedByID(id:\"{{operationalNeedID}}\"\n  ,customNeedType:\"To Dance in the Rain 3 times\"\n  ,needed: true)\n  {\n    \n        id\n        modelPlanID\n        name\n        key\n        nameOther\n        needed\n        section\n        # solutions\n        \n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts     \n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }         \n    }\n  }\n  \n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperationNeedGetByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.operationalNeed",
									"",
									"operationalNeedID = responseData.id",
									"",
									"pm.collectionVariables.set(\"operationalNeedID\", operationalNeedID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query OperationalNeed{\n  \n  operationalNeed(id:\"{{operationalNeedID}}\"){\n \n        id\n        modelPlanID\n        name\n        key\n        # section\n        nameOther\n        needed\n    solutions(includeNotNeeded:true) {\n        # id\n        # status\n        # mustStartDts\n        \n        \n        name\n        key   \n        needed\n        nameOther\n        pocEmail\n        pocName     \n        createdBy\n        createdDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n    }\n    createdByUserAccount \n    {\n        commonName\n    }   \n    modifiedByUserAccount\n    {\n        commonName\n    }     \n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createOperationalSolution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createOperationalSolution",
									"",
									"operationalSolutionID = responseData.id",
									"",
									"pm.collectionVariables.set(\"operationalSolutionID\", operationalSolutionID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation OperationalSolution{\n  \n  createOperationalSolution(operationalNeedID:\"{{operationalNeedID}}\",\n    solutionType:MARX,\n    changes: {\n      needed: true\n    #   nameOther: \"My special solution\"\n      otherHeader: \"The Happy Helper Team\"\n      pocName: \"The Gump\"\n      pocEmail: \"shrimpKing@gump.com\"\n      mustStartDts: \"2023-02-04T21:39:57.484167Z\"\n      mustFinishDts: \"2023-12-04T21:39:57.484167Z\"\n  }){\n    \n    id\n    operationalNeedID\n    # needed\n\n    name\n    key\n    nameOther\n    pocName\n    pocEmail\n    mustStartDts\n    mustFinishDts\n    isOther\n    otherHeader\n    status\n\n    createdBy\n    createdDts\n    modifiedBy\n    modifiedDts\n    }\n  }\n  \n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createOperationalSolutionOtherExample",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createOperationalSolution",
									"",
									"operationalSolutionID = responseData.id",
									"",
									"pm.collectionVariables.set(\"operationalSolutionID\", operationalSolutionID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation OperationalSolution{\n  \n  createOperationalSolution(operationalNeedID:\"{{operationalNeedID}}\",\n    # solutionType:MARX,\n    changes: {\n      needed: true\n      nameOther: \"My special solution\"\n    #   otherHeader: \"The Happy Helper Team\"\n      pocName: \"Mr. Clean\"\n      pocEmail: \"cleanClean@cleaning.com\"\n      mustStartDts: \"2023-02-04T21:39:57.484167Z\"\n      mustFinishDts: \"2023-12-04T21:39:57.484167Z\"\n  }){\n    \n    id\n    operationalNeedID\n    # needed\n\n    name\n    key\n    nameOther\n    pocName\n    pocEmail\n    mustStartDts\n    mustFinishDts\n    isOther\n    otherHeader\n    status\n\n    createdBy\n    createdDts\n    modifiedBy\n    modifiedDts\n    }\n  }\n  \n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateOperationalSolution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation OperationalSolution{\n  \n  updateOperationalSolution(id:\"{{operationalSolutionID}}\"\n  ,changes: {\n    #   nameOther: \"My Change I guess\"\n      needed: false\n      pocName: \"The Sentient Ice Cream Cone\"\n      pocEmail: \"iceCreamKing@IceCreamStore.com\"\n      status: IN_PROGRESS\n      mustStartDts: \"2023-02-04T21:39:57.484167Z\"\n      mustFinishDts: \"2023-12-04T21:39:57.484167Z\"\n  }){\n    \n    id\n    operationalNeedID\n    needed\n    name\n    key\n    nameOther\n    pocName\n    pocEmail\n    mustStartDts\n    mustFinishDts\n    status\n\n    createdBy\n    createdDts\n    modifiedBy\n    modifiedDts\n    }\n  }\n  \n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperationSolutionGetByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query operationalSolution ($id: UUID!) {\n    operationalSolution (id: $id) {\n        id\n        operationalNeedID\n        solutionType\n        needed\n        name\n        key\n        nameOther\n        pocName\n        pocEmail\n        mustStartDts\n        mustFinishDts\n        status\n        documents {\n            id\n            modelPlanID\n            fileType\n            bucket\n            fileKey\n            virusScanned\n            virusClean\n            restricted\n            fileName\n            fileSize\n            documentType\n            otherType\n            optionalNotes\n            downloadUrl\n            deletedAt\n            createdBy\n            createdDts\n            modifiedBy\n            modifiedDts\n        }\n        operationalSolutionSubtasks {\n            id\n            solutionID\n            name\n            status\n            createdBy\n            createdDts\n            modifiedBy\n            modifiedDts\n        }\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }         \n    }\n}",
								"variables": "{\r\n  \"id\": \"{{operationalSolutionID}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperationSolutionsGetByOperationalNeedID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query OperationalSolution{\n  \n  operationalSolutions(operationalNeedID:\"{{operationalNeedID}}\",,includeNotNeeded:true){\n        id\n\n        name\n        key\n        nameOther\n        pocEmail\n        pocName     \n        status\n        needed\n        mustStartDts\n        mustFinishDts\n\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n\n    \n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PossibleOperationalSolutionsGetAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query PossibleOperationalSolution{\n  \n  possibleOperationalSolutions{\n        id\n        name\n        key  \n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }         \n    \n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreatePlanDocumentSolutionLinks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createPlanDocumentSolutionLinks ($solutionID: UUID!, $documentIDs: [UUID!]!) {\n    createPlanDocumentSolutionLinks (solutionID: $solutionID, documentIDs: $documentIDs) {\n        id\n        solutionID\n        documentID\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }           \n    }\n}",
								"variables": "{\n  \"solutionID\": \"\",\n  \"documentIDs\": [\n    \"\"\n  ]\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RemovePlanDocumentSolutionLinks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation removePlanDocumentSolutionLinks ($solutionID: UUID!, $documentIDs: [UUID!]!) {\n    removePlanDocumentSolutionLinks (solutionID: $solutionID, documentIDs: $documentIDs)\n}",
								"variables": "{\n  \"solutionID\": \"\",\n  \"documentIDs\": [\n    \"\"\n  ]\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response status is 200\", function(){",
							"    pm.response.to.have.status(200);",
							"})"
						]
					}
				}
			]
		},
		{
			"name": "Operational Solution Subtasks",
			"item": [
				{
					"name": "CreateOperationalSolutionSubtasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createOperationalSolutionSubtasks",
									"",
									"for (let i =0; i< responseData.length; i++){",
									"    subtaskID = responseData[i].id",
									"    pm.collectionVariables.set(\"operationalSolutionSubtaskID\"+i, subtaskID);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createOperationalSolutionSubtasks ($solutionID: UUID!, $inputs: [CreateOperationalSolutionSubtaskInput!]!) {\r\n    createOperationalSolutionSubtasks (solutionID: $solutionID, inputs: $inputs) {\r\n        id\r\n        solutionID\r\n        name\r\n        status\r\n        createdBy\r\n        createdDts\r\n        modifiedBy\r\n        modifiedDts\r\n    }\r\n}",
								"variables": "{\r\n  \"solutionID\": \"{{operationalSolutionID}}\",\r\n  \"inputs\": [\r\n      {\r\n          \"name\": \"Waffle Fries\",\r\n          \"status\": \"TODO\"\r\n      },\r\n      {\r\n          \"name\": \"Pancake Fries\",\r\n          \"status\": \"IN_PROGRESS\"\r\n      }\r\n  ]\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteOperationalSolutionSubtasks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteOperationalSolutionSubtask ($id: UUID!) {\r\n    deleteOperationalSolutionSubtask (id: $id)\r\n}",
								"variables": "{\r\n  \"id\": \"{{operationalSolutionSubtaskID0}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateOperationalSolutionSubtasks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateOperationalSolutionSubtasks ($inputs: [UpdateOperationalSolutionSubtaskInput!]!) {\r\n    updateOperationalSolutionSubtasks (inputs: $inputs) {\r\n        id\r\n        solutionID\r\n        name\r\n        status\r\n        createdBy\r\n        createdDts\r\n        modifiedBy\r\n        modifiedDts\r\n    }\r\n}",
								"variables": "{\r\n  \"inputs\": [\r\n      {\r\n          \"id\": \"{{operationalSolutionSubtaskID1}}\",\r\n          \"changes\": {\r\n            \"name\": \"Test\",\r\n            \"status\": \"IN_PROGRESS\"\r\n          }\r\n      }\r\n  ]\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "SearchChangeData",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query searchChangeTable($request: SearchRequest!, $limit: Int!, $offset: Int!) {\r\n  searchChangeTable(request: $request, limit: $limit, offset: $offset) {\r\n        guid\r\n        tableID\r\n        tableName\r\n        primaryKey\r\n        foreignKey\r\n        fields {\r\n            changes {\r\n                name\r\n                value {\r\n                    ... on FieldValue {\r\n                        new\r\n                        old\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        modifiedDts\r\n        modifiedBy {\r\n            id\r\n            username\r\n            isEUAID\r\n            commonName\r\n            locale\r\n            email\r\n            givenName\r\n            familyName\r\n            zoneInfo\r\n            hasLoggedIn\r\n        }\r\n    }\r\n}",
								"variables": "{\r\n  \"request\": {\r\n    \"query\": {\r\n      \"query\": {\r\n        \"bool\": {\r\n          \"filter\": [\r\n            {\r\n              \"term\": {\r\n                \"table_id\": \"1\"\r\n              }\r\n            },\r\n            {\r\n              \"term\": {\r\n                \"primary_key.keyword\": \"{{modelPlanID}}\"\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"limit\": 20,\r\n  \"offset\": 0\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchChangeDataByModelPlanID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query searchChangeTableByModelPlanID($modelPlanID: UUID!, $limit: Int!, $offset: Int!) {\r\n  searchChangeTableByModelPlanID(modelPlanID: $modelPlanID, limit: $limit, offset: $offset) {\r\n        guid\r\n        tableID\r\n        tableName\r\n        primaryKey\r\n        foreignKey\r\n        fields {\r\n            changes {\r\n                name\r\n                value {\r\n                    ... on FieldValue {\r\n                        new\r\n                        old\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        modifiedDts\r\n        modifiedBy {\r\n            id\r\n            username\r\n            isEUAID\r\n            commonName\r\n            locale\r\n            email\r\n            givenName\r\n            familyName\r\n            zoneInfo\r\n            hasLoggedIn\r\n        }\r\n    }\r\n}",
								"variables": "{\r\n  \"modelPlanID\": \"{{modelPlanID}}\",\r\n  \"limit\": 20,\r\n  \"offset\": 0\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchChangeTableWithFreeText",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query searchChangeTableWithFreeText ($searchText: String!, $limit: Int!, $offset: Int!) {\n    searchChangeTableWithFreeText (searchText: $searchText, limit: $limit, offset: $offset) {\n        guid\n        tableID\n        tableName\n        primaryKey\n        foreignKey\n        fields {\n            changes {\n                name\n                value {\n                    ... on FieldValue {\n                        new\n                        old\n                    }\n                }\n            }\n        }\n        modifiedDts\n        modifiedBy {\n            id\n            username\n            isEUAID\n            commonName\n            locale\n            email\n            givenName\n            familyName\n            zoneInfo\n            hasLoggedIn\n        }\n    }\n}",
								"variables": "{\n  \"searchText\": \"Do the hting~\",\n  \"limit\": 20,\n  \"offset\": 0\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchChangeTableByDateRange",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query searchChangeTableByDateRange ($startDate: Time!, $endDate: Time!, $limit: Int!, $offset: Int!) {\n    searchChangeTableByDateRange (startDate: $startDate, endDate: $endDate, limit: $limit, offset: $offset) {\n        guid\n        tableID\n        tableName\n        primaryKey\n        foreignKey\n        fields {\n            changes {\n                name\n                value {\n                    ... on FieldValue {\n                        new\n                        old\n                    }\n                }\n            }\n        }\n        modifiedDts\n        modifiedBy {\n            id\n            username\n            isEUAID\n            commonName\n            locale\n            email\n            givenName\n            familyName\n            zoneInfo\n            hasLoggedIn\n        }\n    }\n}",
								"variables": "{\n  \"startDate\": \"2023-04-19T00:00:00Z\",\n  \"endDate\": \"2024-04-20T23:59:59Z\",\n  \"limit\": 2000,\n  \"offset\": 0\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchChangeTableByActor",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query searchChangeTableByActor ($actor: String!, $limit: Int!, $offset: Int!) {\n    searchChangeTableByActor (actor: $actor, limit: $limit, offset: $offset) {\n        guid\n        tableID\n        tableName\n        primaryKey\n        foreignKey\n        fields {\n            changes {\n                name\n                value {\n                    ... on FieldValue {\n                        new\n                        old\n                    }\n                }\n            }\n        }\n        modifiedDts\n        modifiedBy {\n            id\n            username\n            isEUAID\n            commonName\n            locale\n            email\n            givenName\n            familyName\n            zoneInfo\n            hasLoggedIn\n        }\n    }\n}",
								"variables": "{\n  \"actor\": \"MINT\",\n  \"limit\": 20,\n  \"offset\": 0\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchChangeTableByModelStatus",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query searchChangeTableByModelStatus ($modelStatus: ModelStatus!, $limit: Int!, $offset: Int!) {\n    searchChangeTableByModelStatus (modelStatus: $modelStatus, limit: $limit, offset: $offset) {\n        guid\n        tableID\n        tableName\n        primaryKey\n        foreignKey\n        fields {\n            changes {\n                name\n                value {\n                    ... on FieldValue {\n                        new\n                        old\n                    }\n                }\n            }\n        }\n        modifiedDts\n        modifiedBy {\n            id\n            username\n            isEUAID\n            commonName\n            locale\n            email\n            givenName\n            familyName\n            zoneInfo\n            hasLoggedIn\n        }\n    }\n}\n",
								"variables": "{\n  \"modelStatus\": \"PLAN_DRAFT\",\n  \"limit\": 20,\n  \"offset\": 0\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchChangeTableDateHistogramConsolidatedAggregations",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query searchChangeTableDateHistogramConsolidatedAggregations ($interval: String!, $limit: Int!, $offset: Int!) {\n    searchChangeTableDateHistogramConsolidatedAggregations (interval: $interval, limit: $limit, offset: $offset) {\n        key\n        docCount\n        maxModifiedDts\n        minModifiedDts\n    }\n}",
								"variables": "{\n  \"interval\": \"5m\",\n  \"limit\": 20,\n  \"offset\": 0\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "Local {\"EUAID\":\"{{EUAID}}\",\"jobCodes\":{{jobCodes}},\"favorLocalAuth\":true}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://localhost:8085/api/graph/query",
			"type": "string"
		},
		{
			"key": "jobCodes",
			"value": "[\"MINT_ASSESSMENT_NONPROD\", \"MINT_USER_NONPROD\"]",
			"type": "string"
		},
		{
			"key": "EUAID",
			"value": "MINT",
			"type": "string"
		},
		{
			"key": "modelPlanID",
			"value": ""
		},
		{
			"key": "basicsID",
			"value": ""
		},
		{
			"key": "generalCharacteristicsID",
			"value": ""
		},
		{
			"key": "participantsAndProvidersID",
			"value": ""
		},
		{
			"key": "beneficiariesID",
			"value": ""
		},
		{
			"key": "opsEvalAndLearningID",
			"value": ""
		},
		{
			"key": "modelLeadID",
			"value": ""
		},
		{
			"key": "paymentsID",
			"value": ""
		},
		{
			"key": "itToolsID",
			"value": ""
		},
		{
			"key": "operationalNeedID",
			"value": ""
		},
		{
			"key": "operationalSolutionID",
			"value": ""
		},
		{
			"key": "discussionID",
			"value": ""
		},
		{
			"key": "discussionReplyID",
			"value": ""
		},
		{
			"key": "operationalSolutionSubtaskID0",
			"value": ""
		},
		{
			"key": "operationalSolutionSubtaskID1",
			"value": ""
		},
		{
			"key": "documentID",
			"value": "0b188e43-21a6-45b4-8dc2-a09929d3402d",
			"type": "string"
		}
	]
}