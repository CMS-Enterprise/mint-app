{
	"info": {
		"name": "MINT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Model Plan",
			"item": [
				{
					"name": "Create Model Plan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createModelPlan",
									"",
									"modelPlanID = responseData.id",
									"basicsID = responseData.basics.id",
									"generalCharacteristicsID = responseData.generalCharacteristics.id",
									"participantsAndProvidersID = responseData.participantsAndProviders.id",
									"beneficiariesID = responseData.beneficiaries.id",
									"opsEvalAndLearningID = responseData.opsEvalAndLearning.id",
									"modelLeadID = responseData.collaborators[0].id",
									"paymentsID = responseData.payments.id",
									"dataExchangeApproachID = responseData.dataExchangeApproach.id",
									"firstOpNeed = responseData.operationalNeeds[0].id",
									"userID = responseData.createdByUserAccount.id",
									"",
									"pm.collectionVariables.set(\"modelPlanID\", modelPlanID);",
									"pm.collectionVariables.set(\"basicsID\", basicsID);",
									"",
									"pm.collectionVariables.set(\"generalCharacteristicsID\", generalCharacteristicsID);",
									"pm.collectionVariables.set(\"participantsAndProvidersID\", participantsAndProvidersID);",
									"pm.collectionVariables.set(\"beneficiariesID\", beneficiariesID);",
									"pm.collectionVariables.set(\"opsEvalAndLearningID\", opsEvalAndLearningID);",
									"pm.collectionVariables.set(\"modelLeadID\", modelLeadID);",
									"pm.collectionVariables.set(\"paymentsID\", paymentsID);",
									"pm.collectionVariables.set(\"dataExchangeApproachID\", dataExchangeApproachID)",
									"pm.collectionVariables.set(\"operationalNeedID\", firstOpNeed);",
									"pm.collectionVariables.set(\"userID\", userID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createModelPlan{\n  \n  createModelPlan(modelName:\"Excellent Model\" ){\n    id\n    modelName\n    createdByUserAccount{\n        givenName\n        id\n    }\n    operationalNeeds {\n        id\n        modelPlanID\n        name\n        key\n        nameOther\n        needed\n        section    \n    }  \n    basics{\n        id        \n    }\n    generalCharacteristics {\n        id\n    }\n    participantsAndProviders {\n        id\n    }\n    beneficiaries {\n        id\n    }\n    opsEvalAndLearning {\n        id\n    }\n    collaborators {\n      id\n    }\n    payments{\n        id\n    }\n    dataExchangeApproach{\n        id\n    }\n  }\n}\n  ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Share Model Plan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shareModelPlan($modelPlanID: UUID!, $viewFilter: ModelViewFilter, $usernames: [String!]!, $optionalMessage: String) {\n    shareModelPlan(modelPlanID: $modelPlanID, viewFilter: $viewFilter, usernames: $usernames, optionalMessage: $optionalMessage)\n}\n",
								"variables": "{\n  \"modelPlanID\": \"{{modelPlanID}}\",\n  \"viewFilter\": \"CMMI\",\n  \"usernames\": [\"ABCD\", \"TEST\"],\n  \"optionalMessage\": \"\"\n}\n"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Model Plan",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateModelPlan ($id: UUID!, $changes: ModelPlanChanges!) {\n    updateModelPlan (id: $id, changes: $changes) {\n        id\n        modelName\n        abbreviation\n        archived\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        status\n        taskListStatus\n        suggestedPhase {\n            phase\n            suggestedStatuses\n        }\n        previousSuggestedPhase\n        isFavorite\n        isCollaborator\n        opSolutionLastModifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"{{modelPlanID}}\",\n  \"changes\": {\n    \"modelName\": \"My Updated Model\",\n    \"archived\": true,\n    \"status\": \"PLAN_DRAFT\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Model Plan",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query modelPlan ($id: UUID!) {\n    modelPlan (id: $id) {\n        id\n        modelName\n        abbreviation\n        archived\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        status\n        taskListStatus\n        suggestedPhase {\n            phase\n            suggestedStatuses\n        }\n        isFavorite\n        isCollaborator\n        opSolutionLastModifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"{{modelPlanID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Model Plans CRTDL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query modelPlanCollection {\n    modelPlanCollection(filter: WITH_CR_TDLS) {\n        id\n        modelName\n        abbreviation\n        archived\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        status\n        taskListStatus\n        suggestedPhase {\n            phase\n            suggestedStatuses\n        }\n        previousSuggestedPhase\n        isFavorite\n        isCollaborator\n        opSolutionLastModifiedDts\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Model Plans",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query modelPlanCollection($filter: ModelPlanFilter!) {\n    modelPlanCollection(filter: $filter) {\n        id\n        modelName\n        abbreviation\n        archived\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        status\n        taskListStatus\n        suggestedPhase {\n            phase\n            suggestedStatuses\n        }\n        previousSuggestedPhase\n        isFavorite\n        isCollaborator\n        opSolutionLastModifiedDts\n    }\n}",
								"variables": "{\n    \"filter\": \"INCLUDE_ALL\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Plan Favorite",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addPlanFavorite ($modelPlanID: UUID!) {\n    addPlanFavorite (modelPlanID: $modelPlanID) {\n        id\n        modelPlanID\n        userID\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"modelPlanID\": \"{{modelPlanID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Plan Favorite",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deletePlanFavorite ($modelPlanID: UUID!) {\n    deletePlanFavorite (modelPlanID: $modelPlanID) {\n        id\n        modelPlanID\n        userID\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"modelPlanID\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Model Plans By Operational Solution Key",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query modelPlansByOperationalSolutionKey ($operationalSolutionKey: OperationalSolutionKey!) {\n    modelPlansByOperationalSolutionKey (operationalSolutionKey: $operationalSolutionKey) {\n        possibleOperationalSolution{\n            name\n        }\n        possibleOperationalSolutionID\n        key\n        \n        modelPlan{\n            id\n            modelName\n            abbreviation\n            archived\n            createdBy\n            createdDts\n            modifiedBy\n            modifiedDts\n            status\n            taskListStatus\n            suggestedPhase {\n                phase\n                suggestedStatuses\n            }\n            previousSuggestedPhase\n            isFavorite\n            isCollaborator\n            opSolutionLastModifiedDts\n        }\n    }\n}",
								"variables": "{\n  \"operationalSolutionKey\": \"INNOVATION\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sample Model Plan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.modelPlan",
									"",
									"modelPlanID = responseData.id",
									"",
									"",
									"pm.collectionVariables.set(\"modelPlanID\", modelPlanID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ModelPlan{\n  \n  modelPlan(id:\"{{sampleModelPlanID}}\"){\n    id\n    modelName\n    prepareForClearance \n    {\n        status\n        latestClearanceDts\n    }\n\n    basics{\n        id\n        modelCategory\n        cmmiGroups\n        cmsCenters\n        # testInterventions\n    }\n\n    createdBy\n    createdDts\n    modifiedBy\n    modifiedDts\n    # participantsAndProviders{\n    #     participants\n    # }\n    beneficiaries {\n        beneficiaries\n        id\n        numberPeopleImpacted\n    }\n    # opsEvalAndLearning{\n    #     agencyOrStateHelp\n    # }\n  }\n  \n  \n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Task List Sections",
			"item": [
				{
					"name": "Update Plan Basics",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanBasics ($id: UUID!, $changes: PlanBasicsChanges!) {\n    updatePlanBasics (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        demoCode\n        amsModelID\n        modelCategory\n        cmsCenters\n        cmmiGroups\n        modelType\n        modelTypeOther\n        problem\n        goal\n        testInterventions\n        note\n        completeICIP\n        clearanceStarts\n        clearanceEnds\n        announced\n        applicationsStart\n        applicationsEnd\n        performancePeriodStarts\n        performancePeriodEnds\n        wrapUpEnds\n        highLevelNote\n        phasedIn\n        phasedInNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        status\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }\n\n    }\n}",
								"variables": "{\n  \"id\": \"{{basicsID}}\",\n  \"changes\": {\n    \"demoCode\": \"\",\n    \"amsModelID\": \"\",\n    \"modelCategory\": \"\",\n    \"cmsCenters\": [\n      \"\"\n    ],\n    \"cmmiGroups\": [\n      \"\"\n    ],\n    \"modelType\": [\n        \"\"\n    ],\n    \"modelTypeOther\": \"\",\n    \"problem\": \"\",\n    \"goal\": \"\",\n    \"testInterventions\": \"\",\n    \"note\": \"\",\n    \"completeICIP\": \"\",\n    \"clearanceStarts\": \"\",\n    \"clearanceEnds\": \"\",\n    \"announced\": \"\",\n    \"applicationsStart\": \"\",\n    \"applicationsEnd\": \"\",\n    \"performancePeriodStarts\": \"\",\n    \"performancePeriodEnds\": \"\",\n    \"wrapUpEnds\": \"\",\n    \"highLevelNote\": \"\",\n    \"phasedIn\": true,\n    \"phasedInNote\": \"\",\n    \"status\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan General Characteristics",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanGeneralCharacteristics ($id: UUID!, $changes: PlanGeneralCharacteristicsChanges!) {\n    updatePlanGeneralCharacteristics (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        isNewModel\n        currentModelPlanID\n        existingModelID\n        resemblesExistingModel\n        resemblesExistingModelWhyHow\n        resemblesExistingModelOtherSpecify\n        resemblesExistingModelWhich {\n            links\n            names\n        }\n        resemblesExistingModelOtherSelected\n        resemblesExistingModelOtherOption\n        resemblesExistingModelHow\n        resemblesExistingModelNote\n        hasComponentsOrTracks\n        hasComponentsOrTracksDiffer\n        hasComponentsOrTracksNote\n        agencyOrStateHelp\n        agencyOrStateHelpOther\n        agencyOrStateHelpNote\n        alternativePaymentModelTypes\n        alternativePaymentModelNote\n        keyCharacteristics\n        keyCharacteristicsOther\n        keyCharacteristicsNote\n        collectPlanBids\n        collectPlanBidsNote\n        managePartCDEnrollment\n        managePartCDEnrollmentNote\n        planContractUpdated\n        planContractUpdatedNote\n        careCoordinationInvolved\n        careCoordinationInvolvedDescription\n        careCoordinationInvolvedNote\n        additionalServicesInvolved\n        additionalServicesInvolvedDescription\n        additionalServicesInvolvedNote\n        communityPartnersInvolved\n        communityPartnersInvolvedDescription\n        communityPartnersInvolvedNote\n        geographiesTargeted\n        geographiesTargetedTypes\n        geographiesStatesAndTerritories\n        geographiesRegionTypes\n        geographiesTargetedTypesOther\n        geographiesTargetedAppliedTo\n        geographiesTargetedAppliedToOther\n        geographiesTargetedNote\n        participationOptions\n        participationOptionsNote\n        agreementTypes\n        agreementTypesOther\n        multiplePatricipationAgreementsNeeded\n        multiplePatricipationAgreementsNeededNote\n        rulemakingRequired\n        rulemakingRequiredDescription\n        rulemakingRequiredNote\n        authorityAllowances\n        authorityAllowancesOther\n        authorityAllowancesNote\n        waiversRequired\n        waiversRequiredTypes\n        waiversRequiredNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        status\n\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }            \n    }\n}",
								"variables": "{\n  \"id\": \"{{generalCharacteristicsID}}\",\n  \"changes\": {\n    \"isNewModel\": true,\n    \"currentModelPlanID\": null,\n    \"existingModelID\": null,\n    \"resemblesExistingModel\": true,\n    \"resemblesExistingModelWhyHow\": \"\",\n    \"resemblesExistingModelOtherSpecify\": \"\",\n    \"resemblesExistingModelWhich\": {\n        \"links\": [],\n        \"names\": []\n    },\n    \"resemblesExistingModelOtherSelected\": false,\n    \"resemblesExistingModelOtherOption\": \"\",\n    \"resemblesExistingModelHow\": \"\",\n    \"resemblesExistingModelNote\": \"\",\n    \"hasComponentsOrTracks\": true,\n    \"hasComponentsOrTracksDiffer\": \"\",\n    \"hasComponentsOrTracksNote\": \"\",\n    \"agencyOrStateHelp\": [\n      \"\"\n    ],\n    \"agencyOrStateHelpOther\": \"\",\n    \"agencyOrStateHelpNote\": \"\",\n    \"alternativePaymentModelTypes\": [\n      \"\"\n    ],\n    \"alternativePaymentModelNote\": \"\",\n    \"keyCharacteristics\": [\n      \"\"\n    ],\n    \"keyCharacteristicsOther\": \"\",\n    \"keyCharacteristicsNote\": \"\",\n    \"collectPlanBids\": true,\n    \"collectPlanBidsNote\": \"\",\n    \"managePartCDEnrollment\": true,\n    \"managePartCDEnrollmentNote\": \"\",\n    \"planContractUpdated\": true,\n    \"planContractUpdatedNote\": \"\",\n    \"careCoordinationInvolved\": true,\n    \"careCoordinationInvolvedDescription\": \"\",\n    \"careCoordinationInvolvedNote\": \"\",\n    \"additionalServicesInvolved\": true,\n    \"additionalServicesInvolvedDescription\": \"\",\n    \"additionalServicesInvolvedNote\": \"\",\n    \"communityPartnersInvolved\": true,\n    \"communityPartnersInvolvedDescription\": \"\",\n    \"communityPartnersInvolvedNote\": \"\",\n    \"geographiesTargeted\": true,\n    \"geographiesTargetedTypes\": [\n      \"\"\n    ],\n    \"geographiesStatesAndTerritories\": [\n        \"FL\",\n        \"NY\"\n    ],\n    \"geographiesRegionTypes\": [\n        \"CBSA\",\n        \"HRR\"\n    ],\n    \"geographiesTargetedTypesOther\": \"\",\n    \"geographiesTargetedAppliedTo\": [\n      \"\"\n    ],\n    \"geographiesTargetedAppliedToOther\": \"\",\n    \"geographiesTargetedNote\": \"\",\n    \"participationOptions\": true,\n    \"participationOptionsNote\": \"\",\n    \"agreementTypes\": [\n      \"\"\n    ],\n    \"agreementTypesOther\": \"\",\n    \"multiplePatricipationAgreementsNeeded\": true,\n    \"multiplePatricipationAgreementsNeededNote\": \"\",\n    \"rulemakingRequired\": true,\n    \"rulemakingRequiredDescription\": \"\",\n    \"rulemakingRequiredNote\": \"\",\n    \"authorityAllowances\": [\n      \"\"\n    ],\n    \"authorityAllowancesOther\": \"\",\n    \"authorityAllowancesNote\": \"\",\n    \"waiversRequired\": true,\n    \"waiversRequiredTypes\": [\n      \"\"\n    ],\n    \"waiversRequiredNote\": \"\",\n    \"status\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan Participants And Providers",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanParticipantsAndProviders #($input: PlanMilestonesInput!) \n{\nupdatePlanParticipantsAndProviders (id: \"{{participantsAndProvidersID}}\",changes:     \n    {\n    status: READY_FOR_CLEARANCE\n\n\n    #Page 1\n    participants: [ACCOUNTABLE_CARE_ORGANIZATION, MEDICARE_PROVIDERS, STATE_MEDICAID_AGENCIES]\n    # medicareProviderType:\n    isNewTypeOfProvidersOrSuppliers: true\n    statesEngagement: \"Very good engagement\"\n    # participantsOther:\n    # participantsNote:\n    participantsCurrentlyInModels: null\n    # participantsCurrentlyInModelsNote:\n    # modelApplicationLevel:\n\n    #Page 2\n    # expectedNumberOfParticipants:\n    # estimateConfidence:\n    # confidenceNote:\n    recruitmentMethod: APPLICATION_COLLECTION_TOOL\n    # recruitmentOther:\n    # recruitmentNote:\n    selectionMethod: [APPLICATION_REVIEW_AND_SCORING_TOOL\n    ,APPLICATION_SUPPORT_CONTRACTOR]\n    # selectionOther:\n    # selectionNote:\n\n    #Page 3\n    communicationMethod: [IT_TOOL]\n    communicationMethodOther: \"New And Awesome Method\"\n    # communicationNote:\n    # participantAssumeRisk:\n    # riskType:\n    # riskOther:\n    # riskNote:\n    # willRiskChange:\n    # willRiskChangeNote:\n\n    #Page 4\n    # coordinateWork:\n    # coordinateWorkNote:\n    gainsharePayments: true\n    # gainsharePaymentsTrack:\n    # gainsharePaymentsNote:\n    participantsIds: [TINS,CCNS]\n    # participantsIdsOther:\n    # participantsIDSNote:\n\n    #Page 5\n    # providerAdditionFrequency:\n    # providerAdditionFrequencyOther:\n    # providerAdditionFrequencyNote:\n    # providerAddMethod:\n    # providerAddMethodOther:\n    # providerAddMethodNote:\n    # providerLeaveMethod:\n    # providerLeaveMethodOther:\n    # providerLeaveMethodNote:\n    providerOverlap: YES_NEED_POLICIES\n    # providerOverlapHierarchy:\n    # providerOverlapNote:\n\n\n\n\n\n    }) {\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        status\n        id\n        modelPlanID\n        participants\n        medicareProviderType\n        isNewTypeOfProvidersOrSuppliers\n        statesEngagement\n        participantsOther\n        participantsNote\n        participantsCurrentlyInModels\n        participantsCurrentlyInModelsNote\n        modelApplicationLevel\n        expectedNumberOfParticipants\n        estimateConfidence\n        confidenceNote\n        recruitmentMethod\n        recruitmentOther\n        recruitmentNote\n        selectionMethod\n        selectionOther\n        selectionNote\n        communicationMethod\n        communicationMethodOther\n        communicationNote\n        # participantAssumeRisk\n        riskType\n        riskOther\n        riskNote\n        willRiskChange\n        willRiskChangeNote\n        coordinateWork\n        coordinateWorkNote\n        gainsharePayments\n        gainsharePaymentsTrack\n        gainsharePaymentsNote\n        participantsIds\n        participantsIdsOther\n        participantsIDSNote\n        providerAdditionFrequency\n        providerAdditionFrequencyOther\n        providerAdditionFrequencyNote\n        providerAddMethod\n        providerAddMethodOther\n        providerAddMethodNote\n        providerLeaveMethod\n        providerLeaveMethodOther\n        providerLeaveMethodNote\n        providerOverlap\n        providerOverlapHierarchy\n        providerOverlapNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }\n\n        status\n    }\n}",
								"variables": "{\n  \"id\": \"{{participantsAndProvidersID}}\",\n  \"changes\": {\n    \"participants\": [\n      \"\"\n    ],\n    \"medicareProviderType\": \"\",\n    \"statesEngagement\": \"\",\n    \"participantsOther\": \"\",\n    \"participantsNote\": \"\",\n    \"participantsCurrentlyInModels\": true,\n    \"participantsCurrentlyInModelsNote\": \"\",\n    \"modelApplicationLevel\": \"\",\n    \"expectedNumberOfParticipants\": 0,\n    \"estimateConfidence\": \"\",\n    \"confidenceNote\": \"\",\n    \"recruitmentMethod\": \"\",\n    \"recruitmentOther\": \"\",\n    \"recruitmentNote\": \"\",\n    \"selectionMethod\": [\n      \"\"\n    ],\n    \"selectionOther\": \"\",\n    \"selectionNote\": \"\",\n    \"participantAddedFrequency\": [\n        \"\"\n    ],\n    \"participantAddedFrequencyContinually\": \"\",\n    \"participantAddedFrequencyOther\": \"\",\n    \"participantAddedFrequencyNote\": \"\",\n    \"participantRemovedFrequency\": [\n        \"\"\n    ],    \n    \"participantRemovedFrequencyContinually\": \"\",\n    \"participantRemovedFrequencyOther\": \"\",\n    \"participantRemovedFrequencyNote\": \"\",\n    \"communicationMethod\": [\n      \"\"\n    ],\n    \"communicationMethodOther\": \"\",\n    \"communicationNote\": \"\",\n    \"riskType\": [\n        \"OTHER\"\n    ],\n    \"riskOther\": \"\",\n    \"riskNote\": \"\",\n    \"willRiskChange\": true,\n    \"willRiskChangeNote\": \"\",\n    \"coordinateWork\": true,\n    \"coordinateWorkNote\": \"\",\n    \"gainsharePayments\": true,\n    \"gainsharePaymentsTrack\": true,\n    \"gainsharePaymentsNote\": \"\",\n    \"gainsharePaymentsEligibility\": [\"\"],\n    \"gainsharePaymentsEligibilityOther\": \"\",\n    \"participantsIds\": [\n      \"\"\n    ],\n    \"participantsIdsOther\": \"\",\n    \"participantsIDSNote\": \"\",\n    \"providerAdditionFrequency\": \"\",\n    \"providerAdditionFrequencyOther\": \"\",\n    \"providerAdditionFrequencyNote\": \"\",\n    \"providerAddMethod\": [\n      \"\"\n    ],\n    \"providerAddMethodOther\": \"\",\n    \"providerAddMethodNote\": \"\",\n    \"providerLeaveMethod\": [\n      \"\"\n    ],\n    \"providerLeaveMethodOther\": \"\",\n    \"providerLeaveMethodNote\": \"\",\n    \"providerOverlap\": \"\",\n    \"providerOverlapHierarchy\": \"\",\n    \"providerOverlapNote\": \"\",\n    \"status\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan Beneficiaries",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanBeneficiaries{\n    updatePlanBeneficiaries (id: \"{{beneficiariesID}}\", changes: \n        {\n            status: READY_FOR_CLEARANCE\n        #Page 1\n        beneficiaries: [MEDICAID,MEDICARE_PART_D]\n        diseaseSpecificGroup: \"centers for diabetes prevention\"\n        #   beneficiariesOther:\n        #   beneficiariesNote:\n        #   treatDualElligibleDifferent:\n        #   treatDualElligibleDifferentHow:\n        #   treatDualElligibleDifferentNote:\n        #   excludeCertainCharacteristics:\n        #   excludeCertainCharacteristicsCriteria:\n        #   excludeCertainCharacteristicsNote:\n        #Page 2\n        numberPeopleImpacted: 22\n        #   estimateConfidence:\n        confidenceNote: \"Confidence hooray!!!!\"\n        #   beneficiarySelectionMethod:\n        #   beneficiarySelectionOther:\n\n        #   beneficiarySelectionNote:\n        #   #Page 3\n        #   beneficiarySelectionFrequency:\n        #   beneficiarySelectionFrequencyOther:\n        #   beneficiarySelectionFrequencyNote:\n        #   beneficiaryOverlap:\n        #   beneficiaryOverlapNote:\n        precedenceRules: [YES, NO]\n        precedenceRulesYes: \"This is a 'YES' comment\"\n        precedenceRulesNo: \"This is a 'NO' comment\"\n        precedenceRulesNote: \"This is a precedence rules note\"\n    }) {\n        id\n        modelPlanID\n        beneficiaries\n        beneficiariesOther\n        beneficiariesNote\n        diseaseSpecificGroup\n        treatDualElligibleDifferent\n        treatDualElligibleDifferentHow\n        treatDualElligibleDifferentNote\n        excludeCertainCharacteristics\n        excludeCertainCharacteristicsCriteria\n        excludeCertainCharacteristicsNote\n        numberPeopleImpacted\n        estimateConfidence\n        confidenceNote\n        beneficiarySelectionMethod\n        beneficiarySelectionOther\n        beneficiarySelectionNote\n        beneficiarySelectionFrequency\n        beneficiarySelectionFrequencyOther\n        beneficiarySelectionFrequencyNote\n        beneficiaryRemovalFrequency\n        beneficiaryRemovalFrequencyContinually\n        beneficiaryRemovalFrequencyOther\n        beneficiaryRemovalFrequencyNote\n        beneficiaryOverlap\n        beneficiaryOverlapNote\n        precedenceRules\n        precedenceRulesYes\n        precedenceRulesNo\n        precedenceRulesNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        status\n\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }        \n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan Ops Eval And Learning",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanOpsEvalAndLearning ($id: UUID!, $changes: PlanOpsEvalAndLearningChanges!) {\n    updatePlanOpsEvalAndLearning (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        stakeholders\n        stakeholdersOther\n        stakeholdersNote\n        helpdeskUse\n        helpdeskUseNote\n        contractorSupport\n        contractorSupportOther\n        contractorSupportHow\n        contractorSupportNote\n        iddocSupport\n        iddocSupportNote\n        technicalContactsIdentified\n        technicalContactsIdentifiedDetail\n        technicalContactsIdentifiedNote\n        captureParticipantInfo\n        captureParticipantInfoNote\n        icdOwner\n        draftIcdDueDate\n        icdNote\n        uatNeeds\n        stcNeeds\n        testingTimelines\n        testingNote\n        dataMonitoringFileTypes\n        dataMonitoringFileOther\n        dataResponseType\n        dataResponseFileFrequency\n        dataFullTimeOrIncremental\n        eftSetUp\n        unsolicitedAdjustmentsIncluded\n        dataFlowDiagramsNeeded\n        produceBenefitEnhancementFiles\n        fileNamingConventions\n        dataMonitoringNote\n        benchmarkForPerformance\n        benchmarkForPerformanceNote\n        computePerformanceScores\n        computePerformanceScoresNote\n        riskAdjustPerformance\n        riskAdjustFeedback\n        riskAdjustPayments\n        riskAdjustOther\n        riskAdjustNote\n        appealPerformance\n        appealFeedback\n        appealPayments\n        appealOther\n        appealNote\n        evaluationApproaches\n        evaluationApproachOther\n        evalutaionApproachNote\n        ccmInvolvment\n        ccmInvolvmentOther\n        ccmInvolvmentNote\n        dataNeededForMonitoring\n        dataNeededForMonitoringOther\n        dataNeededForMonitoringNote\n        dataToSendParticicipants\n        dataToSendParticicipantsOther\n        dataToSendParticicipantsNote\n        shareCclfData\n        shareCclfDataNote\n        sendFilesBetweenCcw\n        sendFilesBetweenCcwNote\n        appToSendFilesToKnown\n        appToSendFilesToWhich\n        appToSendFilesToNote\n        useCcwForFileDistribiutionToParticipants\n        useCcwForFileDistribiutionToParticipantsNote\n        developNewQualityMeasures\n        developNewQualityMeasuresNote\n        qualityPerformanceImpactsPayment\n        qualityPerformanceImpactsPaymentNote\n        dataSharingStarts\n        dataSharingStartsOther\n        dataSharingFrequency\n        dataSharingFrequencyOther\n        dataSharingStartsNote\n        dataCollectionStarts\n        dataCollectionStartsOther\n        dataCollectionFrequency\n        dataCollectionFrequencyOther\n        dataCollectionFrequencyNote\n        qualityReportingStarts\n        qualityReportingStartsOther\n        qualityReportingStartsNote\n        qualityReportingFrequency\n        qualityReportingFrequencyContinually\n        qualityReportingFrequencyOther\n        modelLearningSystems\n        modelLearningSystemsOther\n        modelLearningSystemsNote\n        anticipatedChallenges\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        status\n                createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }\n    }\n}",
								"variables": "{\n  \"id\": \"{{opsEvalAndLearningID}}\",\n  \"changes\": {    \n    \"stakeholders\": [\n      \"\"\n    ],\n    \"stakeholdersOther\": \"\",\n    \"stakeholdersNote\": \"\",\n    \"helpdeskUse\": true,\n    \"helpdeskUseNote\": \"\",\n    \"contractorSupport\": [\n      \"\"\n    ],\n    \"contractorSupportOther\": \"\",\n    \"contractorSupportHow\": \"\",\n    \"contractorSupportNote\": \"\",\n    \"iddocSupport\": true,\n    \"iddocSupportNote\": \"\",\n    \"technicalContactsIdentified\": true,\n    \"technicalContactsIdentifiedDetail\": \"\",\n    \"technicalContactsIdentifiedNote\": \"\",\n    \"captureParticipantInfo\": true,\n    \"captureParticipantInfoNote\": \"\",\n    \"icdOwner\": \"\",\n    \"draftIcdDueDate\": \"\",\n    \"icdNote\": \"\",\n    \"uatNeeds\": \"\",\n    \"stcNeeds\": \"\",\n    \"testingTimelines\": \"\",\n    \"testingNote\": \"\",\n    \"dataMonitoringFileTypes\": [\n      \"\"\n    ],\n    \"dataMonitoringFileOther\": \"\",\n    \"dataResponseType\": \"\",\n    \"dataResponseFileFrequency\": \"\",\n    \"dataFullTimeOrIncremental\": \"\",\n    \"eftSetUp\": true,\n    \"unsolicitedAdjustmentsIncluded\": true,\n    \"dataFlowDiagramsNeeded\": true,\n    \"produceBenefitEnhancementFiles\": true,\n    \"fileNamingConventions\": \"\",\n    \"dataMonitoringNote\": \"\",\n    \"benchmarkForPerformance\": \"\",\n    \"benchmarkForPerformanceNote\": \"\",\n    \"computePerformanceScores\": true,\n    \"computePerformanceScoresNote\": \"\",\n    \"riskAdjustPerformance\": true,\n    \"riskAdjustFeedback\": true,\n    \"riskAdjustPayments\": true,\n    \"riskAdjustOther\": true,\n    \"riskAdjustNote\": \"\",\n    \"appealPerformance\": true,\n    \"appealFeedback\": true,\n    \"appealPayments\": true,\n    \"appealOther\": true,\n    \"appealNote\": \"\",\n    \"evaluationApproaches\": [\n      \"\"\n    ],\n    \"evaluationApproachOther\": \"\",\n    \"evalutaionApproachNote\": \"\",\n    \"ccmInvolvment\": [\n      \"\"\n    ],\n    \"ccmInvolvmentOther\": \"\",\n    \"ccmInvolvmentNote\": \"\",\n    \"dataNeededForMonitoring\": [\n      \"\"\n    ],\n    \"dataNeededForMonitoringOther\": \"\",\n    \"dataNeededForMonitoringNote\": \"\",\n    \"dataToSendParticicipants\": [\n      \"\"\n    ],\n    \"dataToSendParticicipantsOther\": \"\",\n    \"dataToSendParticicipantsNote\": \"\",\n    \"shareCclfData\": true,\n    \"shareCclfDataNote\": \"\",\n    \"sendFilesBetweenCcw\": true,\n    \"sendFilesBetweenCcwNote\": \"\",\n    \"appToSendFilesToKnown\": true,\n    \"appToSendFilesToWhich\": \"\",\n    \"appToSendFilesToNote\": \"\",\n    \"useCcwForFileDistribiutionToParticipants\": true,\n    \"useCcwForFileDistribiutionToParticipantsNote\": \"\",\n    \"developNewQualityMeasures\": true,\n    \"developNewQualityMeasuresNote\": \"\",\n    \"qualityPerformanceImpactsPayment\": true,\n    \"qualityPerformanceImpactsPaymentNote\": \"\",\n    \"dataSharingStarts\": \"\",\n    \"dataSharingStartsOther\": \"\",\n    \"dataSharingFrequency\": [\n      \"\"\n    ],\n    \"dataSharingFrequencyOther\": \"\",\n    \"dataSharingStartsNote\": \"\",\n    \"dataCollectionStarts\": \"\",\n    \"dataCollectionStartsOther\": \"\",\n    \"dataCollectionFrequency\": [\n      \"\"\n    ],\n    \"dataCollectionFrequencyOther\": \"\",\n    \"dataCollectionFrequencyNote\": \"\",\n    \"qualityReportingStarts\": \"\",\n    \"qualityReportingStartsOther\": \"\",\n    \"qualityReportingStartsNote\": \"\",\n    \"qualityReportingFrequency\": [\n        \"\"\n    ],\n    \"qualityReportingFrequencyContinually\": \"\",\n    \"qualityReportingFrequencyOther\": \"\",\n    \"modelLearningSystems\": [\n      \"\"\n    ],\n    \"modelLearningSystemsOther\": \"\",\n    \"modelLearningSystemsNote\": \"\",\n    \"anticipatedChallenges\": \"\",\n    \"status\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan Payments",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanPayments\n{\n    updatePlanPayments (id: \"{{paymentsID}}\",changes:     \n    {\n            status: READY_FOR_CLEARANCE\n        # Page 1\n        fundingSource: [PATIENT_PROTECTION_AFFORDABLE_CARE_ACT,  MEDICARE_PART_A_HI_TRUST_FUND,MEDICARE_PART_B_SMI_TRUST_FUND,   OTHER]\n        fundingSourceMedicareAInfo: \"hello medicare A\"\n        fundingSourceMedicareBInfo: \"hello medicare B\"\n        fundingSourceOther: \"My cool note\"\n        fundingSourceNote: \"hello this is a note\"\n        fundingSourceR: [PATIENT_PROTECTION_AFFORDABLE_CARE_ACT,   OTHER]\n        fundingSourceRMedicareAInfo: \"hello medicare A --> R\"\n        fundingSourceRMedicareBInfo: \"hello medicare B ---> R\"\n        fundingSourceROther: \"Trust others\"\n        fundingSourceRNote: \" Please trust us\"\n        payRecipients: [PROVIDERS, BENEFICIARIES, PARTICIPANTS, STATES, OTHER]\n        payRecipientsOtherSpecification: \"asdhjkasdlhjk\"\n        payRecipientsNote: \"hasdjkaskhjd\"\n        payType: [CLAIMS_BASED_PAYMENTS, NON_CLAIMS_BASED_PAYMENTS]\n        payTypeNote: \"ashjkdasdhjkasd\"\n\n        # Page 2\n        payClaims:   [ADJUSTMENTS_TO_FFS_PAYMENTS, CARE_MANAGEMENT_HOME_VISITS, REDUCTIONS_TO_BENEFICIARY_COST_SHARING, SNF_CLAIMS_WITHOUT_3DAY_HOSPITAL_ADMISSIONS, TELEHEALTH_SERVICES_NOT_TRADITIONAL_MEDICARE, SERVICES_NOT_COVERED_THROUGH_TRADITIONAL_MEDICARE, OTHER]\n        \n        #Page 3\n        willBePaymentAdjustments: true\n        willBePaymentAdjustmentsNote: \"Yes this is a note about payment adjustments\"\n\n\n    })\n     {\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        status\n    nonClaimsPaymentsNote\n  \n    id\n    modelPlanID\n\n    # Page 1\n    fundingSource\n    fundingSourceMedicareAInfo\n    fundingSourceMedicareBInfo\n    fundingSourceOther\n    fundingSourceNote\n    fundingSourceR\n    fundingSourceRMedicareAInfo\n    fundingSourceRMedicareBInfo\n    fundingSourceROther\n    fundingSourceRNote\n    payRecipients\n    payRecipientsOtherSpecification\n    payRecipientsNote\n    payType\n    payTypeNote\n\n    # Page 2\n    payClaims\n    payClaimsOther\n    shouldAnyProvidersExcludedFFSSystems\n    shouldAnyProviderExcludedFFSSystemsNote\n    changesMedicarePhysicianFeeSchedule\n    changesMedicarePhysicianFeeScheduleNote\n    affectsMedicareSecondaryPayerClaims\n    affectsMedicareSecondaryPayerClaimsHow\n    affectsMedicareSecondaryPayerClaimsNote\n    payModelDifferentiation\n\n    # Page 3\n    willBePaymentAdjustments\n    willBePaymentAdjustmentsNote\n    creatingDependenciesBetweenServices\n    creatingDependenciesBetweenServicesNote\n    needsClaimsDataCollection\n    needsClaimsDataCollectionNote\n    providingThirdPartyFile\n    isContractorAwareTestDataRequirements\n\n    # Page 4\n    beneficiaryCostSharingLevelAndHandling\n    waiveBeneficiaryCostSharingForAnyServices\n    waiveBeneficiaryCostSharingServiceSpecification\n    waiverOnlyAppliesPartOfPayment\n    waiveBeneficiaryCostSharingNote\n\n    # Page 5\n    nonClaimsPayments\n    nonClaimsPaymentOther\n    paymentCalculationOwner\n    numberPaymentsPerPayCycle\n    numberPaymentsPerPayCycleNote\n    sharedSystemsInvolvedAdditionalClaimPayment\n    sharedSystemsInvolvedAdditionalClaimPaymentNote\n    planningToUseInnovationPaymentContractor\n    planningToUseInnovationPaymentContractorNote\n\n\n    # Page 6\n    expectedCalculationComplexityLevel\n    expectedCalculationComplexityLevelNote\n    canParticipantsSelectBetweenPaymentMechanisms\n    canParticipantsSelectBetweenPaymentMechanismsHow\n    canParticipantsSelectBetweenPaymentMechanismsNote\n    anticipatedPaymentFrequency\n    anticipatedPaymentFrequencyOther\n    anticipatedPaymentFrequencyNote\n\n    # Page 7\n    willRecoverPayments\n    willRecoverPaymentsNote\n    anticipateReconcilingPaymentsRetrospectively\n    anticipateReconcilingPaymentsRetrospectivelyNote\n    paymentStartDate\n    paymentStartDateNote\n\n    # Meta\n    createdBy\n    createdDts\n    modifiedBy\n    modifiedDts\n    \n    \n\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }    \n\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Data Exchange Approach",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanDataExchangeApproach {\n  updatePlanDataExchangeApproach(id: \"{{dataExchangeApproachID}}\", changes: {\n    # Page 1\n    dataToCollectFromParticipants: [CLINICAL_DATA, OTHER]\n    dataToCollectFromParticipantsReportsDetails: \"Detailed reports information\"\n    dataToCollectFromParticipantsOther: \"Additional data to collect from participants\"\n    dataWillNotBeCollectedFromParticipants: false\n    dataToCollectFromParticipantsNote: \"Notes regarding data collection from participants\"\n\n    # Page 2\n    dataToSendToParticipants: [DATA_FEEDBACK_DASHBOARD]\n    dataToSendToParticipantsNote: \"Notes about data being sent to participants\"\n\n    # Page 3\n    doesNeedToMakeMultiPayerDataAvailable: YES\n    anticipatedMultiPayerDataAvailabilityUseCase: MORE_COMPETENT_ALERT_DISCHARGE_TRANSFER_NOTIFICATION\n    doesNeedToMakeMultiPayerDataAvailableNote: \"Notes on multi-payer data availability\"\n\n    doesNeedToCollectAndAggregateMultiSourceData: YES\n    multiSourceDataToCollect: [COMMERCIAL_CLAIMS]\n    multiSourceDataToCollectOther: \"Additional multi-source data to collect\"\n    doesNeedToCollectAndAggregateMultiSourceDataNote: \"Notes on multi-source data collection\"\n\n    # Page 4\n    willImplementNewDataExchangeMethods: YES\n    newDataExchangeMethodsDescription: \"Description of new data exchange methods\"\n    newDataExchangeMethodsNote: \"Notes on new data exchange methods\"\n\n    # Meta\n    isDataExchangeApproachComplete: true\n  }) {\n    # Meta Fields\n    id\n    modelPlanID\n    isDataExchangeApproachComplete\n\n    # Page 1\n    dataToCollectFromParticipants\n    dataToCollectFromParticipantsReportsDetails\n    dataToCollectFromParticipantsOther\n    dataWillNotBeCollectedFromParticipants\n    dataToCollectFromParticipantsNote\n\n    # Page 2\n    dataToSendToParticipants\n    dataToSendToParticipantsNote\n\n    # Page 3\n    doesNeedToMakeMultiPayerDataAvailable\n    anticipatedMultiPayerDataAvailabilityUseCase\n    doesNeedToMakeMultiPayerDataAvailableNote\n    doesNeedToCollectAndAggregateMultiSourceData\n    multiSourceDataToCollect\n    multiSourceDataToCollectOther\n    doesNeedToCollectAndAggregateMultiSourceDataNote\n\n    # Page 4\n    willImplementNewDataExchangeMethods\n    newDataExchangeMethodsDescription\n    newDataExchangeMethodsNote\n    additionalDataExchangeConsiderationsDescription\n    isDataExchangeApproachComplete\n\n    # User Accounts\n    createdBy\n    createdDts\n    modifiedBy\n    modifiedDts\n    markedCompleteDts\n    markedCompleteBy\n    markedCompleteByUserAccount {\n        id\n        email\n    }\n\n    createdByUserAccount {\n      commonName\n    }\n    modifiedByUserAccount {\n      commonName\n    }\n    \n    status\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Plan Payments (Deprecated)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query planPayments ($id: UUID!) {\n    planPayments (id: $id) {\n        id\n        modelPlanID\n        fundingSource\n        fundingSourceTrustFund\n        fundingSourceTrustFundType\n        fundingSourceOther\n        fundingSourceNote\n        fundingSourceR\n        fundingSourceRTrustFund\n        fundingSourceRTrustFundType\n        fundingSourceROther\n        fundingSourceRNote\n        payRecipients\n        payRecipientsOtherSpecification\n        payRecipientsNote\n        payType\n        payTypeNote\n        payClaims\n        payClaimsOther\n        payClaimsNote\n        shouldAnyProvidersExcludedFFSSystems\n        shouldAnyProviderExcludedFFSSystemsNote\n        changesMedicarePhysicianFeeSchedule\n        changesMedicarePhysicianFeeScheduleNote\n        affectsMedicareSecondaryPayerClaims\n        affectsMedicareSecondaryPayerClaimsHow\n        affectsMedicareSecondaryPayerClaimsNote\n        payModelDifferentiation\n        creatingDependenciesBetweenServices\n        creatingDependenciesBetweenServicesNote\n        needsClaimsDataCollection\n        needsClaimsDataCollectionNote\n        providingThirdPartyFile\n        isContractorAwareTestDataRequirements\n        beneficiaryCostSharingLevelAndHandling\n        waiveBeneficiaryCostSharingForAnyServices\n        waiveBeneficiaryCostSharingServiceSpecification\n        waiverOnlyAppliesPartOfPayment\n        waiveBeneficiaryCostSharingNote\n        nonClaimsPayments\n        nonClaimsPaymentOther\n        paymentCalculationOwner\n        numberPaymentsPerPayCycle\n        numberPaymentsPerPayCycleNote\n        sharedSystemsInvolvedAdditionalClaimPayment\n        sharedSystemsInvolvedAdditionalClaimPaymentNote\n        planningToUseInnovationPaymentContractor\n        planningToUseInnovationPaymentContractorNote\n        expectedCalculationComplexityLevel\n        expectedCalculationComplexityLevelNote\n        canParticipantsSelectBetweenPaymentMechanisms\n        canParticipantsSelectBetweenPaymentMechanismsHow\n        canParticipantsSelectBetweenPaymentMechanismsNote\n        anticipatedPaymentFrequency\n        anticipatedPaymentFrequencyOther\n        anticipatedPaymentFrequencyNote\n        willRecoverPayments\n        willRecoverPaymentsNote\n        anticipateReconcilingPaymentsRetrospectively\n        anticipateReconcilingPaymentsRetrospectivelyNote\n        paymentStartDate\n        paymentStartDateNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        readyForReviewBy\n        readyForReviewDts\n        status\n    }\n}",
								"variables": "{\n  \"id\": \"{{paymentsID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan IT Tools",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanItTools ($id: UUID!, $changes: PlanITToolsChanges!) {\n    updatePlanItTools (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        gcPartCD\n        gcPartCDOther\n        gcPartCDNote\n        gcCollectBids\n        gcCollectBidsOther\n        gcCollectBidsNote\n        gcUpdateContract\n        gcUpdateContractOther\n        gcUpdateContractNote\n        ppToAdvertise\n        ppToAdvertiseOther\n        ppToAdvertiseNote\n        ppCollectScoreReview\n        ppCollectScoreReviewOther\n        ppCollectScoreReviewNote\n        ppAppSupportContractor\n        ppAppSupportContractorOther\n        ppAppSupportContractorNote\n        ppCommunicateWithParticipant\n        ppCommunicateWithParticipantOther\n        ppCommunicateWithParticipantNote\n        ppManageProviderOverlap\n        ppManageProviderOverlapOther\n        ppManageProviderOverlapNote\n        bManageBeneficiaryOverlap\n        bManageBeneficiaryOverlapOther\n        bManageBeneficiaryOverlapNote\n        oelHelpdeskSupport\n        oelHelpdeskSupportOther\n        oelHelpdeskSupportNote\n        oelManageAco\n        oelManageAcoOther\n        oelManageAcoNote\n        oelPerformanceBenchmark\n        oelPerformanceBenchmarkOther\n        oelPerformanceBenchmarkNote\n        oelProcessAppeals\n        oelProcessAppealsOther\n        oelProcessAppealsNote\n        oelEvaluationContractor\n        oelEvaluationContractorOther\n        oelEvaluationContractorNote\n        oelCollectData\n        oelCollectDataOther\n        oelCollectDataNote\n        oelObtainData\n        oelObtainDataOther\n        oelObtainDataNote\n        oelClaimsBasedMeasures\n        oelClaimsBasedMeasuresOther\n        oelClaimsBasedMeasuresNote\n        oelQualityScores\n        oelQualityScoresOther\n        oelQualityScoresNote\n        oelSendReports\n        oelSendReportsOther\n        oelSendReportsNote\n        oelLearningContractor\n        oelLearningContractorOther\n        oelLearningContractorNote\n        oelParticipantCollaboration\n        oelParticipantCollaborationOther\n        oelParticipantCollaborationNote\n        oelEducateBeneficiaries\n        oelEducateBeneficiariesOther\n        oelEducateBeneficiariesNote\n        pMakeClaimsPayments\n        pMakeClaimsPaymentsOther\n        pMakeClaimsPaymentsNote\n        pInformFfs\n        pInformFfsOther\n        pInformFfsNote\n        pNonClaimsBasedPayments\n        pNonClaimsBasedPaymentsOther\n        pNonClaimsBasedPaymentsNote\n        pSharedSavingsPlan\n        pSharedSavingsPlanOther\n        pSharedSavingsPlanNote\n        pRecoverPayments\n        pRecoverPaymentsOther\n        pRecoverPaymentsNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        readyForReviewBy\n        readyForReviewDts\n        status\n    }\n}",
								"variables": "{\n  \"id\": \"{{itToolsID}}\",\n  \"changes\": {\n    \"gcPartCD\": [\n      \"\"\n    ],\n    \"gcPartCDOther\": \"\",\n    \"gcPartCDNote\": \"\",\n    \"gcCollectBids\": [\n      \"\"\n    ],\n    \"gcCollectBidsOther\": \"\",\n    \"gcCollectBidsNote\": \"\",\n    \"gcUpdateContract\": [\n      \"\"\n    ],\n    \"gcUpdateContractOther\": \"\",\n    \"gcUpdateContractNote\": \"\",\n    \"ppToAdvertise\": [\n      \"\"\n    ],\n    \"ppToAdvertiseOther\": \"\",\n    \"ppToAdvertiseNote\": \"\",\n    \"ppCollectScoreReview\": [\n      \"\"\n    ],\n    \"ppCollectScoreReviewOther\": \"\",\n    \"ppCollectScoreReviewNote\": \"\",\n    \"ppAppSupportContractor\": [\n      \"\"\n    ],\n    \"ppAppSupportContractorOther\": \"\",\n    \"ppAppSupportContractorNote\": \"\",\n    \"ppCommunicateWithParticipant\": [\n      \"\"\n    ],\n    \"ppCommunicateWithParticipantOther\": \"\",\n    \"ppCommunicateWithParticipantNote\": \"\",\n    \"ppManageProviderOverlap\": [\n      \"\"\n    ],\n    \"ppManageProviderOverlapOther\": \"\",\n    \"ppManageProviderOverlapNote\": \"\",\n    \"bManageBeneficiaryOverlap\": [\n      \"\"\n    ],\n    \"bManageBeneficiaryOverlapOther\": \"\",\n    \"bManageBeneficiaryOverlapNote\": \"\",\n    \"oelHelpdeskSupport\": [\n      \"\"\n    ],\n    \"oelHelpdeskSupportOther\": \"\",\n    \"oelHelpdeskSupportNote\": \"\",\n    \"oelManageAco\": [\n      \"\"\n    ],\n    \"oelManageAcoOther\": \"\",\n    \"oelManageAcoNote\": \"\",\n    \"oelPerformanceBenchmark\": [\n      \"\"\n    ],\n    \"oelPerformanceBenchmarkOther\": \"\",\n    \"oelPerformanceBenchmarkNote\": \"\",\n    \"oelProcessAppeals\": [\n      \"\"\n    ],\n    \"oelProcessAppealsOther\": \"\",\n    \"oelProcessAppealsNote\": \"\",\n    \"oelEvaluationContractor\": [\n      \"\"\n    ],\n    \"oelEvaluationContractorOther\": \"\",\n    \"oelEvaluationContractorNote\": \"\",\n    \"oelCollectData\": [\n      \"\"\n    ],\n    \"oelCollectDataOther\": \"\",\n    \"oelCollectDataNote\": \"\",\n    \"oelObtainData\": [\n      \"\"\n    ],\n    \"oelObtainDataOther\": \"\",\n    \"oelObtainDataNote\": \"\",\n    \"oelClaimsBasedMeasures\": [\n      \"\"\n    ],\n    \"oelClaimsBasedMeasuresOther\": \"\",\n    \"oelClaimsBasedMeasuresNote\": \"\",\n    \"oelQualityScores\": [\n      \"\"\n    ],\n    \"oelQualityScoresOther\": \"\",\n    \"oelQualityScoresNote\": \"\",\n    \"oelSendReports\": [\n      \"\"\n    ],\n    \"oelSendReportsOther\": \"\",\n    \"oelSendReportsNote\": \"\",\n    \"oelLearningContractor\": [\n      \"\"\n    ],\n    \"oelLearningContractorOther\": \"\",\n    \"oelLearningContractorNote\": \"\",\n    \"oelParticipantCollaboration\": [\n      \"\"\n    ],\n    \"oelParticipantCollaborationOther\": \"\",\n    \"oelParticipantCollaborationNote\": \"\",\n    \"oelEducateBeneficiaries\": [\n      \"\"\n    ],\n    \"oelEducateBeneficiariesOther\": \"\",\n    \"oelEducateBeneficiariesNote\": \"\",\n    \"pMakeClaimsPayments\": [\n      \"\"\n    ],\n    \"pMakeClaimsPaymentsOther\": \"\",\n    \"pMakeClaimsPaymentsNote\": \"\",\n    \"pInformFfs\": [\n      \"\"\n    ],\n    \"pInformFfsOther\": \"\",\n    \"pInformFfsNote\": \"\",\n    \"pNonClaimsBasedPayments\": [\n      \"\"\n    ],\n    \"pNonClaimsBasedPaymentsOther\": \"\",\n    \"pNonClaimsBasedPaymentsNote\": \"\",\n    \"pSharedSavingsPlan\": [\n      \"\"\n    ],\n    \"pSharedSavingsPlanOther\": \"\",\n    \"pSharedSavingsPlanNote\": \"\",\n    \"pRecoverPayments\": [\n      \"\"\n    ],\n    \"pRecoverPaymentsOther\": \"\",\n    \"pRecoverPaymentsNote\": \"\",\n    \"status\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Collaborators",
			"item": [
				{
					"name": "Create Plan Collaborator",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createPlanCollaborator ($input: PlanCollaboratorCreateInput!) {\n    createPlanCollaborator (input: $input) {\n        id\n        modelPlanID\n        userID\n        teamRoles\n        userAccount \n        {\n            commonName\n            familyName\n            givenName\n            email\n            locale\n        }  \n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"input\": {\n    \"modelPlanID\": \"{{modelPlanID}}\",\n    \"userName\": \"MINT\",\n    \"teamRoles\": [\"MODEL_LEAD\", \"IT_LEAD\"]\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan Collaborator",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanCollaborator ($id: UUID!, $newRoles: [TeamRole!]!) {\n    updatePlanCollaborator (id: $id, newRoles: $newRoles) {\n        id\n        modelPlanID\n        userID\n        teamRoles\n        userAccount \n        {\n            commonName\n            familyName\n            givenName\n            email\n            locale\n        }  \n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"{{modelLeadID}}\",\n  \"newRoles\": [\"LEARNING\"]\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Plan Collaborator",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deletePlanCollaborator ($id: UUID!) {\n    deletePlanCollaborator (id: $id) {\n        id\n        modelPlanID\n        userID\n        teamRoles\n        userAccount \n        {\n            commonName\n            familyName\n            givenName\n            email\n            locale\n        }  \n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"{{modelLeadID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Plan Collaborator By ID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query planCollaboratorByID ($id: UUID!) {\n    planCollaboratorByID (id: $id) {\n        id\n        modelPlanID\n        userID\n        teamRoles\n        userAccount \n        {\n            commonName\n            familyName\n            givenName\n            email\n            locale\n        }  \n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"{{modelLeadID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Discussions & Replies",
			"item": [
				{
					"name": "Create Plan Discussion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createPlanDiscussion",
									"",
									"discussionID = responseData.id",
									"",
									"",
									"pm.collectionVariables.set(\"discussionID\", discussionID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createPlanDiscussion{\n    createPlanDiscussion (input:{      \n    modelPlanID: \"{{modelPlanID}}\"\n    content: \"<p>Hey <span data-type=\\\"mention\\\" tag-type=\\\"USER_ACCOUNT\\\" class=\\\"mention\\\" data-id=\\\"SKZO\\\" data-label=\\\"Alexander Stark\\\">@Alexander Stark</span>!  Will you be able to join the meeting next week?  If not, can you contact <span data-type=\\\"mention\\\" tag-type=\\\"USER_ACCOUNT\\\" class=\\\"mention\\\" data-id=\\\"TEST\\\" data-label=\\\"Terry Thompson\\\">@Terry Thompson</span> to let them know?</p> BTW, here is a solution! <strong> <span data-type=\\\"mention\\\" tag-type=\\\"POSSIBLE_SOLUTION\\\" class=\\\"mention\\\" data-id=\\\"INNOVATION\\\" data-label=\\\"INNOVATION\\\">@INNOVATION</span></strong> <ul> <li>Tagging <span data-type=\\\"mention\\\" tag-type=\\\"USER_ACCOUNT\\\" class=\\\"mention\\\" data-id=\\\"TEST\\\" data-label=\\\"Terry Thompson\\\">@Terry Thompson</span> again. </li></ul>\"\n      userRole:NONE_OF_THE_ABOVE\n      userRoleDescription: \"this is a test\"\n      } ){\n        id\n        modelPlanID\n        content{\n            rawContent\n            tags{\n                id\n                taggedField\n                taggedContentTable\n                taggedContentID\n                entityUUID\n                entityIntID\n                entity{\n                    __typename\n                    ... on UserAccount{\n                        id\n                        commonName\n                        email\n                    }\n                    ... on PossibleOperationalSolution {\n                        name\n                        key\n                    }\n                }\n            }\n        }\n        userRole\n        userRoleDescription\n        isAssessment\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }             \n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan Discussion",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanDiscussion ($id: UUID!, $changes: PlanDiscussionChanges!) {\n    updatePlanDiscussion (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        content\n        userRole\n        userRoleDescription\n        isAssessment\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }             \n    }\n}",
								"variables": "{\n  \"id\": \"{{discussionID}}\",\n  \"changes\": {\n    \"content\": \"Great Changes\",\n    \"userRole\": \"none_of_the_above\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Plan Discussion",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deletePlanDiscussion ($id: UUID!) {\n    deletePlanDiscussion (id: $id) {\n        id\n        modelPlanID\n        content\n        userRole\n        userRoleDescription\n        isAssessment\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }             \n    }\n}",
								"variables": "{\n  \"id\": \"{{discussionID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Discussion Reply",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createDiscussionReply",
									"",
									"discussionReplyID = responseData.id",
									"",
									"",
									"pm.collectionVariables.set(\"discussionReplyID\", discussionReplyID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createDiscussionReply {\n    createDiscussionReply (input: {\n        discussionID: \"{{discussionID}}\"\n        content: \"Let me look into it, ok? <span data-type=\\\"mention\\\" tag-type=\\\"USER_ACCOUNT\\\" class=\\\"mention\\\" data-id=\\\"ADMI\\\" data-label=\\\"ADMI\\\">@Audrey Abrams</span>!\"\n        userRole: IT_ARCHITECT\n    }) {\n        id\n        discussionID\n        content{\n            rawContent\n            tags{\n                id\n                taggedField\n                taggedContentTable\n                taggedContentID\n                entityUUID\n                entityIntID\n                entity{\n                    __typename\n                    ... on UserAccount{\n                        id\n                        commonName\n                        email\n                    }\n                    ... on PossibleOperationalSolution {\n                        name\n                        key\n                    }\n                }\n            }\n        }\n        isAssessment\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }             \n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Discussion Reply",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateDiscussionReply ($id: UUID!, $changes: DiscussionReplyChanges!) {\n    updateDiscussionReply (id: $id, changes: $changes) {\n        id\n        discussionID\n        content\n        userRole\n        userRoleDescription\n        isAssessment\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }             \n    }\n}",
								"variables": "{\n  \"id\": \"{{discussionReplyID}}\",\n  \"changes\": {\n    \"content\": \"This is a resolution\",\n    \"userRole\": \"NONE_OF_THE_ABOVE\",\n    \"userRoleDescription\": \"this is a test\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Discussion Reply",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteDiscussionReply ($id: UUID!) {\n    deleteDiscussionReply (id: $id) {\n        id\n        discussionID\n        content\n        userRole\n        userRoleDescription\n        isAssessment\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }             \n    }\n}",
								"variables": "{\n  \"id\": \"{{discussionReplyID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Most Recent Discussion Role Selection",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\n    mostRecentDiscussionRoleSelection {\n        userRole\n        userRoleDescription\n    }\n}\n",
								"variables": "{\n    \n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PlanDiscussionCreate TAG CURRENT USER ONLY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createPlanDiscussion",
									"",
									"discussionID = responseData.id",
									"",
									"",
									"pm.collectionVariables.set(\"discussionID\", discussionID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createPlanDiscussion{\n  createPlanDiscussion(input:{\n      modelPlanID: \"{{modelPlanID}}\"\n      content: \" <span data-type=\\\"mention\\\" tag-type=\\\"USER_ACCOUNT\\\" class=\\\"mention\\\" data-id=\\\"{{EUAID}}\\\" data-label=\\\"{{EUAID}}\\\">@{{EUAID}}</span>\"\n      userRole:SHARED_SYSTEM_MAINTAINER\n } ){\n    \n    id\n    modelPlanID\n    \n    content{\n        rawContent\n        tags{\n            id\n            taggedField\n            taggedContentTable\n            taggedContentID\n            entityUUID\n            entityIntID\n            entity{\n                __typename\n                ... on UserAccount{\n                    id\n                    commonName\n                    email\n                }\n                ... on PossibleOperationalSolution {\n                    name\n                    key\n                }\n            }\n        }\n    }\n    \n    createdBy\n    createdByUserAccount{\n        commonName\n        email\n        username\n        }\n\n    }\n  \n  \n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:8085/api/graph/query",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"api",
								"graph",
								"query"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Plan Documents",
			"item": [
				{
					"name": "Create Plan Document Upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.uploadNewPlanDocument",
									"",
									"documentID = responseData.id",
									"",
									"pm.collectionVariables.set(\"documentID\", documentID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation uploadNewPlanDocument ($input: PlanDocumentInput!) {\n    uploadNewPlanDocument (input: $input) {\n        id\n        fileName\n    }\n}",
								"variables": "{\n  \"input\": {\n    \"modelPlanID\": \"{{modelPlanID}}\",\n    \"fileData\": \"Hello!\",\n    \"documentType\": \"POLICY_PAPER\",\n    \"restricted\": false\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Plan Document Linked",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.linkNewPlanDocument",
									"",
									"documentID = responseData.id",
									"",
									"pm.collectionVariables.set(\"documentID\", documentID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation linkNewPlanDocument  {\n    linkNewPlanDocument (input: {\n        modelPlanID: \"{{modelPlanID}}\",\n        name:\"Google\",\n        url: \"https://www.google.com\",\n        documentType:CONCEPT_PAPER,\n        restricted:false,\n        otherTypeDescription:\"This is just a link to google\",\n        optionalNotes:\"You can find many documents here\",\n\n    }) {\n        id\n        modelPlanID\n        isLink\n        url\n        fileType\n        bucket\n        fileKey\n        virusScanned\n        virusClean\n        restricted\n        fileName\n        fileSize\n        documentType\n        otherType\n        optionalNotes\n        downloadUrl\n        deletedAt\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts        \n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Plan Document",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanDocument ($input: PlanDocumentInput!) {\n    updatePlanDocument (input: $input) {\n        presignedURL\n    }\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"\",\n    \"modelPlanID\": \"\",\n    \"documentParameters\": {\n      \"fileName\": \"\",\n      \"fileSize\": 0,\n      \"fileType\": \"\",\n      \"documentType\": \"\",\n      \"otherTypeDescription\": \"\",\n      \"optionalNotes\": \"\"\n    },\n    \"url\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Plan Document",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deletePlanDocument ($input: PlanDocumentInput!) {\n    deletePlanDocument (input: $input)\n}",
								"variables": "{\n  \"input\": {\n    \"id\": \"\",\n    \"modelPlanID\": \"\",\n    \"documentParameters\": {\n      \"fileName\": \"\",\n      \"fileSize\": 0,\n      \"fileType\": \"\",\n      \"documentType\": \"\",\n      \"otherTypeDescription\": \"\",\n      \"optionalNotes\": \"\"\n    },\n    \"url\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Plan Document by ID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query planDocument ($id: UUID!) {\n    planDocument (id: $id) {\n        id\n        modelPlanID\n        fileType\n        bucket\n        fileKey\n        virusScanned\n        virusClean\n        fileName\n        fileSize\n        documentType\n        otherType\n        optionalNotes\n        deletedAt\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }            \n    }\n}",
								"variables": "{\n  \"id\": \"{{documentID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CRs and TDLs",
			"item": [
				{
					"name": "Create CR",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createPlanCR ($input: PlanCRCreateInput!) {\n    createPlanCR (input: $input) {\n        id\n        modelPlanID\n        idNumber\n        dateInitiated\n        dateImplemented\n        title\n        note\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"input\": {\n    \"modelPlanID\": \"\",\n    \"idNumber\": \"\",\n    \"dateInitiated\": \"\",\n    \"dateImplemented\": \"\",\n    \"title\": \"\",\n    \"note\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create TDL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createPlanTDL ($input: PlanTDLCreateInput!) {\n    createPlanTDL (input: $input) {\n        id\n        modelPlanID\n        idNumber\n        dateInitiated\n        title\n        note\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"input\": {\n    \"modelPlanID\": \"\",\n    \"idNumber\": \"\",\n    \"dateInitiated\": \"\",\n    \"title\": \"\",\n    \"note\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CR by ID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query planCR ($id: UUID!) {\n    planCR (id: $id) {\n        id\n        modelPlanID\n        idNumber\n        dateInitiated\n        dateImplemented\n        title\n        note\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get TDL by ID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query planTDL ($id: UUID!) {\n    planTDL (id: $id) {\n        id\n        modelPlanID\n        idNumber\n        dateInitiated\n        title\n        note\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update CR",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanCR ($id: UUID!, $changes: PlanCRChanges!) {\n    updatePlanCR (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        idNumber\n        dateInitiated\n        dateImplemented\n        title\n        note\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"\",\n  \"changes\": {\n    \"idNumber\": \"\",\n    \"dateInitiated\": \"\",\n    \"dateImplemented\": \"\",\n    \"title\": \"\",\n    \"note\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update TDL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePlanTDL ($id: UUID!, $changes: PlanTDLChanges!) {\n    updatePlanTDL (id: $id, changes: $changes) {\n        id\n        modelPlanID\n        idNumber\n        dateInitiated\n        title\n        note\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"\",\n  \"changes\": {\n    \"idNumber\": \"\",\n    \"dateInitiated\": \"\",\n    \"title\": \"\",\n    \"note\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete CR",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deletePlanCR ($id: UUID!) {\n    deletePlanCR (id: $id) {\n        id\n        modelPlanID\n        idNumber\n        dateInitiated\n        dateImplemented\n        title\n        note\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete TDL",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deletePlanTDL ($id: UUID!) {\n    deletePlanTDL (id: $id) {\n        id\n        modelPlanID\n        idNumber\n        dateInitiated\n        title\n        note\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{\n  \"id\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscriptions / Task List Locking",
			"item": [
				{
					"name": "[sub] onTaskListSectionLocksChanged",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "subscription onTaskListSectionLocksChanged ($modelPlanID: UUID!) {\n    onTaskListSectionLocksChanged (modelPlanID: $modelPlanID) {\n        changeType\n        actionType\n        lockStatus {\n            modelPlanID\n            section\n            lockedBy\n            isAssessment\n        }\n    }\n}",
								"variables": "{\n  \"modelPlanID\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[sub] onLockTaskListSectionContext",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "subscription onLockTaskListSectionContext ($modelPlanID: UUID!) {\n    onLockTaskListSectionContext (modelPlanID: $modelPlanID) {\n        changeType\n        actionType\n        lockStatus {\n            modelPlanID\n            section\n            lockedBy\n            isAssessment\n        }\n    }\n}",
								"variables": "{\n  \"modelPlanID\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Task List Section Locks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query taskListSectionLocks ($modelPlanID: UUID!) {\n    taskListSectionLocks (modelPlanID: $modelPlanID) {\n        modelPlanID\n        section\n        lockedBy\n        isAssessment\n    }\n}",
								"variables": "{\n  \"modelPlanID\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lock Task List Section",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation lockTaskListSection ($modelPlanID: UUID!, $section: TaskListSection!) {\n    lockTaskListSection (modelPlanID: $modelPlanID, section: $section)\n}",
								"variables": "{\n  \"modelPlanID\": \"\",\n  \"section\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlock Task List Section",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation unlockTaskListSection ($modelPlanID: UUID!, $section: TaskListSection!) {\n    unlockTaskListSection (modelPlanID: $modelPlanID, section: $section)\n}",
								"variables": "{\n  \"modelPlanID\": \"\",\n  \"section\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlock All Task List Sections",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation unlockAllTaskListSections ($modelPlanID: UUID!) {\n    unlockAllTaskListSections (modelPlanID: $modelPlanID) {\n        modelPlanID\n        section\n        lockedBy\n        isAssessment\n    }\n}",
								"variables": "{\n  \"modelPlanID\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NDA",
			"item": [
				{
					"name": "Agree To NDA",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation agreeToNDA ($agree: Boolean!) {\n    agreeToNDA (agree: $agree) {\n        agreed\n        agreedDts\n    }\n}",
								"variables": "{\n  \"agree\": true\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get NDA Info",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ndaInfo {\n    ndaInfo {\n        agreed\n        agreedDts\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Other",
			"item": [
				{
					"name": "Get CurrentUser",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query currentUser {\n    currentUser{\n        launchDarkly {\n            userKey\n        }\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing Model Collection",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query existingModelCollection {\n    existingModelCollection {\n        id\n        modelName\n        stage\n        numberOfParticipants\n        category\n        authority\n        description\n        numberOfBeneficiariesImpacted\n        numberOfPhysiciansImpacted\n        dateBegan\n        dateEnded\n        states\n        keywords\n        url\n        displayModelSummary\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Okta Users",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query searchOktaUsers ($searchTerm: String!) {\n    searchOktaUsers (searchTerm: $searchTerm) {\n        firstName\n        lastName\n        displayName\n        email\n        username\n    }\n}",
								"variables": "{\n  \"searchTerm\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Report a Problem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.sendFeedbackEmail",
									"",
									"pm.test(\"Feedback Email was sent\", function (){",
									"    pm.expect(responseData).to.equal(true)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation reportAProblem{\n  \n  reportAProblem(input:{\n      isAnonymousSubmission: false\n      allowContact: true\n      section: OTHER\n      sectionOther: \"Awesome Section\"\n      whatDoing: \"Making an awesome model\"\n      whatWentWrong: \"I made a mistake\"\n      severity: OTHER\n      severityOther: \"Made me sad\"\n      })\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Audit",
			"item": [
				{
					"name": "GetAuditChanges",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query auditChanges($tableName: String!, $primaryKey: UUID!){\n  auditChanges(tableName: $tableName,primaryKey: $primaryKey)\n   {\n        id\n        primaryKey\n        foreignKey\n        tableName\n        action\n        fields\n        modifiedBy\n        modifiedByUserAccount\n        {\n            commonName\n            familyName\n            givenName\n            email\n            locale\n        }  \n        modifiedDts\n  }\n}",
								"variables": "{\n  \"tableName\": \"model_plan\",\n  \"primaryKey\":\"{{modelPlanID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ModelPlanGet(NameHistory)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ModelPlan($id:UUID!,$sort: SortDirection!){\n  \n  modelPlan(id:$id){\n    id\n    modelName\n    nameHistory(sort: $sort)\n\n  }\n  \n  \n}",
								"variables": "{\n    \"id\": \"{{modelPlanID}}\",\n    \"sort\": \"ASC\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Operational Needs And Solutions",
			"item": [
				{
					"name": "ModelPlanCreateForOpNeeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createModelPlan",
									"",
									"modelPlanID = responseData.id",
									"basicsID = responseData.basics.id",
									"generalCharacteristicsID = responseData.generalCharacteristics.id",
									"participantsAndProvidersID = responseData.participantsAndProviders.id",
									"beneficiariesID = responseData.beneficiaries.id",
									"opsEvalAndLearningID = responseData.opsEvalAndLearning.id",
									"modelLeadID = responseData.collaborators[0].id",
									"paymentsID = responseData.payments.id",
									"",
									"pm.collectionVariables.set(\"modelPlanID\", modelPlanID);",
									"pm.collectionVariables.set(\"basicsID\", basicsID);",
									"",
									"pm.collectionVariables.set(\"generalCharacteristicsID\", generalCharacteristicsID);",
									"pm.collectionVariables.set(\"participantsAndProvidersID\", participantsAndProvidersID);",
									"pm.collectionVariables.set(\"beneficiariesID\", beneficiariesID);",
									"pm.collectionVariables.set(\"opsEvalAndLearningID\", opsEvalAndLearningID);",
									"pm.collectionVariables.set(\"modelLeadID\", modelLeadID);",
									"pm.collectionVariables.set(\"paymentsID\", paymentsID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createModelPlan{\n  \n  createModelPlan(modelName:\"Excellent Model\" ){\n    id\n\n    id\n    modelName\n    operationalNeeds {\n\n        id\n        modelPlanID\n        name\n        section\n        key\n        nameOther\n        needed\n        \n    solutions(includeNotNeeded:false) {\n        # id\n        # status\n        # mustStartDts\n        \n        \n        name\n        key   \n        needed\n        nameOther\n        pocEmail\n        pocName     \n        createdBy\n        createdDts\n    }\n                    \n        \n    }\n  \n    basics{\n        id        \n    }\n    generalCharacteristics {\n        id\n    }\n    participantsAndProviders {\n        id\n    }\n    beneficiaries {\n        id\n    }\n    opsEvalAndLearning {\n        id\n    }\n    collaborators {\n      id\n      userID\n      teamRole\n    }\n    # documents{\n    #     id\n    # }\n    # discussions{\n    #     id\n    #     replies{\n    #         id\n    #     }\n    # }\n    payments{\n        id\n    }\n    # crTdls{\n    #     id\n    # }\n    \n    \n  }\n  \n  \n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ModelPlanGetForOpNeeds",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ModelPlan{\n  \n  modelPlan(id:\"{{modelPlanID}}\"){\n    id\n    modelName\n    operationalNeeds {\n \n        id\n        modelPlanID\n        name\n        section\n        key\n        nameOther\n        needed\n                \n    solutions(includeNotNeeded:false) {\n        # id\n        # status\n        # mustStartDts\n        \n        \n        name\n        key   \n        needed\n        nameOther\n        pocEmail\n        pocName     \n        createdBy\n        createdDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }         \n    }\n                    \n\n\n\n    }\n  }\n  \n  \n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PossibleOperationalNeedsGet",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query PossibleOperationalNeeds{\n  \n  possibleOperationalNeeds{\n            name\n            key\n                possibleSolutions {\n                    id\n                    name\n                    key                    \n                } \n            createdByUserAccount \n            {\n                commonName\n            }   \n            modifiedByUserAccount\n            {\n                commonName\n            }       \n  }\n}\n  \n  ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperationNeedInsertUpdateOther",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.addOrUpdateCustomOperationalNeed",
									"",
									"operationalNeedID = responseData.id",
									"",
									"pm.collectionVariables.set(\"operationalNeedID\", operationalNeedID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation OperationalNeed{\n  \n  addOrUpdateCustomOperationalNeed(\n      modelPlanID:\"{{modelPlanID}}\"\n      ,customNeedType :\"To have a fun day\"\n      ,needed: true)\n      {\n    \n        id\n        modelPlanID\n\n        name\n        key\n        nameOther\n        needed\n        section\n        # solutions\n        \n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts     \n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }         \n    }\n  }\n  \n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperationNeedUpdateCustom",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.updateCustomOperationalNeedByID",
									"",
									"operationalNeedID = responseData.id",
									"",
									"pm.collectionVariables.set(\"operationalNeedID\", operationalNeedID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation OperationalNeed{\n  \n  updateCustomOperationalNeedByID(id:\"{{operationalNeedID}}\"\n  ,customNeedType:\"To Dance in the Rain 3 times\"\n  ,needed: true)\n  {\n    \n        id\n        modelPlanID\n        name\n        key\n        nameOther\n        needed\n        section\n        # solutions\n        \n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts     \n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }         \n    }\n  }\n  \n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperationNeedGetByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.operationalNeed",
									"",
									"operationalNeedID = responseData.id",
									"",
									"pm.collectionVariables.set(\"operationalNeedID\", operationalNeedID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query OperationalNeed{\n  \n  operationalNeed(id:\"{{operationalNeedID}}\"){\n \n        id\n        modelPlanID\n        name\n        key\n        # section\n        nameOther\n        needed\n    solutions(includeNotNeeded:true) {\n        # id\n        # status\n        # mustStartDts\n        \n        \n        name\n        key   \n        needed\n        nameOther\n        pocEmail\n        pocName     \n        createdBy\n        createdDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n    }\n    createdByUserAccount \n    {\n        commonName\n    }   \n    modifiedByUserAccount\n    {\n        commonName\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createOperationalSolution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createOperationalSolution",
									"",
									"operationalSolutionID = responseData.id",
									"",
									"pm.collectionVariables.set(\"operationalSolutionID\", operationalSolutionID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation OperationalSolution{\n  \n  createOperationalSolution(operationalNeedID:\"{{operationalNeedID}}\",\n    solutionType:MARX,\n    changes: {\n      needed: true\n    #   nameOther: \"My special solution\"\n      otherHeader: \"The Happy Helper Team\"\n      pocName: \"The Gump\"\n      pocEmail: \"shrimpKing@gump.com\"\n      mustStartDts: \"2023-02-04T21:39:57.484167Z\"\n      mustFinishDts: \"2023-12-04T21:39:57.484167Z\"\n  }){\n    \n    id\n    isCommonSolution\n    operationalNeedID\n    # needed\n\n    name\n    key\n    nameOther\n    pocName\n    pocEmail\n    mustStartDts\n    mustFinishDts\n    isOther\n    otherHeader\n    status\n\n    createdBy\n    createdDts\n    modifiedBy\n    modifiedDts\n    }\n  }\n  \n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createOperationalSolutionOtherExample",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createOperationalSolution",
									"",
									"operationalSolutionID = responseData.id",
									"",
									"pm.collectionVariables.set(\"operationalSolutionID\", operationalSolutionID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation OperationalSolution{\n  \n  createOperationalSolution(operationalNeedID:\"{{operationalNeedID}}\",\n    # solutionType:MARX,\n    changes: {\n      needed: true\n      nameOther: \"My special solution\"\n    #   otherHeader: \"The Happy Helper Team\"\n      pocName: \"Mr. Clean\"\n      pocEmail: \"cleanClean@cleaning.com\"\n      mustStartDts: \"2023-02-04T21:39:57.484167Z\"\n      mustFinishDts: \"2023-12-04T21:39:57.484167Z\"\n  }){\n    \n    id\n    isCommonSolution\n    operationalNeedID\n    # needed\n\n    name\n    key\n    nameOther\n    pocName\n    pocEmail\n    mustStartDts\n    mustFinishDts\n    isOther\n    otherHeader\n    status\n\n    createdBy\n    createdDts\n    modifiedBy\n    modifiedDts\n    }\n  }\n  \n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateOperationalSolution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation OperationalSolution{\n  \n  updateOperationalSolution(id:\"{{operationalSolutionID}}\"\n  ,changes: {\n    #   nameOther: \"My Change I guess\"\n      needed: false\n      pocName: \"The Sentient Ice Cream Cone\"\n      pocEmail: \"iceCreamKing@IceCreamStore.com\"\n      status: IN_PROGRESS\n      mustStartDts: \"2023-02-04T21:39:57.484167Z\"\n      mustFinishDts: \"2023-12-04T21:39:57.484167Z\"\n  }){\n    \n    id\n    isCommonSolution\n    operationalNeedID\n    needed\n    name\n    key\n    nameOther\n    pocName\n    pocEmail\n    mustStartDts\n    mustFinishDts\n    status\n\n    createdBy\n    createdDts\n    modifiedBy\n    modifiedDts\n    }\n  }\n  \n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperationSolutionGetByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query operationalSolution ($id: UUID!) {\n    operationalSolution (id: $id) {\n        id\n        isCommonSolution\n        operationalNeedID\n        solutionType\n        needed\n        name\n        key\n        nameOther\n        pocName\n        pocEmail\n        mustStartDts\n        mustFinishDts\n        status\n        documents {\n            id\n            modelPlanID\n            fileType\n            bucket\n            fileKey\n            virusScanned\n            virusClean\n            restricted\n            fileName\n            fileSize\n            documentType\n            otherType\n            optionalNotes\n            downloadUrl\n            deletedAt\n            createdBy\n            createdDts\n            modifiedBy\n            modifiedDts\n        }\n        operationalSolutionSubtasks {\n            id\n            solutionID\n            name\n            status\n            createdBy\n            createdDts\n            modifiedBy\n            modifiedDts\n        }\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }         \n    }\n}",
								"variables": "{\r\n  \"id\": \"{{operationalSolutionID}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PossibleOperationalSolutionSetPrimaryPointOfContact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation SetPrimaryPointOfContact{\n    setPrimaryPointOfContact (possibleOperationalSolutionId: 1, pointOfContactId: \"7f6163d2-c8d5-4349-95af-565cbdf1c45a\")\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "OperationSolutionsGetByOperationalNeedID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query OperationalSolution{\n  \n  operationalSolutions(operationalNeedID:\"{{operationalNeedID}}\",,includeNotNeeded:true){\n        id\n        isCommonSolution\n\n        name\n        key\n        nameOther\n        pocEmail\n        pocName     \n        status\n        needed\n        mustStartDts\n        mustFinishDts\n\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n\n    \n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PossibleOperationalSolutionsGetAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query PossibleOperationalSolution{\n  \n  possibleOperationalSolutions{\n        id\n        name\n        key  \n        primaryPointOfContact {\n            id\n            possibleOperationalSolutionID\n            name\n            email\n            isTeam\n            role\n        }\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }         \n    \n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreatePlanDocumentSolutionLinks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createPlanDocumentSolutionLinks ($solutionID: UUID!, $documentIDs: [UUID!]!) {\n    createPlanDocumentSolutionLinks (solutionID: $solutionID, documentIDs: $documentIDs) {\n        id\n        solutionID\n        documentID\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }           \n    }\n}",
								"variables": "{\n  \"solutionID\": \"\",\n  \"documentIDs\": [\n    \"\"\n  ]\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RemovePlanDocumentSolutionLinks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation removePlanDocumentSolutionLinks ($solutionID: UUID!, $documentIDs: [UUID!]!) {\n    removePlanDocumentSolutionLinks (solutionID: $solutionID, documentIDs: $documentIDs)\n}",
								"variables": "{\n  \"solutionID\": \"\",\n  \"documentIDs\": [\n    \"\"\n  ]\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response status is 200\", function(){",
							"    pm.response.to.have.status(200);",
							"})"
						]
					}
				}
			]
		},
		{
			"name": "Operational Solution Subtasks",
			"item": [
				{
					"name": "CreateOperationalSolutionSubtasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.createOperationalSolutionSubtasks",
									"",
									"for (let i =0; i< responseData.length; i++){",
									"    subtaskID = responseData[i].id",
									"    pm.collectionVariables.set(\"operationalSolutionSubtaskID\"+i, subtaskID);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createOperationalSolutionSubtasks ($solutionID: UUID!, $inputs: [CreateOperationalSolutionSubtaskInput!]!) {\r\n    createOperationalSolutionSubtasks (solutionID: $solutionID, inputs: $inputs) {\r\n        id\r\n        solutionID\r\n        name\r\n        status\r\n        createdBy\r\n        createdDts\r\n        modifiedBy\r\n        modifiedDts\r\n    }\r\n}",
								"variables": "{\r\n  \"solutionID\": \"{{operationalSolutionID}}\",\r\n  \"inputs\": [\r\n      {\r\n          \"name\": \"Waffle Fries\",\r\n          \"status\": \"TODO\"\r\n      },\r\n      {\r\n          \"name\": \"Pancake Fries\",\r\n          \"status\": \"IN_PROGRESS\"\r\n      }\r\n  ]\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteOperationalSolutionSubtasks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteOperationalSolutionSubtask ($id: UUID!) {\r\n    deleteOperationalSolutionSubtask (id: $id)\r\n}",
								"variables": "{\r\n  \"id\": \"{{operationalSolutionSubtaskID0}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateOperationalSolutionSubtasks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateOperationalSolutionSubtasks ($inputs: [UpdateOperationalSolutionSubtaskInput!]!) {\r\n    updateOperationalSolutionSubtasks (inputs: $inputs) {\r\n        id\r\n        solutionID\r\n        name\r\n        status\r\n        createdBy\r\n        createdDts\r\n        modifiedBy\r\n        modifiedDts\r\n    }\r\n}",
								"variables": "{\r\n  \"inputs\": [\r\n      {\r\n          \"id\": \"{{operationalSolutionSubtaskID1}}\",\r\n          \"changes\": {\r\n            \"name\": \"Test\",\r\n            \"status\": \"IN_PROGRESS\"\r\n          }\r\n      }\r\n  ]\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "SearchChanges",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query searchChanges($filters: [SearchFilter!], $sortBy: ChangeHistorySortParams, $page: PageParams) {\r\n  searchChanges(filters: $filters, sortBy: $sortBy, page: $page) {\r\n    guid\r\n    modelPlanID\r\n    tableID\r\n    tableName\r\n    primaryKey\r\n    foreignKey\r\n    fields {\r\n      changes {\r\n        name\r\n        value {\r\n          ... on FieldValue {\r\n            new\r\n            old\r\n          }\r\n        }\r\n      }\r\n    }\r\n    modifiedDts\r\n    modifiedBy {\r\n      id\r\n      username\r\n      isEUAID\r\n      commonName\r\n      locale\r\n      email\r\n      givenName\r\n      familyName\r\n      zoneInfo\r\n      hasLoggedIn\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"filters\": [\r\n    {\r\n        \"type\": \"CHANGED_AFTER\",\r\n        \"value\": \"2023-01-01T00:00:00.000Z\"\r\n    },\r\n    {\r\n        \"type\": \"CHANGED_BEFORE\",\r\n        \"value\": \"2024-01-01T00:00:00.000Z\"\r\n    },\r\n    {\r\n        \"type\": \"MODEL_PLAN_SECTION\",\r\n        \"value\": \"BASICS\"\r\n    },\r\n    {\r\n        \"type\": \"CHANGED_BY_ACTOR\",\r\n        \"value\": \"MINT\"\r\n    },\r\n    {\r\n        \"type\": \"FREE_TEXT\",\r\n        \"value\": \"high level note\"\r\n    },\r\n    {\r\n        \"type\": \"MODEL_PLAN_ID\",\r\n        \"value\": \"b7dbeec2-bbd0-4097-9a0e-650f74e4c307\"\r\n    }\r\n  ],\r\n  \"sortBy\": {\r\n    \"field\": \"CHANGE_DATE\",\r\n    \"order\": \"DESC\"   \r\n  },\r\n  \"page\": {\r\n    \"limit\": 200,\r\n    \"offset\": 0\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchChangeTableDateHistogramConsolidatedAggregations",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query searchChangeTableDateHistogramConsolidatedAggregations ($interval: String!, $limit: Int!, $offset: Int!) {\n    searchChangeTableDateHistogramConsolidatedAggregations (interval: $interval, limit: $limit, offset: $offset) {\n        key\n        docCount\n        maxModifiedDts\n        minModifiedDts\n    }\n}",
								"variables": "{\n  \"interval\": \"5m\",\n  \"limit\": 20,\n  \"offset\": 0\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ExistingModelLink",
			"item": [
				{
					"name": "ExistingModelLinksUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json().data.updateExistingModelLinks",
									"",
									"",
									"if (responseData.length>0){",
									"existingModelLinkID = responseData[0].id",
									"",
									"pm.collectionVariables.set(\"existingModelLinkID\", existingModelLinkID);",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateExistingModelLinks {\n  updateExistingModelLinks(\n    modelPlanID: \"{{modelPlanID}}\"\n    fieldName: \n    #   GEN_CHAR_PARTICIPATION_EXISTING_MODEL_WHICH\n    GEN_CHAR_RESEMBLES_EXISTING_MODEL_WHICH\n    existingModelIDs:\n     null\n    #   [100014,100015]\n    currentModelPlanIDs:\n     #   null\n    [\"{{modelPlanID}}\"]\n  ) {\n    links {\n      id\n      modelPlanID\n      existingModelID\n      currentModelPlanID\n      fieldName\n      model {\n        __typename\n\n        ... on ExistingModel {\n          modelName\n          stage\n          numberOfParticipants\n          keywords\n        }\n        ... on ModelPlan {\n          modelName\n          abbreviation\n        }\n      }\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ExistingModelLink GET",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query existingModelLink {\n  existingModelLink(id: \"{{existingModelLinkID}}\") {\n    id\n    modelPlanID\n    currentModelPlanID\n    existingModelID\n    fieldName\n    model {\n      __typename\n\n      ... on ExistingModel {\n        modelName\n        stage\n        numberOfParticipants\n        keywords\n      }\n      ... on ModelPlan {\n        modelName\n        abbreviation\n      }\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ModelPlanGetExisting ModelLinks (Gen Characteristics)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ModelPlan {\n  modelPlan(id: \"{{modelPlanID}}\") {\n    id\n    modelName\n    nameHistory\n    generalCharacteristics {\n      resemblesExistingModelWhich {\n        links {\n          id\n          modelPlanID\n          existingModelID\n          currentModelPlanID\n          fieldName\n          model {\n            __typename\n\n            ... on ExistingModel {\n              modelName\n              stage\n              numberOfParticipants\n              keywords\n            }\n            ... on ModelPlan {\n              modelName\n              abbreviation\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ModelPlanCollection ModelLinks (Gen Characteristics)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query modelPlanCollection {\n  modelPlanCollection(filter: INCLUDE_ALL) {\n    id\n    modelName\n    nameHistory\n    generalCharacteristics {\n      resemblesExistingModelWhich {\n        links {\n          id\n          modelPlanID\n          existingModelID\n          currentModelPlanID\n          fieldName\n          model {\n            __typename\n\n            ... on ExistingModel {\n              modelName\n              stage\n              numberOfParticipants\n              keywords\n            }\n            ... on ModelPlan {\n              modelName\n              abbreviation\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notfications",
			"item": [
				{
					"name": "GetNotifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let notifications = pm.response.json().data.currentUser.notifications.notifications",
									"if (notifications.length > 0) {",
									"    userNotificationID = notifications[0].id",
									"    pm.collectionVariables.set(\"userNotificationID\", userNotificationID);",
									"}",
									"",
									"",
									"// for (let i =0; i< notifications.length; i++){",
									"//     subtaskID = notifications[i].id",
									"//     pm.collectionVariables.set(\"operationalSolutionSubtaskID\"+i, subtaskID);",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query currentUser {\n  currentUser {\n    notifications {\n      numUnreadNotifications\n      notifications {\n        __typename\n        id\n        isRead\n        inAppSent\n        emailSent\n        activity {\n          activityType\n          entityID\n          actorID\n                    metaData {\n            __typename\n            ... on TaggedInPlanDiscussionActivityMeta{\n                version\n                type\n                modelPlanID\n                modelPlan{\n                    modelName\n                }      \n                discussionID\n                content\n            }\n            ... on TaggedInDiscussionReplyActivityMeta {\n                version\n                type\n                modelPlanID\n                modelPlan{\n                    modelName\n                }                  \n                discussionID\n                replyID\n                content\n            }\n            ... on ModelPlanSharedActivityMeta {\n                version\n                type\n                modelPlanID\n                modelPlan{\n                    modelName\n                }\n                optionalMessage\n            }\n            ... on NewDiscussionRepliedActivityMeta {\n                version\n                type\n                discussionID\n                replyID\n                content\n            } \n            ... on DailyDigestCompleteActivityMeta{\n                version\n                type\n                modelPlanIDs\n                date\n                analyzedAudits{\n                       id\n                        modelPlanID\n                        modelName\n                        date\n                        changes{\n                            modelPlan{\n                                oldName\n                                statusChanges\n                            }\n                            documents{\n                                count\n                            }\n                            crTdls{\n                                activity\n                            }\n                            planSections{\n                                updated\n                                readyForReview\n                                readyForClearance\n                            }\n                            modelLeads{\n                                added{\n                                    id\n                                    commonName\n                                    # userAccount{\n                                    #     id\n                                    #     email\n                                    # }\n                                }\n                            }\n                            planDiscussions{\n                                activity\n                            }\n                        }\n\n                }\n\n            }\n            ... on NewModelPlanActivityMeta {\n                version\n                type\n                modelPlanID\n                modelPlan{\n                    modelName\n                }\n            }\n            ... on DatesChangedActivityMeta {\n                version\n                type\n                modelPlanID\n                modelPlan {\n                    id\n                }\n                dateChanges {\n                    isChanged\n                    field\n                    isRange\n                    oldDate\n                    newDate\n                    oldRangeStart\n                    oldRangeEnd\n                    newRangeStart\n                    newRangeEnd\n                }\n            }   \n            ... on PlanDataExchangeApproachMarkedCompleteActivityMeta {\n                version\n                type\n                dataExchangeApproachID\n                dataExchangeApproach {\n                    id\n                }\n                modelPlan {\n                    id\n                }\n                markedCompleteBy\n                markedCompleteByUserAccount {\n                    id\n                }\n            }          \n          }\n          createdByUserAccount {\n            commonName\n          }\n        }\n        createdByUserAccount {\n          commonName\n        }\n      }\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:8085/api/graph/query",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"api",
								"graph",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetNotificationPreferences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query currentUser {\n  currentUser {\n    notificationPreferences {\n        dailyDigestComplete\n\n        addedAsCollaborator\n\n        taggedInDiscussion\n\n        taggedInDiscussionReply\n\n        newDiscussionReply\n\n        modelPlanShared\n\n        newModelPlan\n\n        datesChanged\n        datesChangedNotificationType\n\n        dataExchangeApproachMarkedComplete\n      }\n    }\n  }\n\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:8085/api/graph/query",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"api",
								"graph",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "MarkNotificationAsRead",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation notifications {\n    markNotificationAsRead(notificationID: \"{{userNotificationID}}\")\n   {\n    id\n    isRead\n    activity {\n      activityType\n      entityID\n      actorID\n      createdByUserAccount {\n        commonName\n      }\n    }\n    createdByUserAccount {\n      commonName\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:8085/api/graph/query",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"api",
								"graph",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "MarkAllNotificationAsRead",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation notifications {\n    markAllNotificationsAsRead\n   {\n    id\n    isRead\n    activity {\n      activityType\n      entityID\n      actorID\n      createdByUserAccount {\n        commonName\n      }\n    }\n    createdByUserAccount {\n      commonName\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:8085/api/graph/query",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"api",
								"graph",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CurrentUser",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query currentUser {\n  currentUser {\n    launchDarkly {\n      userKey\n    }\n    account {\n      commonName\n      email\n    }\n    notifications {\n      numUnreadNotifications\n      notifications {\n        __typename\n        id\n        isRead\n        inAppSent\n        emailSent\n        activity {\n          activityType\n          entityID\n          actorID\n          metaData {\n            __typename\n            ... on TaggedInPlanDiscussionActivityMeta{\n                version\n                type\n                modelPlanID\n                modelPlan{\n                    modelName\n                }                  \n                discussionID\n                content\n            }\n            ... on TaggedInDiscussionReplyActivityMeta {\n                version\n                type\n                modelPlanID\n                modelPlan{\n                    modelName\n                }                  \n                discussionID\n                replyID\n                content\n            }\n          }\n          createdByUserAccount {\n            commonName\n          }\n        }\n        createdByUserAccount {\n          commonName\n        }\n      }\n    }\n  }\n}\n",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "NotificationPreferencesUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation NotificationUpdate {\nupdateUserNotificationPreferences( changes:{\n    dailyDigestComplete: [EMAIL,IN_APP]\n    \n    addedAsCollaborator: [EMAIL,IN_APP]\n\n    taggedInDiscussion:[IN_APP]\n\n    taggedInDiscussionReply:[EMAIL,IN_APP]\n\n    newDiscussionReply: [EMAIL,IN_APP]\n\n    modelPlanShared: [EMAIL,IN_APP]\n\n    newModelPlan: [EMAIL, IN_APP]\n\n}) {\n\n        dailyDigestComplete\n\n        addedAsCollaborator\n\n        taggedInDiscussion\n\n        taggedInDiscussionReply\n\n        newDiscussionReply\n\n        modelPlanShared\n\n        newModelPlan\n    }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:8085/api/graph/query",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"api",
								"graph",
								"query"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Translated Audit",
			"item": [
				{
					"name": "TestChanges For Translated Changes",
					"item": [
						{
							"name": "ModelPlanCreate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json().data.createModelPlan",
											"",
											"modelPlanID = responseData.id",
											"basicsID = responseData.basics.id",
											"generalCharacteristicsID = responseData.generalCharacteristics.id",
											"participantsAndProvidersID = responseData.participantsAndProviders.id",
											"beneficiariesID = responseData.beneficiaries.id",
											"opsEvalAndLearningID = responseData.opsEvalAndLearning.id",
											"modelLeadID = responseData.collaborators[0].id",
											"paymentsID = responseData.payments.id",
											"firstOpNeed = responseData.operationalNeeds[0].id",
											"userID = responseData.createdByUserAccount.id",
											"",
											"pm.collectionVariables.set(\"modelPlanID\", modelPlanID);",
											"pm.collectionVariables.set(\"basicsID\", basicsID);",
											"",
											"pm.collectionVariables.set(\"generalCharacteristicsID\", generalCharacteristicsID);",
											"pm.collectionVariables.set(\"participantsAndProvidersID\", participantsAndProvidersID);",
											"pm.collectionVariables.set(\"beneficiariesID\", beneficiariesID);",
											"pm.collectionVariables.set(\"opsEvalAndLearningID\", opsEvalAndLearningID);",
											"pm.collectionVariables.set(\"modelLeadID\", modelLeadID);",
											"pm.collectionVariables.set(\"paymentsID\", paymentsID);",
											"pm.collectionVariables.set(\"operationalNeedID\", firstOpNeed);",
											"pm.collectionVariables.set(\"userID\", userID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createModelPlan{\n  \n  createModelPlan(modelName:\"Excellent Model\" ){\n    id\n    modelName\n    createdByUserAccount{\n        givenName\n        id\n    }\n    operationalNeeds {\n        id\n        modelPlanID\n        name\n        key\n        nameOther\n        needed\n        section    \n    }  \n    basics{\n        id        \n    }\n    generalCharacteristics {\n        id\n    }\n    participantsAndProviders {\n        id\n    }\n    beneficiaries {\n        id\n    }\n    opsEvalAndLearning {\n        id\n    }\n    collaborators {\n      id\n    }\n    payments{\n        id\n    }\n  }\n}\n  ",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}",
									"host": [
										"{{url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PlanBasicsUpdate",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UPDATEPlanBasics{\n  \n  updatePlanBasics(id:\"{{basicsID}}\" changes:{   \n\n    cmmiGroups : [\n        # STATE_INNOVATIONS_GROUP\n        ,PATIENT_CARE_MODELS_GROUP\n        ,POLICY_AND_PROGRAMS_GROUP\n        # ,PREVENTIVE_AND_POPULATION_HEALTH_CARE_MODELS_GROUP\n        ,SEAMLESS_CARE_MODELS_GROUP\n        ]\n    modelType: [VOLUNTARY, OTHER]\n    modelTypeOther: \"Test type\"\n    # problem:\" A interesting problem\"\n    goal: \" Be a good solution\"\n    testInterventions: \"A Kazoo that plays Brahms Lullaby\"\n    note: \"Notes are now cool again\"\n    status: READY_FOR_REVIEW\n    clearanceStarts: \"2023-11-18T16:28:24.26322738Z\"\n    performancePeriodStarts: \"2023-11-18T16:28:24.26322738Z\"\n  } \n  \n  \n  )\n  \n  \n  {\n   id\n   cmmiGroups\n    modelPlanID\n    modelType\n    # modelTypeOther\n    problem\n    goal\n    testInterventions\n    note\n    createdBy\n    createdDts\n    modifiedBy\n    modifiedDts\n    status \n    readyForReviewBy\n    readyForReviewDts\n    readyForClearanceBy\n    readyForClearanceDts\n    \n    \n  }\n  \n  \n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:8085/api/graph/query",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8085",
									"path": [
										"api",
										"graph",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "PlanParticipantsAndProvidersUpdate",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updatePlanParticipantsAndProviders #($input: PlanMilestonesInput!) \n{\n    updatePlanParticipantsAndProviders (id: \"{{participantsAndProvidersID}}\",changes:     \n    {\n        status: READY_FOR_CLEARANCE\n\n\n    #Page 1\n    participants: [ACCOUNTABLE_CARE_ORGANIZATION, MEDICARE_PROVIDERS, STATE_MEDICAID_AGENCIES]\n    # medicareProviderType:\n    statesEngagement: \"Very good engagement\"\n    # participantsOther:\n    # participantsNote:\n    participantsCurrentlyInModels: null\n    # participantsCurrentlyInModelsNote:\n    # modelApplicationLevel:\n\n    #Page 2\n    # expectedNumberOfParticipants:\n    # estimateConfidence:\n    # confidenceNote:\n    recruitmentMethod: APPLICATION_COLLECTION_TOOL\n    # recruitmentOther:\n    # recruitmentNote:\n    selectionMethod: [APPLICATION_REVIEW_AND_SCORING_TOOL\n    ,APPLICATION_SUPPORT_CONTRACTOR]\n    # selectionOther:\n    # selectionNote:\n\n    #Page 3\n    communicationMethod: [IT_TOOL]\n    communicationMethodOther: \"New And Awesome Method\"\n    # communicationNote:\n    # participantAssumeRisk:\n    # riskType:\n    # riskOther:\n    # riskNote:\n    # willRiskChange:\n    # willRiskChangeNote:\n\n    #Page 4\n    # coordinateWork:\n    # coordinateWorkNote:\n    gainsharePayments: true\n    # gainsharePaymentsTrack:\n    # gainsharePaymentsNote:\n    participantsIds: [TINS,CCNS]\n    # participantsIdsOther:\n    # participantsIDSNote:\n\n    #Page 5\n    # providerAdditionFrequency:\n    # providerAdditionFrequencyOther:\n    # providerAdditionFrequencyNote:\n    # providerAddMethod:\n    # providerAddMethodOther:\n    # providerAddMethodNote:\n    # providerLeaveMethod:\n    # providerLeaveMethodOther:\n    # providerLeaveMethodNote:\n    providerOverlap: YES_NEED_POLICIES\n    # providerOverlapHierarchy:\n    # providerOverlapNote:\n\n\n\n\n\n    }) {\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        status\n        id\n        modelPlanID\n        participants\n        medicareProviderType\n        statesEngagement\n        participantsOther\n        participantsNote\n        participantsCurrentlyInModels\n        participantsCurrentlyInModelsNote\n        modelApplicationLevel\n        expectedNumberOfParticipants\n        estimateConfidence\n        confidenceNote\n        recruitmentMethod\n        recruitmentOther\n        recruitmentNote\n        selectionMethod\n        selectionOther\n        selectionNote\n        communicationMethod\n        communicationMethodOther\n        communicationNote\n        # participantAssumeRisk\n        riskType\n        riskOther\n        riskNote\n        willRiskChange\n        willRiskChangeNote\n        coordinateWork\n        coordinateWorkNote\n        gainsharePayments\n        gainsharePaymentsTrack\n        gainsharePaymentsNote\n        participantsIds\n        participantsIdsOther\n        participantsIDSNote\n        providerAdditionFrequency\n        providerAdditionFrequencyOther\n        providerAdditionFrequencyNote\n        providerAddMethod\n        providerAddMethodOther\n        providerAddMethodNote\n        providerLeaveMethod\n        providerLeaveMethodOther\n        providerLeaveMethodNote\n        providerOverlap\n        providerOverlapHierarchy\n        providerOverlapNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }\n\n        status\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:8085/api/graph/query",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8085",
									"path": [
										"api",
										"graph",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "PlanParticipantsAndProvidersUpdateGainshareNotApplicable",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updatePlanParticipantsAndProviders #($input: PlanMilestonesInput!) \n{\n    updatePlanParticipantsAndProviders (id: \"{{participantsAndProvidersID}}\",changes:     \n    {\n        status: READY_FOR_CLEARANCE\n\n\n    #Page 1\n    participants: [ACCOUNTABLE_CARE_ORGANIZATION, MEDICARE_PROVIDERS, STATE_MEDICAID_AGENCIES]\n    # medicareProviderType:\n    statesEngagement: \"Very good engagement\"\n    # participantsOther:\n    # participantsNote:\n    participantsCurrentlyInModels: null\n    # participantsCurrentlyInModelsNote:\n    # modelApplicationLevel:\n\n    #Page 2\n    # expectedNumberOfParticipants:\n    # estimateConfidence:\n    # confidenceNote:\n    recruitmentMethod: APPLICATION_COLLECTION_TOOL\n    # recruitmentOther:\n    # recruitmentNote:\n    selectionMethod: [APPLICATION_REVIEW_AND_SCORING_TOOL\n    ,APPLICATION_SUPPORT_CONTRACTOR]\n    # selectionOther:\n    # selectionNote:\n\n    #Page 3\n    communicationMethod: [IT_TOOL]\n    communicationMethodOther: \"New And Awesome Method\"\n    # communicationNote:\n    # participantAssumeRisk:\n    # riskType:\n    # riskOther:\n    # riskNote:\n    # willRiskChange:\n    # willRiskChangeNote:\n\n    #Page 4\n    # coordinateWork:\n    # coordinateWorkNote:\n    gainsharePayments: false\n    # gainsharePaymentsTrack:\n    # gainsharePaymentsNote:\n    participantsIds: [TINS,CCNS]\n    # participantsIdsOther:\n    # participantsIDSNote:\n\n    #Page 5\n    # providerAdditionFrequency:\n    # providerAdditionFrequencyOther:\n    # providerAdditionFrequencyNote:\n    # providerAddMethod:\n    # providerAddMethodOther:\n    # providerAddMethodNote:\n    # providerLeaveMethod:\n    # providerLeaveMethodOther:\n    # providerLeaveMethodNote:\n    providerOverlap: YES_NO_ISSUES\n    # providerOverlapHierarchy:\n    providerOverlapNote: \"Note, that changing this to Yes_No_Issues doesn't make the hierarchy question not apply. Make it null if you want to do that instead.\"\n\n\n\n\n\n    }) {\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        status\n        id\n        modelPlanID\n        participants\n        medicareProviderType\n        statesEngagement\n        participantsOther\n        participantsNote\n        participantsCurrentlyInModels\n        participantsCurrentlyInModelsNote\n        modelApplicationLevel\n        expectedNumberOfParticipants\n        estimateConfidence\n        confidenceNote\n        recruitmentMethod\n        recruitmentOther\n        recruitmentNote\n        selectionMethod\n        selectionOther\n        selectionNote\n        communicationMethod\n        communicationMethodOther\n        communicationNote\n        # participantAssumeRisk\n        riskType\n        riskOther\n        riskNote\n        willRiskChange\n        willRiskChangeNote\n        coordinateWork\n        coordinateWorkNote\n        gainsharePayments\n        gainsharePaymentsTrack\n        gainsharePaymentsNote\n        participantsIds\n        participantsIdsOther\n        participantsIDSNote\n        providerAdditionFrequency\n        providerAdditionFrequencyOther\n        providerAdditionFrequencyNote\n        providerAddMethod\n        providerAddMethodOther\n        providerAddMethodNote\n        providerLeaveMethod\n        providerLeaveMethodOther\n        providerLeaveMethodNote\n        providerOverlap\n        providerOverlapHierarchy\n        providerOverlapNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }\n\n        status\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:8085/api/graph/query",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8085",
									"path": [
										"api",
										"graph",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "PlanParticipantsAndProvidersUpdate OverlapNotApplicable",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updatePlanParticipantsAndProviders #($input: PlanMilestonesInput!) \n{\n    updatePlanParticipantsAndProviders (id: \"{{participantsAndProvidersID}}\",changes:     \n    {\n        status: READY_FOR_CLEARANCE\n\n\n    #Page 1\n    participants: [ACCOUNTABLE_CARE_ORGANIZATION, MEDICARE_PROVIDERS, STATE_MEDICAID_AGENCIES]\n    # medicareProviderType:\n    statesEngagement: \"Very good engagement\"\n    # participantsOther:\n    # participantsNote:\n    participantsCurrentlyInModels: null\n    # participantsCurrentlyInModelsNote:\n    # modelApplicationLevel:\n\n    #Page 2\n    # expectedNumberOfParticipants:\n    # estimateConfidence:\n    # confidenceNote:\n    recruitmentMethod: APPLICATION_COLLECTION_TOOL\n    # recruitmentOther:\n    # recruitmentNote:\n    selectionMethod: [APPLICATION_REVIEW_AND_SCORING_TOOL\n    ,APPLICATION_SUPPORT_CONTRACTOR]\n    # selectionOther:\n    # selectionNote:\n\n    #Page 3\n    communicationMethod: [IT_TOOL]\n    communicationMethodOther: \"New And Awesome Method\"\n    # communicationNote:\n    # participantAssumeRisk:\n    # riskType:\n    # riskOther:\n    # riskNote:\n    # willRiskChange:\n    # willRiskChangeNote:\n\n    #Page 4\n    # coordinateWork:\n    # coordinateWorkNote:\n    gainsharePayments: false\n    # gainsharePaymentsTrack:\n    # gainsharePaymentsNote:\n    participantsIds: [TINS,CCNS]\n    # participantsIdsOther:\n    # participantsIDSNote:\n\n    #Page 5\n    # providerAdditionFrequency:\n    # providerAdditionFrequencyOther:\n    # providerAdditionFrequencyNote:\n    # providerAddMethod:\n    # providerAddMethodOther:\n    # providerAddMethodNote:\n    # providerLeaveMethod:\n    # providerLeaveMethodOther:\n    # providerLeaveMethodNote:\n    providerOverlap: null\n    # providerOverlapHierarchy:\n    providerOverlapNote: \"Note, that changing this to null makes the hierarchy question not apply.\"\n\n\n\n\n\n    }) {\n        readyForReviewBy\n        readyForReviewDts\n        readyForClearanceBy\n        readyForClearanceDts\n        status\n        id\n        modelPlanID\n        participants\n        medicareProviderType\n        statesEngagement\n        participantsOther\n        participantsNote\n        participantsCurrentlyInModels\n        participantsCurrentlyInModelsNote\n        modelApplicationLevel\n        expectedNumberOfParticipants\n        estimateConfidence\n        confidenceNote\n        recruitmentMethod\n        recruitmentOther\n        recruitmentNote\n        selectionMethod\n        selectionOther\n        selectionNote\n        communicationMethod\n        communicationMethodOther\n        communicationNote\n        # participantAssumeRisk\n        riskType\n        riskOther\n        riskNote\n        willRiskChange\n        willRiskChangeNote\n        coordinateWork\n        coordinateWorkNote\n        gainsharePayments\n        gainsharePaymentsTrack\n        gainsharePaymentsNote\n        participantsIds\n        participantsIdsOther\n        participantsIDSNote\n        providerAdditionFrequency\n        providerAdditionFrequencyOther\n        providerAdditionFrequencyNote\n        providerAddMethod\n        providerAddMethodOther\n        providerAddMethodNote\n        providerLeaveMethod\n        providerLeaveMethodOther\n        providerLeaveMethodNote\n        providerOverlap\n        providerOverlapHierarchy\n        providerOverlapNote\n        createdBy\n        createdDts\n        modifiedBy\n        modifiedDts\n\n        createdByUserAccount \n        {\n            commonName\n        }   \n        modifiedByUserAccount\n        {\n            commonName\n        }     \n        readyForReviewByUserAccount \n        {\n            commonName\n        }\n        readyForClearanceByUserAccount \n        {\n            commonName\n        }\n\n        status\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:8085/api/graph/query",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8085",
									"path": [
										"api",
										"graph",
										"query"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TranslatedAuditCollectionGET NORMALIZED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query translatedAuditCollection {\n  translatedAuditCollection(modelPlanID: \"{{modelPlanID}}\"\n    # limit: 5 \n    # offset: 3\n  ) {\n    id\n    modelName\n    tableID\n    tableName\n    primaryKey\n    date\n    action\n\n    actorID\n    actorName\n\n    changeID\n    metaDataType\n    metaData {\n    ... on TranslatedAuditMetaBaseStruct{\n            version\n            tableName\n        }\n        ... on TranslatedAuditMetaGeneric {\n            version\n            tableName\n            relation\n            relationContent\n        }        \n        ... on TranslatedAuditMetaDiscussionReply {\n            version\n            tableName\n            discussionID\n            discussionContent\n            numberOfReplies\n        }    \n        ... on TranslatedAuditMetaOperationalNeed {\n            version\n            tableName\n            needName\n            isOther\n        }    \n        ... on TranslatedAuditMetaOperationalSolution {\n            version\n            tableName\n            needName\n            needIsOther\n            solutionName\n            solutionOtherHeader\n            solutionIsOther\n            numberOfSubtasks\n        }    \n        ... on TranslatedAuditMetaOperationalSolutionSubtask {\n            version\n            tableName\n            needName\n            needIsOther\n            solutionName\n            numberOfSubtasks\n            solutionOtherHeader\n            solutionIsOther\n            subtaskName\n        } \n       ... on TranslatedAuditMetaDocumentSolutionLink {\n            version\n            tableName\n            needName\n            needIsOther\n            solutionName\n            solutionOtherHeader\n            solutionIsOther\n\n            documentID\n            \n            documentName\n            documentType\n            documentOtherType\n            documentVisibility\n        }            \n    }\n\n    createdBy\n    # createdByUserAccount\n    createdDts\n    modifiedBy\n    # modifiedByUserAccount\n    modifiedDts\n\n    translatedFields {\n        fieldName\n        fieldNameTranslated\n        id\n\n        changeType\n        dataType\n        formType\n\n        referenceLabel\n        questionType\n        notApplicableQuestions\n        old\n        oldTranslated\n        new\n        newTranslated\n\n    }\n\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:8085/api/graph/query",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"api",
								"graph",
								"query"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User View Customization",
			"item": [
				{
					"name": "Get Customizations",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query userViewCustomization {\n    userViewCustomization {\n        id\n        userId\n        viewCustomization\n        possibleOperationalSolutions\n        createdBy\n        createdByUserAccount {\n            username\n        }\n        createdDts\n        modifiedBy\n        modifiedByUserAccount {\n            username\n        }\n        modifiedDts\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Customizations",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUserViewCustomization($changes: UserViewCustomizationChanges!) {\n    updateUserViewCustomization(changes: $changes) {\n        id\n        userId\n        viewCustomization\n        possibleOperationalSolutions\n        createdBy\n        createdByUserAccount {\n            username\n        }\n        createdDts\n        modifiedBy\n        modifiedByUserAccount {\n            username\n        }\n        modifiedDts\n    }\n}",
								"variables": "{\n    \"changes\": {\n        \"viewCustomization\": [\"FOLLOWED_MODELS\",\"MY_MODEL_PLANS\"],\n        \"possibleOperationalSolutions\": [\"ACO_OS\"]\n    }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "Local {\"EUAID\":\"{{EUAID}}\",\"jobCodes\":{{jobCodes}},\"favorLocalAuth\":true}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://localhost:8085/api/graph/query",
			"type": "string"
		},
		{
			"key": "jobCodes",
			"value": "[\"MINT_ASSESSMENT_NONPROD\", \"MINT_USER_NONPROD\"]",
			"type": "string"
		},
		{
			"key": "EUAID",
			"value": "PSTM",
			"type": "string"
		},
		{
			"key": "modelPlanID",
			"value": ""
		},
		{
			"key": "basicsID",
			"value": ""
		},
		{
			"key": "generalCharacteristicsID",
			"value": ""
		},
		{
			"key": "participantsAndProvidersID",
			"value": ""
		},
		{
			"key": "beneficiariesID",
			"value": ""
		},
		{
			"key": "opsEvalAndLearningID",
			"value": ""
		},
		{
			"key": "modelLeadID",
			"value": ""
		},
		{
			"key": "paymentsID",
			"value": ""
		},
		{
			"key": "dataExchangeApproachID",
			"value": "",
			"type": "string"
		},
		{
			"key": "operationalNeedID",
			"value": ""
		},
		{
			"key": "operationalSolutionID",
			"value": ""
		},
		{
			"key": "discussionID",
			"value": ""
		},
		{
			"key": "discussionReplyID",
			"value": ""
		},
		{
			"key": "operationalSolutionSubtaskID0",
			"value": ""
		},
		{
			"key": "operationalSolutionSubtaskID1",
			"value": ""
		},
		{
			"key": "documentID",
			"value": "0b188e43-21a6-45b4-8dc2-a09929d3402d",
			"type": "string"
		},
		{
			"key": "existingModelLinkID",
			"value": ""
		},
		{
			"key": "userID",
			"value": ""
		},
		{
			"key": "userNotificationID",
			"value": ""
		},
		{
			"key": "sampleModelPlanID",
			"value": "f25d8f70-6470-47e6-a6d9-debc10f26567",
			"type": "string"
		}
	]
}
