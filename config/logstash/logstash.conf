input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/postgresql-42.6.0.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://db/postgres"
    jdbc_user => "postgres"
    jdbc_password => "mysecretpassword"
    schedule => "* * * * *"

    tracking_column => "id" # The column used to track the last processed row
    use_column_value => true # Use the column value as the last processed row
    statement_filepath => "/usr/share/logstash/ingest_change_table.sql"
  }
}

filter {
  # The postgresql jdbc driver does not support the json type, so we need to convert it to a string in the sql query
  # We then need to convert that data back to json here for searchability
  json {
    source => "fields_data"
    target => "fields"
  }

  json {
    source => "modified_by"
    target => "modified_by"
  }

  translate {
    field => "action"
    destination => "action"
    dictionary => {
      "I" => "Insert"
      "U" => "Update"
      "D" => "Delete"
    }
    fallback => "Unknown"
  }

  translate {
    field => "table_id"
    destination => "table_name"
    dictionary => { # TODO: This should be populated from the table_config table in the database query
      "1" => "model_plan"
      "2" => "plan_basics"
      "3" => "plan_beneficiaries"
      "4" => "plan_collaborator"
      "5" => "plan_discussion"
      "6" => "discussion_reply"
      "7" => "plan_document"
      "8" => "plan_general_characteristics"
      "9" => "plan_it_tools"
      "10" => "plan_ops_eval_and_learning"
      "11" => "plan_participants_and_providers"
      "12" => "plan_payments"
      "13" => "plan_cr_tdl"
      "14" => "operational_need"
      "15" => "operational_solution"
      "16" => "operational_solution_subtask"
      "17" => "plan_document_solution_link"
    }
    fallback => "Unknown"
  }
}

output {
  opensearch {
    hosts => ["http://opensearch:9200"]
    ssl => false
    ssl_certificate_verification => false
    index => "change_table_idx"
    document_id => "%{id}"
    doc_as_upsert => true
  }

  stdout { codec => rubydebug }
}