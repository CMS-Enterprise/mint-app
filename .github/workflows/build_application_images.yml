name: Build and Push Application Images

on:
  workflow_call:
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      INFRA_ROLE_TO_ASSUME:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

env:
  EASI_APP_NODE_VERSION: "16.14.0"
  EASI_APP_GO_VERSION: "1.18.3"
  GIT_HASH: ${{ github.sha }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  pre_deps:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          ref: ${{ env.GIT_HASH }}
      - name: Set up node
        uses: actions/setup-node@2fddd8803e2f5c9604345a0b591c3020ee971a93
        with:
          node-version: ${{ env.EASI_APP_NODE_VERSION }}
      - name: Set up go
        uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f
        with:
          go-version: ${{ env.EASI_APP_GO_VERSION }}
      - name: Configure go cache
        id: go-cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        with:
          path: |
            ~/go/pkg/mod
          key: v1-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            v1-go-
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Configure yarn cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ./node_modules
          key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-
      - name: Install yarn dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      - name: Install go modules
        if: steps.go-cache.outputs.cache-hit != 'true'
        run: go mod download
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  anti_virus:
    runs-on: ubuntu-latest
    container:
      image: clamav/clamav:0.104.0
    steps:
      - name: Check out code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          ref: ${{ env.GIT_HASH }}
      - run: clamscan --version
      - run: mkdir -p /store && chown clamav /store
      - run: freshclam --config-file /etc/clamav/freshclam.conf --datadir=/store
      - run: clamscan --recursive --infected --detect-pua=yes --max-scansize=300M --max-filesize=100M --max-recursion=30 --max-files=50000 --tempdir=/tmp --database=/store .
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  build_db_migrate_image:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.INFRA_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push
        uses: docker/build-push-action@v3
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mint-db-migrate
        with:
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.GIT_HASH }}
          file: "Dockerfile.db_migrations"
          platforms: "linux/arm64"
          context: .
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  build_server_image:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.INFRA_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mint-backend
        run: ./scripts/build_and_push_backend.sh
      # - name: Check for vulnerability scan findings
      #   run: |
      #     ./scripts/check_ecr_findings "easi-backend" "$GIT_HASH" "7"
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch
