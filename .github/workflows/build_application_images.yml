name: Build and Push Application Images

on:
  workflow_call:

env:
  GIT_HASH: ${{ github.event.pull_request.head.sha || github.sha }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  GIT_REF_NAME: ${{ github.event.pull_request.head.ref || github.ref }}

permissions:
  id-token: write
  contents: read

jobs:
  anti_virus:
    runs-on: ubuntu-latest
    container:
      image: clamav/clamav:0.104.0
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GIT_HASH }}
      - name: Run clamscan
        run: |
          clamscan --version
          mkdir -p /store && chown clamav /store
          freshclam --config-file /etc/clamav/freshclam.conf --datadir=/store
          clamscan --recursive --infected --detect-pua=yes --max-scansize=300M --max-filesize=100M --max-recursion=30 --max-files=50000 --tempdir=/tmp --database=/store .
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  build_db_migrate_image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2.1.0
        with:
          role-to-assume: ${{ secrets.INFRA_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mint-db-migrate
        with:
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.GIT_HASH }}
          file: "Dockerfile.db_migrations"
          platforms: "linux/amd64"
          context: .
          cache-from: type=gha,scope=${{ env.GIT_REF_NAME }}-db_migrate
          build-args: |
            TAG=9.10-alpine
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  build_db_clean_image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2.1.0
        with:
          role-to-assume: ${{ secrets.INFRA_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mint-db-clean
        with:
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest # Always tag with latest, since this image doesn't contain any build-specific contents
          file: "Dockerfile.db_clean"
          platforms: "linux/amd64"
          cache-from: type=gha,scope=${{ env.GIT_REF_NAME }}-db_clean
          cache-to: type=gha,mode=max,scope=${{ env.GIT_REF_NAME }}-db_clean
          context: .
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  build_server_image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2.1.0
        with:
          role-to-assume: ${{ secrets.INFRA_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Calculate build args
        id: calculate-build-args
        run: |
          APPLICATION_DATETIME="$(date --rfc-3339='seconds' --utc)"
          APPLICATION_TS="$(date --date="$APPLICATION_DATETIME" '+%s')"
          echo "APPLICATION_DATETIME=${APPLICATION_DATETIME}" >> $GITHUB_OUTPUT
          echo "APPLICATION_TS=${APPLICATION_TS}" >> $GITHUB_OUTPUT
      - name: Build and push
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mint-backend
        with:
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.GIT_HASH }}
          file: "Dockerfile"
          platforms: "linux/amd64"
          context: .
          cache-from: type=gha,scope=${{ env.GIT_REF_NAME }}-mint
          build-args: |
            ARG_APPLICATION_DATETIME=${{ steps.calculate-build-args.outputs.APPLICATION_DATETIME }}
            ARG_APPLICATION_TS=${{ steps.calculate-build-args.outputs.APPLICATION_TS }}
            ARG_APPLICATION_VERSION=${{ env.GIT_HASH }}
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  build_faktory_image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.contribsys.com
          username: ${{ secrets.CONTRIBSYS_REPO_USERNAME }}
          password: ${{ secrets.CONTRIBSYS_REPO_PASSWORD }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2.1.0
        with:
          role-to-assume: ${{ secrets.INFRA_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mint-faktory
        with:
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.GIT_HASH }}
          file: "Dockerfile.faktory"
          platforms: "linux/amd64"
          context: .
          cache-to: type=gha,scope=${{ env.GIT_REF_NAME }}-faktory
          cache-from: type=gha,mode=max,scope=${{ env.GIT_REF_NAME }}-faktory
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  build_logstash_image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2.1.0
        with:
          role-to-assume: ${{ secrets.INFRA_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mint-logstash
        with:
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          file: "./logstash/Dockerfile.logstash"
          platforms: "linux/amd64"
          context: "./logstash/"
          cache-to: type=gha,scope=${{ env.GIT_REF_NAME }}-logstash
          cache-from: type=gha,mode=max,scope=${{ env.GIT_REF_NAME }}-logstash
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch
