name: Run Tests

on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK_URL:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_SES_SOURCE_ARN:
        required: true
      OKTA_TEST_PASSWORD:
        required: true
      OKTA_TEST_SECRET:
        required: true
      OKTA_TEST_USERNAME:
        required: true
      AWS_ROLE_TO_ASSUME:
        required: true

env:
  EASI_APP_NODE_VERSION: "16.14.0"
  EASI_APP_GO_VERSION: "1.18.3"
  GIT_HASH: ${{ github.event.pull_request.head.sha || github.sha }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  DOCKER_BUILDKIT: 1

jobs:
  server_test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          ref: ${{ env.GIT_HASH }}
      - name: Configure go cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        with:
          path: |
            ~/go/pkg/mod
          key: v1-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            v1-go-
      - name: Set up go
        uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f
        with:
          go-version: ${{ env.EASI_APP_GO_VERSION }}
      - name: Login to Docker Hub
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-west-2
      - name: Set env vars with direnv
        uses: HatsuneMiku3939/direnv-action@v1
      - name: Get docker images
        run: docker-compose pull
      - name: Docker Layer Caching
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Why does this step need to be done, you ask?
        # docker-compose, by default, allows referenceing other containers in the same network by name, i.e. "minio:9005".
        # Since the tests are being run outside docker, we need to ensure that the host "minio" is reachable, just like it is in the container.
        # There's probably a better way to ensure that discrepencies like this don't occur, but this is what is easiest to implement right now, and hey...
        # Who doesn't like reading a comment like this?
      - name: Add "minio" to /etc/hosts
        run: sudo echo "127.0.0.1 minio" | sudo tee -a /etc/hosts
      - name: Run backend server tests
        run: |
          scripts/dev down
          scripts/dev up:backend
          scripts/dev test:go
      - name: Docker Compose Down
        if: always() # Always spin down the container
        run: |
          scripts/dev down
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@9149ade017c57f86dea2f76a01f8b2d5bd06b10f
      # - name: Run backend server tests
      #   env:
      #     APP_ENV: test
      #     AWS_REGION: us-west-2 # easi app tests expect AWS_REGION instead of AWS_DEFAULT_REGION
      #     AWS_SES_SOURCE: '"EASi Test" <no-reply-test@info.easi.cms.gov>'
      #     AWS_SES_SOURCE_ARN: ${{ secrets.AWS_SES_SOURCE_ARN }}
      #     AWS_S3_FILE_UPLOAD_BUCKET: easi-app-file-uploads
      #     CLIENT_PROTOCOL: http
      #     CLIENT_PORT: 3000
      #     CLIENT_HOSTNAME: localhost:3005
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: easi-db-migrate
      #     GRT_EMAIL: success@simulator.amazonses.com
      #     ACCESSIBILITY_TEAM_EMAIL: success@simulator.amazonses.com
      #     OKTA_CLIENT_ID: 0oad9awvebnsMwWNa297
      #     OKTA_DOMAIN: https://test.idp.idm.cms.gov
      #     OKTA_ISSUER: https://test.idp.idm.cms.gov/oauth2/ausd980kt2CBBzStG297
      #     OKTA_REDIRECT_URI: http://localhost:3005/implicit/callback
      #     OKTA_TEST_PASSWORD: ${{ secrets.OKTA_TEST_PASSWORD }}
      #     OKTA_TEST_SECRET: ${{ secrets.OKTA_TEST_SECRET }}
      #     OKTA_TEST_USERNAME: ${{ secrets.OKTA_TEST_USERNAME }}
      #     PGHOST: localhost
      #     PGPORT: 5432
      #     PGDATABASE: postgres
      #     PGUSER: app_user
      #     PGPASS: supersecretapp
      #     PGSSLMODE: disable
      #     DB_MAX_CONNECTIONS: 20
      #     FLAG_SOURCE: LOCAL
      #   run: |
      #     docker-compose --project-name easi-server-test -f docker-compose.ci_server_test.yml up -d db
      #     docker-compose --project-name easi-server-test -f docker-compose.ci_server_test.yml up --exit-code-from db_migrate db_migrate
      #     ./scripts/build_app
      #     ./scripts/testsuite
      #     docker-compose --project-name easi-server-test -f docker-compose.ci_server_test.yml down
      # - name: Upload backend test artifacts
      #   uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8
      #   with:
      #     name: backend-tests
      #     path: results
      #     retention-days: 14
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  e2e_tests:
    if: ${{ false }} # Disabled until we can pull images to test from ECR
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          ref: ${{ env.GIT_HASH }}
      - name: Set up node
        uses: actions/setup-node@2fddd8803e2f5c9604345a0b591c3020ee971a93
        with:
          node-version: ${{ env.EASI_APP_NODE_VERSION }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Configure yarn cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ./node_modules
          key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-
      - name: Build frontend code
        env:
          REACT_APP_API_ADDRESS: http://easi:8080/api/v1
          REACT_APP_GRAPHQL_ADDRESS: http://easi:8080/api/graph/query
          REACT_APP_APP_ENV: test
          REACT_APP_OKTA_CLIENT_ID: 0oad9awvebnsMwWNa297
          REACT_APP_OKTA_DOMAIN: https://test.idp.idm.cms.gov
          REACT_APP_OKTA_SERVER_ID: ausd980kt2CBBzStG297
          REACT_APP_OKTA_ISSUER: https://test.idp.idm.cms.gov/oauth2/ausd980kt2CBBzStG297
          REACT_APP_OKTA_REDIRECT_URI: http://localhost:3005/implicit/callback
          REACT_APP_LOCAL_AUTH_ENABLED: true
        run: yarn run build
      - name: Login to Docker Hub
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@9149ade017c57f86dea2f76a01f8b2d5bd06b10f
      - name: Run e2e cypress tests
        env:
          APP_ENV: test
          AWS_SES_SOURCE_ARN: ${{ secrets.AWS_SES_SOURCE_ARN }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          OKTA_TEST_PASSWORD: ${{ secrets.OKTA_TEST_PASSWORD }}
          OKTA_TEST_SECRET: ${{ secrets.OKTA_TEST_SECRET }}
          OKTA_TEST_USERNAME: ${{ secrets.OKTA_TEST_USERNAME }}
        run: |
          ./scripts/run-cypress-test-docker
      - name: Upload cypress videos
        if: ${{ always() }}
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8
        with:
          name: cypress-videos
          path: cypress/videos
          retention-days: 14
      - name: Upload cypress screenshots
        if: ${{ always() }}
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: ignore
          retention-days: 14
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          ref: ${{ env.GIT_HASH }}
      - name: Set up node
        uses: actions/setup-node@2fddd8803e2f5c9604345a0b591c3020ee971a93
        with:
          node-version: ${{ env.EASI_APP_NODE_VERSION }}
      - name: Set up go
        uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f
        with:
          go-version: ${{ env.EASI_APP_GO_VERSION }}
      - name: Configure go cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        with:
          path: |
            ~/go/pkg/mod
          key: v1-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            v1-go-
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Configure yarn cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ./node_modules
          key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-
      # go-swagger is used for pre-commit hooks
      - name: Install go-swagger
        id: install-go-swagger
        run: |
          cd /usr/local/bin
          wget -O swagger https://github.com/go-swagger/go-swagger/releases/download/v0.28.0/swagger_linux_amd64
          chmod +x swagger
      - name: Pre-commit checks
        uses: pre-commit/action@v3.0.0
        with:
          extra_args: --all-files
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  client_test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          ref: ${{ env.GIT_HASH }}
      - name: Set up node
        uses: actions/setup-node@2fddd8803e2f5c9604345a0b591c3020ee971a93
        with:
          node-version: ${{ env.EASI_APP_NODE_VERSION }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Configure yarn cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ./node_modules
          key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-
      # Switch to :coverage when we have improved coverage numbers
      # TODO: https://jiraent.cms.gov/browse/EASI-1993
      # - run: yarn test:coverage
      - run: yarn test
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  client_typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v2.3.4
        with:
          ref: ${{ env.GIT_HASH }}
      - name: Set up node
        uses: actions/setup-node@2fddd8803e2f5c9604345a0b591c3020ee971a93 # v2.1.5
        with:
          node-version: ${{ env.EASI_APP_NODE_VERSION }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Configure yarn cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # v2.1.6
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ./node_modules
          key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-
      - name: Run typechecking
        id: typechecker
        # Uses GitHub environment files to store typechecker output and pass to next stage
        # see https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files
        run: |
          yarn build:ts 2>&1 | tee test.log
          result_code=${PIPESTATUS[0]}
          echo 'TS_LOG<<EOF' >> $GITHUB_ENV
          cat test.log >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          exit $result_code
        continue-on-error: true
