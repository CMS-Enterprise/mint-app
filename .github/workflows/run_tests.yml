name: Run Tests

on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK_URL:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true


env:
  GIT_HASH: ${{ github.event.pull_request.head.sha || github.sha }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  DOCKER_BUILDKIT: 1

jobs:
  server_test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GIT_HASH }}
      - name: Set up go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
          cache: true
      - name: Install go modules
        run: go mod download
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set env vars with direnv
        uses: HatsuneMiku3939/direnv-action@v1
      - name: Get docker images
        run: docker-compose pull
        # Why does this step need to be done, you ask?
        # docker-compose, by default, allows referenceing other containers in the same network by name, i.e. "minio:9005".
        # Since the tests are being run outside docker, we need to ensure that the host "minio" is reachable, just like it is in the container.
        # There's probably a better way to ensure that discrepencies like this don't occur, but this is what is easiest to implement right now, and hey...
        # Who doesn't like reading a comment like this?
      - name: Add "minio" to /etc/hosts
        run: sudo echo "127.0.0.1 minio" | sudo tee -a /etc/hosts
      - name: Run backend server tests
        run: |
          export FLAG_SOURCE=FILE
          scripts/dev down
          scripts/dev up:backend
          scripts/dev test:go
      - name: Docker Compose Down
        if: always() # Always spin down the container
        run: |
          scripts/dev down
      # Leaving this commented out for now, but we should consider uploading these artifacts if they're
      # actually useful!
      # - name: Upload backend test artifacts
      #   uses: actions/upload-artifact@v
      #   with:
      #     name: backend-tests
      #     path: results
      #     retention-days: 14
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  e2e_tests:
    if: ${{ false }} # Disabled until we can pull images to test from ECR
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GIT_HASH }}
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: yarn
      - name: Install yarn dependencies
        run: yarn install --immutable
      - name: Build frontend code
        env:
          REACT_APP_API_ADDRESS: http://easi:8080/api/v1
          REACT_APP_GRAPHQL_ADDRESS: http://easi:8080/api/graph/query
          REACT_APP_APP_ENV: testing
          REACT_APP_OKTA_CLIENT_ID: 0oad9awvebnsMwWNa297
          REACT_APP_OKTA_DOMAIN: https://test.idp.idm.cms.gov
          REACT_APP_OKTA_SERVER_ID: ausd980kt2CBBzStG297
          REACT_APP_OKTA_ISSUER: https://test.idp.idm.cms.gov/oauth2/ausd980kt2CBBzStG297
          REACT_APP_OKTA_REDIRECT_URI: http://localhost:3005/implicit/callback
          REACT_APP_LOCAL_AUTH_ENABLED: true
        run: yarn run build
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Run e2e cypress tests
        env:
          APP_ENV: testing
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          OKTA_TEST_PASSWORD: ${{ secrets.OKTA_TEST_PASSWORD }}
          OKTA_TEST_SECRET: ${{ secrets.OKTA_TEST_SECRET }}
          OKTA_TEST_USERNAME: ${{ secrets.OKTA_TEST_USERNAME }}
        run: |
          ./scripts/run-cypress-test-docker
      - name: Upload cypress videos
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: cypress-videos
          path: cypress/videos
          retention-days: 14
      - name: Upload cypress screenshots
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: ignore
          retention-days: 14
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GIT_HASH }}
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: yarn
      - name: Install yarn dependencies
        run: yarn install --immutable
      - name: Set up go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
          cache: true
      - name: Install go modules
        run: go mod download
      # go-swagger is used for pre-commit hooks
      - name: Install go-swagger
        id: install-go-swagger
        run: |
          cd /usr/local/bin
          wget -O swagger https://github.com/go-swagger/go-swagger/releases/download/v0.28.0/swagger_linux_amd64
          chmod +x swagger
      - name: Pre-commit checks
        uses: pre-commit/action@v3.0.0
        with:
          extra_args: --all-files
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  client_test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GIT_HASH }}
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: yarn
      - name: Install yarn dependencies
        run: yarn install --immutable
      # Switch to :coverage when we have improved coverage numbers
      # TODO: https://jiraent.cms.gov/browse/EASI-1993
      # - run: yarn test:coverage
      - run: yarn test
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  client_typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GIT_HASH }}
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: yarn
      - name: Install yarn dependencies
        run: yarn install --immutable
      - name: Run typechecking
        id: typechecker
        # Uses GitHub environment files to store typechecker output and pass to next stage
        # see https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files
        run: |
          yarn build:ts 2>&1 | tee test.log
          result_code=${PIPESTATUS[0]}
          echo 'TS_LOG<<EOF' >> $GITHUB_ENV
          cat test.log >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          exit $result_code
        continue-on-error: true
