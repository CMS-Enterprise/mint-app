name: Run Tests

on:
  workflow_call:
    inputs:
      skip_tests:
        description: 'Skip tests'
        type: boolean
        required: false
        default: false

env:
  GIT_HASH: ${{ github.sha }}
  GIT_REF_NAME: ${{ github.ref }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  POSTGRES_PASSWORD: mysecretpassword
  POSTGRES_USER: postgres
  POSTGRES_DB: postgres
  MINIO_ADDRESS: http://localhost:9005
  MINIO_KEY: minioadmin
  S3_BUCKET: mint-app-file-uploads

jobs:
  skip_tests:
    if: ${{ inputs.skip_tests == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Skipping tests
        run: |
            echo "Skipping tests!"
  build_docker_images:
    if: ${{ inputs.skip_tests == false }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        service_name:
          - mint
          - db_migrate
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.contribsys.com
          username: ${{ secrets.CONTRIBSYS_REPO_USERNAME }}
          password: ${{ secrets.CONTRIBSYS_REPO_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Run buildx bake
        uses: docker/bake-action@v4.4.0
        with:
          files: "docker-compose.backend.yml"
          targets: "${{ matrix.service_name }}"
          set: |
            ${{ matrix.service_name }}.cache-from=type=gha,scope=${{ env.GIT_REF_NAME }}-${{ matrix.service_name }}
            ${{ matrix.service_name }}.cache-to=type=gha,mode=max,scope=${{ env.GIT_REF_NAME }}-${{ matrix.service_name }}

  # This is largely a copy of build_frontend_assets, but it doesn't use an `environment` block
  build_frontend_assets:
    if: ${{ inputs.skip_tests == false }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      - name: Write local env vars for testing
        run: |
          touch .envrc.local
          echo "export FLAG_SOURCE=FILE" >> .envrc.local
          echo "export OKTA_TEST_USERNAME='${{ secrets.OKTA_TEST_USERNAME }}'" >> .envrc.local
          echo "export OKTA_TEST_PASSWORD='${{ secrets.OKTA_TEST_PASSWORD }}'" >> .envrc.local
          echo "export OKTA_TEST_SECRET='${{ secrets.OKTA_TEST_SECRET }}'" >> .envrc.local
      - name: Set env vars with direnv
        uses: HatsuneMiku3939/direnv-action@v1
      - name: yarn install
        run: yarn install --immutable
      - name: Build Frontend Assets
        run: yarn build
      - name: Upload Frontend assets
        uses: actions/upload-artifact@v4
        with:
          name: e2e-frontend-assets
          path: build/
          retention-days: 10
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  server_test:
    if: ${{ inputs.skip_tests == false }}
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14.4
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5437:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 1s
          --health-timeout 1s
          --health-retries 5

      minio:
        image: minio/minio:edge-cicd
        ports:
          - '9005:9000'
        options: >-
          --health-cmd "curl -s http://localhost:9000/minio/health/live"
          --health-interval 1s
          --health-timeout 1s
          --health-retries 5

      faktory:
        image: docker.contribsys.com/contribsys/faktory-ent:latest
        credentials:
          username: ${{ secrets.CONTRIBSYS_REPO_USERNAME }}
          password: ${{ secrets.CONTRIBSYS_REPO_PASSWORD }}
        ports:
          - '7419:7419'
        options: >-
          --health-cmd "wget -nv -t1 --spider http://localhost:7420/stats"
          --health-interval 1s
          --health-timeout 1s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Migrate Database
        uses: joshuaavalon/flyway-action@v3.0.0 # flyway-action 3.0.0 uses flyway v9, which should (if we do our jobs) match what's in Dockerfile.db_clean and Dockerfile.db_migrations
        with:
          url: jdbc:postgresql://postgres:5432/${{ env.POSTGRES_DB }}
          user: ${{ env.POSTGRES_USER }}
          password: ${{ env.POSTGRES_PASSWORD }}
          locations: filesystem:./migrations
        env:
          FLYWAY_SCHEMAS: public
          FLYWAY_DEFAULT_SCHEMA: public

      - name: Make MINIO Bucket
        env:
          AWS_ACCESS_KEY_ID: ${{ env.MINIO_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ env.MINIO_KEY }}
          AWS_DEFAULT_REGION: us-west-2
        run: >-
          aws --endpoint-url ${{ env.MINIO_ADDRESS }}
          s3 mb s3://${{ env.S3_BUCKET }}

      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Install go modules
        run: go mod download

      - name: Set env vars with direnv
        uses: HatsuneMiku3939/direnv-action@v1

      - name: Run backend server tests
        run: |
          go test -short -count=1 -p=1 ./...

      - name: Logout Contribsys Docker Repo
        run: docker logout docker.contribsys.com
        if: always()

      # Leaving this commented out for now, but we should consider uploading these artifacts if they're
      # actually useful!
      # - name: Upload backend test artifacts
      #   uses: actions/upload-artifact@v
      #   with:
      #     name: backend-tests
      #     path: results
      #     retention-days: 14

      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  e2e_tests:
    if: ${{ inputs.skip_tests == false }}
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [build_docker_images, build_frontend_assets]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: yarn
      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Install go modules
        run: go mod download
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.contribsys.com
          username: ${{ secrets.CONTRIBSYS_REPO_USERNAME }}
          password: ${{ secrets.CONTRIBSYS_REPO_PASSWORD }}
      - name: Write local env vars for testing
        run: |
          touch .envrc.local
          echo "export FLAG_SOURCE=FILE" >> .envrc.local
          echo "export OKTA_TEST_USERNAME='${{ secrets.OKTA_TEST_USERNAME }}'" >> .envrc.local
          echo "export OKTA_TEST_PASSWORD='${{ secrets.OKTA_TEST_PASSWORD }}'" >> .envrc.local
          echo "export OKTA_TEST_SECRET='${{ secrets.OKTA_TEST_SECRET }}'" >> .envrc.local
      - name: Set env vars with direnv
        uses: HatsuneMiku3939/direnv-action@v1
      - name: Add "minio" to /etc/hosts
        run: sudo echo "127.0.0.1 minio" | sudo tee -a /etc/hosts
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Run buildx bake
        uses: docker/bake-action@v4.4.0
        with:
          targets: mint,db_migrate
          files: "docker-compose.backend.yml"
          load: true
          set: |
            mint.cache-from=type=gha,scope=${{ env.GIT_REF_NAME }}-mint
            db_migrate.cache-from=type=gha,scope=${{ env.GIT_REF_NAME }}-db_migrate
      - name: Install yarn dependencies
        run: yarn install --immutable
      - name: Start backend services
        run: |
          scripts/dev down
          scripts/dev up:backend
      - name: Download Frontend assets
        uses: actions/download-artifact@v4
        with:
          name: e2e-frontend-assets
          path: build/
      - name: Start frontend
        run: yarn serve &
      - name: Run Cypress Tests
        run: |
          export FLAG_SOURCE=FILE
          yarn cypress run
      - name: Docker Compose Down
        if: always() # Always spin down the container
        run: |
          scripts/dev down
      - name: Upload cypress videos
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: cypress/videos
          retention-days: 14
      - name: Upload cypress screenshots
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: ignore
          retention-days: 14
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  lint:
    if: ${{ inputs.skip_tests == false }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: yarn
      - name: Install yarn dependencies
        run: yarn install --immutable
      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Install go modules
        run: go mod download
      # go-swagger is used for pre-commit hooks
      - name: Install go-swagger
        id: install-go-swagger
        run: |
          cd /usr/local/bin
          wget -O swagger https://github.com/go-swagger/go-swagger/releases/download/v0.28.0/swagger_linux_amd64
          chmod +x swagger
      - name: Pre-commit checks
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: --all-files
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  client_test:
    if: ${{ inputs.skip_tests == false }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: yarn
      - name: Install yarn dependencies
        run: yarn install --immutable
      # Switch to :coverage when we have improved coverage numbers
      # TODO: https://jiraent.cms.gov/browse/EASI-1993
      # - run: yarn test:coverage
      - run: yarn test
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  client_typecheck:
    if: ${{ inputs.skip_tests == false }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: yarn
      - name: Install yarn dependencies
        run: yarn install --immutable
      - name: Run typechecking
        id: typechecker
        # Uses GitHub environment files to store typechecker output and pass to next stage
        # see https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files
        run: |
          yarn build:ts 2>&1 | tee test.log
          result_code=${PIPESTATUS[0]}
          echo 'TS_LOG<<EOF' >> $GITHUB_ENV
          cat test.log >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          exit $result_code
        continue-on-error: true
