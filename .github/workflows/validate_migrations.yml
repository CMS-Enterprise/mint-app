name: Validate Migration Versions

on:
  pull_request:
    # Run on PR events that modify migration files
    types: [opened, reopened, synchronize, ready_for_review]
    paths:
      - 'migrations/V*__*.sql'
  
  # Run on merge queue events - GitHub Enterprise feature
  merge_group:
    # This runs when PR enters the merge queue
    # Tests PR against the queue's temporary branch
    # Automatically prevents race conditions!
  
  # Also run on push to main/master to catch any issues that slip through
  push:
    branches:
      - main
      - master
    paths:
      - 'migrations/V*__*.sql'

# CONFIGURATION OPTIONS:
# 
# Settings ‚Üí Branches ‚Üí Enable "Require merge queue"
# - Automatically serializes merges
# - Runs this check in queue against latest base
# - No manual rebasing needed!
#

# Concurrency strategy:
# - For PRs: Allow parallel validation (each checks against base branch)
# - For merges to main: Serialize to prevent race conditions
concurrency:
  # Use different concurrency groups for PRs vs merges
  group: ${{ github.event_name == 'push' && 'migration-merge-lock' || format('validate-migrations-{0}', github.ref) }}
  cancel-in-progress: false

jobs:
  validate_migration_versions:
    name: Check Migration Version Numbers
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history to compare with base branch
          fetch-depth: 0
      
      - name: Make validation script executable
        run: chmod +x scripts/check_migration_versions.sh
      
      - name: Run migration version validation
        run: |
          # Determine base branch for PRs and merge_group events
          BASE_BRANCH="${{ github.base_ref }}"
          
          # Default to main if base_ref is empty (for push events)
          if [ -z "$BASE_BRANCH" ]; then
            BASE_BRANCH="main"
          fi
          
          # Call the validation script with event type and base branch
          scripts/check_migration_versions.sh "${{ github.event_name }}" "$BASE_BRANCH"
      
      - name: Comment on PR (on failure)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ‚ùå Migration Validation Failed\n\n' +
                    'Your PR contains migration version issues. Please check the workflow logs for details.\n\n' +
                    '**Common issues:**\n' +
                    '- üîÑ Duplicate version numbers (another PR may have been merged with the same version)\n' +
                    '- üìä Non-consecutive versions (please rebase and renumber to the next available version)\n\n' +
                    'See [Migration Validation docs](../blob/main/docs/MIGRATION_VALIDATION.md) for more information.'
            })
