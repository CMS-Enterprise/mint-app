name: Check Migrations

# This workflow validates database migrations by:
# 1. Checking for duplicate migration version numbers
# 2. Ensuring new migrations are consecutive
# 3. Preventing modification or deletion of existing migrations (PRs only)

on:
  pull_request:
    # Run on PR events that modify migration files
    types: [opened, reopened, synchronize, ready_for_review]
    paths:
      - 'migrations/V*__*.sql'
  
  # Run on merge queue events - GitHub Enterprise feature
  merge_group:
    # This runs when PR enters the merge queue
    # Tests PR against the queue's temporary branch
    # Automatically prevents race conditions!
    paths:
      - 'migrations/V*__*.sql'
  
  # Also run on push to main/master to catch any issues that slip through
  push:
    branches:
      - main
      - master
    paths:
      - 'migrations/V*__*.sql'

# CONFIGURATION OPTIONS:
# 
# Settings → Branches → Enable "Require merge queue"
# - Automatically serializes merges
# - Runs this check in queue against latest base
# - No manual rebasing needed!
#

# Concurrency strategy:
# - For PRs: Allow parallel validation (each checks against base branch)
# - For merges to main: Serialize to prevent race conditions
concurrency:
  # Use different concurrency groups for PRs vs merges
  group: ${{ github.event_name == 'push' && 'migration-merge-lock' || format('check-migrations-{0}', github.ref) }}
  cancel-in-progress: false

jobs:
  check_migrations:
    name: Check Migration Version Numbers
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history to compare with base branch
          fetch-depth: 0
      
      - name: Run migration version validation
        run: |
          # Determine base branch for PRs and merge_group events
          BASE_BRANCH="${{ github.base_ref }}"
          
          # Default to main if base_ref is empty (for push events)
          if [ -z "$BASE_BRANCH" ]; then
            BASE_BRANCH="main"
          fi
          
          # Call the validation script with event type and base branch
          scripts/check_migration_versions.sh "${{ github.event_name }}" "$BASE_BRANCH"
      
      - name: Ensure migrations are only added (not modified or deleted)
        if: github.event_name == 'pull_request' || github.event_name == 'merge_group'
        env:
          BASE_REF: ${{ github.base_ref }}
          HEAD_REF: ${{ github.head_ref }}
        run: scripts/check_migration_diff.sh
