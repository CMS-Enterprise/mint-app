name: Deploy to Environment

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
    secrets:
      AWS_ROLE_TO_ASSUME:
        required: true
      SLACK_WEBHOOK_URL:
        required: true
      LD_CLIENT_ID:
        required: true
      OKTA_CLIENT_ID:
        required: true
      OKTA_SERVER_ID:
        required: true
      STATIC_S3_BUCKET:
        required: true
      ECR_REGISTRY:
        required: true

env:
  GIT_HASH: ${{ github.event.pull_request.head.sha || github.sha }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  ENV: ${{ inputs.env }}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    env:
      APP_ENV: ${{ inputs.env }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GIT_HASH }}
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: yarn
      - name: Install yarn dependencies
        run: yarn install --immutable
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      - name: Clean the database
        if: contains(inputs.env, 'dev')
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: mint-db-clean
          NEW_IMAGE_TAG: latest
          TASK_FAMILY: "db-clean-${{ inputs.env }}"
          ECS_CLUSTER: "${{ inputs.env }}-mint-app"
          SECURITY_GROUP_NAME: "ecs-db-clean-${{ inputs.env }}"
        run: |
          export TASK_REVISION=$(./scripts/update_ecs_task_definition.sh)
          ./scripts/run_ecs_task.sh
      - name: Run database migrations
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: mint-db-migrate
          NEW_IMAGE_TAG: ${{ env.GIT_HASH }}
          TASK_FAMILY: "db-migrate-${{ inputs.env }}"
          ECS_CLUSTER: "${{ inputs.env }}-mint-app"
          SECURITY_GROUP_NAME: "ecs-db-migrate-${{ inputs.env }}"
        run: |
          export TASK_REVISION=$(./scripts/update_ecs_task_definition.sh)
          ./scripts/run_ecs_task.sh
      # - name: Backup the database
      #   if: contains(inputs.env, 'impl') || contains(inputs.env, 'prod')
      #   run: |
      #     ./scripts/rds-snapshot-app-db
      - name: Deploy Faktory ECS service
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: mint-faktory
          TASK_FAMILY: "mint-faktory-${{ inputs.env }}" # TODO Confirm with Azeez
          ECS_CLUSTER: "${{ inputs.env }}-mint-faktory" # TODO Confirm with Azeez
          SERVICE_NAME: mint-faktory # TODO Confirm with Azeez
        run: |
          export TASK_REVISION=$(./scripts/update_ecs_task_definition.sh)
          ./scripts/deploy_ecs_service.sh
      - name: Deploy MINT ECS service
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: mint-backend
          TASK_FAMILY: "mint-app-${{ inputs.env }}"
          ECS_CLUSTER: "${{ inputs.env }}-mint-app"
          SERVICE_NAME: mint-app
        run: |
          export TASK_REVISION=$(./scripts/update_ecs_task_definition.sh)
          ./scripts/deploy_ecs_service.sh
      - name: Wait for /healthcheck to return new version
        env:
          APP_ENV: ${{ inputs.env }}
          NEW_IMAGE_TAG: ${{ env.GIT_HASH }}
        run: |
          ./scripts/healthcheck "$NEW_IMAGE_TAG"
      - name: Build static assets and release to S3
        env:
          APP_ENV: ${{ inputs.env }}
          LD_CLIENT_ID: ${{ secrets.LD_CLIENT_ID }}
          OKTA_CLIENT_ID: ${{ secrets.OKTA_CLIENT_ID }}
          OKTA_SERVER_ID: ${{ secrets.OKTA_SERVER_ID }}
          STATIC_S3_BUCKET: ${{ secrets.STATIC_S3_BUCKET }}
        run: |
          ./scripts/release_static
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch
