name: Deploy to Environment

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
    secrets:
      AWS_ROLE_TO_ASSUME:
        required: true
      SLACK_WEBHOOK_URL:
        required: true
      LD_CLIENT_ID:
        required: true
      OKTA_CLIENT_ID:
        required: true
      OKTA_SERVER_ID:
        required: true
      STATIC_S3_BUCKET:
        required: true
      ECR_REGISTRY:
        required: true

env:
  MINT_APP_NODE_VERSION: "16.14.0"
  MINT_APP_GO_VERSION: "1.18.3"
  GIT_HASH: ${{ github.event.pull_request.head.sha || github.sha }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  ENV: ${{ inputs.env }}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    env:
      APP_ENV: ${{ inputs.env }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.MINT_APP_NODE_VERSION }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Configure yarn cache
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ./node_modules
          key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      # - name: Clean the database
      #   if: contains(inputs.env, 'dev')
      #   run: |
      #     ./scripts/db_lambda_invoke "easi-app-db-clean-tmp" "2" "easi-app-db-clean"
      # - name: Backup the database
      #   if: contains(inputs.env, 'impl') || contains(inputs.env, 'prod')
      #   run: |
      #     ./scripts/rds-snapshot-app-db
      # - name: Run migrations
      #   env:
      #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      #     ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      #     ECR_REPOSITORY: easi-db-migrate
      #     LAMBDA_VERSION: ${{ inputs.lambda_version }}
      #     ENV: ${{ inputs.env }}
      #   run: |
      #     ./scripts/deploy_service "easi-app-db-migrate" "$ENV-ecs-manager-docker" "$LAMBDA_VERSION" "easi-db-migrate" "$ECR_REGISTRY/$ECR_REPOSITORY:$GIT_HASH"
      #     ./scripts/db_lambda_invoke "$ENV-ecs-manager-docker" "$LAMBDA_VERSION" "easi-app-db-migrate"
      - name: Deploy ECS service
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: mint-backend
          NEW_IMAGE_TAG: ${{ env.GIT_HASH }}
          TASK_FAMILY: "mint-app-${{ inputs.env }}"
          AWS_REGION: us-east-1
          ECS_CLUSTER: "${{ inputs.env }}-mint-app"
          SERVICE_NAME: mint-app
          APP_ENV: ${{ inputs.env }}
        run: |
          ./scripts/update_ecs_task_definition.sh
      - name: Build static assets and release to S3
        env:
          APP_ENV: ${{ inputs.env }}
          LD_CLIENT_ID: ${{ secrets.LD_CLIENT_ID }}
          OKTA_CLIENT_ID: ${{ secrets.OKTA_CLIENT_ID }}
          OKTA_SERVER_ID: ${{ secrets.OKTA_SERVER_ID }}
          STATIC_S3_BUCKET: ${{ secrets.STATIC_S3_BUCKET }}
        run: |
          ./scripts/release_static
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch
