name: Deploy to Environment

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string

env:
  GIT_HASH: ${{ github.sha }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  ENV: ${{ inputs.env }}

permissions:
  id-token: write
  contents: read

jobs:
  confirm_deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}_gate
    steps:
      - name: Confirm deploy
        run: |
          echo "Deploy confirmed! ðŸš€"

  database_actions:
    runs-on: ubuntu-latest
    needs: [confirm_deploy]
    environment: ${{ inputs.env }}
    env:
      APP_ENV: ${{ inputs.env }}
    steps:
      - name: Check out code
        uses: actions/checkout@v5
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      - name: Backup the database
        if: contains(inputs.env, 'impl') || contains(inputs.env, 'prod')
        run: |
          ./scripts/rds-snapshot-app-db.sh    
      - name: Clean the database
        if:  ${{ contains(inputs.env, 'dev') && vars.ENABLE_DEV_DB_CLEAN == '1' }}
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: mint-db-clean
          NEW_IMAGE_TAG: latest
          TASK_FAMILY: "db-clean-${{ inputs.env }}"
          ECS_CLUSTER: "${{ inputs.env }}-mint-app"
          SECURITY_GROUP_NAME: "ecs-db-clean-${{ inputs.env }}"
        run: |
          export TASK_REVISION=$(./scripts/update_ecs_task_definition.sh)
          ./scripts/run_ecs_task.sh          
      - name: Run database migrations
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: mint-db-migrate
          NEW_IMAGE_TAG: ${{ env.GIT_HASH }}
          TASK_FAMILY: "db-migrate-${{ inputs.env }}"
          ECS_CLUSTER: "${{ inputs.env }}-mint-app"
          SECURITY_GROUP_NAME: "ecs-db-migrate-${{ inputs.env }}"
        run: |
          export TASK_REVISION=$(./scripts/update_ecs_task_definition.sh)
          ./scripts/run_ecs_task.sh

  deploy_backend:
    needs: [database_actions]
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    env:
      APP_ENV: ${{ inputs.env }}
    steps:
      - name: Check out code
        uses: actions/checkout@v5
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      - name: Deploy MINT ECS service
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: mint-backend
          NEW_IMAGE_TAG: ${{ env.GIT_HASH }}
          TASK_FAMILY: "mint-app-${{ inputs.env }}"
          ECS_CLUSTER: "${{ inputs.env }}-mint-app"
          SERVICE_NAME: mint-app
        run: |
          export TASK_REVISION=$(./scripts/update_ecs_task_definition.sh)
          ./scripts/deploy_ecs_service.sh
      - name: Wait for /healthcheck to return new version
        env:
          APP_ENV: ${{ inputs.env }}
          NEW_IMAGE_TAG: ${{ env.GIT_HASH }}
        run: |
          ./scripts/healthcheck "$NEW_IMAGE_TAG"
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  deploy_frontend:
    needs: [database_actions]
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    env:
      APP_ENV: ${{ inputs.env }}
    steps:
      - name: Check out code
        uses: actions/checkout@v5
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      - name: Download Frontend assets
        uses: actions/download-artifact@v5
        with:
          name: ${{ inputs.env }}-frontend-assets
          path: build/
      - name: Release frontend assets to S3
        env:
          STATIC_S3_BUCKET: ${{ secrets.STATIC_S3_BUCKET }}
        run: |
          ./scripts/release_static.sh
      - name: Invalidate CloudFront cache 
        run: |
          ./scripts/invalidate_cloudfront_cache.sh
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch
