// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/authentication/principal.go

// Package mockauthentication is a generated GoMock package.
package mockauthentication

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	authentication "github.com/cmsgov/mint-app/pkg/authentication"
)

// MockPrincipal is a mock of Principal interface.
type MockPrincipal struct {
	ctrl     *gomock.Controller
	recorder *MockPrincipalMockRecorder
}

// MockPrincipalMockRecorder is the mock recorder for MockPrincipal.
type MockPrincipalMockRecorder struct {
	mock *MockPrincipal
}

// NewMockPrincipal creates a new mock instance.
func NewMockPrincipal(ctrl *gomock.Controller) *MockPrincipal {
	mock := &MockPrincipal{ctrl: ctrl}
	mock.recorder = &MockPrincipalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrincipal) EXPECT() *MockPrincipalMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockPrincipal) Account() *authentication.UserAccount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(*authentication.UserAccount)
	return ret0
}

// Account indicates an expected call of Account.
func (mr *MockPrincipalMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockPrincipal)(nil).Account))
}

// AllowASSESSMENT mocks base method.
func (m *MockPrincipal) AllowASSESSMENT() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowASSESSMENT")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowASSESSMENT indicates an expected call of AllowASSESSMENT.
func (mr *MockPrincipalMockRecorder) AllowASSESSMENT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowASSESSMENT", reflect.TypeOf((*MockPrincipal)(nil).AllowASSESSMENT))
}

// AllowMAC mocks base method.
func (m *MockPrincipal) AllowMAC() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowMAC")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowMAC indicates an expected call of AllowMAC.
func (mr *MockPrincipalMockRecorder) AllowMAC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowMAC", reflect.TypeOf((*MockPrincipal)(nil).AllowMAC))
}

// AllowNonCMSUser mocks base method.
func (m *MockPrincipal) AllowNonCMSUser() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowNonCMSUser")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowNonCMSUser indicates an expected call of AllowNonCMSUser.
func (mr *MockPrincipalMockRecorder) AllowNonCMSUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowNonCMSUser", reflect.TypeOf((*MockPrincipal)(nil).AllowNonCMSUser))
}

// AllowUSER mocks base method.
func (m *MockPrincipal) AllowUSER() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowUSER")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowUSER indicates an expected call of AllowUSER.
func (mr *MockPrincipalMockRecorder) AllowUSER() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowUSER", reflect.TypeOf((*MockPrincipal)(nil).AllowUSER))
}

// ID mocks base method.
func (m *MockPrincipal) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockPrincipalMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPrincipal)(nil).ID))
}

// MustAccount mocks base method.
func (m *MockPrincipal) MustAccount() (*authentication.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustAccount")
	ret0, _ := ret[0].(*authentication.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MustAccount indicates an expected call of MustAccount.
func (mr *MockPrincipalMockRecorder) MustAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustAccount", reflect.TypeOf((*MockPrincipal)(nil).MustAccount))
}

// String mocks base method.
func (m *MockPrincipal) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockPrincipalMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockPrincipal)(nil).String))
}
