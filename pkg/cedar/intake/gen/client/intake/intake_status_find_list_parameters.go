// Code generated by go-swagger; DO NOT EDIT.

package intake

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewIntakeStatusFindListParams creates a new IntakeStatusFindListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewIntakeStatusFindListParams() *IntakeStatusFindListParams {
	return &IntakeStatusFindListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewIntakeStatusFindListParamsWithTimeout creates a new IntakeStatusFindListParams object
// with the ability to set a timeout on a request.
func NewIntakeStatusFindListParamsWithTimeout(timeout time.Duration) *IntakeStatusFindListParams {
	return &IntakeStatusFindListParams{
		timeout: timeout,
	}
}

// NewIntakeStatusFindListParamsWithContext creates a new IntakeStatusFindListParams object
// with the ability to set a context for a request.
func NewIntakeStatusFindListParamsWithContext(ctx context.Context) *IntakeStatusFindListParams {
	return &IntakeStatusFindListParams{
		Context: ctx,
	}
}

// NewIntakeStatusFindListParamsWithHTTPClient creates a new IntakeStatusFindListParams object
// with the ability to set a custom HTTPClient for a request.
func NewIntakeStatusFindListParamsWithHTTPClient(client *http.Client) *IntakeStatusFindListParams {
	return &IntakeStatusFindListParams{
		HTTPClient: client,
	}
}

/* IntakeStatusFindListParams contains all the parameters to send to the API endpoint
   for the intake status find list operation.

   Typically these are written to a http.Request.
*/
type IntakeStatusFindListParams struct {

	/* CedarStatus.

	   CEDAR status describing the outcome of parsing, validation, and mapping of the payload
	*/
	CedarStatus string

	/* ClientCreatedStartDate.

	   The starting point to start searching for records using the clientCreatedDate value.

	   Format: date-time
	*/
	ClientCreatedStartDate *strfmt.DateTime

	/* PageNumber.

	   Page number to return. If used, pageSize must also be provided.
	*/
	PageNumber *string

	/* PageSize.

	   Number of results to return per page. If used, pageNumber must also be provided.
	*/
	PageSize *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the intake status find list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IntakeStatusFindListParams) WithDefaults() *IntakeStatusFindListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the intake status find list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IntakeStatusFindListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the intake status find list params
func (o *IntakeStatusFindListParams) WithTimeout(timeout time.Duration) *IntakeStatusFindListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the intake status find list params
func (o *IntakeStatusFindListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the intake status find list params
func (o *IntakeStatusFindListParams) WithContext(ctx context.Context) *IntakeStatusFindListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the intake status find list params
func (o *IntakeStatusFindListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the intake status find list params
func (o *IntakeStatusFindListParams) WithHTTPClient(client *http.Client) *IntakeStatusFindListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the intake status find list params
func (o *IntakeStatusFindListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCedarStatus adds the cedarStatus to the intake status find list params
func (o *IntakeStatusFindListParams) WithCedarStatus(cedarStatus string) *IntakeStatusFindListParams {
	o.SetCedarStatus(cedarStatus)
	return o
}

// SetCedarStatus adds the cedarStatus to the intake status find list params
func (o *IntakeStatusFindListParams) SetCedarStatus(cedarStatus string) {
	o.CedarStatus = cedarStatus
}

// WithClientCreatedStartDate adds the clientCreatedStartDate to the intake status find list params
func (o *IntakeStatusFindListParams) WithClientCreatedStartDate(clientCreatedStartDate *strfmt.DateTime) *IntakeStatusFindListParams {
	o.SetClientCreatedStartDate(clientCreatedStartDate)
	return o
}

// SetClientCreatedStartDate adds the clientCreatedStartDate to the intake status find list params
func (o *IntakeStatusFindListParams) SetClientCreatedStartDate(clientCreatedStartDate *strfmt.DateTime) {
	o.ClientCreatedStartDate = clientCreatedStartDate
}

// WithPageNumber adds the pageNumber to the intake status find list params
func (o *IntakeStatusFindListParams) WithPageNumber(pageNumber *string) *IntakeStatusFindListParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the intake status find list params
func (o *IntakeStatusFindListParams) SetPageNumber(pageNumber *string) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the intake status find list params
func (o *IntakeStatusFindListParams) WithPageSize(pageSize *string) *IntakeStatusFindListParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the intake status find list params
func (o *IntakeStatusFindListParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *IntakeStatusFindListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param cedarStatus
	qrCedarStatus := o.CedarStatus
	qCedarStatus := qrCedarStatus
	if qCedarStatus != "" {

		if err := r.SetQueryParam("cedarStatus", qCedarStatus); err != nil {
			return err
		}
	}

	if o.ClientCreatedStartDate != nil {

		// query param clientCreatedStartDate
		var qrClientCreatedStartDate strfmt.DateTime

		if o.ClientCreatedStartDate != nil {
			qrClientCreatedStartDate = *o.ClientCreatedStartDate
		}
		qClientCreatedStartDate := qrClientCreatedStartDate.String()
		if qClientCreatedStartDate != "" {

			if err := r.SetQueryParam("clientCreatedStartDate", qClientCreatedStartDate); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber string

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize string

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
