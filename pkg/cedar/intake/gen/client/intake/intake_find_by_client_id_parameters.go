// Code generated by go-swagger; DO NOT EDIT.

package intake

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewIntakeFindByClientIDParams creates a new IntakeFindByClientIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewIntakeFindByClientIDParams() *IntakeFindByClientIDParams {
	return &IntakeFindByClientIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewIntakeFindByClientIDParamsWithTimeout creates a new IntakeFindByClientIDParams object
// with the ability to set a timeout on a request.
func NewIntakeFindByClientIDParamsWithTimeout(timeout time.Duration) *IntakeFindByClientIDParams {
	return &IntakeFindByClientIDParams{
		timeout: timeout,
	}
}

// NewIntakeFindByClientIDParamsWithContext creates a new IntakeFindByClientIDParams object
// with the ability to set a context for a request.
func NewIntakeFindByClientIDParamsWithContext(ctx context.Context) *IntakeFindByClientIDParams {
	return &IntakeFindByClientIDParams{
		Context: ctx,
	}
}

// NewIntakeFindByClientIDParamsWithHTTPClient creates a new IntakeFindByClientIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewIntakeFindByClientIDParamsWithHTTPClient(client *http.Client) *IntakeFindByClientIDParams {
	return &IntakeFindByClientIDParams{
		HTTPClient: client,
	}
}

/* IntakeFindByClientIDParams contains all the parameters to send to the API endpoint
   for the intake find by client Id operation.

   Typically these are written to a http.Request.
*/
type IntakeFindByClientIDParams struct {

	/* ClientStatus.

	   Client's status associated with the object being transmitted, i.e. Initiated, Final, etc.
	*/
	ClientStatus string

	/* ID.

	   An intake ID assigned by the client system
	*/
	ID string

	/* Version.

	   The version associated with the object in the body. This value can be incremented in the event a transaction needs to be resubmitted.
	*/
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the intake find by client Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IntakeFindByClientIDParams) WithDefaults() *IntakeFindByClientIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the intake find by client Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IntakeFindByClientIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the intake find by client Id params
func (o *IntakeFindByClientIDParams) WithTimeout(timeout time.Duration) *IntakeFindByClientIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the intake find by client Id params
func (o *IntakeFindByClientIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the intake find by client Id params
func (o *IntakeFindByClientIDParams) WithContext(ctx context.Context) *IntakeFindByClientIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the intake find by client Id params
func (o *IntakeFindByClientIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the intake find by client Id params
func (o *IntakeFindByClientIDParams) WithHTTPClient(client *http.Client) *IntakeFindByClientIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the intake find by client Id params
func (o *IntakeFindByClientIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientStatus adds the clientStatus to the intake find by client Id params
func (o *IntakeFindByClientIDParams) WithClientStatus(clientStatus string) *IntakeFindByClientIDParams {
	o.SetClientStatus(clientStatus)
	return o
}

// SetClientStatus adds the clientStatus to the intake find by client Id params
func (o *IntakeFindByClientIDParams) SetClientStatus(clientStatus string) {
	o.ClientStatus = clientStatus
}

// WithID adds the id to the intake find by client Id params
func (o *IntakeFindByClientIDParams) WithID(id string) *IntakeFindByClientIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the intake find by client Id params
func (o *IntakeFindByClientIDParams) SetID(id string) {
	o.ID = id
}

// WithVersion adds the version to the intake find by client Id params
func (o *IntakeFindByClientIDParams) WithVersion(version string) *IntakeFindByClientIDParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the intake find by client Id params
func (o *IntakeFindByClientIDParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *IntakeFindByClientIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param clientStatus
	qrClientStatus := o.ClientStatus
	qClientStatus := qrClientStatus
	if qClientStatus != "" {

		if err := r.SetQueryParam("clientStatus", qClientStatus); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// query param version
	qrVersion := o.Version
	qVersion := qrVersion
	if qVersion != "" {

		if err := r.SetQueryParam("version", qVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
