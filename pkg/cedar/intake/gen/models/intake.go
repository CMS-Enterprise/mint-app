// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Intake intake
//
// swagger:model Intake
type Intake struct {

	// body
	// Required: true
	Body *string `json:"body"`

	// body format
	// Required: true
	// Enum: [JSON XML]
	BodyFormat *string `json:"bodyFormat"`

	// cedar created date
	// Required: true
	// Format: date-time
	CedarCreatedDate *strfmt.DateTime `json:"cedarCreatedDate"`

	// cedar Id
	// Required: true
	CedarID *string `json:"cedarId"`

	// cedar last updated date
	// Format: date-time
	CedarLastUpdatedDate strfmt.DateTime `json:"cedarLastUpdatedDate,omitempty"`

	// cedar status
	// Required: true
	CedarStatus *string `json:"cedarStatus"`

	// cedar status message
	CedarStatusMessage string `json:"cedarStatusMessage,omitempty"`

	// client created date
	// Required: true
	// Format: date-time
	ClientCreatedDate *strfmt.DateTime `json:"clientCreatedDate"`

	// client Id
	// Required: true
	ClientID *string `json:"clientId"`

	// client last updated date
	// Format: date-time
	ClientLastUpdatedDate strfmt.DateTime `json:"clientLastUpdatedDate,omitempty"`

	// client status
	// Required: true
	ClientStatus *string `json:"clientStatus"`

	// schema
	// Required: true
	Schema *string `json:"schema"`

	// type
	// Required: true
	Type *string `json:"type"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this intake
func (m *Intake) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBodyFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCedarCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCedarID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCedarLastUpdatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCedarStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientLastUpdatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Intake) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

var intakeTypeBodyFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["JSON","XML"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		intakeTypeBodyFormatPropEnum = append(intakeTypeBodyFormatPropEnum, v)
	}
}

const (

	// IntakeBodyFormatJSON captures enum value "JSON"
	IntakeBodyFormatJSON string = "JSON"

	// IntakeBodyFormatXML captures enum value "XML"
	IntakeBodyFormatXML string = "XML"
)

// prop value enum
func (m *Intake) validateBodyFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, intakeTypeBodyFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Intake) validateBodyFormat(formats strfmt.Registry) error {

	if err := validate.Required("bodyFormat", "body", m.BodyFormat); err != nil {
		return err
	}

	// value enum
	if err := m.validateBodyFormatEnum("bodyFormat", "body", *m.BodyFormat); err != nil {
		return err
	}

	return nil
}

func (m *Intake) validateCedarCreatedDate(formats strfmt.Registry) error {

	if err := validate.Required("cedarCreatedDate", "body", m.CedarCreatedDate); err != nil {
		return err
	}

	if err := validate.FormatOf("cedarCreatedDate", "body", "date-time", m.CedarCreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Intake) validateCedarID(formats strfmt.Registry) error {

	if err := validate.Required("cedarId", "body", m.CedarID); err != nil {
		return err
	}

	return nil
}

func (m *Intake) validateCedarLastUpdatedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CedarLastUpdatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("cedarLastUpdatedDate", "body", "date-time", m.CedarLastUpdatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Intake) validateCedarStatus(formats strfmt.Registry) error {

	if err := validate.Required("cedarStatus", "body", m.CedarStatus); err != nil {
		return err
	}

	return nil
}

func (m *Intake) validateClientCreatedDate(formats strfmt.Registry) error {

	if err := validate.Required("clientCreatedDate", "body", m.ClientCreatedDate); err != nil {
		return err
	}

	if err := validate.FormatOf("clientCreatedDate", "body", "date-time", m.ClientCreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Intake) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("clientId", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *Intake) validateClientLastUpdatedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientLastUpdatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("clientLastUpdatedDate", "body", "date-time", m.ClientLastUpdatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Intake) validateClientStatus(formats strfmt.Registry) error {

	if err := validate.Required("clientStatus", "body", m.ClientStatus); err != nil {
		return err
	}

	return nil
}

func (m *Intake) validateSchema(formats strfmt.Registry) error {

	if err := validate.Required("schema", "body", m.Schema); err != nil {
		return err
	}

	return nil
}

func (m *Intake) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Intake) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this intake based on context it is used
func (m *Intake) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Intake) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Intake) UnmarshalBinary(b []byte) error {
	var res Intake
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
