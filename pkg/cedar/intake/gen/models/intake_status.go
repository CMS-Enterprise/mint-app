// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntakeStatus intake status
//
// swagger:model IntakeStatus
type IntakeStatus struct {

	// Unqiue ID associated with the object in body
	// Required: true
	CedarID *string `json:"cedarId"`

	// CEDAR status describing the outcome of parsing, validation, and mapping of the payload
	// Required: true
	CedarStatus *string `json:"cedarStatus"`

	// Message related to errors with the parsing, validation, and mapping of the payload (if applicable)
	CedarStatusMessage string `json:"cedarStatusMessage,omitempty"`

	// Unique ID assigned by CEDAR
	// Required: true
	ClientID *string `json:"clientId"`

	// The version associated with the object in the body. This value can be incremented in the event a transaction needs to be resubmitted.
	Version string `json:"version,omitempty"`
}

// Validate validates this intake status
func (m *IntakeStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCedarID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCedarStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntakeStatus) validateCedarID(formats strfmt.Registry) error {

	if err := validate.Required("cedarId", "body", m.CedarID); err != nil {
		return err
	}

	return nil
}

func (m *IntakeStatus) validateCedarStatus(formats strfmt.Registry) error {

	if err := validate.Required("cedarStatus", "body", m.CedarStatus); err != nil {
		return err
	}

	return nil
}

func (m *IntakeStatus) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("clientId", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this intake status based on context it is used
func (m *IntakeStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IntakeStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntakeStatus) UnmarshalBinary(b []byte) error {
	var res IntakeStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
