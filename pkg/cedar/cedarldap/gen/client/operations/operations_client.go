// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Authenticate(params *AuthenticateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthenticateOK, error)

	HealthCheck(params *HealthCheckParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HealthCheckOK, error)

	Person(params *PersonParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PersonOK, error)

	PersonIds(params *PersonIdsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PersonIdsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Authenticate Retturn success or failure if the provided credentials are valid.
*/
func (a *Client) Authenticate(params *AuthenticateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AuthenticateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "authenticate",
		Method:             "POST",
		PathPattern:        "/authenticate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthenticateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authenticate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HealthCheck Return success
*/
func (a *Client) HealthCheck(params *HealthCheckParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HealthCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "healthCheck",
		Method:             "GET",
		PathPattern:        "/healthCheck",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HealthCheckReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HealthCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for healthCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Person Retrieves a list of people based on search criteria.
*/
func (a *Client) Person(params *PersonParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PersonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPersonParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "person",
		Method:             "GET",
		PathPattern:        "/person",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PersonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PersonOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for person: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PersonIds Retrieves a list of people based on EUA user IDs.
*/
func (a *Client) PersonIds(params *PersonIdsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PersonIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPersonIdsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "personIds",
		Method:             "GET",
		PathPattern:        "/person/{ids}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PersonIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PersonIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for personIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
