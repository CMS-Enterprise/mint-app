// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAuthenticateParams creates a new AuthenticateParams object
// with the default values initialized.
func NewAuthenticateParams() *AuthenticateParams {
	var ()
	return &AuthenticateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAuthenticateParamsWithTimeout creates a new AuthenticateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAuthenticateParamsWithTimeout(timeout time.Duration) *AuthenticateParams {
	var ()
	return &AuthenticateParams{

		timeout: timeout,
	}
}

// NewAuthenticateParamsWithContext creates a new AuthenticateParams object
// with the default values initialized, and the ability to set a context for a request
func NewAuthenticateParamsWithContext(ctx context.Context) *AuthenticateParams {
	var ()
	return &AuthenticateParams{

		Context: ctx,
	}
}

// NewAuthenticateParamsWithHTTPClient creates a new AuthenticateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAuthenticateParamsWithHTTPClient(client *http.Client) *AuthenticateParams {
	var ()
	return &AuthenticateParams{
		HTTPClient: client,
	}
}

/*AuthenticateParams contains all the parameters to send to the API endpoint
for the authenticate operation typically these are written to a http.Request
*/
type AuthenticateParams struct {

	/*Credentials*/
	Credentials string
	/*Principal*/
	Principal string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the authenticate params
func (o *AuthenticateParams) WithTimeout(timeout time.Duration) *AuthenticateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the authenticate params
func (o *AuthenticateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the authenticate params
func (o *AuthenticateParams) WithContext(ctx context.Context) *AuthenticateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the authenticate params
func (o *AuthenticateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the authenticate params
func (o *AuthenticateParams) WithHTTPClient(client *http.Client) *AuthenticateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the authenticate params
func (o *AuthenticateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCredentials adds the credentials to the authenticate params
func (o *AuthenticateParams) WithCredentials(credentials string) *AuthenticateParams {
	o.SetCredentials(credentials)
	return o
}

// SetCredentials adds the credentials to the authenticate params
func (o *AuthenticateParams) SetCredentials(credentials string) {
	o.Credentials = credentials
}

// WithPrincipal adds the principal to the authenticate params
func (o *AuthenticateParams) WithPrincipal(principal string) *AuthenticateParams {
	o.SetPrincipal(principal)
	return o
}

// SetPrincipal adds the principal to the authenticate params
func (o *AuthenticateParams) SetPrincipal(principal string) {
	o.Principal = principal
}

// WriteToRequest writes these params to a swagger request
func (o *AuthenticateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param credentials
	qrCredentials := o.Credentials
	qCredentials := qrCredentials
	if qCredentials != "" {
		if err := r.SetQueryParam("credentials", qCredentials); err != nil {
			return err
		}
	}

	// query param principal
	qrPrincipal := o.Principal
	qPrincipal := qrPrincipal
	if qPrincipal != "" {
		if err := r.SetQueryParam("principal", qPrincipal); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
