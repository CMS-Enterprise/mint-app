// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cmsgov/easi-app/pkg/cedar/core/gen/models"
)

// RoleFindByIDReader is a Reader for the RoleFindByID structure.
type RoleFindByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RoleFindByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRoleFindByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRoleFindByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRoleFindByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRoleFindByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRoleFindByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRoleFindByIDOK creates a RoleFindByIDOK with default headers values
func NewRoleFindByIDOK() *RoleFindByIDOK {
	return &RoleFindByIDOK{}
}

/* RoleFindByIDOK describes a response with status code 200, with default header values.

OK
*/
type RoleFindByIDOK struct {
	Payload *models.RoleFindResponse
}

func (o *RoleFindByIDOK) Error() string {
	return fmt.Sprintf("[GET /role][%d] roleFindByIdOK  %+v", 200, o.Payload)
}
func (o *RoleFindByIDOK) GetPayload() *models.RoleFindResponse {
	return o.Payload
}

func (o *RoleFindByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoleFindResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoleFindByIDBadRequest creates a RoleFindByIDBadRequest with default headers values
func NewRoleFindByIDBadRequest() *RoleFindByIDBadRequest {
	return &RoleFindByIDBadRequest{}
}

/* RoleFindByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RoleFindByIDBadRequest struct {
	Payload *models.Response
}

func (o *RoleFindByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /role][%d] roleFindByIdBadRequest  %+v", 400, o.Payload)
}
func (o *RoleFindByIDBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *RoleFindByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoleFindByIDUnauthorized creates a RoleFindByIDUnauthorized with default headers values
func NewRoleFindByIDUnauthorized() *RoleFindByIDUnauthorized {
	return &RoleFindByIDUnauthorized{}
}

/* RoleFindByIDUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type RoleFindByIDUnauthorized struct {
	Payload *models.Response
}

func (o *RoleFindByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /role][%d] roleFindByIdUnauthorized  %+v", 401, o.Payload)
}
func (o *RoleFindByIDUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *RoleFindByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoleFindByIDNotFound creates a RoleFindByIDNotFound with default headers values
func NewRoleFindByIDNotFound() *RoleFindByIDNotFound {
	return &RoleFindByIDNotFound{}
}

/* RoleFindByIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RoleFindByIDNotFound struct {
	Payload *models.Response
}

func (o *RoleFindByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /role][%d] roleFindByIdNotFound  %+v", 404, o.Payload)
}
func (o *RoleFindByIDNotFound) GetPayload() *models.Response {
	return o.Payload
}

func (o *RoleFindByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoleFindByIDInternalServerError creates a RoleFindByIDInternalServerError with default headers values
func NewRoleFindByIDInternalServerError() *RoleFindByIDInternalServerError {
	return &RoleFindByIDInternalServerError{}
}

/* RoleFindByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RoleFindByIDInternalServerError struct {
	Payload *models.Response
}

func (o *RoleFindByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /role][%d] roleFindByIdInternalServerError  %+v", 500, o.Payload)
}
func (o *RoleFindByIDInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *RoleFindByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
