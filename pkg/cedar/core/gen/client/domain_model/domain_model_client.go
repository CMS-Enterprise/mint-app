// Code generated by go-swagger; DO NOT EDIT.

package domain_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new domain model API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for domain model API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DomainModelFindList(params *DomainModelFindListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DomainModelFindListOK, error)

	DomainModelLevelFindList(params *DomainModelLevelFindListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DomainModelLevelFindListOK, error)

	DomainModelNameFindList(params *DomainModelNameFindListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DomainModelNameFindListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DomainModelFindList retrieves reference model information about enterprise architecture assets

  The Federal Enterprise Architecture Framework (FEAF) v2 describes a suite of tools to help government planners implement the Common Approach. At its core is the Consolidated Reference Model (CRM), which equips OMB and Federal agencies with a common language and framework to describe and analyze investments. It consists of a set of interrelated “reference models” that describe the six subarchitecture domains in the framework: Strategy, Business, Data, Applications, Infrastructure, Security: https://obamawhitehouse.archives.gov/sites/default/files/omb/assets/egov_docs/fea_v2.pdf
*/
func (a *Client) DomainModelFindList(params *DomainModelFindListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DomainModelFindListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainModelFindListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainModelFindList",
		Method:             "GET",
		PathPattern:        "/domainModel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainModelFindListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainModelFindListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainModelFindList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainModelLevelFindList retrieves the model levels associated with a specific domain reference models

  Retrieves the hierarchy levels associated with a specific domain reference models
*/
func (a *Client) DomainModelLevelFindList(params *DomainModelLevelFindListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DomainModelLevelFindListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainModelLevelFindListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainModelLevelFindList",
		Method:             "GET",
		PathPattern:        "/domainModelLevel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainModelLevelFindListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainModelLevelFindListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainModelLevelFindList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DomainModelNameFindList retrieves a list of available domain reference models

  Retrieves a list of available domain reference models
*/
func (a *Client) DomainModelNameFindList(params *DomainModelNameFindListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DomainModelNameFindListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainModelNameFindListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "domainModelNameFindList",
		Method:             "GET",
		PathPattern:        "/domainModelName",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainModelNameFindListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainModelNameFindListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for domainModelNameFindList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
