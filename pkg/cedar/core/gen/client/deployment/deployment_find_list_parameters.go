// Code generated by go-swagger; DO NOT EDIT.

package deployment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeploymentFindListParams creates a new DeploymentFindListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeploymentFindListParams() *DeploymentFindListParams {
	return &DeploymentFindListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeploymentFindListParamsWithTimeout creates a new DeploymentFindListParams object
// with the ability to set a timeout on a request.
func NewDeploymentFindListParamsWithTimeout(timeout time.Duration) *DeploymentFindListParams {
	return &DeploymentFindListParams{
		timeout: timeout,
	}
}

// NewDeploymentFindListParamsWithContext creates a new DeploymentFindListParams object
// with the ability to set a context for a request.
func NewDeploymentFindListParamsWithContext(ctx context.Context) *DeploymentFindListParams {
	return &DeploymentFindListParams{
		Context: ctx,
	}
}

// NewDeploymentFindListParamsWithHTTPClient creates a new DeploymentFindListParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeploymentFindListParamsWithHTTPClient(client *http.Client) *DeploymentFindListParams {
	return &DeploymentFindListParams{
		HTTPClient: client,
	}
}

/* DeploymentFindListParams contains all the parameters to send to the API endpoint
   for the deployment find list operation.

   Typically these are written to a http.Request.
*/
type DeploymentFindListParams struct {

	/* DeploymentType.

	   Deployment type.
	*/
	DeploymentType *string

	/* State.

	   Deployment state.
	*/
	State *string

	/* Status.

	   Deployment status.
	*/
	Status *string

	/* SystemID.

	   ID of the system that the deployment is associated with.
	*/
	SystemID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the deployment find list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeploymentFindListParams) WithDefaults() *DeploymentFindListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the deployment find list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeploymentFindListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the deployment find list params
func (o *DeploymentFindListParams) WithTimeout(timeout time.Duration) *DeploymentFindListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the deployment find list params
func (o *DeploymentFindListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the deployment find list params
func (o *DeploymentFindListParams) WithContext(ctx context.Context) *DeploymentFindListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the deployment find list params
func (o *DeploymentFindListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the deployment find list params
func (o *DeploymentFindListParams) WithHTTPClient(client *http.Client) *DeploymentFindListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the deployment find list params
func (o *DeploymentFindListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeploymentType adds the deploymentType to the deployment find list params
func (o *DeploymentFindListParams) WithDeploymentType(deploymentType *string) *DeploymentFindListParams {
	o.SetDeploymentType(deploymentType)
	return o
}

// SetDeploymentType adds the deploymentType to the deployment find list params
func (o *DeploymentFindListParams) SetDeploymentType(deploymentType *string) {
	o.DeploymentType = deploymentType
}

// WithState adds the state to the deployment find list params
func (o *DeploymentFindListParams) WithState(state *string) *DeploymentFindListParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the deployment find list params
func (o *DeploymentFindListParams) SetState(state *string) {
	o.State = state
}

// WithStatus adds the status to the deployment find list params
func (o *DeploymentFindListParams) WithStatus(status *string) *DeploymentFindListParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the deployment find list params
func (o *DeploymentFindListParams) SetStatus(status *string) {
	o.Status = status
}

// WithSystemID adds the systemID to the deployment find list params
func (o *DeploymentFindListParams) WithSystemID(systemID string) *DeploymentFindListParams {
	o.SetSystemID(systemID)
	return o
}

// SetSystemID adds the systemId to the deployment find list params
func (o *DeploymentFindListParams) SetSystemID(systemID string) {
	o.SystemID = systemID
}

// WriteToRequest writes these params to a swagger request
func (o *DeploymentFindListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DeploymentType != nil {

		// query param deploymentType
		var qrDeploymentType string

		if o.DeploymentType != nil {
			qrDeploymentType = *o.DeploymentType
		}
		qDeploymentType := qrDeploymentType
		if qDeploymentType != "" {

			if err := r.SetQueryParam("deploymentType", qDeploymentType); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	// query param systemId
	qrSystemID := o.SystemID
	qSystemID := qrSystemID
	if qSystemID != "" {

		if err := r.SetQueryParam("systemId", qSystemID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
