// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthorityToOperate authority to operate
//
// swagger:model AuthorityToOperate
type AuthorityToOperate struct {

	// actual disposition date
	// Example: 2021-10-13T00:00:00.000Z
	// Format: date
	ActualDispositionDate strfmt.Date `json:"actualDispositionDate,omitempty"`

	// cedar Id
	// Example: 157-3632-0
	CedarID string `json:"cedarId,omitempty"`

	// contains personally identifiable information
	ContainsPersonallyIdentifiableInformation bool `json:"containsPersonallyIdentifiableInformation,omitempty"`

	// contingency plan completion date
	// Example: 2021-10-13T00:00:00.000Z
	// Format: date
	ContingencyPlanCompletionDate strfmt.Date `json:"contingencyPlanCompletionDate,omitempty"`

	// contingency plan documentation
	ContingencyPlanDocumentation []string `json:"contingencyPlanDocumentation"`

	// count of total non privileged user population
	CountOfTotalNonPrivilegedUserPopulation int32 `json:"countOfTotalNonPrivilegedUserPopulation,omitempty"`

	// count of total privileged user population
	CountOfTotalPrivilegedUserPopulation int32 `json:"countOfTotalPrivilegedUserPopulation,omitempty"`

	// e authentication level
	// Example: 3
	EAuthenticationLevel string `json:"eAuthenticationLevel,omitempty"`

	// fips199 overall impact rating
	Fips199OverallImpactRating int32 `json:"fips199OverallImpactRating,omitempty"`

	// fisma system acronym
	// Example: CEDAR
	FismaSystemAcronym string `json:"fismaSystemAcronym,omitempty"`

	// fisma system name
	// Example: Acumen Web Portals
	FismaSystemName string `json:"fismaSystemName,omitempty"`

	// is accessed by non organizational users
	IsAccessedByNonOrganizationalUsers bool `json:"isAccessedByNonOrganizationalUsers,omitempty"`

	// is pii limited to user name and pass
	IsPiiLimitedToUserNameAndPass bool `json:"isPiiLimitedToUserNameAndPass,omitempty"`

	// is protected health information
	IsProtectedHealthInformation bool `json:"isProtectedHealthInformation,omitempty"`

	// pia completion date
	// Example: 2021-10-13T00:00:00.000Z
	// Format: date
	PiaCompletionDate strfmt.Date `json:"piaCompletionDate,omitempty"`

	// recovery point objective
	RecoveryPointObjective int32 `json:"recoveryPointObjective,omitempty"`

	// recovery time objective
	RecoveryTimeObjective int32 `json:"recoveryTimeObjective,omitempty"`

	// system of records notice
	SystemOfRecordsNotice []string `json:"systemOfRecordsNotice"`

	// tlc phase
	// Example: Initiate
	TlcPhase string `json:"tlcPhase,omitempty"`

	// uuid
	// Example: 806F9F07-C3A5-4EE6-9C6A-C8D50585B7EA
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this authority to operate
func (m *AuthorityToOperate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualDispositionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContingencyPlanCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePiaCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorityToOperate) validateActualDispositionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ActualDispositionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("actualDispositionDate", "body", "date", m.ActualDispositionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthorityToOperate) validateContingencyPlanCompletionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ContingencyPlanCompletionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("contingencyPlanCompletionDate", "body", "date", m.ContingencyPlanCompletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthorityToOperate) validatePiaCompletionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PiaCompletionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("piaCompletionDate", "body", "date", m.PiaCompletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this authority to operate based on context it is used
func (m *AuthorityToOperate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuthorityToOperate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorityToOperate) UnmarshalBinary(b []byte) error {
	var res AuthorityToOperate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
