// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/apperrors/errors.go

// Package mockapperrors is a generated GoMock package.
package mockapperrors

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	apperrors "github.com/cmsgov/mint-app/pkg/apperrors"
)

// MockITypedError is a mock of ITypedError interface.
type MockITypedError struct {
	ctrl     *gomock.Controller
	recorder *MockITypedErrorMockRecorder
}

// MockITypedErrorMockRecorder is the mock recorder for MockITypedError.
type MockITypedErrorMockRecorder struct {
	mock *MockITypedError
}

// NewMockITypedError creates a new mock instance.
func NewMockITypedError(ctrl *gomock.Controller) *MockITypedError {
	mock := &MockITypedError{ctrl: ctrl}
	mock.recorder = &MockITypedErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITypedError) EXPECT() *MockITypedErrorMockRecorder {
	return m.recorder
}

// Code mocks base method.
func (m *MockITypedError) Code() apperrors.ErrorCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code")
	ret0, _ := ret[0].(apperrors.ErrorCode)
	return ret0
}

// Code indicates an expected call of Code.
func (mr *MockITypedErrorMockRecorder) Code() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockITypedError)(nil).Code))
}

// Error mocks base method.
func (m *MockITypedError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockITypedErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockITypedError)(nil).Error))
}

// Message mocks base method.
func (m *MockITypedError) Message() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].(string)
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockITypedErrorMockRecorder) Message() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockITypedError)(nil).Message))
}
