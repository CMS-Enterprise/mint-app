// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/models/activity_meta_base.go

// Package mockmodels is a generated GoMock package.
package mockmodels

import (
	driver "database/sql/driver"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockActivityMetaData is a mock of ActivityMetaData interface.
type MockActivityMetaData struct {
	ctrl     *gomock.Controller
	recorder *MockActivityMetaDataMockRecorder
}

// MockActivityMetaDataMockRecorder is the mock recorder for MockActivityMetaData.
type MockActivityMetaDataMockRecorder struct {
	mock *MockActivityMetaData
}

// NewMockActivityMetaData creates a new mock instance.
func NewMockActivityMetaData(ctrl *gomock.Controller) *MockActivityMetaData {
	mock := &MockActivityMetaData{ctrl: ctrl}
	mock.recorder = &MockActivityMetaDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityMetaData) EXPECT() *MockActivityMetaDataMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockActivityMetaData) Scan(src interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", src)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockActivityMetaDataMockRecorder) Scan(src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockActivityMetaData)(nil).Scan), src)
}

// Value mocks base method.
func (m *MockActivityMetaData) Value() (driver.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(driver.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Value indicates an expected call of Value.
func (mr *MockActivityMetaDataMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockActivityMetaData)(nil).Value))
}

// isActivityMetaData mocks base method.
func (m *MockActivityMetaData) isActivityMetaData() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isActivityMetaData")
}

// isActivityMetaData indicates an expected call of isActivityMetaData.
func (mr *MockActivityMetaDataMockRecorder) isActivityMetaData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isActivityMetaData", reflect.TypeOf((*MockActivityMetaData)(nil).isActivityMetaData))
}
