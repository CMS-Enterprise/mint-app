// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/models/existing_model_link.go

// Package mockmodels is a generated GoMock package.
package mockmodels

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLinkedExistingModel is a mock of LinkedExistingModel interface.
type MockLinkedExistingModel struct {
	ctrl     *gomock.Controller
	recorder *MockLinkedExistingModelMockRecorder
}

// MockLinkedExistingModelMockRecorder is the mock recorder for MockLinkedExistingModel.
type MockLinkedExistingModelMockRecorder struct {
	mock *MockLinkedExistingModel
}

// NewMockLinkedExistingModel creates a new mock instance.
func NewMockLinkedExistingModel(ctrl *gomock.Controller) *MockLinkedExistingModel {
	mock := &MockLinkedExistingModel{ctrl: ctrl}
	mock.recorder = &MockLinkedExistingModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkedExistingModel) EXPECT() *MockLinkedExistingModelMockRecorder {
	return m.recorder
}

// isLinkedExistingModel mocks base method.
func (m *MockLinkedExistingModel) isLinkedExistingModel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isLinkedExistingModel")
}

// isLinkedExistingModel indicates an expected call of isLinkedExistingModel.
func (mr *MockLinkedExistingModelMockRecorder) isLinkedExistingModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isLinkedExistingModel", reflect.TypeOf((*MockLinkedExistingModel)(nil).isLinkedExistingModel))
}
