// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/sqlutils/named_preparer.go

// Package mocksqlutils is a generated GoMock package.
package mocksqlutils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockNamedPreparer is a mock of NamedPreparer interface.
type MockNamedPreparer struct {
	ctrl     *gomock.Controller
	recorder *MockNamedPreparerMockRecorder
}

// MockNamedPreparerMockRecorder is the mock recorder for MockNamedPreparer.
type MockNamedPreparerMockRecorder struct {
	mock *MockNamedPreparer
}

// NewMockNamedPreparer creates a new mock instance.
func NewMockNamedPreparer(ctrl *gomock.Controller) *MockNamedPreparer {
	mock := &MockNamedPreparer{ctrl: ctrl}
	mock.recorder = &MockNamedPreparerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamedPreparer) EXPECT() *MockNamedPreparerMockRecorder {
	return m.recorder
}

// PrepareNamed mocks base method.
func (m *MockNamedPreparer) PrepareNamed(query string) (*sqlx.NamedStmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNamed", query)
	ret0, _ := ret[0].(*sqlx.NamedStmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareNamed indicates an expected call of PrepareNamed.
func (mr *MockNamedPreparerMockRecorder) PrepareNamed(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNamed", reflect.TypeOf((*MockNamedPreparer)(nil).PrepareNamed), query)
}
