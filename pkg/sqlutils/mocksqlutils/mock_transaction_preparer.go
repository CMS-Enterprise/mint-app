// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/sqlutils/transaction_preparer.go

// Package mocksqlutils is a generated GoMock package.
package mocksqlutils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockTransactionPreparer is a mock of TransactionPreparer interface.
type MockTransactionPreparer struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionPreparerMockRecorder
}

// MockTransactionPreparerMockRecorder is the mock recorder for MockTransactionPreparer.
type MockTransactionPreparerMockRecorder struct {
	mock *MockTransactionPreparer
}

// NewMockTransactionPreparer creates a new mock instance.
func NewMockTransactionPreparer(ctrl *gomock.Controller) *MockTransactionPreparer {
	mock := &MockTransactionPreparer{ctrl: ctrl}
	mock.recorder = &MockTransactionPreparerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionPreparer) EXPECT() *MockTransactionPreparerMockRecorder {
	return m.recorder
}

// Beginx mocks base method.
func (m *MockTransactionPreparer) Beginx() (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Beginx")
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Beginx indicates an expected call of Beginx.
func (mr *MockTransactionPreparerMockRecorder) Beginx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Beginx", reflect.TypeOf((*MockTransactionPreparer)(nil).Beginx))
}
