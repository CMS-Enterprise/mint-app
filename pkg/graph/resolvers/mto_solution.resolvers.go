package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// RelatedMilestones is the resolver for the relatedMilestones field.
func (r *mTOSolutionResolver) RelatedMilestones(ctx context.Context, obj *models.MTOSolution) ([]*models.MTOMilestone, error) {
	panic(fmt.Errorf("not implemented: RelatedMilestones - relatedMilestones"))
}

// AddedFromSolutionLibrary is the resolver for the addedFromSolutionLibrary field.
func (r *mTOSolutionResolver) AddedFromSolutionLibrary(ctx context.Context, obj *models.MTOSolution) (bool, error) {
	panic(fmt.Errorf("not implemented: AddedFromSolutionLibrary - addedFromSolutionLibrary"))
}

// CommonSolution is the resolver for the commonSolution field.
func (r *mTOSolutionResolver) CommonSolution(ctx context.Context, obj *models.MTOSolution) (*models.MTOCommonSolution, error) {
	panic(fmt.Errorf("not implemented: CommonSolution - commonSolution"))
}

// CreateMTOSolution is the resolver for the createMTOSolution field.
func (r *queryResolver) CreateMTOSolution(ctx context.Context, typeArg models.MTOSolutionType, name string, pocName string, pocEmail string) (*models.MTOSolution, error) {
	panic(fmt.Errorf("not implemented: CreateMTOSolution - createMTOSolution"))
}

// UpdateMTOSolution is the resolver for the updateMTOSolution field.
func (r *queryResolver) UpdateMTOSolution(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.MTOSolution, error) {
	panic(fmt.Errorf("not implemented: UpdateMTOSolution - updateMTOSolution"))
}

// MTOSolution returns generated.MTOSolutionResolver implementation.
func (r *Resolver) MTOSolution() generated.MTOSolutionResolver { return &mTOSolutionResolver{r} }

type mTOSolutionResolver struct{ *Resolver }
