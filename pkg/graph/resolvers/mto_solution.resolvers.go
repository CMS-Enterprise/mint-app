package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// FacilitatedBy is the resolver for the facilitatedBy field.
func (r *mTOSolutionResolver) FacilitatedBy(ctx context.Context, obj *models.MTOSolution) ([]models.MTOFacilitator, error) {
	if obj.FacilitatedBy == nil {
		return nil, nil
	}
	return *obj.FacilitatedBy, nil
}

// Milestones is the resolver for the milestones field.
func (r *mTOSolutionResolver) Milestones(ctx context.Context, obj *models.MTOSolution) ([]*models.MTOMilestone, error) {
	return MTOMilestoneGetBySolutionIDLOADER(ctx, obj.ID)
}

// CommonSolution is the resolver for the commonSolution field.
func (r *mTOSolutionResolver) CommonSolution(ctx context.Context, obj *models.MTOSolution) (*models.MTOCommonSolution, error) {
	// If the key is nil there is no common solution
	if obj.Key == nil {
		return nil, nil
	}

	commonSolution, err := MTOCommonSolutionGetByKeyLOADER(ctx, *obj.Key)
	if err != nil {
		return nil, err
	}

	return commonSolution, nil
}

// CreateMTOSolutionCustom is the resolver for the createMTOSolutionCustom field.
func (r *mutationResolver) CreateMTOSolutionCustom(ctx context.Context, modelPlanID uuid.UUID, solutionType models.MTOSolutionType, name string, pocName string, pocEmail string) (*models.MTOSolution, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)

	return MTOSolutionCreateCustom(
		logger,
		principal,
		r.store,
		modelPlanID,
		nil,
		name,
		solutionType,
		nil,
		pocName,
		pocEmail,
	)
}

// CreateMTOSolutionCommon is the resolver for the createMTOSolutionCommon field.
func (r *mutationResolver) CreateMTOSolutionCommon(ctx context.Context, modelPlanID uuid.UUID, key models.MTOCommonSolutionKey, milestonesToLink []uuid.UUID) (*models.MTOSolution, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)

	return MTOSolutionCreateCommon(ctx, logger, principal, r.store, modelPlanID, key, milestonesToLink)
}

// UpdateMTOSolution is the resolver for the updateMTOSolution field.
func (r *mutationResolver) UpdateMTOSolution(ctx context.Context, id uuid.UUID, changes map[string]interface{}, milestoneLinks *model.MTOMilestoneLinks) (*models.MTOSolution, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)

	return MTOSolutionUpdate(ctx, logger, principal, r.store, id, changes, milestoneLinks)
}

// MtoSolutionUpdateLinkedMilestones is the resolver for the mtoSolutionUpdateLinkedMilestones field.
func (r *mutationResolver) MtoSolutionUpdateLinkedMilestones(ctx context.Context, id uuid.UUID, milestoneLinks model.MTOMilestoneLinks) ([]*models.MTOMilestone, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)

	return MTOSolutionLinkMilestones(
		ctx,
		principal,
		logger,
		r.store,
		id,
		milestoneLinks.MilestoneIDs,
	)
}

// DeleteMTOSolution is the resolver for the deleteMTOSolution field.
func (r *mutationResolver) DeleteMTOSolution(ctx context.Context, id uuid.UUID) (bool, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)
	err := MTOSolutionDelete(ctx, logger, principal, r.store, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// MTOSolution returns generated.MTOSolutionResolver implementation.
func (r *Resolver) MTOSolution() generated.MTOSolutionResolver { return &mTOSolutionResolver{r} }

type mTOSolutionResolver struct{ *Resolver }
