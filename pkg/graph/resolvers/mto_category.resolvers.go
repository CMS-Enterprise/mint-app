package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// SubCategories is the resolver for the subCategories field.
func (r *mTOCategoryResolver) SubCategories(ctx context.Context, obj *models.MTOCategory) ([]*models.MTOSubcategory, error) {
	return MTOSubcategoryGetByParentIDLoader(ctx, obj.ModelPlanID, obj.ID)
}

// Milestones is the resolver for the milestones field.
func (r *mTOSubcategoryResolver) Milestones(ctx context.Context, obj *models.MTOSubcategory) ([]*models.MTOMilestone, error) {
	// All milestones (in the DB) have a mto_category_id, so we need to identify which to filter by in the query
	// We do this by passing the subcategory's parent ID (which is the Category ID) if the milestone doesn't actually have a subcategory
	// Otherwise, we can just filter by the actual subcategory ID
	var categoryID uuid.UUID
	if obj.IsUncategorized() {
		if obj.ParentID != nil {
			categoryID = *obj.ParentID
		}
	} else {
		categoryID = obj.ID
	}
	return MTOMilestoneGetByModelPlanIDAndCategoryIDLOADER(ctx, obj.ModelPlanID, categoryID)
}

// CreateMTOCategory is the resolver for the createMTOCategory field.
func (r *mutationResolver) CreateMTOCategory(ctx context.Context, modelPlanID uuid.UUID, name string, parentID *uuid.UUID) (*models.MTOCategory, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return MTOCategoryCreate(ctx, logger, principal, r.store, name, modelPlanID, parentID)
}

// RenameMTOCategory is the resolver for the renameMTOCategory field.
func (r *mutationResolver) RenameMTOCategory(ctx context.Context, id uuid.UUID, name string) (*models.MTOCategory, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return MTOCategoryRename(ctx, logger, principal, r.store, id, name)
}

// ReorderMTOCategory is the resolver for the reorderMTOCategory field.
func (r *mutationResolver) ReorderMTOCategory(ctx context.Context, id uuid.UUID, newOrder int) (*models.MTOCategory, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return MTOCategoryReorder(ctx, logger, principal, r.store, id, newOrder)
}

// MTOCategory returns generated.MTOCategoryResolver implementation.
func (r *Resolver) MTOCategory() generated.MTOCategoryResolver { return &mTOCategoryResolver{r} }

// MTOSubcategory returns generated.MTOSubcategoryResolver implementation.
func (r *Resolver) MTOSubcategory() generated.MTOSubcategoryResolver {
	return &mTOSubcategoryResolver{r}
}

type mTOCategoryResolver struct{ *Resolver }
type mTOSubcategoryResolver struct{ *Resolver }
