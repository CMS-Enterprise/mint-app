package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/google/uuid"

	"github.com/cmsgov/mint-app/pkg/appcontext"
	"github.com/cmsgov/mint-app/pkg/graph/generated"
	"github.com/cmsgov/mint-app/pkg/models"
)

// Model is the resolver for the model field.
func (r *existingModelLinkResolver) Model(ctx context.Context, obj *models.ExistingModelLink) (models.LinkedExistingModel, error) {
	return ExistingModelLinkGetModel(ctx, obj)
}

// Names is the resolver for the names field.
func (r *existingModelLinksResolver) Names(ctx context.Context, obj *models.ExistingModelLinks) ([]string, error) {
	return ExistingModelLinksNameArray(ctx, obj.ModelPlanID, obj.FieldName)
}

// UpdateExistingModelLinks is the resolver for the updateExistingModelLinks field.
func (r *mutationResolver) UpdateExistingModelLinks(ctx context.Context, modelPlanID uuid.UUID, fieldName models.ExisitingModelLinkFieldType, existingModelIDs []int, currentModelPlanIDs []uuid.UUID) (*models.ExistingModelLinks, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)
	return ExistingModelLinksUpdate(logger, r.store, principal, modelPlanID, fieldName, existingModelIDs, currentModelPlanIDs)
}

// ExistingModelLink is the resolver for the existingModelLink field.
func (r *queryResolver) ExistingModelLink(ctx context.Context, id uuid.UUID) (*models.ExistingModelLink, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return ExistingModelLinkGetByID(logger, r.store, principal, id)
}

// ExistingModelLink returns generated.ExistingModelLinkResolver implementation.
func (r *Resolver) ExistingModelLink() generated.ExistingModelLinkResolver {
	return &existingModelLinkResolver{r}
}

// ExistingModelLinks returns generated.ExistingModelLinksResolver implementation.
func (r *Resolver) ExistingModelLinks() generated.ExistingModelLinksResolver {
	return &existingModelLinksResolver{r}
}

type existingModelLinkResolver struct{ *Resolver }
type existingModelLinksResolver struct{ *Resolver }
