package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/authentication"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
	"github.com/cms-enterprise/mint-app/pkg/storage/loaders"
)

// LaunchDarkly is the resolver for the launchDarkly field.
func (r *currentUserResolver) LaunchDarkly(ctx context.Context, obj *models.CurrentUser) (*model.LaunchDarklySettings, error) {
	return CurrentUserLaunchDarklySettingsGet(ctx, r.ldClient)
}

// Account is the resolver for the account field.
func (r *currentUserResolver) Account(ctx context.Context, obj *models.CurrentUser) (*authentication.UserAccount, error) {
	return CurrentUserAccountGet(ctx)
}

// Notifications is the resolver for the notifications field.
func (r *currentUserResolver) Notifications(ctx context.Context, obj *models.CurrentUser) (*models.UserNotifications, error) {
	val, err := CurrentUserNotificationsGet(ctx, r.store)
	if err != nil {
		return nil, err
	}

	return val, nil
}

// NotificationPreferences is the resolver for the notificationPreferences field.
func (r *currentUserResolver) NotificationPreferences(ctx context.Context, obj *models.CurrentUser) (*models.UserNotificationPreferences, error) {
	princ := appcontext.Principal(ctx)
	return loaders.UserNotificationPreferencesGetByUserID(ctx, princ.Account().ID)

	// return UserNotificationPreferencesGetByUserID(ctx, r.store, princ.Account().ID)
}

// LeadModelPlanCount is the resolver for the leadModelPlanCount field.
func (r *currentUserResolver) LeadModelPlanCount(ctx context.Context, obj *models.CurrentUser) (int, error) {
	return GetLeadModelPlanCount(ctx, r.store, appcontext.Principal(ctx).Account().ID)
}

// CurrentUser is the resolver for the currentUser field.
func (r *queryResolver) CurrentUser(ctx context.Context) (*models.CurrentUser, error) {
	return &models.CurrentUser{}, nil
}

// CurrentUser returns generated.CurrentUserResolver implementation.
func (r *Resolver) CurrentUser() generated.CurrentUserResolver { return &currentUserResolver{r} }

type currentUserResolver struct{ *Resolver }
