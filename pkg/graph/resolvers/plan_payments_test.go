package resolvers

import "github.com/cmsgov/mint-app/pkg/models"

// TestPlanPaymentsUpdate tests PlanPaymentsUpdate
func (suite *ResolverSuite) TestPlanPaymentsUpdate() {
	plan := suite.createModelPlan("Plan Payments")

	pp, err := PlanPaymentsReadByModelPlan(suite.testConfigs.Logger, suite.testConfigs.Store, plan.ID)
	suite.NoError(err)

	changes := map[string]interface{}{
		"fundingSource":     []string{"TRUST_FUND"},
		"fundingSourceNote": "Ello gov'na",
		"payType":           []string{"CLAIMS_BASED_PAYMENTS"},
	}

	updatedPP, err := PlanPaymentsUpdate(suite.testConfigs.Logger, suite.testConfigs.Store, pp.ID, changes, suite.testConfigs.Principal)

	suite.NoError(err)
	suite.EqualValues(plan.ID, pp.ModelPlanID)
	suite.EqualValues(models.TaskReady, pp.Status)
	suite.EqualValues(suite.testConfigs.Principal.UserAccount.ID, pp.CreatedBy)
	suite.Nil(pp.ModifiedBy)

	//suite.Nil(updatedPP.FundingSource)
	suite.Nil(updatedPP.FundingSourceTrustFund)
	suite.Nil(updatedPP.FundingSourceOther)
	//suite.Nil(updatedPP.FundingSourceNote)
	suite.Nil(updatedPP.FundingSourceR)
	suite.Nil(updatedPP.FundingSourceRTrustFund)
	suite.Nil(updatedPP.FundingSourceROther)
	suite.Nil(updatedPP.FundingSourceRNote)
	suite.Nil(updatedPP.PayRecipients)
	suite.Nil(updatedPP.PayRecipientsOtherSpecification)
	suite.Nil(updatedPP.PayRecipientsNote)
	//suite.Nil(updatedPP.PayType)
	suite.Nil(updatedPP.PayTypeNote)
	suite.Nil(updatedPP.PayClaims)
	suite.Nil(updatedPP.PayClaimsOther)
	suite.Nil(updatedPP.PayClaimsNote)
	suite.Nil(updatedPP.ShouldAnyProvidersExcludedFFSSystems)
	suite.Nil(updatedPP.ShouldAnyProviderExcludedFFSSystemsNote)
	suite.Nil(updatedPP.ChangesMedicarePhysicianFeeSchedule)
	suite.Nil(updatedPP.ChangesMedicarePhysicianFeeScheduleNote)
	suite.Nil(updatedPP.AffectsMedicareSecondaryPayerClaims)
	suite.Nil(updatedPP.AffectsMedicareSecondaryPayerClaimsHow)
	suite.Nil(updatedPP.AffectsMedicareSecondaryPayerClaimsNote)
	suite.Nil(updatedPP.PayModelDifferentiation)
	suite.Nil(updatedPP.CreatingDependenciesBetweenServices)
	suite.Nil(updatedPP.CreatingDependenciesBetweenServicesNote)
	suite.Nil(updatedPP.NeedsClaimsDataCollection)
	suite.Nil(updatedPP.NeedsClaimsDataCollectionNote)
	suite.Nil(updatedPP.ProvidingThirdPartyFile)
	suite.Nil(updatedPP.IsContractorAwareTestDataRequirements)
	suite.Nil(updatedPP.BeneficiaryCostSharingLevelAndHandling)
	suite.Nil(updatedPP.WaiveBeneficiaryCostSharingForAnyServices)
	suite.Nil(updatedPP.WaiveBeneficiaryCostSharingServiceSpecification)
	suite.Nil(updatedPP.WaiverOnlyAppliesPartOfPayment)
	suite.Nil(updatedPP.WaiveBeneficiaryCostSharingNote)
	suite.Nil(updatedPP.NonClaimsPayments)
	suite.Nil(updatedPP.NonClaimsPaymentsOther)
	suite.Nil(updatedPP.NonClaimsPaymentsNote)
	suite.Nil(updatedPP.PaymentCalculationOwner)
	suite.Nil(updatedPP.NumberPaymentsPerPayCycle)
	suite.Nil(updatedPP.NumberPaymentsPerPayCycleNote)
	suite.Nil(updatedPP.SharedSystemsInvolvedAdditionalClaimPayment)
	suite.Nil(updatedPP.SharedSystemsInvolvedAdditionalClaimPaymentNote)
	suite.Nil(updatedPP.PlanningToUseInnovationPaymentContractor)
	suite.Nil(updatedPP.PlanningToUseInnovationPaymentContractorNote)
	suite.Nil(updatedPP.FundingStructure)
	suite.Nil(updatedPP.ExpectedCalculationComplexityLevel)
	suite.Nil(updatedPP.ExpectedCalculationComplexityLevelNote)
	suite.Nil(updatedPP.CanParticipantsSelectBetweenPaymentMechanisms)
	suite.Nil(updatedPP.CanParticipantsSelectBetweenPaymentMechanismsHow)
	suite.Nil(updatedPP.CanParticipantsSelectBetweenPaymentMechanismsNote)
	suite.Nil(updatedPP.AnticipatedPaymentFrequency)
	suite.Nil(updatedPP.AnticipatedPaymentFrequencyOther)
	suite.Nil(updatedPP.AnticipatedPaymentFrequencyNote)
	suite.Nil(updatedPP.WillRecoverPayments)
	suite.Nil(updatedPP.WillRecoverPaymentsNote)
	suite.Nil(updatedPP.AnticipateReconcilingPaymentsRetrospectively)
	suite.Nil(updatedPP.AnticipateReconcilingPaymentsRetrospectivelyNote)
	suite.Nil(updatedPP.PaymentStartDate)
	suite.Nil(updatedPP.PaymentStartDateNote)
}

// TestPlanPaymentsReadByModelPlan tests PlanPaymentsReadByModelPlan
func (suite *ResolverSuite) TestPlanPaymentsReadByModelPlan() {
	plan := suite.createModelPlan("Plan Payments")

	pp, err := PlanPaymentsReadByModelPlan(suite.testConfigs.Logger, suite.testConfigs.Store, plan.ID)
	suite.NoError(err)

	suite.EqualValues(plan.ID, pp.ModelPlanID)
	suite.EqualValues(models.TaskReady, pp.Status)
	suite.EqualValues(suite.testConfigs.Principal.UserAccount.ID, pp.CreatedBy)
	suite.Nil(pp.ModifiedBy)

	//Asset these fields are nil upon creation

	suite.Nil(pp.FundingSource)
	suite.Nil(pp.FundingSourceTrustFund)
	suite.Nil(pp.FundingSourceOther)
	suite.Nil(pp.FundingSourceNote)
	suite.Nil(pp.FundingSourceR)
	suite.Nil(pp.FundingSourceRTrustFund)
	suite.Nil(pp.FundingSourceROther)
	suite.Nil(pp.FundingSourceRNote)
	suite.Nil(pp.PayRecipients)
	suite.Nil(pp.PayRecipientsOtherSpecification)
	suite.Nil(pp.PayRecipientsNote)
	suite.Nil(pp.PayType)
	suite.Nil(pp.PayTypeNote)
	suite.Nil(pp.PayClaims)
	suite.Nil(pp.PayClaimsOther)
	suite.Nil(pp.PayClaimsNote)
	suite.Nil(pp.ShouldAnyProvidersExcludedFFSSystems)
	suite.Nil(pp.ShouldAnyProviderExcludedFFSSystemsNote)
	suite.Nil(pp.ChangesMedicarePhysicianFeeSchedule)
	suite.Nil(pp.ChangesMedicarePhysicianFeeScheduleNote)
	suite.Nil(pp.AffectsMedicareSecondaryPayerClaims)
	suite.Nil(pp.AffectsMedicareSecondaryPayerClaimsHow)
	suite.Nil(pp.AffectsMedicareSecondaryPayerClaimsNote)
	suite.Nil(pp.PayModelDifferentiation)
	suite.Nil(pp.CreatingDependenciesBetweenServices)
	suite.Nil(pp.CreatingDependenciesBetweenServicesNote)
	suite.Nil(pp.NeedsClaimsDataCollection)
	suite.Nil(pp.NeedsClaimsDataCollectionNote)
	suite.Nil(pp.ProvidingThirdPartyFile)
	suite.Nil(pp.IsContractorAwareTestDataRequirements)
	suite.Nil(pp.BeneficiaryCostSharingLevelAndHandling)
	suite.Nil(pp.WaiveBeneficiaryCostSharingForAnyServices)
	suite.Nil(pp.WaiveBeneficiaryCostSharingServiceSpecification)
	suite.Nil(pp.WaiverOnlyAppliesPartOfPayment)
	suite.Nil(pp.WaiveBeneficiaryCostSharingNote)
	suite.Nil(pp.NonClaimsPayments)
	suite.Nil(pp.NonClaimsPaymentsOther)
	suite.Nil(pp.NonClaimsPaymentsNote)
	suite.Nil(pp.PaymentCalculationOwner)
	suite.Nil(pp.NumberPaymentsPerPayCycle)
	suite.Nil(pp.NumberPaymentsPerPayCycleNote)
	suite.Nil(pp.SharedSystemsInvolvedAdditionalClaimPayment)
	suite.Nil(pp.SharedSystemsInvolvedAdditionalClaimPaymentNote)
	suite.Nil(pp.PlanningToUseInnovationPaymentContractor)
	suite.Nil(pp.PlanningToUseInnovationPaymentContractorNote)
	suite.Nil(pp.FundingStructure)
	suite.Nil(pp.ExpectedCalculationComplexityLevel)
	suite.Nil(pp.ExpectedCalculationComplexityLevelNote)
	suite.Nil(pp.CanParticipantsSelectBetweenPaymentMechanisms)
	suite.Nil(pp.CanParticipantsSelectBetweenPaymentMechanismsHow)
	suite.Nil(pp.CanParticipantsSelectBetweenPaymentMechanismsNote)
	suite.Nil(pp.AnticipatedPaymentFrequency)
	suite.Nil(pp.AnticipatedPaymentFrequencyOther)
	suite.Nil(pp.AnticipatedPaymentFrequencyNote)
	suite.Nil(pp.WillRecoverPayments)
	suite.Nil(pp.WillRecoverPaymentsNote)
	suite.Nil(pp.AnticipateReconcilingPaymentsRetrospectively)
	suite.Nil(pp.AnticipateReconcilingPaymentsRetrospectivelyNote)
	suite.Nil(pp.PaymentStartDate)
	suite.Nil(pp.PaymentStartDateNote)
}
