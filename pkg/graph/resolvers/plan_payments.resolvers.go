package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
	"github.com/google/uuid"
)

// UpdatePlanPayments is the resolver for the updatePlanPayments field.
func (r *mutationResolver) UpdatePlanPayments(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanPayments, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)

	return PlanPaymentsUpdate(logger, r.store, id, changes, principal)
}

// FundingSource is the resolver for the fundingSource field.
func (r *planPaymentsResolver) FundingSource(ctx context.Context, obj *models.PlanPayments) ([]models.FundingSource, error) {
	return models.ConvertEnums[models.FundingSource](obj.FundingSource), nil
}

// FundingSourceR is the resolver for the fundingSourceR field.
func (r *planPaymentsResolver) FundingSourceR(ctx context.Context, obj *models.PlanPayments) ([]models.FundingSource, error) {
	return models.ConvertEnums[models.FundingSource](obj.FundingSourceR), nil
}

// PayRecipients is the resolver for the payRecipients field.
func (r *planPaymentsResolver) PayRecipients(ctx context.Context, obj *models.PlanPayments) ([]models.PayRecipient, error) {
	return models.ConvertEnums[models.PayRecipient](obj.PayRecipients), nil
}

// PayType is the resolver for the payType field.
func (r *planPaymentsResolver) PayType(ctx context.Context, obj *models.PlanPayments) ([]models.PayType, error) {
	return models.ConvertEnums[models.PayType](obj.PayType), nil
}

// PayClaims is the resolver for the payClaims field.
func (r *planPaymentsResolver) PayClaims(ctx context.Context, obj *models.PlanPayments) ([]models.ClaimsBasedPayType, error) {
	return models.ConvertEnums[models.ClaimsBasedPayType](obj.PayClaims), nil
}

// NonClaimsPayments is the resolver for the nonClaimsPayments field.
func (r *planPaymentsResolver) NonClaimsPayments(ctx context.Context, obj *models.PlanPayments) ([]model.NonClaimsBasedPayType, error) {
	return models.ConvertEnums[model.NonClaimsBasedPayType](obj.NonClaimsPayments), nil
}

// NonClaimsPaymentOther is the resolver for the nonClaimsPaymentOther field.
func (r *planPaymentsResolver) NonClaimsPaymentOther(ctx context.Context, obj *models.PlanPayments) (*string, error) {
	return obj.NonClaimsPaymentsOther, nil
}

// AnticipatedPaymentFrequency is the resolver for the anticipatedPaymentFrequency field.
func (r *planPaymentsResolver) AnticipatedPaymentFrequency(ctx context.Context, obj *models.PlanPayments) ([]models.FrequencyType, error) {
	return models.ConvertEnums[models.FrequencyType](obj.AnticipatedPaymentFrequency), nil
}

// PaymentReconciliationFrequency is the resolver for the paymentReconciliationFrequency field.
func (r *planPaymentsResolver) PaymentReconciliationFrequency(ctx context.Context, obj *models.PlanPayments) ([]models.FrequencyType, error) {
	return models.ConvertEnums[models.FrequencyType](obj.PaymentReconciliationFrequency), nil
}

// PaymentDemandRecoupmentFrequency is the resolver for the paymentDemandRecoupmentFrequency field.
func (r *planPaymentsResolver) PaymentDemandRecoupmentFrequency(ctx context.Context, obj *models.PlanPayments) ([]models.FrequencyType, error) {
	return models.ConvertEnums[models.FrequencyType](obj.PaymentDemandRecoupmentFrequency), nil
}

// PlanPayments is the resolver for the planPayments field.
func (r *queryResolver) PlanPayments(ctx context.Context, id uuid.UUID) (*models.PlanPayments, error) {
	logger := appcontext.ZLogger(ctx)

	return PlanPaymentsRead(logger, r.store, id)
}

// PlanPayments returns generated.PlanPaymentsResolver implementation.
func (r *Resolver) PlanPayments() generated.PlanPaymentsResolver { return &planPaymentsResolver{r} }

type planPaymentsResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *planPaymentsResolver) WillBePaymentAdjustmentsNote(ctx context.Context, obj *models.PlanPayments) (*string, error) {
	panic(fmt.Errorf("not implemented: WillBePaymentAdjustmentsNote - willBePaymentAdjustmentsNote"))
}
