package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/authentication"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/models"
	"github.com/cms-enterprise/mint-app/pkg/storage/loaders"
)

// ActorUserAccount is the resolver for the actorUserAccount field.
func (r *activityResolver) ActorUserAccount(ctx context.Context, obj *models.Activity) (*authentication.UserAccount, error) {
	return UserAccountGetByIDLOADER(ctx, obj.ActorID)
}

// ModelPlan is the resolver for the modelPlan field.
func (r *addedAsCollaboratorMetaResolver) ModelPlan(ctx context.Context, obj *models.AddedAsCollaboratorMeta) (*models.ModelPlan, error) {
	return ModelPlanGetByIDLOADER(ctx, obj.ModelPlanID)
}

// Collaborator is the resolver for the collaborator field.
func (r *addedAsCollaboratorMetaResolver) Collaborator(ctx context.Context, obj *models.AddedAsCollaboratorMeta) (*models.PlanCollaborator, error) {
	return PlanCollaboratorGetByID(ctx, obj.CollaboratorID)
}

// AnalyzedAudits is the resolver for the analyzedAudits field.
func (r *dailyDigestCompleteActivityMetaResolver) AnalyzedAudits(ctx context.Context, obj *models.DailyDigestCompleteActivityMeta) ([]*models.AnalyzedAudit, error) {
	return loaders.AnalyzedAuditGetByModelPlanIDsAndDate(ctx, obj.ModelPlanIDs, obj.Date)
}

// ModelPlan is the resolver for the modelPlan field.
func (r *datesChangedActivityMetaResolver) ModelPlan(ctx context.Context, obj *models.DatesChangedActivityMeta) (*models.ModelPlan, error) {
	return ModelPlanGetByIDLOADER(ctx, obj.ModelPlanID)
}

// ModelPlan is the resolver for the modelPlan field.
func (r *modelPlanSharedActivityMetaResolver) ModelPlan(ctx context.Context, obj *models.ModelPlanSharedActivityMeta) (*models.ModelPlan, error) {
	return ModelPlanGetByIDLOADER(ctx, obj.ModelPlanID)
}

// ModelPlan is the resolver for the modelPlan field.
func (r *newDiscussionRepliedActivityMetaResolver) ModelPlan(ctx context.Context, obj *models.NewDiscussionRepliedActivityMeta) (*models.ModelPlan, error) {
	return ModelPlanGetByIDLOADER(ctx, obj.ModelPlanID)
}

// Discussion is the resolver for the discussion field.
func (r *newDiscussionRepliedActivityMetaResolver) Discussion(ctx context.Context, obj *models.NewDiscussionRepliedActivityMeta) (*models.PlanDiscussion, error) {
	logger := appcontext.ZLogger(ctx)
	return PlanDiscussionGetByID(ctx, r.store, logger, obj.DiscussionID)
}

// Reply is the resolver for the reply field.
func (r *newDiscussionRepliedActivityMetaResolver) Reply(ctx context.Context, obj *models.NewDiscussionRepliedActivityMeta) (*models.DiscussionReply, error) {
	logger := appcontext.ZLogger(ctx)
	return DiscussionReplyGetByID(ctx, r.store, logger, obj.ReplyID)
}

// ModelPlan is the resolver for the modelPlan field.
func (r *newModelPlanActivityMetaResolver) ModelPlan(ctx context.Context, obj *models.NewModelPlanActivityMeta) (*models.ModelPlan, error) {
	return ModelPlanGetByIDLOADER(ctx, obj.ModelPlanID)
}

// DataExchangeApproach is the resolver for the dataExchangeApproach field.
func (r *planDataExchangeApproachMarkedCompleteActivityMetaResolver) DataExchangeApproach(ctx context.Context, obj *models.PlanDataExchangeApproachMarkedCompleteActivityMeta) (*models.PlanDataExchangeApproach, error) {
	logger := appcontext.ZLogger(ctx)

	return PlanDataExchangeApproachGetByID(logger, r.store, obj.DataExchangeApproachID)
}

// ModelPlan is the resolver for the modelPlan field.
func (r *planDataExchangeApproachMarkedCompleteActivityMetaResolver) ModelPlan(ctx context.Context, obj *models.PlanDataExchangeApproachMarkedCompleteActivityMeta) (*models.ModelPlan, error) {
	return ModelPlanGetByIDLOADER(ctx, obj.ModelPlanID)
}

// MarkedCompleteByUserAccount is the resolver for the markedCompleteByUserAccount field.
func (r *planDataExchangeApproachMarkedCompleteActivityMetaResolver) MarkedCompleteByUserAccount(ctx context.Context, obj *models.PlanDataExchangeApproachMarkedCompleteActivityMeta) (*authentication.UserAccount, error) {
	return UserAccountGetByIDLOADER(ctx, obj.MarkedCompleteBy)
}

// ModelPlan is the resolver for the modelPlan field.
func (r *taggedInDiscussionReplyActivityMetaResolver) ModelPlan(ctx context.Context, obj *models.TaggedInDiscussionReplyActivityMeta) (*models.ModelPlan, error) {
	return ModelPlanGetByIDLOADER(ctx, obj.ModelPlanID)
}

// Discussion is the resolver for the discussion field.
func (r *taggedInDiscussionReplyActivityMetaResolver) Discussion(ctx context.Context, obj *models.TaggedInDiscussionReplyActivityMeta) (*models.PlanDiscussion, error) {
	logger := appcontext.ZLogger(ctx)
	return PlanDiscussionGetByID(ctx, r.store, logger, obj.DiscussionID)
}

// Reply is the resolver for the reply field.
func (r *taggedInDiscussionReplyActivityMetaResolver) Reply(ctx context.Context, obj *models.TaggedInDiscussionReplyActivityMeta) (*models.DiscussionReply, error) {
	logger := appcontext.ZLogger(ctx)
	return DiscussionReplyGetByID(ctx, r.store, logger, obj.ReplyID)
}

// ModelPlan is the resolver for the modelPlan field.
func (r *taggedInPlanDiscussionActivityMetaResolver) ModelPlan(ctx context.Context, obj *models.TaggedInPlanDiscussionActivityMeta) (*models.ModelPlan, error) {
	return ModelPlanGetByIDLOADER(ctx, obj.ModelPlanID)
}

// Discussion is the resolver for the discussion field.
func (r *taggedInPlanDiscussionActivityMetaResolver) Discussion(ctx context.Context, obj *models.TaggedInPlanDiscussionActivityMeta) (*models.PlanDiscussion, error) {
	logger := appcontext.ZLogger(ctx)
	return PlanDiscussionGetByID(ctx, r.store, logger, obj.DiscussionID)
}

// Activity returns generated.ActivityResolver implementation.
func (r *Resolver) Activity() generated.ActivityResolver { return &activityResolver{r} }

// AddedAsCollaboratorMeta returns generated.AddedAsCollaboratorMetaResolver implementation.
func (r *Resolver) AddedAsCollaboratorMeta() generated.AddedAsCollaboratorMetaResolver {
	return &addedAsCollaboratorMetaResolver{r}
}

// DailyDigestCompleteActivityMeta returns generated.DailyDigestCompleteActivityMetaResolver implementation.
func (r *Resolver) DailyDigestCompleteActivityMeta() generated.DailyDigestCompleteActivityMetaResolver {
	return &dailyDigestCompleteActivityMetaResolver{r}
}

// DatesChangedActivityMeta returns generated.DatesChangedActivityMetaResolver implementation.
func (r *Resolver) DatesChangedActivityMeta() generated.DatesChangedActivityMetaResolver {
	return &datesChangedActivityMetaResolver{r}
}

// ModelPlanSharedActivityMeta returns generated.ModelPlanSharedActivityMetaResolver implementation.
func (r *Resolver) ModelPlanSharedActivityMeta() generated.ModelPlanSharedActivityMetaResolver {
	return &modelPlanSharedActivityMetaResolver{r}
}

// NewDiscussionRepliedActivityMeta returns generated.NewDiscussionRepliedActivityMetaResolver implementation.
func (r *Resolver) NewDiscussionRepliedActivityMeta() generated.NewDiscussionRepliedActivityMetaResolver {
	return &newDiscussionRepliedActivityMetaResolver{r}
}

// NewModelPlanActivityMeta returns generated.NewModelPlanActivityMetaResolver implementation.
func (r *Resolver) NewModelPlanActivityMeta() generated.NewModelPlanActivityMetaResolver {
	return &newModelPlanActivityMetaResolver{r}
}

// PlanDataExchangeApproachMarkedCompleteActivityMeta returns generated.PlanDataExchangeApproachMarkedCompleteActivityMetaResolver implementation.
func (r *Resolver) PlanDataExchangeApproachMarkedCompleteActivityMeta() generated.PlanDataExchangeApproachMarkedCompleteActivityMetaResolver {
	return &planDataExchangeApproachMarkedCompleteActivityMetaResolver{r}
}

// TaggedInDiscussionReplyActivityMeta returns generated.TaggedInDiscussionReplyActivityMetaResolver implementation.
func (r *Resolver) TaggedInDiscussionReplyActivityMeta() generated.TaggedInDiscussionReplyActivityMetaResolver {
	return &taggedInDiscussionReplyActivityMetaResolver{r}
}

// TaggedInPlanDiscussionActivityMeta returns generated.TaggedInPlanDiscussionActivityMetaResolver implementation.
func (r *Resolver) TaggedInPlanDiscussionActivityMeta() generated.TaggedInPlanDiscussionActivityMetaResolver {
	return &taggedInPlanDiscussionActivityMetaResolver{r}
}

type activityResolver struct{ *Resolver }
type addedAsCollaboratorMetaResolver struct{ *Resolver }
type dailyDigestCompleteActivityMetaResolver struct{ *Resolver }
type datesChangedActivityMetaResolver struct{ *Resolver }
type modelPlanSharedActivityMetaResolver struct{ *Resolver }
type newDiscussionRepliedActivityMetaResolver struct{ *Resolver }
type newModelPlanActivityMetaResolver struct{ *Resolver }
type planDataExchangeApproachMarkedCompleteActivityMetaResolver struct{ *Resolver }
type taggedInDiscussionReplyActivityMetaResolver struct{ *Resolver }
type taggedInPlanDiscussionActivityMetaResolver struct{ *Resolver }
