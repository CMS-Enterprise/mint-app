package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/cmsgov/mint-app/pkg/appcontext"
	"github.com/cmsgov/mint-app/pkg/graph/generated"
	"github.com/cmsgov/mint-app/pkg/models"
)

// ModelBySolutionStatus is the resolver for the modelBySolutionStatus field.
func (r *modelPlanResolver) ModelBySolutionStatus(ctx context.Context, obj *models.ModelPlan) (models.ModelBySolutionStatus, error) {
	return ModelBySolutionStatus(obj.Status), nil
}

// PossibleOperationalSolution is the resolver for the possibleOperationalSolution field.
func (r *modelPlanAndPossibleOperationalSolutionResolver) PossibleOperationalSolution(ctx context.Context, obj *models.ModelPlanAndPossibleOperationalSolution) (*models.PossibleOperationalSolution, error) {

	return PossibleOperationalSolutionGetByKey(ctx, obj.Key)
}

// ModelPlan is the resolver for the modelPlan field.
func (r *modelPlanAndPossibleOperationalSolutionResolver) ModelPlan(ctx context.Context, obj *models.ModelPlanAndPossibleOperationalSolution) (*models.ModelPlan, error) {
	return ModelPlanGetByIDLOADER(ctx, obj.ModelPlanID)
}

// ModelPlansByOperationalSolutionKey is the resolver for the modelPlansByOperationalSolutionKey field.
func (r *queryResolver) ModelPlansByOperationalSolutionKey(ctx context.Context, operationalSolutionKey models.OperationalSolutionKey) ([]*models.ModelPlanAndPossibleOperationalSolution, error) {
	logger := appcontext.ZLogger(ctx)

	return ModelPlansByOperationalSolutionKey(
		logger,
		r.store,
		operationalSolutionKey,
	)
}

// ModelPlanAndPossibleOperationalSolution returns generated.ModelPlanAndPossibleOperationalSolutionResolver implementation.
func (r *Resolver) ModelPlanAndPossibleOperationalSolution() generated.ModelPlanAndPossibleOperationalSolutionResolver {
	return &modelPlanAndPossibleOperationalSolutionResolver{r}
}

type modelPlanAndPossibleOperationalSolutionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *modelPlanAndPossibleOperationalSolutionResolver) Key(ctx context.Context, obj *models.ModelPlanAndPossibleOperationalSolution) (models.OperationalSolutionKey, error) {
	panic(fmt.Errorf("not implemented: Key - key"))
}
func (r *modelPlanAndPossibleOperationalSolutionResolver) OperationalSolution(ctx context.Context, obj *models.ModelPlanAndPossibleOperationalSolution) (*models.PossibleOperationalSolution, error) {
	logger := appcontext.ZLogger(ctx)

	return PossibleOperationalSolutionGetByID(logger, r.store, obj.PossibleOperationalSolutionID)
}
