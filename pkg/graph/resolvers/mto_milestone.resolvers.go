package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// FacilitatedBy is the resolver for the facilitatedBy field.
func (r *mTOMilestoneResolver) FacilitatedBy(ctx context.Context, obj *models.MTOMilestone) ([]models.MTOFacilitator, error) {
	if obj.FacilitatedBy == nil {
		return nil, nil
	}
	return *obj.FacilitatedBy, nil
}

// CommonMilestone is the resolver for the commonMilestone field.
func (r *mTOMilestoneResolver) CommonMilestone(ctx context.Context, obj *models.MTOMilestone) (*models.MTOCommonMilestone, error) {
	if obj.Key != nil {
		return MTOCommonMilestoneGetByKeyLOADER(ctx, *obj.Key)
	}
	// if key is nil, there is no common milestone
	return nil, nil
}

// Solutions is the resolver for the solutions field.
func (r *mTOMilestoneResolver) Solutions(ctx context.Context, obj *models.MTOMilestone) ([]*models.MTOSolution, error) {
	panic(fmt.Errorf("not implemented: Solutions - solutions"))
}

// Category is the resolver for the category field.
func (r *mTOMilestoneResolver) Category(ctx context.Context, obj *models.MTOMilestone) (*models.MTOCategory, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// SubCategory is the resolver for the subCategory field.
func (r *mTOMilestoneResolver) SubCategory(ctx context.Context, obj *models.MTOMilestone) (*models.MTOSubcategory, error) {
	panic(fmt.Errorf("not implemented: SubCategory - subCategory"))
}

// CreateMTOMilestoneCustom is the resolver for the createMTOMilestoneCustom field.
func (r *mutationResolver) CreateMTOMilestoneCustom(ctx context.Context, modelPlanID uuid.UUID, name string, mtoCategoryID *uuid.UUID) (*models.MTOMilestone, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return MTOMilestoneCreateCustom(ctx, logger, principal, r.store, name, modelPlanID, mtoCategoryID)
}

// CreateMTOMilestoneCommon is the resolver for the createMTOMilestoneCommon field.
func (r *mutationResolver) CreateMTOMilestoneCommon(ctx context.Context, modelPlanID uuid.UUID, commonMilestoneKey models.MTOCommonMilestoneKey) (*models.MTOMilestone, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return MTOMilestoneCreateCommon(ctx, logger, principal, r.store, modelPlanID, commonMilestoneKey)
}

// UpdateMTOMilestone is the resolver for the updateMTOMilestone field.
func (r *mutationResolver) UpdateMTOMilestone(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.MTOMilestone, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return MTOMilestoneUpdate(ctx, logger, principal, r.store, id, changes)
}

// MTOMilestone returns generated.MTOMilestoneResolver implementation.
func (r *Resolver) MTOMilestone() generated.MTOMilestoneResolver { return &mTOMilestoneResolver{r} }

type mTOMilestoneResolver struct{ *Resolver }
