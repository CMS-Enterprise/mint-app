package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// CommonMilestone is the resolver for the commonMilestone field.
func (r *mTOMilestoneResolver) CommonMilestone(ctx context.Context, obj *models.MTOMilestone) (*model.CommonMilestone, error) {
	panic(fmt.Errorf("not implemented: CommonMilestone - commonMilestone"))
}

// Solutions is the resolver for the solutions field.
func (r *mTOMilestoneResolver) Solutions(ctx context.Context, obj *models.MTOMilestone) ([]*model.MTOSolution, error) {
	panic(fmt.Errorf("not implemented: Solutions - solutions"))
}

// Category is the resolver for the category field.
func (r *mTOMilestoneResolver) Category(ctx context.Context, obj *models.MTOMilestone) (*models.MTOCategory, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// SubCategory is the resolver for the subCategory field.
func (r *mTOMilestoneResolver) SubCategory(ctx context.Context, obj *models.MTOMilestone) (*models.MTOSubcategory, error) {
	panic(fmt.Errorf("not implemented: SubCategory - subCategory"))
}

// CreateMTOMilestone is the resolver for the createMTOMilestone field.
func (r *mutationResolver) CreateMTOMilestone(ctx context.Context, modelPlanID uuid.UUID, name *string, commonMilestoneKey *models.CommonMilestoneKey, mtoCategoryID *uuid.UUID) (*models.MTOMilestone, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return MTOMilestoneCreate(ctx, logger, principal, r.store, name, commonMilestoneKey, modelPlanID, mtoCategoryID)
}

// UpdateMTOMilestone is the resolver for the updateMTOMilestone field.
func (r *mutationResolver) UpdateMTOMilestone(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.MTOMilestone, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return MTOMilestoneUpdate(ctx, logger, principal, r.store, id, changes)
}

// MTOMilestone returns generated.MTOMilestoneResolver implementation.
func (r *Resolver) MTOMilestone() generated.MTOMilestoneResolver { return &mTOMilestoneResolver{r} }

type mTOMilestoneResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mTOMilestoneResolver) Key(ctx context.Context, obj *models.MTOMilestone) (*models.CommonMilestoneKey, error) {
	panic(fmt.Errorf("not implemented: Key - key"))
}
