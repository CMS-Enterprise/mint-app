package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// FacilitatedBy is the resolver for the facilitatedBy field.
func (r *mTOMilestoneResolver) FacilitatedBy(ctx context.Context, obj *models.MTOMilestone) (*models.MTOFacilitator, error) {
	panic(fmt.Errorf("not implemented: FacilitatedBy - facilitatedBy"))
}

// IsDraftMilestone is the resolver for the isDraftMilestone field.
func (r *mTOMilestoneResolver) IsDraftMilestone(ctx context.Context, obj *models.MTOMilestone) (bool, error) {
	panic(fmt.Errorf("not implemented: IsDraftMilestone - isDraftMilestone"))
}

// CommonMilestoneID is the resolver for the commonMilestoneID field.
func (r *mTOMilestoneResolver) CommonMilestoneID(ctx context.Context, obj *models.MTOMilestone) (*uuid.UUID, error) {
	panic(fmt.Errorf("not implemented: CommonMilestoneID - commonMilestoneID"))
}

// AddedFromMilestoneLibrary is the resolver for the addedFromMilestoneLibrary field.
func (r *mTOMilestoneResolver) AddedFromMilestoneLibrary(ctx context.Context, obj *models.MTOMilestone) (bool, error) {
	panic(fmt.Errorf("not implemented: AddedFromMilestoneLibrary - addedFromMilestoneLibrary"))
}

// CommonMilestone is the resolver for the commonMilestone field.
func (r *mTOMilestoneResolver) CommonMilestone(ctx context.Context, obj *models.MTOMilestone) (*model.CommonMilestone, error) {
	panic(fmt.Errorf("not implemented: CommonMilestone - commonMilestone"))
}

// Solutions is the resolver for the solutions field.
func (r *mTOMilestoneResolver) Solutions(ctx context.Context, obj *models.MTOMilestone) ([]*model.MTOSolution, error) {
	panic(fmt.Errorf("not implemented: Solutions - solutions"))
}

// Category is the resolver for the category field.
func (r *mTOMilestoneResolver) Category(ctx context.Context, obj *models.MTOMilestone) (*models.MTOCategory, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// SubCategory is the resolver for the subCategory field.
func (r *mTOMilestoneResolver) SubCategory(ctx context.Context, obj *models.MTOMilestone) (*models.MTOSubcategory, error) {
	panic(fmt.Errorf("not implemented: SubCategory - subCategory"))
}

// MTOMilestone returns generated.MTOMilestoneResolver implementation.
func (r *Resolver) MTOMilestone() generated.MTOMilestoneResolver { return &mTOMilestoneResolver{r} }

type mTOMilestoneResolver struct{ *Resolver }
