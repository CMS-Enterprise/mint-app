package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
	"github.com/google/uuid"
)

// ResponsibleComponent is the resolver for the responsibleComponent field.
func (r *mTOMilestoneResolver) ResponsibleComponent(ctx context.Context, obj *models.MTOMilestone) ([]models.MTOMilestoneResponsibleComponent, error) {
	return obj.ResponsibleComponent, nil
}

// FacilitatedBy is the resolver for the facilitatedBy field.
func (r *mTOMilestoneResolver) FacilitatedBy(ctx context.Context, obj *models.MTOMilestone) ([]models.MTOFacilitator, error) {
	if obj.FacilitatedBy == nil {
		return nil, nil
	}
	return *obj.FacilitatedBy, nil
}

// CommonMilestone is the resolver for the commonMilestone field.
func (r *mTOMilestoneResolver) CommonMilestone(ctx context.Context, obj *models.MTOMilestone) (*models.MTOCommonMilestone, error) {
	if obj.Key != nil {
		return MTOCommonMilestoneGetByKeyLOADER(ctx, *obj.Key)
	}
	// if key is nil, there is no common milestone
	return nil, nil
}

// Solutions is the resolver for the solutions field.
func (r *mTOMilestoneResolver) Solutions(ctx context.Context, obj *models.MTOMilestone) ([]*models.MTOSolution, error) {
	return MTOSolutionGetByMilestoneIDLOADER(ctx, obj.ID)
}

// Notes is the resolver for the notes field.
func (r *mTOMilestoneResolver) Notes(ctx context.Context, obj *models.MTOMilestone) ([]*models.MTOMilestoneNote, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return GetMTOMilestoneNotesByMilestoneIDLOADER(ctx, logger, principal, r.store, obj.ID)
}

// Categories is the resolver for the categories field.
func (r *mTOMilestoneResolver) Categories(ctx context.Context, obj *models.MTOMilestone) (*models.MTOCategories, error) {
	return MTOCategoriesGetByID(ctx, obj.MTOCategoryID, obj.ModelPlanID)
}

// CreateMTOMilestoneCustom is the resolver for the createMTOMilestoneCustom field.
func (r *mutationResolver) CreateMTOMilestoneCustom(ctx context.Context, modelPlanID uuid.UUID, name string, description *string, mtoCategoryID *uuid.UUID) (*models.MTOMilestone, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return MTOMilestoneCreateCustom(ctx, logger, principal, r.store, name, description, modelPlanID, mtoCategoryID)
}

// CreateMTOMilestoneCommon is the resolver for the createMTOMilestoneCommon field.
func (r *mutationResolver) CreateMTOMilestoneCommon(ctx context.Context, modelPlanID uuid.UUID, commonMilestoneKey models.MTOCommonMilestoneKey, commonSolutions []models.MTOCommonSolutionKey) (*models.MTOMilestone, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return MTOMilestoneCreateCommon(ctx, logger, principal, r.store, r.emailService, r.emailTemplateService, r.addressBook, modelPlanID, commonMilestoneKey, commonSolutions)
}

// UpdateMTOMilestone is the resolver for the updateMTOMilestone field.
func (r *mutationResolver) UpdateMTOMilestone(ctx context.Context, id uuid.UUID, changes map[string]any, solutionLinks *model.MTOSolutionLinks) (*models.MTOMilestone, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return MTOMilestoneUpdate(ctx, logger, principal, r.store, r.emailService, r.emailTemplateService, r.addressBook, id, changes, solutionLinks)
}

// DeleteMTOMilestone is the resolver for the deleteMTOMilestone field.
func (r *mutationResolver) DeleteMTOMilestone(ctx context.Context, id uuid.UUID) (bool, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return true, MTOMilestoneDelete(ctx, logger, principal, r.store, id)
}

// MtoMilestoneUpdateLinkedSolutions is the resolver for the mtoMilestoneUpdateLinkedSolutions field.
func (r *mutationResolver) MtoMilestoneUpdateLinkedSolutions(ctx context.Context, id uuid.UUID, solutionLinks model.MTOSolutionLinks) ([]*models.MTOSolution, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return MTOMilestoneUpdateLinkedSolutions(
		ctx,
		principal,
		logger,
		r.store,
		r.emailService, r.emailTemplateService, r.addressBook,
		id,
		solutionLinks.SolutionIDs,
		solutionLinks.CommonSolutionKeys,
	)
}

// MtoMilestone is the resolver for the mtoMilestone field.
func (r *queryResolver) MtoMilestone(ctx context.Context, id uuid.UUID) (*models.MTOMilestone, error) {
	return MTOMilestoneGetByIDLOADER(ctx, id)
}

// MTOMilestone returns generated.MTOMilestoneResolver implementation.
func (r *Resolver) MTOMilestone() generated.MTOMilestoneResolver { return &mTOMilestoneResolver{r} }

type mTOMilestoneResolver struct{ *Resolver }
