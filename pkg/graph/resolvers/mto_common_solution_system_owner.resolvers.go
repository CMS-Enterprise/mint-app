package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/models"
	"github.com/google/uuid"
)

// CreateMTOCommonSolutionSystemOwner is the resolver for the createMTOCommonSolutionSystemOwner field.
func (r *mutationResolver) CreateMTOCommonSolutionSystemOwner(ctx context.Context, key models.MTOCommonSolutionKey, changes map[string]any) (*models.MTOCommonSolutionSystemOwner, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return CreateMTOCommonSolutionSystemOwner(ctx, logger, principal, r.store, r.emailService, r.emailTemplateService, r.addressBook, key, changes)
}

// UpdateMTOCommonSolutionSystemOwner is the resolver for the updateMTOCommonSolutionSystemOwner field.
func (r *mutationResolver) UpdateMTOCommonSolutionSystemOwner(ctx context.Context, id uuid.UUID, changes map[string]any) (*models.MTOCommonSolutionSystemOwner, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return UpdateMTOCommonSolutionSystemOwner(ctx, logger, principal, r.store, r.emailService, r.emailTemplateService, r.addressBook, id, changes)
}

// DeleteMTOCommonSolutionSystemOwner is the resolver for the deleteMTOCommonSolutionSystemOwner field.
func (r *mutationResolver) DeleteMTOCommonSolutionSystemOwner(ctx context.Context, id uuid.UUID) (*models.MTOCommonSolutionSystemOwner, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return DeleteMTOCommonSolutionSystemOwner(ctx, logger, principal, r.store, r.emailService, r.emailTemplateService, r.addressBook, id)
}

// MtoCommonSolutionSystemOwner is the resolver for the mtoCommonSolutionSystemOwner field.
func (r *queryResolver) MtoCommonSolutionSystemOwner(ctx context.Context, id uuid.UUID) (*models.MTOCommonSolutionSystemOwner, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return GetMTOCommonSolutionSystemOwner(ctx, logger, principal, r.store, id)
}
