package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"
	"time"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/authentication"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// ReadyForReview is the resolver for the readyForReview field.
func (r *analyzedMTOUpdatesResolver) ReadyForReview(ctx context.Context, obj *models.AnalyzedMTOUpdates) (bool, error) {
	panic(fmt.Errorf("not implemented: ReadyForReview - readyForReview"))
}

// Updates is the resolver for the updates field.
func (r *analyzedMTOUpdatesResolver) Updates(ctx context.Context, obj *models.AnalyzedMTOUpdates) ([]*string, error) {
	panic(fmt.Errorf("not implemented: Updates - updates"))
}

// UserAccount is the resolver for the userAccount field.
func (r *analyzedModelLeadInfoResolver) UserAccount(ctx context.Context, obj *models.AnalyzedModelLeadInfo) (*authentication.UserAccount, error) {
	return UserAccountGetByIDLOADER(ctx, obj.ID)
}

// AnalyzedAudits is the resolver for the analyzedAudits field.
func (r *queryResolver) AnalyzedAudits(ctx context.Context, dateAnalyzed time.Time) ([]*models.AnalyzedAudit, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	audits, _, err := getDigestAnalyzedAudits(r.store, principal.Account().ID, dateAnalyzed, logger)
	if err != nil {
		return nil, err
	}
	return audits, nil
}

// AnalyzedMTOUpdates returns generated.AnalyzedMTOUpdatesResolver implementation.
func (r *Resolver) AnalyzedMTOUpdates() generated.AnalyzedMTOUpdatesResolver {
	return &analyzedMTOUpdatesResolver{r}
}

// AnalyzedModelLeadInfo returns generated.AnalyzedModelLeadInfoResolver implementation.
func (r *Resolver) AnalyzedModelLeadInfo() generated.AnalyzedModelLeadInfoResolver {
	return &analyzedModelLeadInfoResolver{r}
}

type analyzedMTOUpdatesResolver struct{ *Resolver }
type analyzedModelLeadInfoResolver struct{ *Resolver }
