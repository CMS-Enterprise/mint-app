package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/google/uuid"

	"github.com/cmsgov/mint-app/pkg/appcontext"
	"github.com/cmsgov/mint-app/pkg/graph/generated"
	"github.com/cmsgov/mint-app/pkg/graph/model"
	"github.com/cmsgov/mint-app/pkg/models"
)

// LockTaskListSection is the resolver for the lockTaskListSection field.
func (r *mutationResolver) LockTaskListSection(ctx context.Context, modelPlanID uuid.UUID, section models.TaskListSection) (bool, error) {
	principal := appcontext.Principal(ctx)

	return LockTaskListSection(r.pubsub, modelPlanID, section, principal)
}

// UnlockTaskListSection is the resolver for the unlockTaskListSection field.
func (r *mutationResolver) UnlockTaskListSection(ctx context.Context, modelPlanID uuid.UUID, section models.TaskListSection) (bool, error) {
	userID := appcontext.Principal(ctx).Account().ID

	return UnlockTaskListSection(r.pubsub, modelPlanID, section, userID, model.ActionTypeNormal)
}

// UnlockAllTaskListSections is the resolver for the unlockAllTaskListSections field.
func (r *mutationResolver) UnlockAllTaskListSections(ctx context.Context, modelPlanID uuid.UUID) ([]*model.TaskListSectionLockStatus, error) {
	return UnlockAllTaskListSections(r.pubsub, modelPlanID)
}

// TaskListSectionLocks is the resolver for the taskListSectionLocks field.
func (r *queryResolver) TaskListSectionLocks(ctx context.Context, modelPlanID uuid.UUID) ([]*model.TaskListSectionLockStatus, error) {
	return GetTaskListSectionLocks(modelPlanID)
}

// OnTaskListSectionLocksChanged is the resolver for the onTaskListSectionLocksChanged field.
func (r *subscriptionResolver) OnTaskListSectionLocksChanged(ctx context.Context, modelPlanID uuid.UUID) (<-chan *model.TaskListSectionLockStatusChanged, error) {
	principal := appcontext.Principal(ctx)

	return SubscribeTaskListSectionLockChanges(r.pubsub, modelPlanID, principal, ctx.Done())
}

// OnLockTaskListSectionContext is the resolver for the onLockTaskListSectionContext field.
func (r *subscriptionResolver) OnLockTaskListSectionContext(ctx context.Context, modelPlanID uuid.UUID) (<-chan *model.TaskListSectionLockStatusChanged, error) {
	principal := appcontext.Principal(ctx)

	return OnLockTaskListSectionContext(r.pubsub, modelPlanID, principal, ctx.Done())
}

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
