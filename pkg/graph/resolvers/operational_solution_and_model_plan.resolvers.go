package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/cmsgov/mint-app/pkg/appcontext"
	"github.com/cmsgov/mint-app/pkg/graph/generated"
	"github.com/cmsgov/mint-app/pkg/models"
)

// ModelBySolutionStatus is the resolver for the modelBySolutionStatus field.
func (r *modelPlanResolver) ModelBySolutionStatus(ctx context.Context, obj *models.ModelPlan) (models.ModelBySolutionStatus, error) {
	return ModelPlanByOperationalSolutionStatusPlannedActiveOrEnded(obj.Status), nil
}

// OperationalSolution is the resolver for the operationalSolution field.
func (r *modelPlanAndOperationalSolutionResolver) OperationalSolution(ctx context.Context, obj *models.ModelPlanAndOperationalSolution) (*models.OperationalSolution, error) {
	return OperationalSolutionGetByIDLOADER(ctx, obj.OperationalSolutionID)
}

// ModelPlan is the resolver for the modelPlan field.
func (r *modelPlanAndOperationalSolutionResolver) ModelPlan(ctx context.Context, obj *models.ModelPlanAndOperationalSolution) (*models.ModelPlan, error) {
	return ModelPlanGetByIDLOADER(ctx, obj.ModelPlanID)
}

// ModelPlansByOperationalSolutionKey is the resolver for the modelPlansByOperationalSolutionKey field.
func (r *queryResolver) ModelPlansByOperationalSolutionKey(ctx context.Context, operationalSolutionKey models.OperationalSolutionKey) ([]*models.ModelPlanAndOperationalSolution, error) {
	logger := appcontext.ZLogger(ctx)

	return ModelPlansByOperationalSolutionKey(
		logger,
		r.store,
		operationalSolutionKey,
	)
}

// ModelPlanAndOperationalSolution returns generated.ModelPlanAndOperationalSolutionResolver implementation.
func (r *Resolver) ModelPlanAndOperationalSolution() generated.ModelPlanAndOperationalSolutionResolver {
	return &modelPlanAndOperationalSolutionResolver{r}
}

type modelPlanAndOperationalSolutionResolver struct{ *Resolver }
