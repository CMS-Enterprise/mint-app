package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/google/uuid"

	"github.com/cmsgov/mint-app/pkg/appcontext"
	"github.com/cmsgov/mint-app/pkg/authentication"
	"github.com/cmsgov/mint-app/pkg/graph/generated"
	"github.com/cmsgov/mint-app/pkg/graph/model"
	"github.com/cmsgov/mint-app/pkg/models"
	"github.com/cmsgov/mint-app/pkg/userhelpers"
)

// Fields is the resolver for the fields field.
func (r *auditChangeResolver) Fields(ctx context.Context, obj *models.AuditChange) (map[string]interface{}, error) {
	return obj.Fields.ToInterface()
}

// Content is the resolver for the content field.
func (r *discussionReplyResolver) Content(ctx context.Context, obj *models.DiscussionReply) (*models.TaggedContent, error) {
	logger := appcontext.ZLogger(ctx)
	return TaggedContentGet(logger, r.store, string(obj.Content.RawContent), "discussion_reply", "content", obj.ID)
}

// Model is the resolver for the model field.
func (r *existingModelLinkResolver) Model(ctx context.Context, obj *models.ExistingModelLink) (models.LinkedExistingModel, error) {
	return ExistingModelLinkGetModel(ctx, obj)
}

// Names is the resolver for the names field.
func (r *existingModelLinksResolver) Names(ctx context.Context, obj *models.ExistingModelLinks) ([]string, error) {
	return ExistingModelLinksNameArray(ctx, obj.ModelPlanID, obj.FieldName)
}

// CreatePlanCollaborator is the resolver for the createPlanCollaborator field.
func (r *mutationResolver) CreatePlanCollaborator(ctx context.Context, input model.PlanCollaboratorCreateInput) (*models.PlanCollaborator, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	planCollaborator, _, err := CreatePlanCollaborator(
		ctx,
		r.store,
		r.store,
		logger,
		r.emailService,
		r.emailTemplateService,
		r.addressBook,
		&input,
		principal,
		true,
		userhelpers.GetUserInfoAccountInfoWrapperFunc(r.service.FetchUserInfo),
		true,
	)
	return planCollaborator, err
}

// UpdatePlanCollaborator is the resolver for the updatePlanCollaborator field.
func (r *mutationResolver) UpdatePlanCollaborator(ctx context.Context, id uuid.UUID, newRoles []models.TeamRole) (*models.PlanCollaborator, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return UpdatePlanCollaborator(logger, id, newRoles, principal, r.store)
}

// DeletePlanCollaborator is the resolver for the deletePlanCollaborator field.
func (r *mutationResolver) DeletePlanCollaborator(ctx context.Context, id uuid.UUID) (*models.PlanCollaborator, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return DeletePlanCollaborator(logger, id, principal, r.store)
}

// UpdatePlanBeneficiaries is the resolver for the updatePlanBeneficiaries field.
func (r *mutationResolver) UpdatePlanBeneficiaries(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanBeneficiaries, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanBeneficiariesUpdate(logger, id, changes, principal, r.store)
}

// UploadNewPlanDocument is the resolver for the uploadNewPlanDocument field.
func (r *mutationResolver) UploadNewPlanDocument(ctx context.Context, input model.PlanDocumentInput) (*models.PlanDocument, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	planDocument, err := PlanDocumentCreate(logger, &input, principal, r.store, r.s3Client)
	return planDocument, err
}

// LinkNewPlanDocument is the resolver for the linkNewPlanDocument field.
func (r *mutationResolver) LinkNewPlanDocument(ctx context.Context, input model.PlanDocumentLinkInput) (*models.PlanDocument, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanDocumentCreateLinked(logger, input, principal, r.store)
}

// DeletePlanDocument is the resolver for the deletePlanDocument field.
func (r *mutationResolver) DeletePlanDocument(ctx context.Context, id uuid.UUID) (int, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return PlanDocumentDelete(logger, r.s3Client, id, principal, r.store)
}

// CreatePlanDiscussion is the resolver for the createPlanDiscussion field.
func (r *mutationResolver) CreatePlanDiscussion(ctx context.Context, input model.PlanDiscussionCreateInput) (*models.PlanDiscussion, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return CreatePlanDiscussion(
		ctx,
		logger,
		r.emailService,
		r.emailTemplateService,
		r.addressBook,
		&input,
		principal,
		r.store,
		userhelpers.GetUserInfoAccountInfoWrapperFunc(r.service.FetchUserInfo),
	)
}

// CreateDiscussionReply is the resolver for the createDiscussionReply field.
func (r *mutationResolver) CreateDiscussionReply(ctx context.Context, input model.DiscussionReplyCreateInput) (*models.DiscussionReply, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return CreateDiscussionReply(
		ctx,
		logger,
		r.emailService,
		r.emailTemplateService,
		r.addressBook,
		&input,
		principal,
		r.store,
		userhelpers.GetUserInfoAccountInfoWrapperFunc(r.service.FetchUserInfo))
}

// LockTaskListSection is the resolver for the lockTaskListSection field.
func (r *mutationResolver) LockTaskListSection(ctx context.Context, modelPlanID uuid.UUID, section models.TaskListSection) (bool, error) {
	principal := appcontext.Principal(ctx)

	return LockTaskListSection(r.pubsub, modelPlanID, section, principal)
}

// UnlockTaskListSection is the resolver for the unlockTaskListSection field.
func (r *mutationResolver) UnlockTaskListSection(ctx context.Context, modelPlanID uuid.UUID, section models.TaskListSection) (bool, error) {
	userID := appcontext.Principal(ctx).Account().ID

	return UnlockTaskListSection(r.pubsub, modelPlanID, section, userID, model.ActionTypeNormal)
}

// UnlockAllTaskListSections is the resolver for the unlockAllTaskListSections field.
func (r *mutationResolver) UnlockAllTaskListSections(ctx context.Context, modelPlanID uuid.UUID) ([]*model.TaskListSectionLockStatus, error) {
	return UnlockAllTaskListSections(r.pubsub, modelPlanID)
}

// UpdatePlanPayments is the resolver for the updatePlanPayments field.
func (r *mutationResolver) UpdatePlanPayments(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanPayments, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)

	return PlanPaymentsUpdate(logger, r.store, id, changes, principal)
}

// AgreeToNda is the resolver for the agreeToNDA field.
func (r *mutationResolver) AgreeToNda(ctx context.Context, agree bool) (*model.NDAInfo, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)
	return NDAAgreementUpdateOrCreate(logger, agree, principal, r.store)
}

// AddPlanFavorite is the resolver for the addPlanFavorite field.
func (r *mutationResolver) AddPlanFavorite(ctx context.Context, modelPlanID uuid.UUID) (*models.PlanFavorite, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanFavoriteCreate(r.store, logger, principal, principal.Account().ID, r.store, modelPlanID)
}

// DeletePlanFavorite is the resolver for the deletePlanFavorite field.
func (r *mutationResolver) DeletePlanFavorite(ctx context.Context, modelPlanID uuid.UUID) (*models.PlanFavorite, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanFavoriteDelete(logger, principal, r.store, modelPlanID)
}

// CreatePlanCr is the resolver for the createPlanCR field.
func (r *mutationResolver) CreatePlanCr(ctx context.Context, input model.PlanCRCreateInput) (*models.PlanCR, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanCRCreate(logger, &input, principal, r.store)
}

// CreatePlanTdl is the resolver for the createPlanTDL field.
func (r *mutationResolver) CreatePlanTdl(ctx context.Context, input model.PlanTDLCreateInput) (*models.PlanTDL, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanTDLCreate(logger, &input, principal, r.store)
}

// UpdatePlanCr is the resolver for the updatePlanCR field.
func (r *mutationResolver) UpdatePlanCr(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanCR, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanCRUpdate(logger, id, changes, principal, r.store)
}

// UpdatePlanTdl is the resolver for the updatePlanTDL field.
func (r *mutationResolver) UpdatePlanTdl(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanTDL, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanTDLUpdate(logger, id, changes, principal, r.store)
}

// DeletePlanCr is the resolver for the deletePlanCR field.
func (r *mutationResolver) DeletePlanCr(ctx context.Context, id uuid.UUID) (*models.PlanCR, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanCRDelete(logger, id, principal, r.store)
}

// DeletePlanTdl is the resolver for the deletePlanTDL field.
func (r *mutationResolver) DeletePlanTdl(ctx context.Context, id uuid.UUID) (*models.PlanTDL, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanTDLDelete(logger, id, principal, r.store)
}

// AddOrUpdateCustomOperationalNeed is the resolver for the addOrUpdateCustomOperationalNeed field.
func (r *mutationResolver) AddOrUpdateCustomOperationalNeed(ctx context.Context, modelPlanID uuid.UUID, customNeedType string, needed bool) (*models.OperationalNeed, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return OperationalNeedInsertOrUpdateCustom(logger, modelPlanID, customNeedType, needed, principal, r.store)
}

// UpdateCustomOperationalNeedByID is the resolver for the updateCustomOperationalNeedByID field.
func (r *mutationResolver) UpdateCustomOperationalNeedByID(ctx context.Context, id uuid.UUID, customNeedType *string, needed bool) (*models.OperationalNeed, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return OperationalNeedCustomUpdateByID(logger, id, customNeedType, needed, principal, r.store)
}

// CreateOperationalSolution is the resolver for the createOperationalSolution field.
func (r *mutationResolver) CreateOperationalSolution(ctx context.Context, operationalNeedID uuid.UUID, solutionType *models.OperationalSolutionKey, changes map[string]interface{}) (*models.OperationalSolution, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return OperationalSolutionCreate(
		ctx,
		r.store,
		logger,
		r.emailService,
		r.emailTemplateService,
		r.addressBook,
		operationalNeedID,
		solutionType,
		changes,
		principal)
}

// UpdateOperationalSolution is the resolver for the updateOperationalSolution field.
func (r *mutationResolver) UpdateOperationalSolution(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.OperationalSolution, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return OperationalSolutionUpdate(logger, id, changes, principal, r.store)
}

// CreatePlanDocumentSolutionLinks is the resolver for the createPlanDocumentSolutionLinks field.
func (r *mutationResolver) CreatePlanDocumentSolutionLinks(ctx context.Context, solutionID uuid.UUID, documentIDs []uuid.UUID) ([]*models.PlanDocumentSolutionLink, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanDocumentSolutionLinksCreate(logger, r.store, solutionID, documentIDs, principal)
}

// RemovePlanDocumentSolutionLinks is the resolver for the removePlanDocumentSolutionLinks field.
func (r *mutationResolver) RemovePlanDocumentSolutionLinks(ctx context.Context, solutionID uuid.UUID, documentIDs []uuid.UUID) (bool, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanDocumentSolutionLinkRemove(logger, solutionID, documentIDs, r.store, principal)
}

// CreateOperationalSolutionSubtasks is the resolver for the createOperationalSolutionSubtasks field.
func (r *mutationResolver) CreateOperationalSolutionSubtasks(ctx context.Context, solutionID uuid.UUID, inputs []*model.CreateOperationalSolutionSubtaskInput) ([]*models.OperationalSolutionSubtask, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)

	return OperationalSolutionSubtasksCreate(logger, r.store, inputs, solutionID, principal)
}

// UpdateOperationalSolutionSubtasks is the resolver for the updateOperationalSolutionSubtasks field.
func (r *mutationResolver) UpdateOperationalSolutionSubtasks(ctx context.Context, inputs []*model.UpdateOperationalSolutionSubtaskInput) ([]*models.OperationalSolutionSubtask, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return OperationalSolutionSubtasksUpdateByID(logger, r.store, principal, inputs)
}

// DeleteOperationalSolutionSubtask is the resolver for the deleteOperationalSolutionSubtask field.
func (r *mutationResolver) DeleteOperationalSolutionSubtask(ctx context.Context, id uuid.UUID) (int, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)

	return OperationalSolutionSubtaskDelete(logger, r.store, principal, id)
}

// UpdateExistingModelLinks is the resolver for the updateExistingModelLinks field.
func (r *mutationResolver) UpdateExistingModelLinks(ctx context.Context, modelPlanID uuid.UUID, fieldName models.ExisitingModelLinkFieldType, existingModelIDs []int, currentModelPlanIDs []uuid.UUID) (*models.ExistingModelLinks, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)
	return ExistingModelLinksUpdate(logger, r.store, principal, modelPlanID, fieldName, existingModelIDs, currentModelPlanIDs)
}

// ReportAProblem is the resolver for the reportAProblem field.
func (r *mutationResolver) ReportAProblem(ctx context.Context, input model.ReportAProblemInput) (bool, error) {
	principal := appcontext.Principal(ctx)
	return ReportAProblem(r.emailService, r.emailTemplateService, r.addressBook, principal, input)
}

// SendFeedbackEmail is the resolver for the sendFeedbackEmail field.
func (r *mutationResolver) SendFeedbackEmail(ctx context.Context, input model.SendFeedbackEmailInput) (bool, error) {
	principal := appcontext.Principal(ctx)
	return SendFeedbackEmail(r.emailService, r.emailTemplateService, r.addressBook, principal, input)
}

// Solutions is the resolver for the solutions field.
func (r *operationalNeedResolver) Solutions(ctx context.Context, obj *models.OperationalNeed, includeNotNeeded bool) ([]*models.OperationalSolution, error) {
	return OperationaSolutionsAndPossibleGetByOPNeedIDLOADER(ctx, obj.ID, includeNotNeeded)
}

// Documents is the resolver for the documents field.
func (r *operationalSolutionResolver) Documents(ctx context.Context, obj *models.OperationalSolution) ([]*models.PlanDocument, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanDocumentsReadBySolutionID(
		logger,
		obj.ID,
		principal,
		r.store,
		r.s3Client,
	)
}

// OperationalSolutionSubtasks is the resolver for the operationalSolutionSubtasks field.
func (r *operationalSolutionResolver) OperationalSolutionSubtasks(ctx context.Context, obj *models.OperationalSolution) ([]*models.OperationalSolutionSubtask, error) {
	return OperationalSolutionSubtaskGetBySolutionIDLOADER(ctx, obj.ID)
}

// Beneficiaries is the resolver for the beneficiaries field.
func (r *planBeneficiariesResolver) Beneficiaries(ctx context.Context, obj *models.PlanBeneficiaries) ([]model.BeneficiariesType, error) {
	bTypes := models.ConvertEnums[model.BeneficiariesType](obj.Beneficiaries)
	return bTypes, nil
}

// BeneficiarySelectionMethod is the resolver for the beneficiarySelectionMethod field.
func (r *planBeneficiariesResolver) BeneficiarySelectionMethod(ctx context.Context, obj *models.PlanBeneficiaries) ([]model.SelectionMethodType, error) {
	sTypes := models.ConvertEnums[model.SelectionMethodType](obj.BeneficiarySelectionMethod)
	return sTypes, nil
}

// BeneficiarySelectionFrequency is the resolver for the beneficiarySelectionFrequency field.
func (r *planBeneficiariesResolver) BeneficiarySelectionFrequency(ctx context.Context, obj *models.PlanBeneficiaries) ([]models.FrequencyType, error) {
	return models.ConvertEnums[models.FrequencyType](obj.BeneficiarySelectionFrequency), nil
}

// BeneficiaryRemovalFrequency is the resolver for the beneficiaryRemovalFrequency field.
func (r *planBeneficiariesResolver) BeneficiaryRemovalFrequency(ctx context.Context, obj *models.PlanBeneficiaries) ([]models.FrequencyType, error) {
	return models.ConvertEnums[models.FrequencyType](obj.BeneficiaryRemovalFrequency), nil
}

// PrecedenceRules is the resolver for the precedenceRules field.
func (r *planBeneficiariesResolver) PrecedenceRules(ctx context.Context, obj *models.PlanBeneficiaries) ([]models.YesNoType, error) {
	return models.ConvertEnums[models.YesNoType](obj.PrecedenceRules), nil
}

// TeamRoles is the resolver for the teamRoles field.
func (r *planCollaboratorResolver) TeamRoles(ctx context.Context, obj *models.PlanCollaborator) ([]models.TeamRole, error) {
	return models.ConvertEnums[models.TeamRole](obj.TeamRoles), nil
}

// Content is the resolver for the content field.
func (r *planDiscussionResolver) Content(ctx context.Context, obj *models.PlanDiscussion) (*models.TaggedContent, error) {
	logger := appcontext.ZLogger(ctx)
	return TaggedContentGet(logger, r.store, string(obj.Content.RawContent), "plan_discussion", "content", obj.ID)
}

// Replies is the resolver for the replies field.
func (r *planDiscussionResolver) Replies(ctx context.Context, obj *models.PlanDiscussion) ([]*models.DiscussionReply, error) {
	return DiscussionReplyCollectionByDiscusionIDLOADER(ctx, obj.ID)
}

// URL is the resolver for the url field.
func (r *planDocumentResolver) URL(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	return obj.URL.Ptr(), nil
}

// OtherType is the resolver for the otherType field.
func (r *planDocumentResolver) OtherType(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	return obj.OtherTypeDescription.Ptr(), nil
}

// OptionalNotes is the resolver for the optionalNotes field.
func (r *planDocumentResolver) OptionalNotes(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	return obj.OptionalNotes.Ptr(), nil
}

// DownloadURL is the resolver for the downloadUrl field.
func (r *planDocumentResolver) DownloadURL(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	if obj.IsLink {
		return nil, nil
	}
	url, err := r.s3Client.NewGetPresignedURL(obj.FileKey)
	if err != nil {
		return nil, err
	}

	return url, nil
}

// NumLinkedSolutions is the resolver for the numLinkedSolutions field.
func (r *planDocumentResolver) NumLinkedSolutions(ctx context.Context, obj *models.PlanDocument) (int, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return PlanDocumentNumLinkedSolutions(logger, principal, r.store, obj.ID)
}

// FundingSource is the resolver for the fundingSource field.
func (r *planPaymentsResolver) FundingSource(ctx context.Context, obj *models.PlanPayments) ([]models.FundingSource, error) {
	return models.ConvertEnums[models.FundingSource](obj.FundingSource), nil
}

// FundingSourceR is the resolver for the fundingSourceR field.
func (r *planPaymentsResolver) FundingSourceR(ctx context.Context, obj *models.PlanPayments) ([]models.FundingSource, error) {
	return models.ConvertEnums[models.FundingSource](obj.FundingSourceR), nil
}

// PayRecipients is the resolver for the payRecipients field.
func (r *planPaymentsResolver) PayRecipients(ctx context.Context, obj *models.PlanPayments) ([]models.PayRecipient, error) {
	return models.ConvertEnums[models.PayRecipient](obj.PayRecipients), nil
}

// PayType is the resolver for the payType field.
func (r *planPaymentsResolver) PayType(ctx context.Context, obj *models.PlanPayments) ([]models.PayType, error) {
	return models.ConvertEnums[models.PayType](obj.PayType), nil
}

// PayClaims is the resolver for the payClaims field.
func (r *planPaymentsResolver) PayClaims(ctx context.Context, obj *models.PlanPayments) ([]models.ClaimsBasedPayType, error) {
	return models.ConvertEnums[models.ClaimsBasedPayType](obj.PayClaims), nil
}

// NonClaimsPayments is the resolver for the nonClaimsPayments field.
func (r *planPaymentsResolver) NonClaimsPayments(ctx context.Context, obj *models.PlanPayments) ([]model.NonClaimsBasedPayType, error) {
	return models.ConvertEnums[model.NonClaimsBasedPayType](obj.NonClaimsPayments), nil
}

// NonClaimsPaymentOther is the resolver for the nonClaimsPaymentOther field.
func (r *planPaymentsResolver) NonClaimsPaymentOther(ctx context.Context, obj *models.PlanPayments) (*string, error) {
	return obj.NonClaimsPaymentsOther, nil
}

// AnticipatedPaymentFrequency is the resolver for the anticipatedPaymentFrequency field.
func (r *planPaymentsResolver) AnticipatedPaymentFrequency(ctx context.Context, obj *models.PlanPayments) ([]models.FrequencyType, error) {
	return models.ConvertEnums[models.FrequencyType](obj.AnticipatedPaymentFrequency), nil
}

// PaymentReconciliationFrequency is the resolver for the paymentReconciliationFrequency field.
func (r *planPaymentsResolver) PaymentReconciliationFrequency(ctx context.Context, obj *models.PlanPayments) ([]models.FrequencyType, error) {
	return models.ConvertEnums[models.FrequencyType](obj.PaymentReconciliationFrequency), nil
}

// PaymentDemandRecoupmentFrequency is the resolver for the paymentDemandRecoupmentFrequency field.
func (r *planPaymentsResolver) PaymentDemandRecoupmentFrequency(ctx context.Context, obj *models.PlanPayments) ([]models.FrequencyType, error) {
	return models.ConvertEnums[models.FrequencyType](obj.PaymentDemandRecoupmentFrequency), nil
}

// PossibleSolutions is the resolver for the possibleSolutions field.
func (r *possibleOperationalNeedResolver) PossibleSolutions(ctx context.Context, obj *models.PossibleOperationalNeed) ([]*models.PossibleOperationalSolution, error) {
	logger := appcontext.ZLogger(ctx)
	return PossibleOperationalSolutionCollectionGetByNeedType(logger, obj.Key, r.store)
}

// PointsOfContact is the resolver for the pointsOfContact field.
func (r *possibleOperationalSolutionResolver) PointsOfContact(ctx context.Context, obj *models.PossibleOperationalSolution) ([]*models.PossibleOperationalSolutionContact, error) {
	return PossibleOperationalSolutionContactsGetByPossibleSolutionID(ctx, obj.ID)
}

// PlanDocument is the resolver for the planDocument field.
func (r *queryResolver) PlanDocument(ctx context.Context, id uuid.UUID) (*models.PlanDocument, error) {
	logger := appcontext.ZLogger(ctx)

	return PlanDocumentRead(logger, r.store, r.s3Client, id)
}

// ExistingModelCollection is the resolver for the existingModelCollection field.
func (r *queryResolver) ExistingModelCollection(ctx context.Context) ([]*models.ExistingModel, error) {
	logger := appcontext.ZLogger(ctx)
	return ExistingModelCollectionGet(logger, r.store)
}

// SearchOktaUsers is the resolver for the searchOktaUsers field.
func (r *queryResolver) SearchOktaUsers(ctx context.Context, searchTerm string) ([]*models.UserInfo, error) {
	response, err := r.service.SearchByName(ctx, searchTerm)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// PlanCollaboratorByID is the resolver for the planCollaboratorByID field.
func (r *queryResolver) PlanCollaboratorByID(ctx context.Context, id uuid.UUID) (*models.PlanCollaborator, error) {
	logger := appcontext.ZLogger(ctx)
	return FetchCollaboratorByID(logger, id, r.store)
}

// TaskListSectionLocks is the resolver for the taskListSectionLocks field.
func (r *queryResolver) TaskListSectionLocks(ctx context.Context, modelPlanID uuid.UUID) ([]*model.TaskListSectionLockStatus, error) {
	return GetTaskListSectionLocks(modelPlanID)
}

// PlanPayments is the resolver for the planPayments field.
func (r *queryResolver) PlanPayments(ctx context.Context, id uuid.UUID) (*models.PlanPayments, error) {
	logger := appcontext.ZLogger(ctx)

	return PlanPaymentsRead(logger, r.store, id)
}

// NdaInfo is the resolver for the ndaInfo field.
func (r *queryResolver) NdaInfo(ctx context.Context) (*model.NDAInfo, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)
	return NDAAgreementGetByUserID(logger, principal, r.store)
}

// PlanCr is the resolver for the planCR field.
func (r *queryResolver) PlanCr(ctx context.Context, id uuid.UUID) (*models.PlanCR, error) {
	logger := appcontext.ZLogger(ctx)
	return PlanCRGet(logger, id, r.store)
}

// PlanTdl is the resolver for the planTDL field.
func (r *queryResolver) PlanTdl(ctx context.Context, id uuid.UUID) (*models.PlanTDL, error) {
	logger := appcontext.ZLogger(ctx)
	return PlanTDLGet(logger, id, r.store)
}

// OperationalSolutions is the resolver for the operationalSolutions field.
func (r *queryResolver) OperationalSolutions(ctx context.Context, operationalNeedID uuid.UUID, includeNotNeeded bool) ([]*models.OperationalSolution, error) {
	return OperationaSolutionsAndPossibleGetByOPNeedIDLOADER(ctx, operationalNeedID, includeNotNeeded)
}

// OperationalSolution is the resolver for the operationalSolution field.
func (r *queryResolver) OperationalSolution(ctx context.Context, id uuid.UUID) (*models.OperationalSolution, error) {
	logger := appcontext.ZLogger(ctx)

	return OperationalSolutionGetByID(logger, id, r.store)
}

// OperationalNeed is the resolver for the operationalNeed field.
func (r *queryResolver) OperationalNeed(ctx context.Context, id uuid.UUID) (*models.OperationalNeed, error) {
	logger := appcontext.ZLogger(ctx)

	return OperationalNeedGetByID(logger, id, r.store)
}

// AuditChanges is the resolver for the auditChanges field.
func (r *queryResolver) AuditChanges(ctx context.Context, tableName string, primaryKey uuid.UUID) ([]*models.AuditChange, error) {
	logger := appcontext.ZLogger(ctx)
	return AuditChangeCollectionByIDAndTable(logger, tableName, primaryKey, r.store)
}

// PossibleOperationalNeeds is the resolver for the possibleOperationalNeeds field.
func (r *queryResolver) PossibleOperationalNeeds(ctx context.Context) ([]*models.PossibleOperationalNeed, error) {
	logger := appcontext.ZLogger(ctx)
	return PossibleOperationalNeedCollectionGet(logger, r.store)
}

// PossibleOperationalSolutions is the resolver for the possibleOperationalSolutions field.
func (r *queryResolver) PossibleOperationalSolutions(ctx context.Context) ([]*models.PossibleOperationalSolution, error) {
	logger := appcontext.ZLogger(ctx)

	return PossibleOperationalSolutionCollectionGetAll(logger, r.store)
}

// UserAccount is the resolver for the userAccount field.
func (r *queryResolver) UserAccount(ctx context.Context, username string) (*authentication.UserAccount, error) {
	logger := appcontext.ZLogger(ctx)
	return UserAccountGetByUsername(logger, r.store, username)
}

// ExistingModelLink is the resolver for the existingModelLink field.
func (r *queryResolver) ExistingModelLink(ctx context.Context, id uuid.UUID) (*models.ExistingModelLink, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return ExistingModelLinkGetByID(logger, r.store, principal, id)
}

// MostRecentDiscussionRoleSelection is the resolver for the mostRecentDiscussionRoleSelection field.
func (r *queryResolver) MostRecentDiscussionRoleSelection(ctx context.Context) (*models.DiscussionRoleSelection, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)

	return GetMostRecentDiscussionRoleSelection(logger, r.store, principal)
}

// OnTaskListSectionLocksChanged is the resolver for the onTaskListSectionLocksChanged field.
func (r *subscriptionResolver) OnTaskListSectionLocksChanged(ctx context.Context, modelPlanID uuid.UUID) (<-chan *model.TaskListSectionLockStatusChanged, error) {
	principal := appcontext.Principal(ctx)

	return SubscribeTaskListSectionLockChanges(r.pubsub, modelPlanID, principal, ctx.Done())
}

// OnLockTaskListSectionContext is the resolver for the onLockTaskListSectionContext field.
func (r *subscriptionResolver) OnLockTaskListSectionContext(ctx context.Context, modelPlanID uuid.UUID) (<-chan *model.TaskListSectionLockStatusChanged, error) {
	principal := appcontext.Principal(ctx)

	return OnLockTaskListSectionContext(r.pubsub, modelPlanID, principal, ctx.Done())
}

// Entity is the resolver for the entity field.
func (r *tagResolver) Entity(ctx context.Context, obj *models.Tag) (models.TaggedEntity, error) {
	return TaggedEntityGet(ctx, r.store, obj.TagType, obj.EntityUUID, obj.EntityIntID)
}

// RawContent is the resolver for the rawContent field.
func (r *taggedContentResolver) RawContent(ctx context.Context, obj *models.TaggedContent) (string, error) {
	return obj.RawContent.String(), nil
}

// AuditChange returns generated.AuditChangeResolver implementation.
func (r *Resolver) AuditChange() generated.AuditChangeResolver { return &auditChangeResolver{r} }

// DiscussionReply returns generated.DiscussionReplyResolver implementation.
func (r *Resolver) DiscussionReply() generated.DiscussionReplyResolver {
	return &discussionReplyResolver{r}
}

// ExistingModelLink returns generated.ExistingModelLinkResolver implementation.
func (r *Resolver) ExistingModelLink() generated.ExistingModelLinkResolver {
	return &existingModelLinkResolver{r}
}

// ExistingModelLinks returns generated.ExistingModelLinksResolver implementation.
func (r *Resolver) ExistingModelLinks() generated.ExistingModelLinksResolver {
	return &existingModelLinksResolver{r}
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// OperationalNeed returns generated.OperationalNeedResolver implementation.
func (r *Resolver) OperationalNeed() generated.OperationalNeedResolver {
	return &operationalNeedResolver{r}
}

// OperationalSolution returns generated.OperationalSolutionResolver implementation.
func (r *Resolver) OperationalSolution() generated.OperationalSolutionResolver {
	return &operationalSolutionResolver{r}
}

// PlanBeneficiaries returns generated.PlanBeneficiariesResolver implementation.
func (r *Resolver) PlanBeneficiaries() generated.PlanBeneficiariesResolver {
	return &planBeneficiariesResolver{r}
}

// PlanCollaborator returns generated.PlanCollaboratorResolver implementation.
func (r *Resolver) PlanCollaborator() generated.PlanCollaboratorResolver {
	return &planCollaboratorResolver{r}
}

// PlanDiscussion returns generated.PlanDiscussionResolver implementation.
func (r *Resolver) PlanDiscussion() generated.PlanDiscussionResolver {
	return &planDiscussionResolver{r}
}

// PlanDocument returns generated.PlanDocumentResolver implementation.
func (r *Resolver) PlanDocument() generated.PlanDocumentResolver { return &planDocumentResolver{r} }

// PlanPayments returns generated.PlanPaymentsResolver implementation.
func (r *Resolver) PlanPayments() generated.PlanPaymentsResolver { return &planPaymentsResolver{r} }

// PossibleOperationalNeed returns generated.PossibleOperationalNeedResolver implementation.
func (r *Resolver) PossibleOperationalNeed() generated.PossibleOperationalNeedResolver {
	return &possibleOperationalNeedResolver{r}
}

// PossibleOperationalSolution returns generated.PossibleOperationalSolutionResolver implementation.
func (r *Resolver) PossibleOperationalSolution() generated.PossibleOperationalSolutionResolver {
	return &possibleOperationalSolutionResolver{r}
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

// Tag returns generated.TagResolver implementation.
func (r *Resolver) Tag() generated.TagResolver { return &tagResolver{r} }

// TaggedContent returns generated.TaggedContentResolver implementation.
func (r *Resolver) TaggedContent() generated.TaggedContentResolver { return &taggedContentResolver{r} }

type auditChangeResolver struct{ *Resolver }
type discussionReplyResolver struct{ *Resolver }
type existingModelLinkResolver struct{ *Resolver }
type existingModelLinksResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type operationalNeedResolver struct{ *Resolver }
type operationalSolutionResolver struct{ *Resolver }
type planBeneficiariesResolver struct{ *Resolver }
type planCollaboratorResolver struct{ *Resolver }
type planDiscussionResolver struct{ *Resolver }
type planDocumentResolver struct{ *Resolver }
type planPaymentsResolver struct{ *Resolver }
type possibleOperationalNeedResolver struct{ *Resolver }
type possibleOperationalSolutionResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type tagResolver struct{ *Resolver }
type taggedContentResolver struct{ *Resolver }
