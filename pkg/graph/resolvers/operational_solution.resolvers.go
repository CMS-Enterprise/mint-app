package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/google/uuid"

	"github.com/cmsgov/mint-app/pkg/appcontext"
	"github.com/cmsgov/mint-app/pkg/graph/generated"
	"github.com/cmsgov/mint-app/pkg/graph/model"
	"github.com/cmsgov/mint-app/pkg/models"
)

// CreateOperationalSolutionSubtasks is the resolver for the createOperationalSolutionSubtasks field.
func (r *mutationResolver) CreateOperationalSolutionSubtasks(ctx context.Context, solutionID uuid.UUID, inputs []*model.CreateOperationalSolutionSubtaskInput) ([]*models.OperationalSolutionSubtask, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)

	return OperationalSolutionSubtasksCreate(logger, r.store, inputs, solutionID, principal)
}

// UpdateOperationalSolutionSubtasks is the resolver for the updateOperationalSolutionSubtasks field.
func (r *mutationResolver) UpdateOperationalSolutionSubtasks(ctx context.Context, inputs []*model.UpdateOperationalSolutionSubtaskInput) ([]*models.OperationalSolutionSubtask, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return OperationalSolutionSubtasksUpdateByID(logger, r.store, principal, inputs)
}

// DeleteOperationalSolutionSubtask is the resolver for the deleteOperationalSolutionSubtask field.
func (r *mutationResolver) DeleteOperationalSolutionSubtask(ctx context.Context, id uuid.UUID) (int, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)

	return OperationalSolutionSubtaskDelete(logger, r.store, principal, id)
}

// Documents is the resolver for the documents field.
func (r *operationalSolutionResolver) Documents(ctx context.Context, obj *models.OperationalSolution) ([]*models.PlanDocument, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanDocumentsReadBySolutionID(
		logger,
		obj.ID,
		principal,
		r.store,
		r.s3Client,
	)
}

// OperationalSolutionSubtasks is the resolver for the operationalSolutionSubtasks field.
func (r *operationalSolutionResolver) OperationalSolutionSubtasks(ctx context.Context, obj *models.OperationalSolution) ([]*models.OperationalSolutionSubtask, error) {
	return OperationalSolutionSubtaskGetBySolutionIDLOADER(ctx, obj.ID)
}

// OperationalSolutions is the resolver for the operationalSolutions field.
func (r *queryResolver) OperationalSolutions(ctx context.Context, operationalNeedID uuid.UUID, includeNotNeeded bool) ([]*models.OperationalSolution, error) {
	return OperationaSolutionsAndPossibleGetByOPNeedIDLOADER(ctx, operationalNeedID, includeNotNeeded)
}

// OperationalSolution is the resolver for the operationalSolution field.
func (r *queryResolver) OperationalSolution(ctx context.Context, id uuid.UUID) (*models.OperationalSolution, error) {
	logger := appcontext.ZLogger(ctx)

	return OperationalSolutionGetByID(logger, id, r.store)
}

// OperationalSolution returns generated.OperationalSolutionResolver implementation.
func (r *Resolver) OperationalSolution() generated.OperationalSolutionResolver {
	return &operationalSolutionResolver{r}
}

type operationalSolutionResolver struct{ *Resolver }
