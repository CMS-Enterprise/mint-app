package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// Documents is the resolver for the documents field.
func (r *operationalSolutionResolver) Documents(ctx context.Context, obj *models.OperationalSolution) ([]*models.PlanDocument, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanDocumentsReadBySolutionID(
		logger,
		obj.ID,
		principal,
		r.store,
		r.fileUploadS3Client,
	)
}

// OperationalSolutionSubtasks is the resolver for the operationalSolutionSubtasks field.
func (r *operationalSolutionResolver) OperationalSolutionSubtasks(ctx context.Context, obj *models.OperationalSolution) ([]*models.OperationalSolutionSubtask, error) {
	return OperationalSolutionSubtaskGetBySolutionIDLOADER(ctx, obj.ID)
}

// OperationalSolutions is the resolver for the operationalSolutions field.
func (r *queryResolver) OperationalSolutions(ctx context.Context, operationalNeedID uuid.UUID, includeNotNeeded bool) ([]*models.OperationalSolution, error) {
	return OperationalSolutionsAndPossibleGetByOPNeedIDLOADER(ctx, operationalNeedID, includeNotNeeded)
}

// OperationalSolution is the resolver for the operationalSolution field.
func (r *queryResolver) OperationalSolution(ctx context.Context, id uuid.UUID) (*models.OperationalSolution, error) {
	return OperationalSolutionGetByIDLOADER(ctx, id)
}

// OperationalSolution returns generated.OperationalSolutionResolver implementation.
func (r *Resolver) OperationalSolution() generated.OperationalSolutionResolver {
	return &operationalSolutionResolver{r}
}

type operationalSolutionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mutationResolver) CreateOperationalSolution(ctx context.Context, operationalNeedID uuid.UUID, solutionType *models.OperationalSolutionKey, changes map[string]interface{}) (*models.OperationalSolution, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return OperationalSolutionCreate(
		ctx,
		r.store,
		logger,
		r.emailService,
		r.emailTemplateService,
		r.addressBook,
		operationalNeedID,
		solutionType,
		changes,
		principal)
}
func (r *mutationResolver) UpdateOperationalSolution(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.OperationalSolution, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return OperationalSolutionUpdate(logger, id, changes, principal, r.store)
}
