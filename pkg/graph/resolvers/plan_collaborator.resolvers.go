package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
	"github.com/cms-enterprise/mint-app/pkg/userhelpers"
	"github.com/google/uuid"
)

// CreatePlanCollaborator is the resolver for the createPlanCollaborator field.
func (r *mutationResolver) CreatePlanCollaborator(ctx context.Context, input model.PlanCollaboratorCreateInput) (*models.PlanCollaborator, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	planCollaborator, _, err := PlanCollaboratorCreate(
		ctx,
		r.store,
		r.store,
		logger,
		r.emailService,
		r.emailTemplateService,
		r.addressBook,
		&input,
		principal,
		true,
		userhelpers.GetUserInfoAccountInfoWrapperFunc(r.service.FetchUserInfo),
		true,
	)
	return planCollaborator, err
}

// UpdatePlanCollaborator is the resolver for the updatePlanCollaborator field.
func (r *mutationResolver) UpdatePlanCollaborator(ctx context.Context, id uuid.UUID, newRoles []models.TeamRole) (*models.PlanCollaborator, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return PlanCollaboratorUpdate(logger, id, newRoles, principal, r.store)
}

// DeletePlanCollaborator is the resolver for the deletePlanCollaborator field.
func (r *mutationResolver) DeletePlanCollaborator(ctx context.Context, id uuid.UUID) (*models.PlanCollaborator, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return PlanCollaboratorDelete(logger, id, principal, r.store)
}

// TeamRoles is the resolver for the teamRoles field.
func (r *planCollaboratorResolver) TeamRoles(ctx context.Context, obj *models.PlanCollaborator) ([]models.TeamRole, error) {
	return models.ConvertEnums[models.TeamRole](obj.TeamRoles), nil
}

// PlanCollaboratorByID is the resolver for the planCollaboratorByID field.
func (r *queryResolver) PlanCollaboratorByID(ctx context.Context, id uuid.UUID) (*models.PlanCollaborator, error) {
	return PlanCollaboratorGetByID(ctx, id)
}

// PlanCollaborator returns generated.PlanCollaboratorResolver implementation.
func (r *Resolver) PlanCollaborator() generated.PlanCollaboratorResolver {
	return &planCollaboratorResolver{r}
}

type planCollaboratorResolver struct{ *Resolver }
