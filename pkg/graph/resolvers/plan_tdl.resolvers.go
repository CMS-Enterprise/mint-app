package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
	"github.com/google/uuid"
)

// CreatePlanTdl is the resolver for the createPlanTDL field.
func (r *mutationResolver) CreatePlanTdl(ctx context.Context, input model.PlanTDLCreateInput) (*models.PlanTDL, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanTDLCreate(logger, &input, principal, r.store)
}

// UpdatePlanTdl is the resolver for the updatePlanTDL field.
func (r *mutationResolver) UpdatePlanTdl(ctx context.Context, id uuid.UUID, changes map[string]any) (*models.PlanTDL, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanTDLUpdate(logger, id, changes, principal, r.store)
}

// DeletePlanTdl is the resolver for the deletePlanTDL field.
func (r *mutationResolver) DeletePlanTdl(ctx context.Context, id uuid.UUID) (*models.PlanTDL, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanTDLDelete(logger, id, principal, r.store)
}

// PlanTdl is the resolver for the planTDL field.
func (r *queryResolver) PlanTdl(ctx context.Context, id uuid.UUID) (*models.PlanTDL, error) {
	logger := appcontext.ZLogger(ctx)
	return PlanTDLGet(logger, id, r.store)
}
