package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// Categories is the resolver for the categories field.
func (r *modelsToOperationMatrixResolver) Categories(ctx context.Context, obj *models.ModelsToOperationMatrix) ([]*models.MTOCategory, error) {
	return MTOCategoryGetByModelPlanIDLOADER(ctx, obj.ModelPlan.ID)
}

// CommonMilestones is the resolver for the commonMilestones field.
func (r *modelsToOperationMatrixResolver) CommonMilestones(ctx context.Context, obj *models.ModelsToOperationMatrix) ([]*models.MTOCommonMilestone, error) {
	return MTOCommonMilestoneGetByModelPlanIDLOADER(ctx, &obj.ModelPlan.ID)
}

// CommonSolutions is the resolver for the commonSolutions field.
func (r *modelsToOperationMatrixResolver) CommonSolutions(ctx context.Context, obj *models.ModelsToOperationMatrix) ([]*models.MTOCommonSolution, error) {
	return MTOCommonSolutionGetByModelPlanIDLOADER(ctx, &obj.ModelPlan.ID)
}

// Milestones is the resolver for the milestones field.
func (r *modelsToOperationMatrixResolver) Milestones(ctx context.Context, obj *models.ModelsToOperationMatrix) ([]*models.MTOMilestone, error) {
	return MTOMilestoneGetByModelPlanIDLOADER(ctx, obj.ModelPlan.ID)
}

// Solutions is the resolver for the solutions field.
func (r *modelsToOperationMatrixResolver) Solutions(ctx context.Context, obj *models.ModelsToOperationMatrix) ([]*models.MTOSolution, error) {
	return MTOSolutionGetByModelPlanIDLOADER(ctx, obj.ModelPlan.ID)
}

// Status is the resolver for the status field.
func (r *modelsToOperationMatrixResolver) Status(ctx context.Context, obj *models.ModelsToOperationMatrix) (models.MTOStatus, error) {
	return MTOStatusGet(ctx, obj.ModelPlan.ID)
}

// RecentEdit is the resolver for the recentEdit field.
func (r *modelsToOperationMatrixResolver) RecentEdit(ctx context.Context, obj *models.ModelsToOperationMatrix) (*models.RecentModification, error) {
	// TODO re-visit when solutions are implemented
	// TODO re-visit when change history is implemented for MTO
	return MTOLastUpdatedGet(ctx, obj.ModelPlan.ID)
}

// MilestonesWithNoLinkedSolutions is the resolver for the milestonesWithNoLinkedSolutions field.
func (r *modelsToOperationMatrixResolver) MilestonesWithNoLinkedSolutions(ctx context.Context, obj *models.ModelsToOperationMatrix) ([]*models.MTOMilestone, error) {
	return MTOMilestoneGetByModelPlanIDNoLinkedSolutionLoader(ctx, obj.ModelPlan.ID)
}

// Info is the resolver for the info field.
func (r *modelsToOperationMatrixResolver) Info(ctx context.Context, obj *models.ModelsToOperationMatrix) (*models.MTOInfo, error) {
	return MTOInfoGetByModelPlanIDLOADER(ctx, obj.ModelPlan.ID)
}

// MarkMTOReadyForReview is the resolver for the markMTOReadyForReview field.
func (r *mutationResolver) MarkMTOReadyForReview(ctx context.Context, modelPlanID uuid.UUID, readyForReview bool) (*models.MTOInfo, error) {
	princ := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return MTOToggleReadyForReview(ctx, logger, princ, r.store, modelPlanID, readyForReview)
}

// ModelsToOperationMatrix returns generated.ModelsToOperationMatrixResolver implementation.
func (r *Resolver) ModelsToOperationMatrix() generated.ModelsToOperationMatrixResolver {
	return &modelsToOperationMatrixResolver{r}
}

type modelsToOperationMatrixResolver struct{ *Resolver }
