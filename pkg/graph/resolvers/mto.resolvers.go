package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/authentication"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// Categories is the resolver for the categories field.
func (r *modelsToOperationMatrixResolver) Categories(ctx context.Context, obj *models.ModelsToOperationMatrix) ([]*models.MTOCategory, error) {
	return MTOCategoryGetByModelPlanIDLOADER(ctx, obj.ModelPlan.ID)
}

// CommonMilestones is the resolver for the commonMilestones field.
func (r *modelsToOperationMatrixResolver) CommonMilestones(ctx context.Context, obj *models.ModelsToOperationMatrix) ([]*models.MTOCommonMilestone, error) {
	return MTOCommonMilestoneGetByModelPlanIDLOADER(ctx, &obj.ModelPlan.ID)
}

// CommonSolutions is the resolver for the commonSolutions field.
func (r *modelsToOperationMatrixResolver) CommonSolutions(ctx context.Context, obj *models.ModelsToOperationMatrix) ([]*models.MTOCommonSolution, error) {
	return MTOCommonSolutionGetByModelPlanIDLOADER(ctx, &obj.ModelPlan.ID)
}

// Milestones is the resolver for the milestones field.
func (r *modelsToOperationMatrixResolver) Milestones(ctx context.Context, obj *models.ModelsToOperationMatrix) ([]*models.MTOMilestone, error) {
	return MTOMilestoneGetByModelPlanIDLOADER(ctx, obj.ModelPlan.ID)
}

// Solutions is the resolver for the solutions field.
func (r *modelsToOperationMatrixResolver) Solutions(ctx context.Context, obj *models.ModelsToOperationMatrix) ([]*model.MTOSolution, error) {
	panic(fmt.Errorf("not implemented: Solutions - solutions"))
}

// Status is the resolver for the status field.
func (r *modelsToOperationMatrixResolver) Status(ctx context.Context, obj *models.ModelsToOperationMatrix) (models.MTOStatus, error) {
	//TODO (mto) Update when we have a methodology for Ready for Review
	mtoMarkedReadyToReview := false
	return MTOStatusGet(ctx, obj.ModelPlan.ID, mtoMarkedReadyToReview)
}

// RecentEdit is the resolver for the recentEdit field.
func (r *modelsToOperationMatrixResolver) RecentEdit(ctx context.Context, obj *models.ModelsToOperationMatrix) (*models.RecentModification, error) {
	// TODO re-visit when solutions are implemented
	// TODO re-visit when change history is implemented for MTO
	return MTOLastUpdatedGet(ctx, obj.ModelPlan.ID)
}

// ReadyForReviewBy is the resolver for the readyForReviewBy field.
func (r *modelsToOperationMatrixResolver) ReadyForReviewBy(ctx context.Context, obj *models.ModelsToOperationMatrix) (*uuid.UUID, error) {
	return obj.ModelPlan.MTOReadyForReviewBy, nil
}

// ReadyForReviewDts is the resolver for the readyForReviewDTS field.
func (r *modelsToOperationMatrixResolver) ReadyForReviewDts(ctx context.Context, obj *models.ModelsToOperationMatrix) (*time.Time, error) {
	return obj.ModelPlan.MTOReadyForReviewDts, nil
}

// ReadyForReviewByUserAccount is the resolver for the readyForReviewByUserAccount field.
func (r *modelsToOperationMatrixResolver) ReadyForReviewByUserAccount(ctx context.Context, obj *models.ModelsToOperationMatrix) (*authentication.UserAccount, error) {
	if obj.ModelPlan.MTOReadyForReviewBy == nil {
		return nil, nil
	}
	return UserAccountGetByIDLOADER(ctx, *obj.ModelPlan.MTOReadyForReviewBy)
}

// ModelsToOperationMatrix returns generated.ModelsToOperationMatrixResolver implementation.
func (r *Resolver) ModelsToOperationMatrix() generated.ModelsToOperationMatrixResolver {
	return &modelsToOperationMatrixResolver{r}
}

type modelsToOperationMatrixResolver struct{ *Resolver }
