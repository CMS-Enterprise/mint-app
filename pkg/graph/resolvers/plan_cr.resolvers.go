package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
	"github.com/google/uuid"
)

// CreatePlanCr is the resolver for the createPlanCR field.
func (r *mutationResolver) CreatePlanCr(ctx context.Context, input model.PlanCRCreateInput) (*models.PlanCR, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanCRCreate(logger, &input, principal, r.store)
}

// UpdatePlanCr is the resolver for the updatePlanCR field.
func (r *mutationResolver) UpdatePlanCr(ctx context.Context, id uuid.UUID, changes map[string]any) (*models.PlanCR, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanCRUpdate(logger, id, changes, principal, r.store)
}

// DeletePlanCr is the resolver for the deletePlanCR field.
func (r *mutationResolver) DeletePlanCr(ctx context.Context, id uuid.UUID) (*models.PlanCR, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanCRDelete(logger, id, principal, r.store)
}

// PlanCr is the resolver for the planCR field.
func (r *queryResolver) PlanCr(ctx context.Context, id uuid.UUID) (*models.PlanCR, error) {
	logger := appcontext.ZLogger(ctx)
	return PlanCRGet(logger, id, r.store)
}
