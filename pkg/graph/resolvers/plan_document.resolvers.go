package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// UploadNewPlanDocument is the resolver for the uploadNewPlanDocument field.
func (r *mutationResolver) UploadNewPlanDocument(ctx context.Context, input model.PlanDocumentInput) (*models.PlanDocument, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	planDocument, err := PlanDocumentCreate(logger, &input, principal, r.store, r.fileUploadS3Client)
	return planDocument, err
}

// LinkNewPlanDocument is the resolver for the linkNewPlanDocument field.
func (r *mutationResolver) LinkNewPlanDocument(ctx context.Context, input model.PlanDocumentLinkInput) (*models.PlanDocument, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanDocumentCreateLinked(logger, input, principal, r.store)
}

// DeletePlanDocument is the resolver for the deletePlanDocument field.
func (r *mutationResolver) DeletePlanDocument(ctx context.Context, id uuid.UUID) (int, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return PlanDocumentDelete(logger, r.fileUploadS3Client, id, principal, r.store)
}

// URL is the resolver for the url field.
func (r *planDocumentResolver) URL(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	return obj.URL.Ptr(), nil
}

// OtherType is the resolver for the otherType field.
func (r *planDocumentResolver) OtherType(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	return obj.OtherTypeDescription.Ptr(), nil
}

// OptionalNotes is the resolver for the optionalNotes field.
func (r *planDocumentResolver) OptionalNotes(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	return obj.OptionalNotes.Ptr(), nil
}

// DownloadURL is the resolver for the downloadUrl field.
func (r *planDocumentResolver) DownloadURL(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	if obj.IsLink {
		return nil, nil
	}
	url, err := r.fileUploadS3Client.NewGetPresignedURL(ctx, obj.FileKey)
	if err != nil {
		return nil, err
	}

	return url, nil
}

// NumLinkedSolutions is the resolver for the numLinkedSolutions field.
func (r *planDocumentResolver) NumLinkedSolutions(ctx context.Context, obj *models.PlanDocument) (int, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return PlanDocumentNumLinkedSolutions(logger, principal, r.store, obj.ID)
}

// PlanDocument is the resolver for the planDocument field.
func (r *queryResolver) PlanDocument(ctx context.Context, id uuid.UUID) (*models.PlanDocument, error) {
	logger := appcontext.ZLogger(ctx)

	return PlanDocumentRead(logger, r.store, r.fileUploadS3Client, id)
}

// PlanDocument returns generated.PlanDocumentResolver implementation.
func (r *Resolver) PlanDocument() generated.PlanDocumentResolver { return &planDocumentResolver{r} }

type planDocumentResolver struct{ *Resolver }
