package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// ModelByGroupStatus is the resolver for the modelByGroupStatus field.
func (r *modelPlanResolver) ModelByGroupStatus(ctx context.Context, obj *models.ModelPlan) (models.ModelByGroupStatus, error) {
	return ModelByGroupStatus(obj.Status), nil
}

// Key is the resolver for the key field.
func (r *modelPlanAndGroupResolver) Key(ctx context.Context, obj *models.ModelPlanAndGroup) (models.ComponentGroup, error) {
	return obj.ComponentGroup, nil
}

// ModelPlan is the resolver for the modelPlan field.
func (r *modelPlanAndGroupResolver) ModelPlan(ctx context.Context, obj *models.ModelPlanAndGroup) (*models.ModelPlan, error) {
	return ModelPlanGetByIDLOADER(ctx, obj.ModelPlanID)
}

// ModelPlansByComponentGroup is the resolver for the modelPlansByComponentGroup field.
func (r *queryResolver) ModelPlansByComponentGroup(ctx context.Context, key models.ComponentGroup) ([]*models.ModelPlanAndGroup, error) {
	logger := appcontext.ZLogger(ctx)
	return ModelPlansByComponentGroup(logger, r.store, key)
}

// ModelPlanAndGroup returns generated.ModelPlanAndGroupResolver implementation.
func (r *Resolver) ModelPlanAndGroup() generated.ModelPlanAndGroupResolver {
	return &modelPlanAndGroupResolver{r}
}

type modelPlanAndGroupResolver struct{ *Resolver }
