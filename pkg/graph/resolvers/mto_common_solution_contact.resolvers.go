package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/google/uuid"
	"go.uber.org/zap"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/authentication"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// UserAccount is the resolver for the userAccount field.
func (r *mTOCommonSolutionContactResolver) UserAccount(ctx context.Context, obj *models.MTOCommonSolutionContact) (*authentication.UserAccount, error) {
	account, err := UserAccountGetByIDLOADER(ctx, *obj.UserAccountID)
	if err != nil {
		logger := appcontext.ZLogger(ctx)
		logger.Error("failed to load user account by ID", zap.Error(err), zap.String("userAccountID", obj.UserAccountID.String()))
		empty := ""
		account = &authentication.UserAccount{
			Username:   &empty,
			ID:         uuid.Nil,
			CommonName: empty,
			Locale:     empty,
			Email:      empty,
			GivenName:  empty,
			FamilyName: empty,
			ZoneInfo:   empty,
		}
	}
	return account, nil
}

// CreateMTOCommonSolutionMailboxContact is the resolver for the createMTOCommonSolutionMailboxContact field.
func (r *mutationResolver) CreateMTOCommonSolutionMailboxContact(ctx context.Context, key models.MTOCommonSolutionKey, mailboxTitle *string, mailboxAddress string, isTeam bool, role *string, receiveEmails bool, isPrimary bool) (*models.MTOCommonSolutionContact, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return CreateMTOCommonSolutionContactMailbox(ctx, logger, principal, r.store, key, mailboxTitle, mailboxAddress, isTeam, role, receiveEmails, isPrimary)
}

// CreateMTOCommonSolutionUserContact is the resolver for the createMTOCommonSolutionUserContact field.
func (r *mutationResolver) CreateMTOCommonSolutionUserContact(ctx context.Context, key models.MTOCommonSolutionKey, userName string, isTeam bool, role *string, receiveEmails bool, isPrimary bool) (*models.MTOCommonSolutionContact, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return CreateMTOCommonSolutionUserContactUser(ctx, logger, principal, r.store, key, userName, isTeam, role, receiveEmails, isPrimary)
}

// UpdateMTOCommonSolutionContact is the resolver for the updateMTOCommonSolutionContact field.
func (r *mutationResolver) UpdateMTOCommonSolutionContact(ctx context.Context, id uuid.UUID, input map[string]interface{}) (*models.MTOCommonSolutionContact, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return UpdateMTOCommonSolutionContact(ctx, logger, principal, r.store, id, input)
}

// DeleteMTOCommonSolutionContact is the resolver for the deleteMTOCommonSolutionContact field.
func (r *mutationResolver) DeleteMTOCommonSolutionContact(ctx context.Context, id uuid.UUID) (*models.MTOCommonSolutionContact, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return DeleteMTOCommonSolutionContact(ctx, logger, principal, r.store, id)
}

// MtoCommonSolutionContact is the resolver for the mtoCommonSolutionContact field.
func (r *queryResolver) MtoCommonSolutionContact(ctx context.Context, id uuid.UUID) (*models.MTOCommonSolutionContact, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return GetMTOCommonSolutionUserContact(ctx, logger, principal, r.store, id)
}

// MTOCommonSolutionContact returns generated.MTOCommonSolutionContactResolver implementation.
func (r *Resolver) MTOCommonSolutionContact() generated.MTOCommonSolutionContactResolver {
	return &mTOCommonSolutionContactResolver{r}
}

type mTOCommonSolutionContactResolver struct{ *Resolver }
