// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cmsgov/mint-app/pkg/graph/resolvers (interfaces: PlanTaskListSectionLocks)

// Package mockplantasklistsectionlocks is a generated GoMock package.
package mockplantasklistsectionlocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	model "github.com/cmsgov/mint-app/pkg/graph/model"
	pubsub "github.com/cmsgov/mint-app/pkg/shared/pubsub"
)

// MockPlanTaskListSectionLocks is a mock of PlanTaskListSectionLocks interface.
type MockPlanTaskListSectionLocks struct {
	ctrl     *gomock.Controller
	recorder *MockPlanTaskListSectionLocksMockRecorder
}

// MockPlanTaskListSectionLocksMockRecorder is the mock recorder for MockPlanTaskListSectionLocks.
type MockPlanTaskListSectionLocksMockRecorder struct {
	mock *MockPlanTaskListSectionLocks
}

// NewMockPlanTaskListSectionLocks creates a new mock instance.
func NewMockPlanTaskListSectionLocks(ctrl *gomock.Controller) *MockPlanTaskListSectionLocks {
	mock := &MockPlanTaskListSectionLocks{ctrl: ctrl}
	mock.recorder = &MockPlanTaskListSectionLocksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanTaskListSectionLocks) EXPECT() *MockPlanTaskListSectionLocksMockRecorder {
	return m.recorder
}

// GetTaskListSectionLocks mocks base method.
func (m *MockPlanTaskListSectionLocks) GetTaskListSectionLocks(arg0 uuid.UUID) []*model.TaskListSectionLockStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskListSectionLocks", arg0)
	ret0, _ := ret[0].([]*model.TaskListSectionLockStatus)
	return ret0
}

// GetTaskListSectionLocks indicates an expected call of GetTaskListSectionLocks.
func (mr *MockPlanTaskListSectionLocksMockRecorder) GetTaskListSectionLocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskListSectionLocks", reflect.TypeOf((*MockPlanTaskListSectionLocks)(nil).GetTaskListSectionLocks), arg0)
}

// LockTaskListSection mocks base method.
func (m *MockPlanTaskListSectionLocks) LockTaskListSection(arg0 pubsub.PubSub, arg1 uuid.UUID, arg2, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LockTaskListSection", arg0, arg1, arg2, arg3)
}

// LockTaskListSection indicates an expected call of LockTaskListSection.
func (mr *MockPlanTaskListSectionLocksMockRecorder) LockTaskListSection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockTaskListSection", reflect.TypeOf((*MockPlanTaskListSectionLocks)(nil).LockTaskListSection), arg0, arg1, arg2, arg3)
}

// SubscribeTaskListSectionLockChanges mocks base method.
func (m *MockPlanTaskListSectionLocks) SubscribeTaskListSectionLockChanges(arg0 pubsub.PubSub, arg1 uuid.UUID, arg2 string, arg3 <-chan struct{}) (<-chan *model.TaskListSectionLockStatusChanged, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTaskListSectionLockChanges", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(<-chan *model.TaskListSectionLockStatusChanged)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeTaskListSectionLockChanges indicates an expected call of SubscribeTaskListSectionLockChanges.
func (mr *MockPlanTaskListSectionLocksMockRecorder) SubscribeTaskListSectionLockChanges(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTaskListSectionLockChanges", reflect.TypeOf((*MockPlanTaskListSectionLocks)(nil).SubscribeTaskListSectionLockChanges), arg0, arg1, arg2, arg3)
}

// UnlockAllTaskListSections mocks base method.
func (m *MockPlanTaskListSectionLocks) UnlockAllTaskListSections(arg0 pubsub.PubSub, arg1 uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnlockAllTaskListSections", arg0, arg1)
}

// UnlockAllTaskListSections indicates an expected call of UnlockAllTaskListSections.
func (mr *MockPlanTaskListSectionLocksMockRecorder) UnlockAllTaskListSections(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockAllTaskListSections", reflect.TypeOf((*MockPlanTaskListSectionLocks)(nil).UnlockAllTaskListSections), arg0, arg1)
}

// UnlockTaskListSection mocks base method.
func (m *MockPlanTaskListSectionLocks) UnlockTaskListSection(arg0 pubsub.PubSub, arg1 uuid.UUID, arg2, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnlockTaskListSection", arg0, arg1, arg2, arg3)
}

// UnlockTaskListSection indicates an expected call of UnlockTaskListSection.
func (mr *MockPlanTaskListSectionLocksMockRecorder) UnlockTaskListSection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockTaskListSection", reflect.TypeOf((*MockPlanTaskListSectionLocks)(nil).UnlockTaskListSection), arg0, arg1, arg2, arg3)
}
