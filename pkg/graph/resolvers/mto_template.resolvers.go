package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// Categories is the resolver for the categories field.
func (r *mtoTemplateResolver) Categories(ctx context.Context, obj *models.MtoTemplate, parentID *uuid.UUID) ([]*models.MtoTemplateCategory, error) {
	panic(fmt.Errorf("not implemented: Categories - categories"))
}

// Milestones is the resolver for the milestones field.
func (r *mtoTemplateResolver) Milestones(ctx context.Context, obj *models.MtoTemplate, categoryID *uuid.UUID) ([]*models.MtoTemplateMilestone, error) {
	panic(fmt.Errorf("not implemented: Milestones - milestones"))
}

// Solutions is the resolver for the solutions field.
func (r *mtoTemplateResolver) Solutions(ctx context.Context, obj *models.MtoTemplate) ([]*models.MtoTemplateSolution, error) {
	panic(fmt.Errorf("not implemented: Solutions - solutions"))
}

// ApplyTemplateToMto is the resolver for the applyTemplateToMto field.
func (r *mutationResolver) ApplyTemplateToMto(ctx context.Context, modelPlanID uuid.UUID, templateID uuid.UUID) (*model.ApplyTemplateResult, error) {
	panic(fmt.Errorf("not implemented: ApplyTemplateToMto - applyTemplateToMto"))
}

// MtoTemplates is the resolver for the mtoTemplates field.
func (r *queryResolver) MtoTemplates(ctx context.Context, keys []models.MtoTemplateKey) ([]*models.MtoTemplate, error) {
	panic(fmt.Errorf("not implemented: MtoTemplates - mtoTemplates"))
}

// MtoTemplate is the resolver for the mtoTemplate field.
func (r *queryResolver) MtoTemplate(ctx context.Context, id *uuid.UUID, key *models.MtoTemplateKey) (*models.MtoTemplate, error) {
	panic(fmt.Errorf("not implemented: MtoTemplate - mtoTemplate"))
}

// MtoTemplate returns generated.MtoTemplateResolver implementation.
func (r *Resolver) MtoTemplate() generated.MtoTemplateResolver { return &mtoTemplateResolver{r} }

type mtoTemplateResolver struct{ *Resolver }
