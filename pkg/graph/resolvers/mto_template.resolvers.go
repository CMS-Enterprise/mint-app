package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// Categories is the resolver for the categories field.
func (r *mTOTemplateResolver) Categories(ctx context.Context, obj *models.MTOTemplate) ([]*models.MTOTemplateCategory, error) {
	mockUUID := uuid.MustParse("00000000-0000-0000-0000-000000000000")

	// Create mock categories
	categories := []*models.MTOTemplateCategory{
		models.NewMTOTemplateCategory(
			mockUUID,
			obj.ID,
			"Implementation Planning",
			nil, // No parent - top level category
			1,
		),
		models.NewMTOTemplateCategory(
			mockUUID,
			obj.ID,
			"Operations Management",
			nil, // No parent - top level category
			2,
		),
	}

	return categories, nil
}

// Milestones is the resolver for the milestones field.
func (r *mTOTemplateResolver) Milestones(ctx context.Context, obj *models.MTOTemplate) ([]*models.MTOTemplateMilestone, error) {
	mockUUID := uuid.MustParse("00000000-0000-0000-0000-000000000000")
	categoryID := uuid.MustParse("33333333-3333-3333-3333-333333333333")

	// Create mock milestones for this subcategory
	milestones := []*models.MTOTemplateMilestone{
		models.NewMTOTemplateMilestone(
			mockUUID,
			obj.ID,
			"MODEL_DESIGN_COMPLETE",
			&categoryID,
		),
		models.NewMTOTemplateMilestone(
			mockUUID,
			obj.ID,
			"IMPLEMENTATION_START",
			&categoryID,
		),
	}

	return milestones, nil
}

// Solutions is the resolver for the solutions field.
func (r *mTOTemplateResolver) Solutions(ctx context.Context, obj *models.MTOTemplate) ([]*models.MTOTemplateSolution, error) {
	mockUUID := uuid.MustParse("00000000-0000-0000-0000-000000000000")
	solutionID1 := uuid.MustParse("11111111-1111-1111-1111-111111111111")
	solutionID2 := uuid.MustParse("22222222-2222-2222-2222-222222222222")

	// Create mock solutions for this milestone
	solutions := []*models.MTOTemplateSolution{
		models.NewMTOTemplateSolution(
			mockUUID,
			obj.ID,
			solutionID1,
		),
		models.NewMTOTemplateSolution(
			mockUUID,
			obj.ID,
			solutionID2,
		),
	}

	return solutions, nil
}

// IsUncategorized is the resolver for the isUncategorized field.
func (r *mTOTemplateCategoryResolver) IsUncategorized(ctx context.Context, obj *models.MTOTemplateCategory) (bool, error) {
	// Mock logic: category is uncategorized if it has no parent
	return obj.ParentID == nil, nil
}

// SubCategories is the resolver for the subCategories field.
func (r *mTOTemplateCategoryResolver) SubCategories(ctx context.Context, obj *models.MTOTemplateCategory) ([]*models.MTOTemplateSubCategory, error) {
	mockUUID := uuid.MustParse("00000000-0000-0000-0000-000000000000")

	// Create mock subcategories
	subCategories := []*models.MTOTemplateSubCategory{
		models.NewMTOTemplateSubCategory(
			mockUUID,
			obj.TemplateID,
			"Design Phase",
			1,
		),
		models.NewMTOTemplateSubCategory(
			mockUUID,
			obj.TemplateID,
			"Testing Phase",
			2,
		),
	}

	return subCategories, nil
}

// Solutions is the resolver for the solutions field.
func (r *mTOTemplateMilestoneResolver) Solutions(ctx context.Context, obj *models.MTOTemplateMilestone) ([]*models.MTOTemplateSolution, error) {
	mockUUID := uuid.MustParse("00000000-0000-0000-0000-000000000000")
	solutionID1 := uuid.MustParse("11111111-1111-1111-1111-111111111111")
	solutionID2 := uuid.MustParse("22222222-2222-2222-2222-222222222222")

	// Create mock solutions for this milestone
	solutions := []*models.MTOTemplateSolution{
		models.NewMTOTemplateSolution(
			mockUUID,
			obj.TemplateID,
			solutionID1,
		),
		models.NewMTOTemplateSolution(
			mockUUID,
			obj.TemplateID,
			solutionID2,
		),
	}

	return solutions, nil
}

// Milestones is the resolver for the milestones field.
func (r *mTOTemplateSubCategoryResolver) Milestones(ctx context.Context, obj *models.MTOTemplateSubCategory) ([]*models.MTOTemplateMilestone, error) {
	mockUUID := uuid.MustParse("00000000-0000-0000-0000-000000000000")
	categoryID := uuid.MustParse("33333333-3333-3333-3333-333333333333")

	// Create mock milestones for this subcategory
	milestones := []*models.MTOTemplateMilestone{
		models.NewMTOTemplateMilestone(
			mockUUID,
			obj.TemplateID,
			"MODEL_DESIGN_COMPLETE",
			&categoryID,
		),
		models.NewMTOTemplateMilestone(
			mockUUID,
			obj.TemplateID,
			"IMPLEMENTATION_START",
			&categoryID,
		),
	}

	return milestones, nil
}

// ApplyTemplateToMto is the resolver for the applyTemplateToMto field.
func (r *mutationResolver) ApplyTemplateToMto(ctx context.Context, modelPlanID uuid.UUID, templateID uuid.UUID) (*model.ApplyTemplateResult, error) {
	// Mock implementation
	return &model.ApplyTemplateResult{
		ModelPlanID:     modelPlanID,
		TemplateID:      templateID,
		CategoriesAdded: 5,
		MilestonesAdded: 15,
		SolutionsAdded:  8,
		Warnings:        []string{"Milestone xyz already exists", "Template partially applied"},
	}, nil
}

// MtoTemplates is the resolver for the mtoTemplates field.
func (r *queryResolver) MtoTemplates(ctx context.Context, keys []models.MTOTemplateKey) ([]*models.MTOTemplate, error) {
	// Create mock templates using constructor
	mockUUID := uuid.MustParse("00000000-0000-0000-0000-000000000000")

	// Create descriptions as variables first
	acoDesc := "Template for ACO and kidney care models"
	episodeDesc := "Template for Episode Primary Care and Non-ACO models"
	medicareDesc := "Template for Medicare Advantage and Drug models"
	standardDesc := "Template with standard organizational categories"
	stateDesc := "Template for state and local government models"

	mockTemplates := []*models.MTOTemplate{
		models.NewMTOTemplate(
			mockUUID,
			models.MTOTemplateKeyAcoAndKidneyModels,
			"ACO and Kidney Models Template",
			&acoDesc,
		),
		models.NewMTOTemplate(
			mockUUID,
			models.MTOTemplateKeyEpisodePrimaryCareAndNonAcoModels,
			"Episode Primary Care Template",
			&episodeDesc,
		),
		models.NewMTOTemplate(
			mockUUID,
			models.MTOTemplateKeyMedicareAdvantageAndDrugModels,
			"Medicare Advantage and Drug Template",
			&medicareDesc,
		),
		models.NewMTOTemplate(
			mockUUID,
			models.MTOTemplateKeyStandardCategories,
			"Standard Categories Template",
			&standardDesc,
		),
		models.NewMTOTemplate(
			mockUUID,
			models.MTOTemplateKeyStateAndLocalModels,
			"State and Local Models Template",
			&stateDesc,
		),
	}

	// Set mock counts (since constructor sets them to 0)
	for _, template := range mockTemplates {
		template.CategoryCount = 5
		template.MilestoneCount = 20
		template.SolutionCount = 10
	}

	// Filter by keys if provided
	if len(keys) > 0 {
		filtered := make([]*models.MTOTemplate, 0)
		keySet := make(map[models.MTOTemplateKey]bool)
		for _, key := range keys {
			keySet[key] = true
		}

		for _, template := range mockTemplates {
			if keySet[template.Key] {
				filtered = append(filtered, template)
			}
		}
		return filtered, nil
	}

	return mockTemplates, nil
}

// MtoTemplate is the resolver for the mtoTemplate field.
func (r *queryResolver) MtoTemplate(ctx context.Context, id *uuid.UUID, key *models.MTOTemplateKey) (*models.MTOTemplate, error) {
	mockUUID := uuid.MustParse("00000000-0000-0000-0000-000000000000")
	desc := "Mock template description"

	// Mock single template
	template := models.NewMTOTemplate(
		mockUUID,
		models.MTOTemplateKeyAcoAndKidneyModels,
		"Mock Template",
		&desc,
	)

	// Set mock counts
	template.CategoryCount = 3
	template.MilestoneCount = 12
	template.SolutionCount = 8

	return template, nil
}

// MTOTemplate returns generated.MTOTemplateResolver implementation.
func (r *Resolver) MTOTemplate() generated.MTOTemplateResolver { return &mTOTemplateResolver{r} }

// MTOTemplateCategory returns generated.MTOTemplateCategoryResolver implementation.
func (r *Resolver) MTOTemplateCategory() generated.MTOTemplateCategoryResolver {
	return &mTOTemplateCategoryResolver{r}
}

// MTOTemplateMilestone returns generated.MTOTemplateMilestoneResolver implementation.
func (r *Resolver) MTOTemplateMilestone() generated.MTOTemplateMilestoneResolver {
	return &mTOTemplateMilestoneResolver{r}
}

// MTOTemplateSubCategory returns generated.MTOTemplateSubCategoryResolver implementation.
func (r *Resolver) MTOTemplateSubCategory() generated.MTOTemplateSubCategoryResolver {
	return &mTOTemplateSubCategoryResolver{r}
}

type mTOTemplateResolver struct{ *Resolver }
type mTOTemplateCategoryResolver struct{ *Resolver }
type mTOTemplateMilestoneResolver struct{ *Resolver }
type mTOTemplateSubCategoryResolver struct{ *Resolver }
