package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// LockLockableSection is the resolver for the lockLockableSection field.
func (r *mutationResolver) LockLockableSection(ctx context.Context, modelPlanID uuid.UUID, section models.LockableSection) (bool, error) {
	principal := appcontext.Principal(ctx)

	return LockLockableSection(r.pubsub, modelPlanID, section, principal)
}

// UnlockLockableSection is the resolver for the unlockLockableSection field.
func (r *mutationResolver) UnlockLockableSection(ctx context.Context, modelPlanID uuid.UUID, section models.LockableSection) (bool, error) {
	userID := appcontext.Principal(ctx).Account().ID

	return UnlockLockableSection(r.pubsub, modelPlanID, section, userID, model.ActionTypeNormal)
}

// UnlockAllLockableSections is the resolver for the unlockAllLockableSections field.
func (r *mutationResolver) UnlockAllLockableSections(ctx context.Context, modelPlanID uuid.UUID) ([]*model.LockableSectionLockStatus, error) {
	return UnlockAllLockableSections(r.pubsub, modelPlanID)
}

// LockableSectionLocks is the resolver for the lockableSectionLocks field.
func (r *queryResolver) LockableSectionLocks(ctx context.Context, modelPlanID uuid.UUID) ([]*model.LockableSectionLockStatus, error) {
	return GetLockableSectionLocks(modelPlanID)
}

// OnLockableSectionLocksChanged is the resolver for the onLockableSectionLocksChanged field.
func (r *subscriptionResolver) OnLockableSectionLocksChanged(ctx context.Context, modelPlanID uuid.UUID) (<-chan *model.LockableSectionLockStatusChanged, error) {
	principal := appcontext.Principal(ctx)

	return SubscribeLockableSectionLockChanges(r.pubsub, modelPlanID, principal, ctx.Done())
}

// OnLockLockableSectionContext is the resolver for the onLockLockableSectionContext field.
func (r *subscriptionResolver) OnLockLockableSectionContext(ctx context.Context, modelPlanID uuid.UUID) (<-chan *model.LockableSectionLockStatusChanged, error) {
	principal := appcontext.Principal(ctx)

	return OnLockLockableSectionContext(r.pubsub, modelPlanID, principal, ctx.Done())
}

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
