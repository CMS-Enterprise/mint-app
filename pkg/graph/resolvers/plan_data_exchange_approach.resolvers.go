package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/cmsgov/mint-app/pkg/graph/generated"
	"github.com/cmsgov/mint-app/pkg/graph/model"
	"github.com/cmsgov/mint-app/pkg/models"
)

// ModelPlan is the resolver for the modelPlan field.
func (r *planDataExchangeApproachResolver) ModelPlan(ctx context.Context, obj *models.PlanDataExchangeApproach) (*models.ModelPlan, error) {
	panic(fmt.Errorf("not implemented: ModelPlan - modelPlan"))
}

// DataToCollectFromParticipants is the resolver for the dataToCollectFromParticipants field.
func (r *planDataExchangeApproachResolver) DataToCollectFromParticipants(ctx context.Context, obj *models.PlanDataExchangeApproach) ([]model.DataToCollectFromParticipants, error) {
	panic(fmt.Errorf("not implemented: DataToCollectFromParticipants - dataToCollectFromParticipants"))
}

// DataToSendToParticipants is the resolver for the dataToSendToParticipants field.
func (r *planDataExchangeApproachResolver) DataToSendToParticipants(ctx context.Context, obj *models.PlanDataExchangeApproach) (*model.DataToSendToParticipants, error) {
	panic(fmt.Errorf("not implemented: DataToSendToParticipants - dataToSendToParticipants"))
}

// AnticipatedMultiPayerDataAvailabilityUseCase is the resolver for the anticipatedMultiPayerDataAvailabilityUseCase field.
func (r *planDataExchangeApproachResolver) AnticipatedMultiPayerDataAvailabilityUseCase(ctx context.Context, obj *models.PlanDataExchangeApproach) (*model.AnticipatedMultiPayerDataAvailabilityUseCase, error) {
	panic(fmt.Errorf("not implemented: AnticipatedMultiPayerDataAvailabilityUseCase - anticipatedMultiPayerDataAvailabilityUseCase"))
}

// MultiSourceDataToCollect is the resolver for the multiSourceDataToCollect field.
func (r *planDataExchangeApproachResolver) MultiSourceDataToCollect(ctx context.Context, obj *models.PlanDataExchangeApproach) (*model.MultiSourceDataToCollect, error) {
	panic(fmt.Errorf("not implemented: MultiSourceDataToCollect - multiSourceDataToCollect"))
}

// PlanDataExchangeApproach returns generated.PlanDataExchangeApproachResolver implementation.
func (r *Resolver) PlanDataExchangeApproach() generated.PlanDataExchangeApproachResolver {
	return &planDataExchangeApproachResolver{r}
}

type planDataExchangeApproachResolver struct{ *Resolver }
