package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/authentication"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// UpdatePlanDataExchangeApproach is the resolver for the updatePlanDataExchangeApproach field.
func (r *mutationResolver) UpdatePlanDataExchangeApproach(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanDataExchangeApproach, error) {
	logger := appcontext.ZLogger(ctx)
	principal := appcontext.Principal(ctx)

	return PlanDataExchangeApproachUpdate(logger, id, changes, principal, r.store)
}

// ModelPlan is the resolver for the modelPlan field.
func (r *planDataExchangeApproachResolver) ModelPlan(ctx context.Context, obj *models.PlanDataExchangeApproach) (*models.ModelPlan, error) {
	return ModelPlanGetByIDLOADER(ctx, obj.ModelPlanID)
}

// DataToCollectFromParticipants is the resolver for the dataToCollectFromParticipants field.
func (r *planDataExchangeApproachResolver) DataToCollectFromParticipants(ctx context.Context, obj *models.PlanDataExchangeApproach) ([]models.DataToCollectFromParticipants, error) {
	return models.ConvertEnums[models.DataToCollectFromParticipants](obj.DataToCollectFromParticipants), nil
}

// DataToSendToParticipants is the resolver for the dataToSendToParticipants field.
func (r *planDataExchangeApproachResolver) DataToSendToParticipants(ctx context.Context, obj *models.PlanDataExchangeApproach) ([]models.DataToSendToParticipants, error) {
	return models.ConvertEnums[models.DataToSendToParticipants](obj.DataToSendToParticipants), nil
}

// MultiSourceDataToCollect is the resolver for the multiSourceDataToCollect field.
func (r *planDataExchangeApproachResolver) MultiSourceDataToCollect(ctx context.Context, obj *models.PlanDataExchangeApproach) ([]models.MultiSourceDataToCollect, error) {
	return models.ConvertEnums[models.MultiSourceDataToCollect](obj.MultiSourceDataToCollect), nil
}

// PlanDataExchangeApproach returns generated.PlanDataExchangeApproachResolver implementation.
func (r *Resolver) PlanDataExchangeApproach() generated.PlanDataExchangeApproachResolver {
	return &planDataExchangeApproachResolver{r}
}

type planDataExchangeApproachResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *planDataExchangeApproachResolver) MarkedCompleteByUserAccount(ctx context.Context, obj *models.PlanDataExchangeApproach) (*authentication.UserAccount, error) {
	return obj.MarkedCompleteByUserAccount(ctx)
}
