package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/google/uuid"

	"github.com/cms-enterprise/mint-app/pkg/appcontext"
	"github.com/cms-enterprise/mint-app/pkg/graph/generated"
	"github.com/cms-enterprise/mint-app/pkg/graph/model"
	"github.com/cms-enterprise/mint-app/pkg/models"
)

// UpdatePlanBeneficiaries is the resolver for the updatePlanBeneficiaries field.
func (r *mutationResolver) UpdatePlanBeneficiaries(ctx context.Context, id uuid.UUID, changes map[string]any) (*models.PlanBeneficiaries, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return PlanBeneficiariesUpdate(logger, id, changes, principal, r.store)
}

// Beneficiaries is the resolver for the beneficiaries field.
func (r *planBeneficiariesResolver) Beneficiaries(ctx context.Context, obj *models.PlanBeneficiaries) ([]model.BeneficiariesType, error) {
	bTypes := models.ConvertEnums[model.BeneficiariesType](obj.Beneficiaries)
	return bTypes, nil
}

// BeneficiarySelectionMethod is the resolver for the beneficiarySelectionMethod field.
func (r *planBeneficiariesResolver) BeneficiarySelectionMethod(ctx context.Context, obj *models.PlanBeneficiaries) ([]model.SelectionMethodType, error) {
	sTypes := models.ConvertEnums[model.SelectionMethodType](obj.BeneficiarySelectionMethod)
	return sTypes, nil
}

// BeneficiarySelectionFrequency is the resolver for the beneficiarySelectionFrequency field.
func (r *planBeneficiariesResolver) BeneficiarySelectionFrequency(ctx context.Context, obj *models.PlanBeneficiaries) ([]models.FrequencyType, error) {
	return models.ConvertEnums[models.FrequencyType](obj.BeneficiarySelectionFrequency), nil
}

// BeneficiaryRemovalFrequency is the resolver for the beneficiaryRemovalFrequency field.
func (r *planBeneficiariesResolver) BeneficiaryRemovalFrequency(ctx context.Context, obj *models.PlanBeneficiaries) ([]models.FrequencyType, error) {
	return models.ConvertEnums[models.FrequencyType](obj.BeneficiaryRemovalFrequency), nil
}

// PrecedenceRules is the resolver for the precedenceRules field.
func (r *planBeneficiariesResolver) PrecedenceRules(ctx context.Context, obj *models.PlanBeneficiaries) ([]models.YesNoType, error) {
	return models.ConvertEnums[models.YesNoType](obj.PrecedenceRules), nil
}

// PlanBeneficiaries returns generated.PlanBeneficiariesResolver implementation.
func (r *Resolver) PlanBeneficiaries() generated.PlanBeneficiariesResolver {
	return &planBeneficiariesResolver{r}
}

type planBeneficiariesResolver struct{ *Resolver }
