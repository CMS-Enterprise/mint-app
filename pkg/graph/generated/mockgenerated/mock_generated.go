// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/graph/generated/generated.go

// Package mockgenerated is a generated GoMock package.
package mockgenerated

import (
	context "context"
	reflect "reflect"
	time "time"

	authentication "github.com/cmsgov/mint-app/pkg/authentication"
	generated "github.com/cmsgov/mint-app/pkg/graph/generated"
	model "github.com/cmsgov/mint-app/pkg/graph/model"
	models "github.com/cmsgov/mint-app/pkg/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockResolverRoot is a mock of ResolverRoot interface.
type MockResolverRoot struct {
	ctrl     *gomock.Controller
	recorder *MockResolverRootMockRecorder
}

// MockResolverRootMockRecorder is the mock recorder for MockResolverRoot.
type MockResolverRootMockRecorder struct {
	mock *MockResolverRoot
}

// NewMockResolverRoot creates a new mock instance.
func NewMockResolverRoot(ctrl *gomock.Controller) *MockResolverRoot {
	mock := &MockResolverRoot{ctrl: ctrl}
	mock.recorder = &MockResolverRootMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolverRoot) EXPECT() *MockResolverRootMockRecorder {
	return m.recorder
}

// Activity mocks base method.
func (m *MockResolverRoot) Activity() generated.ActivityResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activity")
	ret0, _ := ret[0].(generated.ActivityResolver)
	return ret0
}

// Activity indicates an expected call of Activity.
func (mr *MockResolverRootMockRecorder) Activity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activity", reflect.TypeOf((*MockResolverRoot)(nil).Activity))
}

// AddedAsCollaboratorMeta mocks base method.
func (m *MockResolverRoot) AddedAsCollaboratorMeta() generated.AddedAsCollaboratorMetaResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddedAsCollaboratorMeta")
	ret0, _ := ret[0].(generated.AddedAsCollaboratorMetaResolver)
	return ret0
}

// AddedAsCollaboratorMeta indicates an expected call of AddedAsCollaboratorMeta.
func (mr *MockResolverRootMockRecorder) AddedAsCollaboratorMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddedAsCollaboratorMeta", reflect.TypeOf((*MockResolverRoot)(nil).AddedAsCollaboratorMeta))
}

// AnalyzedModelLeadInfo mocks base method.
func (m *MockResolverRoot) AnalyzedModelLeadInfo() generated.AnalyzedModelLeadInfoResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzedModelLeadInfo")
	ret0, _ := ret[0].(generated.AnalyzedModelLeadInfoResolver)
	return ret0
}

// AnalyzedModelLeadInfo indicates an expected call of AnalyzedModelLeadInfo.
func (mr *MockResolverRootMockRecorder) AnalyzedModelLeadInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzedModelLeadInfo", reflect.TypeOf((*MockResolverRoot)(nil).AnalyzedModelLeadInfo))
}

// AuditChange mocks base method.
func (m *MockResolverRoot) AuditChange() generated.AuditChangeResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuditChange")
	ret0, _ := ret[0].(generated.AuditChangeResolver)
	return ret0
}

// AuditChange indicates an expected call of AuditChange.
func (mr *MockResolverRootMockRecorder) AuditChange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditChange", reflect.TypeOf((*MockResolverRoot)(nil).AuditChange))
}

// CurrentUser mocks base method.
func (m *MockResolverRoot) CurrentUser() generated.CurrentUserResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentUser")
	ret0, _ := ret[0].(generated.CurrentUserResolver)
	return ret0
}

// CurrentUser indicates an expected call of CurrentUser.
func (mr *MockResolverRootMockRecorder) CurrentUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUser", reflect.TypeOf((*MockResolverRoot)(nil).CurrentUser))
}

// DailyDigestCompleteActivityMeta mocks base method.
func (m *MockResolverRoot) DailyDigestCompleteActivityMeta() generated.DailyDigestCompleteActivityMetaResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DailyDigestCompleteActivityMeta")
	ret0, _ := ret[0].(generated.DailyDigestCompleteActivityMetaResolver)
	return ret0
}

// DailyDigestCompleteActivityMeta indicates an expected call of DailyDigestCompleteActivityMeta.
func (mr *MockResolverRootMockRecorder) DailyDigestCompleteActivityMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DailyDigestCompleteActivityMeta", reflect.TypeOf((*MockResolverRoot)(nil).DailyDigestCompleteActivityMeta))
}

// DatesChangedActivityMeta mocks base method.
func (m *MockResolverRoot) DatesChangedActivityMeta() generated.DatesChangedActivityMetaResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatesChangedActivityMeta")
	ret0, _ := ret[0].(generated.DatesChangedActivityMetaResolver)
	return ret0
}

// DatesChangedActivityMeta indicates an expected call of DatesChangedActivityMeta.
func (mr *MockResolverRootMockRecorder) DatesChangedActivityMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatesChangedActivityMeta", reflect.TypeOf((*MockResolverRoot)(nil).DatesChangedActivityMeta))
}

// DiscussionReply mocks base method.
func (m *MockResolverRoot) DiscussionReply() generated.DiscussionReplyResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscussionReply")
	ret0, _ := ret[0].(generated.DiscussionReplyResolver)
	return ret0
}

// DiscussionReply indicates an expected call of DiscussionReply.
func (mr *MockResolverRootMockRecorder) DiscussionReply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscussionReply", reflect.TypeOf((*MockResolverRoot)(nil).DiscussionReply))
}

// ExistingModelLink mocks base method.
func (m *MockResolverRoot) ExistingModelLink() generated.ExistingModelLinkResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistingModelLink")
	ret0, _ := ret[0].(generated.ExistingModelLinkResolver)
	return ret0
}

// ExistingModelLink indicates an expected call of ExistingModelLink.
func (mr *MockResolverRootMockRecorder) ExistingModelLink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistingModelLink", reflect.TypeOf((*MockResolverRoot)(nil).ExistingModelLink))
}

// ExistingModelLinks mocks base method.
func (m *MockResolverRoot) ExistingModelLinks() generated.ExistingModelLinksResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistingModelLinks")
	ret0, _ := ret[0].(generated.ExistingModelLinksResolver)
	return ret0
}

// ExistingModelLinks indicates an expected call of ExistingModelLinks.
func (mr *MockResolverRootMockRecorder) ExistingModelLinks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistingModelLinks", reflect.TypeOf((*MockResolverRoot)(nil).ExistingModelLinks))
}

// ModelPlan mocks base method.
func (m *MockResolverRoot) ModelPlan() generated.ModelPlanResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlan")
	ret0, _ := ret[0].(generated.ModelPlanResolver)
	return ret0
}

// ModelPlan indicates an expected call of ModelPlan.
func (mr *MockResolverRootMockRecorder) ModelPlan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlan", reflect.TypeOf((*MockResolverRoot)(nil).ModelPlan))
}

// ModelPlanAndPossibleOperationalSolution mocks base method.
func (m *MockResolverRoot) ModelPlanAndPossibleOperationalSolution() generated.ModelPlanAndPossibleOperationalSolutionResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlanAndPossibleOperationalSolution")
	ret0, _ := ret[0].(generated.ModelPlanAndPossibleOperationalSolutionResolver)
	return ret0
}

// ModelPlanAndPossibleOperationalSolution indicates an expected call of ModelPlanAndPossibleOperationalSolution.
func (mr *MockResolverRootMockRecorder) ModelPlanAndPossibleOperationalSolution() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlanAndPossibleOperationalSolution", reflect.TypeOf((*MockResolverRoot)(nil).ModelPlanAndPossibleOperationalSolution))
}

// ModelPlanSharedActivityMeta mocks base method.
func (m *MockResolverRoot) ModelPlanSharedActivityMeta() generated.ModelPlanSharedActivityMetaResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlanSharedActivityMeta")
	ret0, _ := ret[0].(generated.ModelPlanSharedActivityMetaResolver)
	return ret0
}

// ModelPlanSharedActivityMeta indicates an expected call of ModelPlanSharedActivityMeta.
func (mr *MockResolverRootMockRecorder) ModelPlanSharedActivityMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlanSharedActivityMeta", reflect.TypeOf((*MockResolverRoot)(nil).ModelPlanSharedActivityMeta))
}

// Mutation mocks base method.
func (m *MockResolverRoot) Mutation() generated.MutationResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mutation")
	ret0, _ := ret[0].(generated.MutationResolver)
	return ret0
}

// Mutation indicates an expected call of Mutation.
func (mr *MockResolverRootMockRecorder) Mutation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mutation", reflect.TypeOf((*MockResolverRoot)(nil).Mutation))
}

// NewDiscussionRepliedActivityMeta mocks base method.
func (m *MockResolverRoot) NewDiscussionRepliedActivityMeta() generated.NewDiscussionRepliedActivityMetaResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDiscussionRepliedActivityMeta")
	ret0, _ := ret[0].(generated.NewDiscussionRepliedActivityMetaResolver)
	return ret0
}

// NewDiscussionRepliedActivityMeta indicates an expected call of NewDiscussionRepliedActivityMeta.
func (mr *MockResolverRootMockRecorder) NewDiscussionRepliedActivityMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDiscussionRepliedActivityMeta", reflect.TypeOf((*MockResolverRoot)(nil).NewDiscussionRepliedActivityMeta))
}

// NewModelPlanActivityMeta mocks base method.
func (m *MockResolverRoot) NewModelPlanActivityMeta() generated.NewModelPlanActivityMetaResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewModelPlanActivityMeta")
	ret0, _ := ret[0].(generated.NewModelPlanActivityMetaResolver)
	return ret0
}

// NewModelPlanActivityMeta indicates an expected call of NewModelPlanActivityMeta.
func (mr *MockResolverRootMockRecorder) NewModelPlanActivityMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewModelPlanActivityMeta", reflect.TypeOf((*MockResolverRoot)(nil).NewModelPlanActivityMeta))
}

// OperationalNeed mocks base method.
func (m *MockResolverRoot) OperationalNeed() generated.OperationalNeedResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationalNeed")
	ret0, _ := ret[0].(generated.OperationalNeedResolver)
	return ret0
}

// OperationalNeed indicates an expected call of OperationalNeed.
func (mr *MockResolverRootMockRecorder) OperationalNeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationalNeed", reflect.TypeOf((*MockResolverRoot)(nil).OperationalNeed))
}

// OperationalSolution mocks base method.
func (m *MockResolverRoot) OperationalSolution() generated.OperationalSolutionResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationalSolution")
	ret0, _ := ret[0].(generated.OperationalSolutionResolver)
	return ret0
}

// OperationalSolution indicates an expected call of OperationalSolution.
func (mr *MockResolverRootMockRecorder) OperationalSolution() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationalSolution", reflect.TypeOf((*MockResolverRoot)(nil).OperationalSolution))
}

// PlanBasics mocks base method.
func (m *MockResolverRoot) PlanBasics() generated.PlanBasicsResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanBasics")
	ret0, _ := ret[0].(generated.PlanBasicsResolver)
	return ret0
}

// PlanBasics indicates an expected call of PlanBasics.
func (mr *MockResolverRootMockRecorder) PlanBasics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanBasics", reflect.TypeOf((*MockResolverRoot)(nil).PlanBasics))
}

// PlanBeneficiaries mocks base method.
func (m *MockResolverRoot) PlanBeneficiaries() generated.PlanBeneficiariesResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanBeneficiaries")
	ret0, _ := ret[0].(generated.PlanBeneficiariesResolver)
	return ret0
}

// PlanBeneficiaries indicates an expected call of PlanBeneficiaries.
func (mr *MockResolverRootMockRecorder) PlanBeneficiaries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanBeneficiaries", reflect.TypeOf((*MockResolverRoot)(nil).PlanBeneficiaries))
}

// PlanCollaborator mocks base method.
func (m *MockResolverRoot) PlanCollaborator() generated.PlanCollaboratorResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanCollaborator")
	ret0, _ := ret[0].(generated.PlanCollaboratorResolver)
	return ret0
}

// PlanCollaborator indicates an expected call of PlanCollaborator.
func (mr *MockResolverRootMockRecorder) PlanCollaborator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanCollaborator", reflect.TypeOf((*MockResolverRoot)(nil).PlanCollaborator))
}

// PlanDiscussion mocks base method.
func (m *MockResolverRoot) PlanDiscussion() generated.PlanDiscussionResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanDiscussion")
	ret0, _ := ret[0].(generated.PlanDiscussionResolver)
	return ret0
}

// PlanDiscussion indicates an expected call of PlanDiscussion.
func (mr *MockResolverRootMockRecorder) PlanDiscussion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanDiscussion", reflect.TypeOf((*MockResolverRoot)(nil).PlanDiscussion))
}

// PlanDocument mocks base method.
func (m *MockResolverRoot) PlanDocument() generated.PlanDocumentResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanDocument")
	ret0, _ := ret[0].(generated.PlanDocumentResolver)
	return ret0
}

// PlanDocument indicates an expected call of PlanDocument.
func (mr *MockResolverRootMockRecorder) PlanDocument() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanDocument", reflect.TypeOf((*MockResolverRoot)(nil).PlanDocument))
}

// PlanGeneralCharacteristics mocks base method.
func (m *MockResolverRoot) PlanGeneralCharacteristics() generated.PlanGeneralCharacteristicsResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanGeneralCharacteristics")
	ret0, _ := ret[0].(generated.PlanGeneralCharacteristicsResolver)
	return ret0
}

// PlanGeneralCharacteristics indicates an expected call of PlanGeneralCharacteristics.
func (mr *MockResolverRootMockRecorder) PlanGeneralCharacteristics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanGeneralCharacteristics", reflect.TypeOf((*MockResolverRoot)(nil).PlanGeneralCharacteristics))
}

// PlanOpsEvalAndLearning mocks base method.
func (m *MockResolverRoot) PlanOpsEvalAndLearning() generated.PlanOpsEvalAndLearningResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanOpsEvalAndLearning")
	ret0, _ := ret[0].(generated.PlanOpsEvalAndLearningResolver)
	return ret0
}

// PlanOpsEvalAndLearning indicates an expected call of PlanOpsEvalAndLearning.
func (mr *MockResolverRootMockRecorder) PlanOpsEvalAndLearning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanOpsEvalAndLearning", reflect.TypeOf((*MockResolverRoot)(nil).PlanOpsEvalAndLearning))
}

// PlanParticipantsAndProviders mocks base method.
func (m *MockResolverRoot) PlanParticipantsAndProviders() generated.PlanParticipantsAndProvidersResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanParticipantsAndProviders")
	ret0, _ := ret[0].(generated.PlanParticipantsAndProvidersResolver)
	return ret0
}

// PlanParticipantsAndProviders indicates an expected call of PlanParticipantsAndProviders.
func (mr *MockResolverRootMockRecorder) PlanParticipantsAndProviders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanParticipantsAndProviders", reflect.TypeOf((*MockResolverRoot)(nil).PlanParticipantsAndProviders))
}

// PlanPayments mocks base method.
func (m *MockResolverRoot) PlanPayments() generated.PlanPaymentsResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanPayments")
	ret0, _ := ret[0].(generated.PlanPaymentsResolver)
	return ret0
}

// PlanPayments indicates an expected call of PlanPayments.
func (mr *MockResolverRootMockRecorder) PlanPayments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanPayments", reflect.TypeOf((*MockResolverRoot)(nil).PlanPayments))
}

// PossibleOperationalNeed mocks base method.
func (m *MockResolverRoot) PossibleOperationalNeed() generated.PossibleOperationalNeedResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PossibleOperationalNeed")
	ret0, _ := ret[0].(generated.PossibleOperationalNeedResolver)
	return ret0
}

// PossibleOperationalNeed indicates an expected call of PossibleOperationalNeed.
func (mr *MockResolverRootMockRecorder) PossibleOperationalNeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PossibleOperationalNeed", reflect.TypeOf((*MockResolverRoot)(nil).PossibleOperationalNeed))
}

// PossibleOperationalSolution mocks base method.
func (m *MockResolverRoot) PossibleOperationalSolution() generated.PossibleOperationalSolutionResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PossibleOperationalSolution")
	ret0, _ := ret[0].(generated.PossibleOperationalSolutionResolver)
	return ret0
}

// PossibleOperationalSolution indicates an expected call of PossibleOperationalSolution.
func (mr *MockResolverRootMockRecorder) PossibleOperationalSolution() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PossibleOperationalSolution", reflect.TypeOf((*MockResolverRoot)(nil).PossibleOperationalSolution))
}

// Query mocks base method.
func (m *MockResolverRoot) Query() generated.QueryResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query")
	ret0, _ := ret[0].(generated.QueryResolver)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockResolverRootMockRecorder) Query() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockResolverRoot)(nil).Query))
}

// Subscription mocks base method.
func (m *MockResolverRoot) Subscription() generated.SubscriptionResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscription")
	ret0, _ := ret[0].(generated.SubscriptionResolver)
	return ret0
}

// Subscription indicates an expected call of Subscription.
func (mr *MockResolverRootMockRecorder) Subscription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscription", reflect.TypeOf((*MockResolverRoot)(nil).Subscription))
}

// Tag mocks base method.
func (m *MockResolverRoot) Tag() generated.TagResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(generated.TagResolver)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockResolverRootMockRecorder) Tag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockResolverRoot)(nil).Tag))
}

// TaggedContent mocks base method.
func (m *MockResolverRoot) TaggedContent() generated.TaggedContentResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaggedContent")
	ret0, _ := ret[0].(generated.TaggedContentResolver)
	return ret0
}

// TaggedContent indicates an expected call of TaggedContent.
func (mr *MockResolverRootMockRecorder) TaggedContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaggedContent", reflect.TypeOf((*MockResolverRoot)(nil).TaggedContent))
}

// TaggedInDiscussionReplyActivityMeta mocks base method.
func (m *MockResolverRoot) TaggedInDiscussionReplyActivityMeta() generated.TaggedInDiscussionReplyActivityMetaResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaggedInDiscussionReplyActivityMeta")
	ret0, _ := ret[0].(generated.TaggedInDiscussionReplyActivityMetaResolver)
	return ret0
}

// TaggedInDiscussionReplyActivityMeta indicates an expected call of TaggedInDiscussionReplyActivityMeta.
func (mr *MockResolverRootMockRecorder) TaggedInDiscussionReplyActivityMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaggedInDiscussionReplyActivityMeta", reflect.TypeOf((*MockResolverRoot)(nil).TaggedInDiscussionReplyActivityMeta))
}

// TaggedInPlanDiscussionActivityMeta mocks base method.
func (m *MockResolverRoot) TaggedInPlanDiscussionActivityMeta() generated.TaggedInPlanDiscussionActivityMetaResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaggedInPlanDiscussionActivityMeta")
	ret0, _ := ret[0].(generated.TaggedInPlanDiscussionActivityMetaResolver)
	return ret0
}

// TaggedInPlanDiscussionActivityMeta indicates an expected call of TaggedInPlanDiscussionActivityMeta.
func (mr *MockResolverRootMockRecorder) TaggedInPlanDiscussionActivityMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaggedInPlanDiscussionActivityMeta", reflect.TypeOf((*MockResolverRoot)(nil).TaggedInPlanDiscussionActivityMeta))
}

// UserNotification mocks base method.
func (m *MockResolverRoot) UserNotification() generated.UserNotificationResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserNotification")
	ret0, _ := ret[0].(generated.UserNotificationResolver)
	return ret0
}

// UserNotification indicates an expected call of UserNotification.
func (mr *MockResolverRootMockRecorder) UserNotification() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserNotification", reflect.TypeOf((*MockResolverRoot)(nil).UserNotification))
}

// UserNotificationPreferences mocks base method.
func (m *MockResolverRoot) UserNotificationPreferences() generated.UserNotificationPreferencesResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserNotificationPreferences")
	ret0, _ := ret[0].(generated.UserNotificationPreferencesResolver)
	return ret0
}

// UserNotificationPreferences indicates an expected call of UserNotificationPreferences.
func (mr *MockResolverRootMockRecorder) UserNotificationPreferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserNotificationPreferences", reflect.TypeOf((*MockResolverRoot)(nil).UserNotificationPreferences))
}

// UserViewCustomization mocks base method.
func (m *MockResolverRoot) UserViewCustomization() generated.UserViewCustomizationResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserViewCustomization")
	ret0, _ := ret[0].(generated.UserViewCustomizationResolver)
	return ret0
}

// UserViewCustomization indicates an expected call of UserViewCustomization.
func (mr *MockResolverRootMockRecorder) UserViewCustomization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserViewCustomization", reflect.TypeOf((*MockResolverRoot)(nil).UserViewCustomization))
}

// MockActivityResolver is a mock of ActivityResolver interface.
type MockActivityResolver struct {
	ctrl     *gomock.Controller
	recorder *MockActivityResolverMockRecorder
}

// MockActivityResolverMockRecorder is the mock recorder for MockActivityResolver.
type MockActivityResolverMockRecorder struct {
	mock *MockActivityResolver
}

// NewMockActivityResolver creates a new mock instance.
func NewMockActivityResolver(ctrl *gomock.Controller) *MockActivityResolver {
	mock := &MockActivityResolver{ctrl: ctrl}
	mock.recorder = &MockActivityResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityResolver) EXPECT() *MockActivityResolverMockRecorder {
	return m.recorder
}

// ActorUserAccount mocks base method.
func (m *MockActivityResolver) ActorUserAccount(ctx context.Context, obj *models.Activity) (*authentication.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActorUserAccount", ctx, obj)
	ret0, _ := ret[0].(*authentication.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActorUserAccount indicates an expected call of ActorUserAccount.
func (mr *MockActivityResolverMockRecorder) ActorUserAccount(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActorUserAccount", reflect.TypeOf((*MockActivityResolver)(nil).ActorUserAccount), ctx, obj)
}

// MockAddedAsCollaboratorMetaResolver is a mock of AddedAsCollaboratorMetaResolver interface.
type MockAddedAsCollaboratorMetaResolver struct {
	ctrl     *gomock.Controller
	recorder *MockAddedAsCollaboratorMetaResolverMockRecorder
}

// MockAddedAsCollaboratorMetaResolverMockRecorder is the mock recorder for MockAddedAsCollaboratorMetaResolver.
type MockAddedAsCollaboratorMetaResolverMockRecorder struct {
	mock *MockAddedAsCollaboratorMetaResolver
}

// NewMockAddedAsCollaboratorMetaResolver creates a new mock instance.
func NewMockAddedAsCollaboratorMetaResolver(ctrl *gomock.Controller) *MockAddedAsCollaboratorMetaResolver {
	mock := &MockAddedAsCollaboratorMetaResolver{ctrl: ctrl}
	mock.recorder = &MockAddedAsCollaboratorMetaResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddedAsCollaboratorMetaResolver) EXPECT() *MockAddedAsCollaboratorMetaResolverMockRecorder {
	return m.recorder
}

// Collaborator mocks base method.
func (m *MockAddedAsCollaboratorMetaResolver) Collaborator(ctx context.Context, obj *models.AddedAsCollaboratorMeta) (*models.PlanCollaborator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collaborator", ctx, obj)
	ret0, _ := ret[0].(*models.PlanCollaborator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collaborator indicates an expected call of Collaborator.
func (mr *MockAddedAsCollaboratorMetaResolverMockRecorder) Collaborator(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collaborator", reflect.TypeOf((*MockAddedAsCollaboratorMetaResolver)(nil).Collaborator), ctx, obj)
}

// ModelPlan mocks base method.
func (m *MockAddedAsCollaboratorMetaResolver) ModelPlan(ctx context.Context, obj *models.AddedAsCollaboratorMeta) (*models.ModelPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlan", ctx, obj)
	ret0, _ := ret[0].(*models.ModelPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelPlan indicates an expected call of ModelPlan.
func (mr *MockAddedAsCollaboratorMetaResolverMockRecorder) ModelPlan(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlan", reflect.TypeOf((*MockAddedAsCollaboratorMetaResolver)(nil).ModelPlan), ctx, obj)
}

// MockAnalyzedModelLeadInfoResolver is a mock of AnalyzedModelLeadInfoResolver interface.
type MockAnalyzedModelLeadInfoResolver struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyzedModelLeadInfoResolverMockRecorder
}

// MockAnalyzedModelLeadInfoResolverMockRecorder is the mock recorder for MockAnalyzedModelLeadInfoResolver.
type MockAnalyzedModelLeadInfoResolverMockRecorder struct {
	mock *MockAnalyzedModelLeadInfoResolver
}

// NewMockAnalyzedModelLeadInfoResolver creates a new mock instance.
func NewMockAnalyzedModelLeadInfoResolver(ctrl *gomock.Controller) *MockAnalyzedModelLeadInfoResolver {
	mock := &MockAnalyzedModelLeadInfoResolver{ctrl: ctrl}
	mock.recorder = &MockAnalyzedModelLeadInfoResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyzedModelLeadInfoResolver) EXPECT() *MockAnalyzedModelLeadInfoResolverMockRecorder {
	return m.recorder
}

// UserAccount mocks base method.
func (m *MockAnalyzedModelLeadInfoResolver) UserAccount(ctx context.Context, obj *models.AnalyzedModelLeadInfo) (*authentication.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAccount", ctx, obj)
	ret0, _ := ret[0].(*authentication.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAccount indicates an expected call of UserAccount.
func (mr *MockAnalyzedModelLeadInfoResolverMockRecorder) UserAccount(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAccount", reflect.TypeOf((*MockAnalyzedModelLeadInfoResolver)(nil).UserAccount), ctx, obj)
}

// MockAuditChangeResolver is a mock of AuditChangeResolver interface.
type MockAuditChangeResolver struct {
	ctrl     *gomock.Controller
	recorder *MockAuditChangeResolverMockRecorder
}

// MockAuditChangeResolverMockRecorder is the mock recorder for MockAuditChangeResolver.
type MockAuditChangeResolverMockRecorder struct {
	mock *MockAuditChangeResolver
}

// NewMockAuditChangeResolver creates a new mock instance.
func NewMockAuditChangeResolver(ctrl *gomock.Controller) *MockAuditChangeResolver {
	mock := &MockAuditChangeResolver{ctrl: ctrl}
	mock.recorder = &MockAuditChangeResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditChangeResolver) EXPECT() *MockAuditChangeResolverMockRecorder {
	return m.recorder
}

// Fields mocks base method.
func (m *MockAuditChangeResolver) Fields(ctx context.Context, obj *models.AuditChange) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fields", ctx, obj)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fields indicates an expected call of Fields.
func (mr *MockAuditChangeResolverMockRecorder) Fields(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fields", reflect.TypeOf((*MockAuditChangeResolver)(nil).Fields), ctx, obj)
}

// MockCurrentUserResolver is a mock of CurrentUserResolver interface.
type MockCurrentUserResolver struct {
	ctrl     *gomock.Controller
	recorder *MockCurrentUserResolverMockRecorder
}

// MockCurrentUserResolverMockRecorder is the mock recorder for MockCurrentUserResolver.
type MockCurrentUserResolverMockRecorder struct {
	mock *MockCurrentUserResolver
}

// NewMockCurrentUserResolver creates a new mock instance.
func NewMockCurrentUserResolver(ctrl *gomock.Controller) *MockCurrentUserResolver {
	mock := &MockCurrentUserResolver{ctrl: ctrl}
	mock.recorder = &MockCurrentUserResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrentUserResolver) EXPECT() *MockCurrentUserResolverMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockCurrentUserResolver) Account(ctx context.Context, obj *models.CurrentUser) (*authentication.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account", ctx, obj)
	ret0, _ := ret[0].(*authentication.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Account indicates an expected call of Account.
func (mr *MockCurrentUserResolverMockRecorder) Account(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockCurrentUserResolver)(nil).Account), ctx, obj)
}

// LaunchDarkly mocks base method.
func (m *MockCurrentUserResolver) LaunchDarkly(ctx context.Context, obj *models.CurrentUser) (*model.LaunchDarklySettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchDarkly", ctx, obj)
	ret0, _ := ret[0].(*model.LaunchDarklySettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LaunchDarkly indicates an expected call of LaunchDarkly.
func (mr *MockCurrentUserResolverMockRecorder) LaunchDarkly(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchDarkly", reflect.TypeOf((*MockCurrentUserResolver)(nil).LaunchDarkly), ctx, obj)
}

// NotificationPreferences mocks base method.
func (m *MockCurrentUserResolver) NotificationPreferences(ctx context.Context, obj *models.CurrentUser) (*models.UserNotificationPreferences, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationPreferences", ctx, obj)
	ret0, _ := ret[0].(*models.UserNotificationPreferences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotificationPreferences indicates an expected call of NotificationPreferences.
func (mr *MockCurrentUserResolverMockRecorder) NotificationPreferences(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationPreferences", reflect.TypeOf((*MockCurrentUserResolver)(nil).NotificationPreferences), ctx, obj)
}

// Notifications mocks base method.
func (m *MockCurrentUserResolver) Notifications(ctx context.Context, obj *models.CurrentUser) (*models.UserNotifications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notifications", ctx, obj)
	ret0, _ := ret[0].(*models.UserNotifications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notifications indicates an expected call of Notifications.
func (mr *MockCurrentUserResolverMockRecorder) Notifications(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notifications", reflect.TypeOf((*MockCurrentUserResolver)(nil).Notifications), ctx, obj)
}

// MockDailyDigestCompleteActivityMetaResolver is a mock of DailyDigestCompleteActivityMetaResolver interface.
type MockDailyDigestCompleteActivityMetaResolver struct {
	ctrl     *gomock.Controller
	recorder *MockDailyDigestCompleteActivityMetaResolverMockRecorder
}

// MockDailyDigestCompleteActivityMetaResolverMockRecorder is the mock recorder for MockDailyDigestCompleteActivityMetaResolver.
type MockDailyDigestCompleteActivityMetaResolverMockRecorder struct {
	mock *MockDailyDigestCompleteActivityMetaResolver
}

// NewMockDailyDigestCompleteActivityMetaResolver creates a new mock instance.
func NewMockDailyDigestCompleteActivityMetaResolver(ctrl *gomock.Controller) *MockDailyDigestCompleteActivityMetaResolver {
	mock := &MockDailyDigestCompleteActivityMetaResolver{ctrl: ctrl}
	mock.recorder = &MockDailyDigestCompleteActivityMetaResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDailyDigestCompleteActivityMetaResolver) EXPECT() *MockDailyDigestCompleteActivityMetaResolverMockRecorder {
	return m.recorder
}

// AnalyzedAudits mocks base method.
func (m *MockDailyDigestCompleteActivityMetaResolver) AnalyzedAudits(ctx context.Context, obj *models.DailyDigestCompleteActivityMeta) ([]*models.AnalyzedAudit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzedAudits", ctx, obj)
	ret0, _ := ret[0].([]*models.AnalyzedAudit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzedAudits indicates an expected call of AnalyzedAudits.
func (mr *MockDailyDigestCompleteActivityMetaResolverMockRecorder) AnalyzedAudits(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzedAudits", reflect.TypeOf((*MockDailyDigestCompleteActivityMetaResolver)(nil).AnalyzedAudits), ctx, obj)
}

// MockDatesChangedActivityMetaResolver is a mock of DatesChangedActivityMetaResolver interface.
type MockDatesChangedActivityMetaResolver struct {
	ctrl     *gomock.Controller
	recorder *MockDatesChangedActivityMetaResolverMockRecorder
}

// MockDatesChangedActivityMetaResolverMockRecorder is the mock recorder for MockDatesChangedActivityMetaResolver.
type MockDatesChangedActivityMetaResolverMockRecorder struct {
	mock *MockDatesChangedActivityMetaResolver
}

// NewMockDatesChangedActivityMetaResolver creates a new mock instance.
func NewMockDatesChangedActivityMetaResolver(ctrl *gomock.Controller) *MockDatesChangedActivityMetaResolver {
	mock := &MockDatesChangedActivityMetaResolver{ctrl: ctrl}
	mock.recorder = &MockDatesChangedActivityMetaResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatesChangedActivityMetaResolver) EXPECT() *MockDatesChangedActivityMetaResolverMockRecorder {
	return m.recorder
}

// ModelPlan mocks base method.
func (m *MockDatesChangedActivityMetaResolver) ModelPlan(ctx context.Context, obj *models.DatesChangedActivityMeta) (*models.ModelPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlan", ctx, obj)
	ret0, _ := ret[0].(*models.ModelPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelPlan indicates an expected call of ModelPlan.
func (mr *MockDatesChangedActivityMetaResolverMockRecorder) ModelPlan(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlan", reflect.TypeOf((*MockDatesChangedActivityMetaResolver)(nil).ModelPlan), ctx, obj)
}

// MockDiscussionReplyResolver is a mock of DiscussionReplyResolver interface.
type MockDiscussionReplyResolver struct {
	ctrl     *gomock.Controller
	recorder *MockDiscussionReplyResolverMockRecorder
}

// MockDiscussionReplyResolverMockRecorder is the mock recorder for MockDiscussionReplyResolver.
type MockDiscussionReplyResolverMockRecorder struct {
	mock *MockDiscussionReplyResolver
}

// NewMockDiscussionReplyResolver creates a new mock instance.
func NewMockDiscussionReplyResolver(ctrl *gomock.Controller) *MockDiscussionReplyResolver {
	mock := &MockDiscussionReplyResolver{ctrl: ctrl}
	mock.recorder = &MockDiscussionReplyResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscussionReplyResolver) EXPECT() *MockDiscussionReplyResolverMockRecorder {
	return m.recorder
}

// Content mocks base method.
func (m *MockDiscussionReplyResolver) Content(ctx context.Context, obj *models.DiscussionReply) (*models.TaggedContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Content", ctx, obj)
	ret0, _ := ret[0].(*models.TaggedContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Content indicates an expected call of Content.
func (mr *MockDiscussionReplyResolverMockRecorder) Content(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Content", reflect.TypeOf((*MockDiscussionReplyResolver)(nil).Content), ctx, obj)
}

// MockExistingModelLinkResolver is a mock of ExistingModelLinkResolver interface.
type MockExistingModelLinkResolver struct {
	ctrl     *gomock.Controller
	recorder *MockExistingModelLinkResolverMockRecorder
}

// MockExistingModelLinkResolverMockRecorder is the mock recorder for MockExistingModelLinkResolver.
type MockExistingModelLinkResolverMockRecorder struct {
	mock *MockExistingModelLinkResolver
}

// NewMockExistingModelLinkResolver creates a new mock instance.
func NewMockExistingModelLinkResolver(ctrl *gomock.Controller) *MockExistingModelLinkResolver {
	mock := &MockExistingModelLinkResolver{ctrl: ctrl}
	mock.recorder = &MockExistingModelLinkResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExistingModelLinkResolver) EXPECT() *MockExistingModelLinkResolverMockRecorder {
	return m.recorder
}

// Model mocks base method.
func (m *MockExistingModelLinkResolver) Model(ctx context.Context, obj *models.ExistingModelLink) (models.LinkedExistingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", ctx, obj)
	ret0, _ := ret[0].(models.LinkedExistingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Model indicates an expected call of Model.
func (mr *MockExistingModelLinkResolverMockRecorder) Model(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockExistingModelLinkResolver)(nil).Model), ctx, obj)
}

// MockExistingModelLinksResolver is a mock of ExistingModelLinksResolver interface.
type MockExistingModelLinksResolver struct {
	ctrl     *gomock.Controller
	recorder *MockExistingModelLinksResolverMockRecorder
}

// MockExistingModelLinksResolverMockRecorder is the mock recorder for MockExistingModelLinksResolver.
type MockExistingModelLinksResolverMockRecorder struct {
	mock *MockExistingModelLinksResolver
}

// NewMockExistingModelLinksResolver creates a new mock instance.
func NewMockExistingModelLinksResolver(ctrl *gomock.Controller) *MockExistingModelLinksResolver {
	mock := &MockExistingModelLinksResolver{ctrl: ctrl}
	mock.recorder = &MockExistingModelLinksResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExistingModelLinksResolver) EXPECT() *MockExistingModelLinksResolverMockRecorder {
	return m.recorder
}

// Names mocks base method.
func (m *MockExistingModelLinksResolver) Names(ctx context.Context, obj *models.ExistingModelLinks) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Names", ctx, obj)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Names indicates an expected call of Names.
func (mr *MockExistingModelLinksResolverMockRecorder) Names(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Names", reflect.TypeOf((*MockExistingModelLinksResolver)(nil).Names), ctx, obj)
}

// MockModelPlanResolver is a mock of ModelPlanResolver interface.
type MockModelPlanResolver struct {
	ctrl     *gomock.Controller
	recorder *MockModelPlanResolverMockRecorder
}

// MockModelPlanResolverMockRecorder is the mock recorder for MockModelPlanResolver.
type MockModelPlanResolverMockRecorder struct {
	mock *MockModelPlanResolver
}

// NewMockModelPlanResolver creates a new mock instance.
func NewMockModelPlanResolver(ctrl *gomock.Controller) *MockModelPlanResolver {
	mock := &MockModelPlanResolver{ctrl: ctrl}
	mock.recorder = &MockModelPlanResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelPlanResolver) EXPECT() *MockModelPlanResolverMockRecorder {
	return m.recorder
}

// Basics mocks base method.
func (m *MockModelPlanResolver) Basics(ctx context.Context, obj *models.ModelPlan) (*models.PlanBasics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Basics", ctx, obj)
	ret0, _ := ret[0].(*models.PlanBasics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Basics indicates an expected call of Basics.
func (mr *MockModelPlanResolverMockRecorder) Basics(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Basics", reflect.TypeOf((*MockModelPlanResolver)(nil).Basics), ctx, obj)
}

// Beneficiaries mocks base method.
func (m *MockModelPlanResolver) Beneficiaries(ctx context.Context, obj *models.ModelPlan) (*models.PlanBeneficiaries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Beneficiaries", ctx, obj)
	ret0, _ := ret[0].(*models.PlanBeneficiaries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Beneficiaries indicates an expected call of Beneficiaries.
func (mr *MockModelPlanResolverMockRecorder) Beneficiaries(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Beneficiaries", reflect.TypeOf((*MockModelPlanResolver)(nil).Beneficiaries), ctx, obj)
}

// Collaborators mocks base method.
func (m *MockModelPlanResolver) Collaborators(ctx context.Context, obj *models.ModelPlan) ([]*models.PlanCollaborator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collaborators", ctx, obj)
	ret0, _ := ret[0].([]*models.PlanCollaborator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collaborators indicates an expected call of Collaborators.
func (mr *MockModelPlanResolverMockRecorder) Collaborators(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collaborators", reflect.TypeOf((*MockModelPlanResolver)(nil).Collaborators), ctx, obj)
}

// Crs mocks base method.
func (m *MockModelPlanResolver) Crs(ctx context.Context, obj *models.ModelPlan) ([]*models.PlanCR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Crs", ctx, obj)
	ret0, _ := ret[0].([]*models.PlanCR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Crs indicates an expected call of Crs.
func (mr *MockModelPlanResolverMockRecorder) Crs(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Crs", reflect.TypeOf((*MockModelPlanResolver)(nil).Crs), ctx, obj)
}

// Discussions mocks base method.
func (m *MockModelPlanResolver) Discussions(ctx context.Context, obj *models.ModelPlan) ([]*models.PlanDiscussion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discussions", ctx, obj)
	ret0, _ := ret[0].([]*models.PlanDiscussion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Discussions indicates an expected call of Discussions.
func (mr *MockModelPlanResolverMockRecorder) Discussions(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discussions", reflect.TypeOf((*MockModelPlanResolver)(nil).Discussions), ctx, obj)
}

// Documents mocks base method.
func (m *MockModelPlanResolver) Documents(ctx context.Context, obj *models.ModelPlan) ([]*models.PlanDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Documents", ctx, obj)
	ret0, _ := ret[0].([]*models.PlanDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Documents indicates an expected call of Documents.
func (mr *MockModelPlanResolverMockRecorder) Documents(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Documents", reflect.TypeOf((*MockModelPlanResolver)(nil).Documents), ctx, obj)
}

// GeneralCharacteristics mocks base method.
func (m *MockModelPlanResolver) GeneralCharacteristics(ctx context.Context, obj *models.ModelPlan) (*models.PlanGeneralCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneralCharacteristics", ctx, obj)
	ret0, _ := ret[0].(*models.PlanGeneralCharacteristics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneralCharacteristics indicates an expected call of GeneralCharacteristics.
func (mr *MockModelPlanResolverMockRecorder) GeneralCharacteristics(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneralCharacteristics", reflect.TypeOf((*MockModelPlanResolver)(nil).GeneralCharacteristics), ctx, obj)
}

// IsCollaborator mocks base method.
func (m *MockModelPlanResolver) IsCollaborator(ctx context.Context, obj *models.ModelPlan) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCollaborator", ctx, obj)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCollaborator indicates an expected call of IsCollaborator.
func (mr *MockModelPlanResolverMockRecorder) IsCollaborator(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCollaborator", reflect.TypeOf((*MockModelPlanResolver)(nil).IsCollaborator), ctx, obj)
}

// IsFavorite mocks base method.
func (m *MockModelPlanResolver) IsFavorite(ctx context.Context, obj *models.ModelPlan) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFavorite", ctx, obj)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFavorite indicates an expected call of IsFavorite.
func (mr *MockModelPlanResolverMockRecorder) IsFavorite(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavorite", reflect.TypeOf((*MockModelPlanResolver)(nil).IsFavorite), ctx, obj)
}

// ModelBySolutionStatus mocks base method.
func (m *MockModelPlanResolver) ModelBySolutionStatus(ctx context.Context, obj *models.ModelPlan) (models.ModelBySolutionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelBySolutionStatus", ctx, obj)
	ret0, _ := ret[0].(models.ModelBySolutionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelBySolutionStatus indicates an expected call of ModelBySolutionStatus.
func (mr *MockModelPlanResolverMockRecorder) ModelBySolutionStatus(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelBySolutionStatus", reflect.TypeOf((*MockModelPlanResolver)(nil).ModelBySolutionStatus), ctx, obj)
}

// NameHistory mocks base method.
func (m *MockModelPlanResolver) NameHistory(ctx context.Context, obj *models.ModelPlan, sort models.SortDirection) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NameHistory", ctx, obj, sort)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NameHistory indicates an expected call of NameHistory.
func (mr *MockModelPlanResolverMockRecorder) NameHistory(ctx, obj, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NameHistory", reflect.TypeOf((*MockModelPlanResolver)(nil).NameHistory), ctx, obj, sort)
}

// OpSolutionLastModifiedDts mocks base method.
func (m *MockModelPlanResolver) OpSolutionLastModifiedDts(ctx context.Context, obj *models.ModelPlan) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpSolutionLastModifiedDts", ctx, obj)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpSolutionLastModifiedDts indicates an expected call of OpSolutionLastModifiedDts.
func (mr *MockModelPlanResolverMockRecorder) OpSolutionLastModifiedDts(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpSolutionLastModifiedDts", reflect.TypeOf((*MockModelPlanResolver)(nil).OpSolutionLastModifiedDts), ctx, obj)
}

// OperationalNeeds mocks base method.
func (m *MockModelPlanResolver) OperationalNeeds(ctx context.Context, obj *models.ModelPlan) ([]*models.OperationalNeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationalNeeds", ctx, obj)
	ret0, _ := ret[0].([]*models.OperationalNeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationalNeeds indicates an expected call of OperationalNeeds.
func (mr *MockModelPlanResolverMockRecorder) OperationalNeeds(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationalNeeds", reflect.TypeOf((*MockModelPlanResolver)(nil).OperationalNeeds), ctx, obj)
}

// OpsEvalAndLearning mocks base method.
func (m *MockModelPlanResolver) OpsEvalAndLearning(ctx context.Context, obj *models.ModelPlan) (*models.PlanOpsEvalAndLearning, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsEvalAndLearning", ctx, obj)
	ret0, _ := ret[0].(*models.PlanOpsEvalAndLearning)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpsEvalAndLearning indicates an expected call of OpsEvalAndLearning.
func (mr *MockModelPlanResolverMockRecorder) OpsEvalAndLearning(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsEvalAndLearning", reflect.TypeOf((*MockModelPlanResolver)(nil).OpsEvalAndLearning), ctx, obj)
}

// ParticipantsAndProviders mocks base method.
func (m *MockModelPlanResolver) ParticipantsAndProviders(ctx context.Context, obj *models.ModelPlan) (*models.PlanParticipantsAndProviders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipantsAndProviders", ctx, obj)
	ret0, _ := ret[0].(*models.PlanParticipantsAndProviders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParticipantsAndProviders indicates an expected call of ParticipantsAndProviders.
func (mr *MockModelPlanResolverMockRecorder) ParticipantsAndProviders(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipantsAndProviders", reflect.TypeOf((*MockModelPlanResolver)(nil).ParticipantsAndProviders), ctx, obj)
}

// Payments mocks base method.
func (m *MockModelPlanResolver) Payments(ctx context.Context, obj *models.ModelPlan) (*models.PlanPayments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payments", ctx, obj)
	ret0, _ := ret[0].(*models.PlanPayments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Payments indicates an expected call of Payments.
func (mr *MockModelPlanResolverMockRecorder) Payments(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payments", reflect.TypeOf((*MockModelPlanResolver)(nil).Payments), ctx, obj)
}

// PrepareForClearance mocks base method.
func (m *MockModelPlanResolver) PrepareForClearance(ctx context.Context, obj *models.ModelPlan) (*model.PrepareForClearance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareForClearance", ctx, obj)
	ret0, _ := ret[0].(*model.PrepareForClearance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareForClearance indicates an expected call of PrepareForClearance.
func (mr *MockModelPlanResolverMockRecorder) PrepareForClearance(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareForClearance", reflect.TypeOf((*MockModelPlanResolver)(nil).PrepareForClearance), ctx, obj)
}

// Tdls mocks base method.
func (m *MockModelPlanResolver) Tdls(ctx context.Context, obj *models.ModelPlan) ([]*models.PlanTDL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tdls", ctx, obj)
	ret0, _ := ret[0].([]*models.PlanTDL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tdls indicates an expected call of Tdls.
func (mr *MockModelPlanResolverMockRecorder) Tdls(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tdls", reflect.TypeOf((*MockModelPlanResolver)(nil).Tdls), ctx, obj)
}

// MockModelPlanAndPossibleOperationalSolutionResolver is a mock of ModelPlanAndPossibleOperationalSolutionResolver interface.
type MockModelPlanAndPossibleOperationalSolutionResolver struct {
	ctrl     *gomock.Controller
	recorder *MockModelPlanAndPossibleOperationalSolutionResolverMockRecorder
}

// MockModelPlanAndPossibleOperationalSolutionResolverMockRecorder is the mock recorder for MockModelPlanAndPossibleOperationalSolutionResolver.
type MockModelPlanAndPossibleOperationalSolutionResolverMockRecorder struct {
	mock *MockModelPlanAndPossibleOperationalSolutionResolver
}

// NewMockModelPlanAndPossibleOperationalSolutionResolver creates a new mock instance.
func NewMockModelPlanAndPossibleOperationalSolutionResolver(ctrl *gomock.Controller) *MockModelPlanAndPossibleOperationalSolutionResolver {
	mock := &MockModelPlanAndPossibleOperationalSolutionResolver{ctrl: ctrl}
	mock.recorder = &MockModelPlanAndPossibleOperationalSolutionResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelPlanAndPossibleOperationalSolutionResolver) EXPECT() *MockModelPlanAndPossibleOperationalSolutionResolverMockRecorder {
	return m.recorder
}

// ModelPlan mocks base method.
func (m *MockModelPlanAndPossibleOperationalSolutionResolver) ModelPlan(ctx context.Context, obj *models.ModelPlanAndPossibleOperationalSolution) (*models.ModelPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlan", ctx, obj)
	ret0, _ := ret[0].(*models.ModelPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelPlan indicates an expected call of ModelPlan.
func (mr *MockModelPlanAndPossibleOperationalSolutionResolverMockRecorder) ModelPlan(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlan", reflect.TypeOf((*MockModelPlanAndPossibleOperationalSolutionResolver)(nil).ModelPlan), ctx, obj)
}

// PossibleOperationalSolution mocks base method.
func (m *MockModelPlanAndPossibleOperationalSolutionResolver) PossibleOperationalSolution(ctx context.Context, obj *models.ModelPlanAndPossibleOperationalSolution) (*models.PossibleOperationalSolution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PossibleOperationalSolution", ctx, obj)
	ret0, _ := ret[0].(*models.PossibleOperationalSolution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PossibleOperationalSolution indicates an expected call of PossibleOperationalSolution.
func (mr *MockModelPlanAndPossibleOperationalSolutionResolverMockRecorder) PossibleOperationalSolution(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PossibleOperationalSolution", reflect.TypeOf((*MockModelPlanAndPossibleOperationalSolutionResolver)(nil).PossibleOperationalSolution), ctx, obj)
}

// MockModelPlanSharedActivityMetaResolver is a mock of ModelPlanSharedActivityMetaResolver interface.
type MockModelPlanSharedActivityMetaResolver struct {
	ctrl     *gomock.Controller
	recorder *MockModelPlanSharedActivityMetaResolverMockRecorder
}

// MockModelPlanSharedActivityMetaResolverMockRecorder is the mock recorder for MockModelPlanSharedActivityMetaResolver.
type MockModelPlanSharedActivityMetaResolverMockRecorder struct {
	mock *MockModelPlanSharedActivityMetaResolver
}

// NewMockModelPlanSharedActivityMetaResolver creates a new mock instance.
func NewMockModelPlanSharedActivityMetaResolver(ctrl *gomock.Controller) *MockModelPlanSharedActivityMetaResolver {
	mock := &MockModelPlanSharedActivityMetaResolver{ctrl: ctrl}
	mock.recorder = &MockModelPlanSharedActivityMetaResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelPlanSharedActivityMetaResolver) EXPECT() *MockModelPlanSharedActivityMetaResolverMockRecorder {
	return m.recorder
}

// ModelPlan mocks base method.
func (m *MockModelPlanSharedActivityMetaResolver) ModelPlan(ctx context.Context, obj *models.ModelPlanSharedActivityMeta) (*models.ModelPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlan", ctx, obj)
	ret0, _ := ret[0].(*models.ModelPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelPlan indicates an expected call of ModelPlan.
func (mr *MockModelPlanSharedActivityMetaResolverMockRecorder) ModelPlan(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlan", reflect.TypeOf((*MockModelPlanSharedActivityMetaResolver)(nil).ModelPlan), ctx, obj)
}

// MockMutationResolver is a mock of MutationResolver interface.
type MockMutationResolver struct {
	ctrl     *gomock.Controller
	recorder *MockMutationResolverMockRecorder
}

// MockMutationResolverMockRecorder is the mock recorder for MockMutationResolver.
type MockMutationResolverMockRecorder struct {
	mock *MockMutationResolver
}

// NewMockMutationResolver creates a new mock instance.
func NewMockMutationResolver(ctrl *gomock.Controller) *MockMutationResolver {
	mock := &MockMutationResolver{ctrl: ctrl}
	mock.recorder = &MockMutationResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutationResolver) EXPECT() *MockMutationResolverMockRecorder {
	return m.recorder
}

// AddOrUpdateCustomOperationalNeed mocks base method.
func (m *MockMutationResolver) AddOrUpdateCustomOperationalNeed(ctx context.Context, modelPlanID uuid.UUID, customNeedType string, needed bool) (*models.OperationalNeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateCustomOperationalNeed", ctx, modelPlanID, customNeedType, needed)
	ret0, _ := ret[0].(*models.OperationalNeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrUpdateCustomOperationalNeed indicates an expected call of AddOrUpdateCustomOperationalNeed.
func (mr *MockMutationResolverMockRecorder) AddOrUpdateCustomOperationalNeed(ctx, modelPlanID, customNeedType, needed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateCustomOperationalNeed", reflect.TypeOf((*MockMutationResolver)(nil).AddOrUpdateCustomOperationalNeed), ctx, modelPlanID, customNeedType, needed)
}

// AddPlanFavorite mocks base method.
func (m *MockMutationResolver) AddPlanFavorite(ctx context.Context, modelPlanID uuid.UUID) (*models.PlanFavorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlanFavorite", ctx, modelPlanID)
	ret0, _ := ret[0].(*models.PlanFavorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlanFavorite indicates an expected call of AddPlanFavorite.
func (mr *MockMutationResolverMockRecorder) AddPlanFavorite(ctx, modelPlanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlanFavorite", reflect.TypeOf((*MockMutationResolver)(nil).AddPlanFavorite), ctx, modelPlanID)
}

// AgreeToNda mocks base method.
func (m *MockMutationResolver) AgreeToNda(ctx context.Context, agree bool) (*model.NDAInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgreeToNda", ctx, agree)
	ret0, _ := ret[0].(*model.NDAInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgreeToNda indicates an expected call of AgreeToNda.
func (mr *MockMutationResolverMockRecorder) AgreeToNda(ctx, agree interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgreeToNda", reflect.TypeOf((*MockMutationResolver)(nil).AgreeToNda), ctx, agree)
}

// CreateDiscussionReply mocks base method.
func (m *MockMutationResolver) CreateDiscussionReply(ctx context.Context, input model.DiscussionReplyCreateInput) (*models.DiscussionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiscussionReply", ctx, input)
	ret0, _ := ret[0].(*models.DiscussionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDiscussionReply indicates an expected call of CreateDiscussionReply.
func (mr *MockMutationResolverMockRecorder) CreateDiscussionReply(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscussionReply", reflect.TypeOf((*MockMutationResolver)(nil).CreateDiscussionReply), ctx, input)
}

// CreateModelPlan mocks base method.
func (m *MockMutationResolver) CreateModelPlan(ctx context.Context, modelName string) (*models.ModelPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModelPlan", ctx, modelName)
	ret0, _ := ret[0].(*models.ModelPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelPlan indicates an expected call of CreateModelPlan.
func (mr *MockMutationResolverMockRecorder) CreateModelPlan(ctx, modelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelPlan", reflect.TypeOf((*MockMutationResolver)(nil).CreateModelPlan), ctx, modelName)
}

// CreateOperationalSolution mocks base method.
func (m *MockMutationResolver) CreateOperationalSolution(ctx context.Context, operationalNeedID uuid.UUID, solutionType *models.OperationalSolutionKey, changes map[string]interface{}) (*models.OperationalSolution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOperationalSolution", ctx, operationalNeedID, solutionType, changes)
	ret0, _ := ret[0].(*models.OperationalSolution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOperationalSolution indicates an expected call of CreateOperationalSolution.
func (mr *MockMutationResolverMockRecorder) CreateOperationalSolution(ctx, operationalNeedID, solutionType, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOperationalSolution", reflect.TypeOf((*MockMutationResolver)(nil).CreateOperationalSolution), ctx, operationalNeedID, solutionType, changes)
}

// CreateOperationalSolutionSubtasks mocks base method.
func (m *MockMutationResolver) CreateOperationalSolutionSubtasks(ctx context.Context, solutionID uuid.UUID, inputs []*model.CreateOperationalSolutionSubtaskInput) ([]*models.OperationalSolutionSubtask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOperationalSolutionSubtasks", ctx, solutionID, inputs)
	ret0, _ := ret[0].([]*models.OperationalSolutionSubtask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOperationalSolutionSubtasks indicates an expected call of CreateOperationalSolutionSubtasks.
func (mr *MockMutationResolverMockRecorder) CreateOperationalSolutionSubtasks(ctx, solutionID, inputs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOperationalSolutionSubtasks", reflect.TypeOf((*MockMutationResolver)(nil).CreateOperationalSolutionSubtasks), ctx, solutionID, inputs)
}

// CreatePlanCollaborator mocks base method.
func (m *MockMutationResolver) CreatePlanCollaborator(ctx context.Context, input model.PlanCollaboratorCreateInput) (*models.PlanCollaborator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlanCollaborator", ctx, input)
	ret0, _ := ret[0].(*models.PlanCollaborator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlanCollaborator indicates an expected call of CreatePlanCollaborator.
func (mr *MockMutationResolverMockRecorder) CreatePlanCollaborator(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlanCollaborator", reflect.TypeOf((*MockMutationResolver)(nil).CreatePlanCollaborator), ctx, input)
}

// CreatePlanCr mocks base method.
func (m *MockMutationResolver) CreatePlanCr(ctx context.Context, input model.PlanCRCreateInput) (*models.PlanCR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlanCr", ctx, input)
	ret0, _ := ret[0].(*models.PlanCR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlanCr indicates an expected call of CreatePlanCr.
func (mr *MockMutationResolverMockRecorder) CreatePlanCr(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlanCr", reflect.TypeOf((*MockMutationResolver)(nil).CreatePlanCr), ctx, input)
}

// CreatePlanDiscussion mocks base method.
func (m *MockMutationResolver) CreatePlanDiscussion(ctx context.Context, input model.PlanDiscussionCreateInput) (*models.PlanDiscussion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlanDiscussion", ctx, input)
	ret0, _ := ret[0].(*models.PlanDiscussion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlanDiscussion indicates an expected call of CreatePlanDiscussion.
func (mr *MockMutationResolverMockRecorder) CreatePlanDiscussion(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlanDiscussion", reflect.TypeOf((*MockMutationResolver)(nil).CreatePlanDiscussion), ctx, input)
}

// CreatePlanDocumentSolutionLinks mocks base method.
func (m *MockMutationResolver) CreatePlanDocumentSolutionLinks(ctx context.Context, solutionID uuid.UUID, documentIDs []uuid.UUID) ([]*models.PlanDocumentSolutionLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlanDocumentSolutionLinks", ctx, solutionID, documentIDs)
	ret0, _ := ret[0].([]*models.PlanDocumentSolutionLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlanDocumentSolutionLinks indicates an expected call of CreatePlanDocumentSolutionLinks.
func (mr *MockMutationResolverMockRecorder) CreatePlanDocumentSolutionLinks(ctx, solutionID, documentIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlanDocumentSolutionLinks", reflect.TypeOf((*MockMutationResolver)(nil).CreatePlanDocumentSolutionLinks), ctx, solutionID, documentIDs)
}

// CreatePlanTdl mocks base method.
func (m *MockMutationResolver) CreatePlanTdl(ctx context.Context, input model.PlanTDLCreateInput) (*models.PlanTDL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlanTdl", ctx, input)
	ret0, _ := ret[0].(*models.PlanTDL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlanTdl indicates an expected call of CreatePlanTdl.
func (mr *MockMutationResolverMockRecorder) CreatePlanTdl(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlanTdl", reflect.TypeOf((*MockMutationResolver)(nil).CreatePlanTdl), ctx, input)
}

// DeleteOperationalSolutionSubtask mocks base method.
func (m *MockMutationResolver) DeleteOperationalSolutionSubtask(ctx context.Context, id uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperationalSolutionSubtask", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOperationalSolutionSubtask indicates an expected call of DeleteOperationalSolutionSubtask.
func (mr *MockMutationResolverMockRecorder) DeleteOperationalSolutionSubtask(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperationalSolutionSubtask", reflect.TypeOf((*MockMutationResolver)(nil).DeleteOperationalSolutionSubtask), ctx, id)
}

// DeletePlanCollaborator mocks base method.
func (m *MockMutationResolver) DeletePlanCollaborator(ctx context.Context, id uuid.UUID) (*models.PlanCollaborator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlanCollaborator", ctx, id)
	ret0, _ := ret[0].(*models.PlanCollaborator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePlanCollaborator indicates an expected call of DeletePlanCollaborator.
func (mr *MockMutationResolverMockRecorder) DeletePlanCollaborator(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlanCollaborator", reflect.TypeOf((*MockMutationResolver)(nil).DeletePlanCollaborator), ctx, id)
}

// DeletePlanCr mocks base method.
func (m *MockMutationResolver) DeletePlanCr(ctx context.Context, id uuid.UUID) (*models.PlanCR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlanCr", ctx, id)
	ret0, _ := ret[0].(*models.PlanCR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePlanCr indicates an expected call of DeletePlanCr.
func (mr *MockMutationResolverMockRecorder) DeletePlanCr(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlanCr", reflect.TypeOf((*MockMutationResolver)(nil).DeletePlanCr), ctx, id)
}

// DeletePlanDocument mocks base method.
func (m *MockMutationResolver) DeletePlanDocument(ctx context.Context, id uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlanDocument", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePlanDocument indicates an expected call of DeletePlanDocument.
func (mr *MockMutationResolverMockRecorder) DeletePlanDocument(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlanDocument", reflect.TypeOf((*MockMutationResolver)(nil).DeletePlanDocument), ctx, id)
}

// DeletePlanFavorite mocks base method.
func (m *MockMutationResolver) DeletePlanFavorite(ctx context.Context, modelPlanID uuid.UUID) (*models.PlanFavorite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlanFavorite", ctx, modelPlanID)
	ret0, _ := ret[0].(*models.PlanFavorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePlanFavorite indicates an expected call of DeletePlanFavorite.
func (mr *MockMutationResolverMockRecorder) DeletePlanFavorite(ctx, modelPlanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlanFavorite", reflect.TypeOf((*MockMutationResolver)(nil).DeletePlanFavorite), ctx, modelPlanID)
}

// DeletePlanTdl mocks base method.
func (m *MockMutationResolver) DeletePlanTdl(ctx context.Context, id uuid.UUID) (*models.PlanTDL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlanTdl", ctx, id)
	ret0, _ := ret[0].(*models.PlanTDL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePlanTdl indicates an expected call of DeletePlanTdl.
func (mr *MockMutationResolverMockRecorder) DeletePlanTdl(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlanTdl", reflect.TypeOf((*MockMutationResolver)(nil).DeletePlanTdl), ctx, id)
}

// LinkNewPlanDocument mocks base method.
func (m *MockMutationResolver) LinkNewPlanDocument(ctx context.Context, input model.PlanDocumentLinkInput) (*models.PlanDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkNewPlanDocument", ctx, input)
	ret0, _ := ret[0].(*models.PlanDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkNewPlanDocument indicates an expected call of LinkNewPlanDocument.
func (mr *MockMutationResolverMockRecorder) LinkNewPlanDocument(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkNewPlanDocument", reflect.TypeOf((*MockMutationResolver)(nil).LinkNewPlanDocument), ctx, input)
}

// LockTaskListSection mocks base method.
func (m *MockMutationResolver) LockTaskListSection(ctx context.Context, modelPlanID uuid.UUID, section models.TaskListSection) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockTaskListSection", ctx, modelPlanID, section)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockTaskListSection indicates an expected call of LockTaskListSection.
func (mr *MockMutationResolverMockRecorder) LockTaskListSection(ctx, modelPlanID, section interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockTaskListSection", reflect.TypeOf((*MockMutationResolver)(nil).LockTaskListSection), ctx, modelPlanID, section)
}

// MarkAllNotificationsAsRead mocks base method.
func (m *MockMutationResolver) MarkAllNotificationsAsRead(ctx context.Context) ([]*models.UserNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAllNotificationsAsRead", ctx)
	ret0, _ := ret[0].([]*models.UserNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAllNotificationsAsRead indicates an expected call of MarkAllNotificationsAsRead.
func (mr *MockMutationResolverMockRecorder) MarkAllNotificationsAsRead(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAllNotificationsAsRead", reflect.TypeOf((*MockMutationResolver)(nil).MarkAllNotificationsAsRead), ctx)
}

// MarkNotificationAsRead mocks base method.
func (m *MockMutationResolver) MarkNotificationAsRead(ctx context.Context, notificationID uuid.UUID) (*models.UserNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkNotificationAsRead", ctx, notificationID)
	ret0, _ := ret[0].(*models.UserNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkNotificationAsRead indicates an expected call of MarkNotificationAsRead.
func (mr *MockMutationResolverMockRecorder) MarkNotificationAsRead(ctx, notificationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkNotificationAsRead", reflect.TypeOf((*MockMutationResolver)(nil).MarkNotificationAsRead), ctx, notificationID)
}

// RemovePlanDocumentSolutionLinks mocks base method.
func (m *MockMutationResolver) RemovePlanDocumentSolutionLinks(ctx context.Context, solutionID uuid.UUID, documentIDs []uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePlanDocumentSolutionLinks", ctx, solutionID, documentIDs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePlanDocumentSolutionLinks indicates an expected call of RemovePlanDocumentSolutionLinks.
func (mr *MockMutationResolverMockRecorder) RemovePlanDocumentSolutionLinks(ctx, solutionID, documentIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePlanDocumentSolutionLinks", reflect.TypeOf((*MockMutationResolver)(nil).RemovePlanDocumentSolutionLinks), ctx, solutionID, documentIDs)
}

// ReportAProblem mocks base method.
func (m *MockMutationResolver) ReportAProblem(ctx context.Context, input model.ReportAProblemInput) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportAProblem", ctx, input)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportAProblem indicates an expected call of ReportAProblem.
func (mr *MockMutationResolverMockRecorder) ReportAProblem(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportAProblem", reflect.TypeOf((*MockMutationResolver)(nil).ReportAProblem), ctx, input)
}

// SendFeedbackEmail mocks base method.
func (m *MockMutationResolver) SendFeedbackEmail(ctx context.Context, input model.SendFeedbackEmailInput) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFeedbackEmail", ctx, input)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendFeedbackEmail indicates an expected call of SendFeedbackEmail.
func (mr *MockMutationResolverMockRecorder) SendFeedbackEmail(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFeedbackEmail", reflect.TypeOf((*MockMutationResolver)(nil).SendFeedbackEmail), ctx, input)
}

// ShareModelPlan mocks base method.
func (m *MockMutationResolver) ShareModelPlan(ctx context.Context, modelPlanID uuid.UUID, viewFilter *models.ModelViewFilter, usernames []string, optionalMessage *string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareModelPlan", ctx, modelPlanID, viewFilter, usernames, optionalMessage)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShareModelPlan indicates an expected call of ShareModelPlan.
func (mr *MockMutationResolverMockRecorder) ShareModelPlan(ctx, modelPlanID, viewFilter, usernames, optionalMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareModelPlan", reflect.TypeOf((*MockMutationResolver)(nil).ShareModelPlan), ctx, modelPlanID, viewFilter, usernames, optionalMessage)
}

// UnlockAllTaskListSections mocks base method.
func (m *MockMutationResolver) UnlockAllTaskListSections(ctx context.Context, modelPlanID uuid.UUID) ([]*model.TaskListSectionLockStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockAllTaskListSections", ctx, modelPlanID)
	ret0, _ := ret[0].([]*model.TaskListSectionLockStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockAllTaskListSections indicates an expected call of UnlockAllTaskListSections.
func (mr *MockMutationResolverMockRecorder) UnlockAllTaskListSections(ctx, modelPlanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockAllTaskListSections", reflect.TypeOf((*MockMutationResolver)(nil).UnlockAllTaskListSections), ctx, modelPlanID)
}

// UnlockTaskListSection mocks base method.
func (m *MockMutationResolver) UnlockTaskListSection(ctx context.Context, modelPlanID uuid.UUID, section models.TaskListSection) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockTaskListSection", ctx, modelPlanID, section)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockTaskListSection indicates an expected call of UnlockTaskListSection.
func (mr *MockMutationResolverMockRecorder) UnlockTaskListSection(ctx, modelPlanID, section interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockTaskListSection", reflect.TypeOf((*MockMutationResolver)(nil).UnlockTaskListSection), ctx, modelPlanID, section)
}

// UpdateCustomOperationalNeedByID mocks base method.
func (m *MockMutationResolver) UpdateCustomOperationalNeedByID(ctx context.Context, id uuid.UUID, customNeedType *string, needed bool) (*models.OperationalNeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomOperationalNeedByID", ctx, id, customNeedType, needed)
	ret0, _ := ret[0].(*models.OperationalNeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomOperationalNeedByID indicates an expected call of UpdateCustomOperationalNeedByID.
func (mr *MockMutationResolverMockRecorder) UpdateCustomOperationalNeedByID(ctx, id, customNeedType, needed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomOperationalNeedByID", reflect.TypeOf((*MockMutationResolver)(nil).UpdateCustomOperationalNeedByID), ctx, id, customNeedType, needed)
}

// UpdateExistingModelLinks mocks base method.
func (m *MockMutationResolver) UpdateExistingModelLinks(ctx context.Context, modelPlanID uuid.UUID, fieldName models.ExisitingModelLinkFieldType, existingModelIDs []int, currentModelPlanIDs []uuid.UUID) (*models.ExistingModelLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExistingModelLinks", ctx, modelPlanID, fieldName, existingModelIDs, currentModelPlanIDs)
	ret0, _ := ret[0].(*models.ExistingModelLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExistingModelLinks indicates an expected call of UpdateExistingModelLinks.
func (mr *MockMutationResolverMockRecorder) UpdateExistingModelLinks(ctx, modelPlanID, fieldName, existingModelIDs, currentModelPlanIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExistingModelLinks", reflect.TypeOf((*MockMutationResolver)(nil).UpdateExistingModelLinks), ctx, modelPlanID, fieldName, existingModelIDs, currentModelPlanIDs)
}

// UpdateModelPlan mocks base method.
func (m *MockMutationResolver) UpdateModelPlan(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.ModelPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelPlan", ctx, id, changes)
	ret0, _ := ret[0].(*models.ModelPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelPlan indicates an expected call of UpdateModelPlan.
func (mr *MockMutationResolverMockRecorder) UpdateModelPlan(ctx, id, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelPlan", reflect.TypeOf((*MockMutationResolver)(nil).UpdateModelPlan), ctx, id, changes)
}

// UpdateOperationalSolution mocks base method.
func (m *MockMutationResolver) UpdateOperationalSolution(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.OperationalSolution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperationalSolution", ctx, id, changes)
	ret0, _ := ret[0].(*models.OperationalSolution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOperationalSolution indicates an expected call of UpdateOperationalSolution.
func (mr *MockMutationResolverMockRecorder) UpdateOperationalSolution(ctx, id, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperationalSolution", reflect.TypeOf((*MockMutationResolver)(nil).UpdateOperationalSolution), ctx, id, changes)
}

// UpdateOperationalSolutionSubtasks mocks base method.
func (m *MockMutationResolver) UpdateOperationalSolutionSubtasks(ctx context.Context, inputs []*model.UpdateOperationalSolutionSubtaskInput) ([]*models.OperationalSolutionSubtask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperationalSolutionSubtasks", ctx, inputs)
	ret0, _ := ret[0].([]*models.OperationalSolutionSubtask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOperationalSolutionSubtasks indicates an expected call of UpdateOperationalSolutionSubtasks.
func (mr *MockMutationResolverMockRecorder) UpdateOperationalSolutionSubtasks(ctx, inputs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperationalSolutionSubtasks", reflect.TypeOf((*MockMutationResolver)(nil).UpdateOperationalSolutionSubtasks), ctx, inputs)
}

// UpdatePlanBasics mocks base method.
func (m *MockMutationResolver) UpdatePlanBasics(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanBasics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlanBasics", ctx, id, changes)
	ret0, _ := ret[0].(*models.PlanBasics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlanBasics indicates an expected call of UpdatePlanBasics.
func (mr *MockMutationResolverMockRecorder) UpdatePlanBasics(ctx, id, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlanBasics", reflect.TypeOf((*MockMutationResolver)(nil).UpdatePlanBasics), ctx, id, changes)
}

// UpdatePlanBeneficiaries mocks base method.
func (m *MockMutationResolver) UpdatePlanBeneficiaries(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanBeneficiaries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlanBeneficiaries", ctx, id, changes)
	ret0, _ := ret[0].(*models.PlanBeneficiaries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlanBeneficiaries indicates an expected call of UpdatePlanBeneficiaries.
func (mr *MockMutationResolverMockRecorder) UpdatePlanBeneficiaries(ctx, id, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlanBeneficiaries", reflect.TypeOf((*MockMutationResolver)(nil).UpdatePlanBeneficiaries), ctx, id, changes)
}

// UpdatePlanCollaborator mocks base method.
func (m *MockMutationResolver) UpdatePlanCollaborator(ctx context.Context, id uuid.UUID, newRoles []models.TeamRole) (*models.PlanCollaborator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlanCollaborator", ctx, id, newRoles)
	ret0, _ := ret[0].(*models.PlanCollaborator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlanCollaborator indicates an expected call of UpdatePlanCollaborator.
func (mr *MockMutationResolverMockRecorder) UpdatePlanCollaborator(ctx, id, newRoles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlanCollaborator", reflect.TypeOf((*MockMutationResolver)(nil).UpdatePlanCollaborator), ctx, id, newRoles)
}

// UpdatePlanCr mocks base method.
func (m *MockMutationResolver) UpdatePlanCr(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanCR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlanCr", ctx, id, changes)
	ret0, _ := ret[0].(*models.PlanCR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlanCr indicates an expected call of UpdatePlanCr.
func (mr *MockMutationResolverMockRecorder) UpdatePlanCr(ctx, id, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlanCr", reflect.TypeOf((*MockMutationResolver)(nil).UpdatePlanCr), ctx, id, changes)
}

// UpdatePlanGeneralCharacteristics mocks base method.
func (m *MockMutationResolver) UpdatePlanGeneralCharacteristics(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanGeneralCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlanGeneralCharacteristics", ctx, id, changes)
	ret0, _ := ret[0].(*models.PlanGeneralCharacteristics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlanGeneralCharacteristics indicates an expected call of UpdatePlanGeneralCharacteristics.
func (mr *MockMutationResolverMockRecorder) UpdatePlanGeneralCharacteristics(ctx, id, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlanGeneralCharacteristics", reflect.TypeOf((*MockMutationResolver)(nil).UpdatePlanGeneralCharacteristics), ctx, id, changes)
}

// UpdatePlanOpsEvalAndLearning mocks base method.
func (m *MockMutationResolver) UpdatePlanOpsEvalAndLearning(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanOpsEvalAndLearning, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlanOpsEvalAndLearning", ctx, id, changes)
	ret0, _ := ret[0].(*models.PlanOpsEvalAndLearning)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlanOpsEvalAndLearning indicates an expected call of UpdatePlanOpsEvalAndLearning.
func (mr *MockMutationResolverMockRecorder) UpdatePlanOpsEvalAndLearning(ctx, id, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlanOpsEvalAndLearning", reflect.TypeOf((*MockMutationResolver)(nil).UpdatePlanOpsEvalAndLearning), ctx, id, changes)
}

// UpdatePlanParticipantsAndProviders mocks base method.
func (m *MockMutationResolver) UpdatePlanParticipantsAndProviders(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanParticipantsAndProviders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlanParticipantsAndProviders", ctx, id, changes)
	ret0, _ := ret[0].(*models.PlanParticipantsAndProviders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlanParticipantsAndProviders indicates an expected call of UpdatePlanParticipantsAndProviders.
func (mr *MockMutationResolverMockRecorder) UpdatePlanParticipantsAndProviders(ctx, id, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlanParticipantsAndProviders", reflect.TypeOf((*MockMutationResolver)(nil).UpdatePlanParticipantsAndProviders), ctx, id, changes)
}

// UpdatePlanPayments mocks base method.
func (m *MockMutationResolver) UpdatePlanPayments(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanPayments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlanPayments", ctx, id, changes)
	ret0, _ := ret[0].(*models.PlanPayments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlanPayments indicates an expected call of UpdatePlanPayments.
func (mr *MockMutationResolverMockRecorder) UpdatePlanPayments(ctx, id, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlanPayments", reflect.TypeOf((*MockMutationResolver)(nil).UpdatePlanPayments), ctx, id, changes)
}

// UpdatePlanTdl mocks base method.
func (m *MockMutationResolver) UpdatePlanTdl(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanTDL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlanTdl", ctx, id, changes)
	ret0, _ := ret[0].(*models.PlanTDL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlanTdl indicates an expected call of UpdatePlanTdl.
func (mr *MockMutationResolverMockRecorder) UpdatePlanTdl(ctx, id, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlanTdl", reflect.TypeOf((*MockMutationResolver)(nil).UpdatePlanTdl), ctx, id, changes)
}

// UpdateUserNotificationPreferences mocks base method.
func (m *MockMutationResolver) UpdateUserNotificationPreferences(ctx context.Context, changes map[string]interface{}) (*models.UserNotificationPreferences, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserNotificationPreferences", ctx, changes)
	ret0, _ := ret[0].(*models.UserNotificationPreferences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserNotificationPreferences indicates an expected call of UpdateUserNotificationPreferences.
func (mr *MockMutationResolverMockRecorder) UpdateUserNotificationPreferences(ctx, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserNotificationPreferences", reflect.TypeOf((*MockMutationResolver)(nil).UpdateUserNotificationPreferences), ctx, changes)
}

// UpdateUserViewCustomization mocks base method.
func (m *MockMutationResolver) UpdateUserViewCustomization(ctx context.Context, changes map[string]interface{}) (*models.UserViewCustomization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserViewCustomization", ctx, changes)
	ret0, _ := ret[0].(*models.UserViewCustomization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserViewCustomization indicates an expected call of UpdateUserViewCustomization.
func (mr *MockMutationResolverMockRecorder) UpdateUserViewCustomization(ctx, changes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserViewCustomization", reflect.TypeOf((*MockMutationResolver)(nil).UpdateUserViewCustomization), ctx, changes)
}

// UploadNewPlanDocument mocks base method.
func (m *MockMutationResolver) UploadNewPlanDocument(ctx context.Context, input model.PlanDocumentInput) (*models.PlanDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadNewPlanDocument", ctx, input)
	ret0, _ := ret[0].(*models.PlanDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadNewPlanDocument indicates an expected call of UploadNewPlanDocument.
func (mr *MockMutationResolverMockRecorder) UploadNewPlanDocument(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadNewPlanDocument", reflect.TypeOf((*MockMutationResolver)(nil).UploadNewPlanDocument), ctx, input)
}

// MockNewDiscussionRepliedActivityMetaResolver is a mock of NewDiscussionRepliedActivityMetaResolver interface.
type MockNewDiscussionRepliedActivityMetaResolver struct {
	ctrl     *gomock.Controller
	recorder *MockNewDiscussionRepliedActivityMetaResolverMockRecorder
}

// MockNewDiscussionRepliedActivityMetaResolverMockRecorder is the mock recorder for MockNewDiscussionRepliedActivityMetaResolver.
type MockNewDiscussionRepliedActivityMetaResolverMockRecorder struct {
	mock *MockNewDiscussionRepliedActivityMetaResolver
}

// NewMockNewDiscussionRepliedActivityMetaResolver creates a new mock instance.
func NewMockNewDiscussionRepliedActivityMetaResolver(ctrl *gomock.Controller) *MockNewDiscussionRepliedActivityMetaResolver {
	mock := &MockNewDiscussionRepliedActivityMetaResolver{ctrl: ctrl}
	mock.recorder = &MockNewDiscussionRepliedActivityMetaResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewDiscussionRepliedActivityMetaResolver) EXPECT() *MockNewDiscussionRepliedActivityMetaResolverMockRecorder {
	return m.recorder
}

// Discussion mocks base method.
func (m *MockNewDiscussionRepliedActivityMetaResolver) Discussion(ctx context.Context, obj *models.NewDiscussionRepliedActivityMeta) (*models.PlanDiscussion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discussion", ctx, obj)
	ret0, _ := ret[0].(*models.PlanDiscussion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Discussion indicates an expected call of Discussion.
func (mr *MockNewDiscussionRepliedActivityMetaResolverMockRecorder) Discussion(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discussion", reflect.TypeOf((*MockNewDiscussionRepliedActivityMetaResolver)(nil).Discussion), ctx, obj)
}

// ModelPlan mocks base method.
func (m *MockNewDiscussionRepliedActivityMetaResolver) ModelPlan(ctx context.Context, obj *models.NewDiscussionRepliedActivityMeta) (*models.ModelPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlan", ctx, obj)
	ret0, _ := ret[0].(*models.ModelPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelPlan indicates an expected call of ModelPlan.
func (mr *MockNewDiscussionRepliedActivityMetaResolverMockRecorder) ModelPlan(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlan", reflect.TypeOf((*MockNewDiscussionRepliedActivityMetaResolver)(nil).ModelPlan), ctx, obj)
}

// Reply mocks base method.
func (m *MockNewDiscussionRepliedActivityMetaResolver) Reply(ctx context.Context, obj *models.NewDiscussionRepliedActivityMeta) (*models.DiscussionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reply", ctx, obj)
	ret0, _ := ret[0].(*models.DiscussionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reply indicates an expected call of Reply.
func (mr *MockNewDiscussionRepliedActivityMetaResolverMockRecorder) Reply(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockNewDiscussionRepliedActivityMetaResolver)(nil).Reply), ctx, obj)
}

// MockNewModelPlanActivityMetaResolver is a mock of NewModelPlanActivityMetaResolver interface.
type MockNewModelPlanActivityMetaResolver struct {
	ctrl     *gomock.Controller
	recorder *MockNewModelPlanActivityMetaResolverMockRecorder
}

// MockNewModelPlanActivityMetaResolverMockRecorder is the mock recorder for MockNewModelPlanActivityMetaResolver.
type MockNewModelPlanActivityMetaResolverMockRecorder struct {
	mock *MockNewModelPlanActivityMetaResolver
}

// NewMockNewModelPlanActivityMetaResolver creates a new mock instance.
func NewMockNewModelPlanActivityMetaResolver(ctrl *gomock.Controller) *MockNewModelPlanActivityMetaResolver {
	mock := &MockNewModelPlanActivityMetaResolver{ctrl: ctrl}
	mock.recorder = &MockNewModelPlanActivityMetaResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewModelPlanActivityMetaResolver) EXPECT() *MockNewModelPlanActivityMetaResolverMockRecorder {
	return m.recorder
}

// ModelPlan mocks base method.
func (m *MockNewModelPlanActivityMetaResolver) ModelPlan(ctx context.Context, obj *models.NewModelPlanActivityMeta) (*models.ModelPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlan", ctx, obj)
	ret0, _ := ret[0].(*models.ModelPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelPlan indicates an expected call of ModelPlan.
func (mr *MockNewModelPlanActivityMetaResolverMockRecorder) ModelPlan(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlan", reflect.TypeOf((*MockNewModelPlanActivityMetaResolver)(nil).ModelPlan), ctx, obj)
}

// MockOperationalNeedResolver is a mock of OperationalNeedResolver interface.
type MockOperationalNeedResolver struct {
	ctrl     *gomock.Controller
	recorder *MockOperationalNeedResolverMockRecorder
}

// MockOperationalNeedResolverMockRecorder is the mock recorder for MockOperationalNeedResolver.
type MockOperationalNeedResolverMockRecorder struct {
	mock *MockOperationalNeedResolver
}

// NewMockOperationalNeedResolver creates a new mock instance.
func NewMockOperationalNeedResolver(ctrl *gomock.Controller) *MockOperationalNeedResolver {
	mock := &MockOperationalNeedResolver{ctrl: ctrl}
	mock.recorder = &MockOperationalNeedResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationalNeedResolver) EXPECT() *MockOperationalNeedResolverMockRecorder {
	return m.recorder
}

// Solutions mocks base method.
func (m *MockOperationalNeedResolver) Solutions(ctx context.Context, obj *models.OperationalNeed, includeNotNeeded bool) ([]*models.OperationalSolution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Solutions", ctx, obj, includeNotNeeded)
	ret0, _ := ret[0].([]*models.OperationalSolution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Solutions indicates an expected call of Solutions.
func (mr *MockOperationalNeedResolverMockRecorder) Solutions(ctx, obj, includeNotNeeded interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Solutions", reflect.TypeOf((*MockOperationalNeedResolver)(nil).Solutions), ctx, obj, includeNotNeeded)
}

// MockOperationalSolutionResolver is a mock of OperationalSolutionResolver interface.
type MockOperationalSolutionResolver struct {
	ctrl     *gomock.Controller
	recorder *MockOperationalSolutionResolverMockRecorder
}

// MockOperationalSolutionResolverMockRecorder is the mock recorder for MockOperationalSolutionResolver.
type MockOperationalSolutionResolverMockRecorder struct {
	mock *MockOperationalSolutionResolver
}

// NewMockOperationalSolutionResolver creates a new mock instance.
func NewMockOperationalSolutionResolver(ctrl *gomock.Controller) *MockOperationalSolutionResolver {
	mock := &MockOperationalSolutionResolver{ctrl: ctrl}
	mock.recorder = &MockOperationalSolutionResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationalSolutionResolver) EXPECT() *MockOperationalSolutionResolverMockRecorder {
	return m.recorder
}

// Documents mocks base method.
func (m *MockOperationalSolutionResolver) Documents(ctx context.Context, obj *models.OperationalSolution) ([]*models.PlanDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Documents", ctx, obj)
	ret0, _ := ret[0].([]*models.PlanDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Documents indicates an expected call of Documents.
func (mr *MockOperationalSolutionResolverMockRecorder) Documents(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Documents", reflect.TypeOf((*MockOperationalSolutionResolver)(nil).Documents), ctx, obj)
}

// OperationalSolutionSubtasks mocks base method.
func (m *MockOperationalSolutionResolver) OperationalSolutionSubtasks(ctx context.Context, obj *models.OperationalSolution) ([]*models.OperationalSolutionSubtask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationalSolutionSubtasks", ctx, obj)
	ret0, _ := ret[0].([]*models.OperationalSolutionSubtask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationalSolutionSubtasks indicates an expected call of OperationalSolutionSubtasks.
func (mr *MockOperationalSolutionResolverMockRecorder) OperationalSolutionSubtasks(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationalSolutionSubtasks", reflect.TypeOf((*MockOperationalSolutionResolver)(nil).OperationalSolutionSubtasks), ctx, obj)
}

// MockPlanBasicsResolver is a mock of PlanBasicsResolver interface.
type MockPlanBasicsResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPlanBasicsResolverMockRecorder
}

// MockPlanBasicsResolverMockRecorder is the mock recorder for MockPlanBasicsResolver.
type MockPlanBasicsResolverMockRecorder struct {
	mock *MockPlanBasicsResolver
}

// NewMockPlanBasicsResolver creates a new mock instance.
func NewMockPlanBasicsResolver(ctrl *gomock.Controller) *MockPlanBasicsResolver {
	mock := &MockPlanBasicsResolver{ctrl: ctrl}
	mock.recorder = &MockPlanBasicsResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanBasicsResolver) EXPECT() *MockPlanBasicsResolverMockRecorder {
	return m.recorder
}

// AdditionalModelCategories mocks base method.
func (m *MockPlanBasicsResolver) AdditionalModelCategories(ctx context.Context, obj *models.PlanBasics) ([]models.ModelCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdditionalModelCategories", ctx, obj)
	ret0, _ := ret[0].([]models.ModelCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdditionalModelCategories indicates an expected call of AdditionalModelCategories.
func (mr *MockPlanBasicsResolverMockRecorder) AdditionalModelCategories(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdditionalModelCategories", reflect.TypeOf((*MockPlanBasicsResolver)(nil).AdditionalModelCategories), ctx, obj)
}

// CmmiGroups mocks base method.
func (m *MockPlanBasicsResolver) CmmiGroups(ctx context.Context, obj *models.PlanBasics) ([]model.CMMIGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmmiGroups", ctx, obj)
	ret0, _ := ret[0].([]model.CMMIGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CmmiGroups indicates an expected call of CmmiGroups.
func (mr *MockPlanBasicsResolverMockRecorder) CmmiGroups(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmmiGroups", reflect.TypeOf((*MockPlanBasicsResolver)(nil).CmmiGroups), ctx, obj)
}

// CmsCenters mocks base method.
func (m *MockPlanBasicsResolver) CmsCenters(ctx context.Context, obj *models.PlanBasics) ([]model.CMSCenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmsCenters", ctx, obj)
	ret0, _ := ret[0].([]model.CMSCenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CmsCenters indicates an expected call of CmsCenters.
func (mr *MockPlanBasicsResolverMockRecorder) CmsCenters(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmsCenters", reflect.TypeOf((*MockPlanBasicsResolver)(nil).CmsCenters), ctx, obj)
}

// ModelType mocks base method.
func (m *MockPlanBasicsResolver) ModelType(ctx context.Context, obj *models.PlanBasics) ([]models.ModelType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelType", ctx, obj)
	ret0, _ := ret[0].([]models.ModelType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelType indicates an expected call of ModelType.
func (mr *MockPlanBasicsResolverMockRecorder) ModelType(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelType", reflect.TypeOf((*MockPlanBasicsResolver)(nil).ModelType), ctx, obj)
}

// MockPlanBeneficiariesResolver is a mock of PlanBeneficiariesResolver interface.
type MockPlanBeneficiariesResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPlanBeneficiariesResolverMockRecorder
}

// MockPlanBeneficiariesResolverMockRecorder is the mock recorder for MockPlanBeneficiariesResolver.
type MockPlanBeneficiariesResolverMockRecorder struct {
	mock *MockPlanBeneficiariesResolver
}

// NewMockPlanBeneficiariesResolver creates a new mock instance.
func NewMockPlanBeneficiariesResolver(ctrl *gomock.Controller) *MockPlanBeneficiariesResolver {
	mock := &MockPlanBeneficiariesResolver{ctrl: ctrl}
	mock.recorder = &MockPlanBeneficiariesResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanBeneficiariesResolver) EXPECT() *MockPlanBeneficiariesResolverMockRecorder {
	return m.recorder
}

// Beneficiaries mocks base method.
func (m *MockPlanBeneficiariesResolver) Beneficiaries(ctx context.Context, obj *models.PlanBeneficiaries) ([]model.BeneficiariesType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Beneficiaries", ctx, obj)
	ret0, _ := ret[0].([]model.BeneficiariesType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Beneficiaries indicates an expected call of Beneficiaries.
func (mr *MockPlanBeneficiariesResolverMockRecorder) Beneficiaries(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Beneficiaries", reflect.TypeOf((*MockPlanBeneficiariesResolver)(nil).Beneficiaries), ctx, obj)
}

// BeneficiaryRemovalFrequency mocks base method.
func (m *MockPlanBeneficiariesResolver) BeneficiaryRemovalFrequency(ctx context.Context, obj *models.PlanBeneficiaries) ([]models.FrequencyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeneficiaryRemovalFrequency", ctx, obj)
	ret0, _ := ret[0].([]models.FrequencyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeneficiaryRemovalFrequency indicates an expected call of BeneficiaryRemovalFrequency.
func (mr *MockPlanBeneficiariesResolverMockRecorder) BeneficiaryRemovalFrequency(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeneficiaryRemovalFrequency", reflect.TypeOf((*MockPlanBeneficiariesResolver)(nil).BeneficiaryRemovalFrequency), ctx, obj)
}

// BeneficiarySelectionFrequency mocks base method.
func (m *MockPlanBeneficiariesResolver) BeneficiarySelectionFrequency(ctx context.Context, obj *models.PlanBeneficiaries) ([]models.FrequencyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeneficiarySelectionFrequency", ctx, obj)
	ret0, _ := ret[0].([]models.FrequencyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeneficiarySelectionFrequency indicates an expected call of BeneficiarySelectionFrequency.
func (mr *MockPlanBeneficiariesResolverMockRecorder) BeneficiarySelectionFrequency(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeneficiarySelectionFrequency", reflect.TypeOf((*MockPlanBeneficiariesResolver)(nil).BeneficiarySelectionFrequency), ctx, obj)
}

// BeneficiarySelectionMethod mocks base method.
func (m *MockPlanBeneficiariesResolver) BeneficiarySelectionMethod(ctx context.Context, obj *models.PlanBeneficiaries) ([]model.SelectionMethodType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeneficiarySelectionMethod", ctx, obj)
	ret0, _ := ret[0].([]model.SelectionMethodType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeneficiarySelectionMethod indicates an expected call of BeneficiarySelectionMethod.
func (mr *MockPlanBeneficiariesResolverMockRecorder) BeneficiarySelectionMethod(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeneficiarySelectionMethod", reflect.TypeOf((*MockPlanBeneficiariesResolver)(nil).BeneficiarySelectionMethod), ctx, obj)
}

// PrecedenceRules mocks base method.
func (m *MockPlanBeneficiariesResolver) PrecedenceRules(ctx context.Context, obj *models.PlanBeneficiaries) ([]models.YesNoType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrecedenceRules", ctx, obj)
	ret0, _ := ret[0].([]models.YesNoType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrecedenceRules indicates an expected call of PrecedenceRules.
func (mr *MockPlanBeneficiariesResolverMockRecorder) PrecedenceRules(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrecedenceRules", reflect.TypeOf((*MockPlanBeneficiariesResolver)(nil).PrecedenceRules), ctx, obj)
}

// MockPlanCollaboratorResolver is a mock of PlanCollaboratorResolver interface.
type MockPlanCollaboratorResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPlanCollaboratorResolverMockRecorder
}

// MockPlanCollaboratorResolverMockRecorder is the mock recorder for MockPlanCollaboratorResolver.
type MockPlanCollaboratorResolverMockRecorder struct {
	mock *MockPlanCollaboratorResolver
}

// NewMockPlanCollaboratorResolver creates a new mock instance.
func NewMockPlanCollaboratorResolver(ctrl *gomock.Controller) *MockPlanCollaboratorResolver {
	mock := &MockPlanCollaboratorResolver{ctrl: ctrl}
	mock.recorder = &MockPlanCollaboratorResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanCollaboratorResolver) EXPECT() *MockPlanCollaboratorResolverMockRecorder {
	return m.recorder
}

// TeamRoles mocks base method.
func (m *MockPlanCollaboratorResolver) TeamRoles(ctx context.Context, obj *models.PlanCollaborator) ([]models.TeamRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamRoles", ctx, obj)
	ret0, _ := ret[0].([]models.TeamRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamRoles indicates an expected call of TeamRoles.
func (mr *MockPlanCollaboratorResolverMockRecorder) TeamRoles(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamRoles", reflect.TypeOf((*MockPlanCollaboratorResolver)(nil).TeamRoles), ctx, obj)
}

// MockPlanDiscussionResolver is a mock of PlanDiscussionResolver interface.
type MockPlanDiscussionResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPlanDiscussionResolverMockRecorder
}

// MockPlanDiscussionResolverMockRecorder is the mock recorder for MockPlanDiscussionResolver.
type MockPlanDiscussionResolverMockRecorder struct {
	mock *MockPlanDiscussionResolver
}

// NewMockPlanDiscussionResolver creates a new mock instance.
func NewMockPlanDiscussionResolver(ctrl *gomock.Controller) *MockPlanDiscussionResolver {
	mock := &MockPlanDiscussionResolver{ctrl: ctrl}
	mock.recorder = &MockPlanDiscussionResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanDiscussionResolver) EXPECT() *MockPlanDiscussionResolverMockRecorder {
	return m.recorder
}

// Content mocks base method.
func (m *MockPlanDiscussionResolver) Content(ctx context.Context, obj *models.PlanDiscussion) (*models.TaggedContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Content", ctx, obj)
	ret0, _ := ret[0].(*models.TaggedContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Content indicates an expected call of Content.
func (mr *MockPlanDiscussionResolverMockRecorder) Content(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Content", reflect.TypeOf((*MockPlanDiscussionResolver)(nil).Content), ctx, obj)
}

// Replies mocks base method.
func (m *MockPlanDiscussionResolver) Replies(ctx context.Context, obj *models.PlanDiscussion) ([]*models.DiscussionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replies", ctx, obj)
	ret0, _ := ret[0].([]*models.DiscussionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replies indicates an expected call of Replies.
func (mr *MockPlanDiscussionResolverMockRecorder) Replies(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replies", reflect.TypeOf((*MockPlanDiscussionResolver)(nil).Replies), ctx, obj)
}

// MockPlanDocumentResolver is a mock of PlanDocumentResolver interface.
type MockPlanDocumentResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPlanDocumentResolverMockRecorder
}

// MockPlanDocumentResolverMockRecorder is the mock recorder for MockPlanDocumentResolver.
type MockPlanDocumentResolverMockRecorder struct {
	mock *MockPlanDocumentResolver
}

// NewMockPlanDocumentResolver creates a new mock instance.
func NewMockPlanDocumentResolver(ctrl *gomock.Controller) *MockPlanDocumentResolver {
	mock := &MockPlanDocumentResolver{ctrl: ctrl}
	mock.recorder = &MockPlanDocumentResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanDocumentResolver) EXPECT() *MockPlanDocumentResolverMockRecorder {
	return m.recorder
}

// DownloadURL mocks base method.
func (m *MockPlanDocumentResolver) DownloadURL(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadURL", ctx, obj)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadURL indicates an expected call of DownloadURL.
func (mr *MockPlanDocumentResolverMockRecorder) DownloadURL(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadURL", reflect.TypeOf((*MockPlanDocumentResolver)(nil).DownloadURL), ctx, obj)
}

// NumLinkedSolutions mocks base method.
func (m *MockPlanDocumentResolver) NumLinkedSolutions(ctx context.Context, obj *models.PlanDocument) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumLinkedSolutions", ctx, obj)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumLinkedSolutions indicates an expected call of NumLinkedSolutions.
func (mr *MockPlanDocumentResolverMockRecorder) NumLinkedSolutions(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumLinkedSolutions", reflect.TypeOf((*MockPlanDocumentResolver)(nil).NumLinkedSolutions), ctx, obj)
}

// OptionalNotes mocks base method.
func (m *MockPlanDocumentResolver) OptionalNotes(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptionalNotes", ctx, obj)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptionalNotes indicates an expected call of OptionalNotes.
func (mr *MockPlanDocumentResolverMockRecorder) OptionalNotes(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionalNotes", reflect.TypeOf((*MockPlanDocumentResolver)(nil).OptionalNotes), ctx, obj)
}

// OtherType mocks base method.
func (m *MockPlanDocumentResolver) OtherType(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OtherType", ctx, obj)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OtherType indicates an expected call of OtherType.
func (mr *MockPlanDocumentResolverMockRecorder) OtherType(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OtherType", reflect.TypeOf((*MockPlanDocumentResolver)(nil).OtherType), ctx, obj)
}

// URL mocks base method.
func (m *MockPlanDocumentResolver) URL(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL", ctx, obj)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// URL indicates an expected call of URL.
func (mr *MockPlanDocumentResolverMockRecorder) URL(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockPlanDocumentResolver)(nil).URL), ctx, obj)
}

// MockPlanGeneralCharacteristicsResolver is a mock of PlanGeneralCharacteristicsResolver interface.
type MockPlanGeneralCharacteristicsResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPlanGeneralCharacteristicsResolverMockRecorder
}

// MockPlanGeneralCharacteristicsResolverMockRecorder is the mock recorder for MockPlanGeneralCharacteristicsResolver.
type MockPlanGeneralCharacteristicsResolverMockRecorder struct {
	mock *MockPlanGeneralCharacteristicsResolver
}

// NewMockPlanGeneralCharacteristicsResolver creates a new mock instance.
func NewMockPlanGeneralCharacteristicsResolver(ctrl *gomock.Controller) *MockPlanGeneralCharacteristicsResolver {
	mock := &MockPlanGeneralCharacteristicsResolver{ctrl: ctrl}
	mock.recorder = &MockPlanGeneralCharacteristicsResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanGeneralCharacteristicsResolver) EXPECT() *MockPlanGeneralCharacteristicsResolverMockRecorder {
	return m.recorder
}

// AgencyOrStateHelp mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) AgencyOrStateHelp(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.AgencyOrStateHelpType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgencyOrStateHelp", ctx, obj)
	ret0, _ := ret[0].([]model.AgencyOrStateHelpType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgencyOrStateHelp indicates an expected call of AgencyOrStateHelp.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) AgencyOrStateHelp(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgencyOrStateHelp", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).AgencyOrStateHelp), ctx, obj)
}

// AgreementTypes mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) AgreementTypes(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.AgreementType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgreementTypes", ctx, obj)
	ret0, _ := ret[0].([]model.AgreementType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgreementTypes indicates an expected call of AgreementTypes.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) AgreementTypes(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgreementTypes", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).AgreementTypes), ctx, obj)
}

// AlternativePaymentModelTypes mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) AlternativePaymentModelTypes(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.AlternativePaymentModelType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlternativePaymentModelTypes", ctx, obj)
	ret0, _ := ret[0].([]model.AlternativePaymentModelType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlternativePaymentModelTypes indicates an expected call of AlternativePaymentModelTypes.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) AlternativePaymentModelTypes(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlternativePaymentModelTypes", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).AlternativePaymentModelTypes), ctx, obj)
}

// AuthorityAllowances mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) AuthorityAllowances(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.AuthorityAllowance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorityAllowances", ctx, obj)
	ret0, _ := ret[0].([]model.AuthorityAllowance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorityAllowances indicates an expected call of AuthorityAllowances.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) AuthorityAllowances(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorityAllowances", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).AuthorityAllowances), ctx, obj)
}

// CurrentModelPlan mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) CurrentModelPlan(ctx context.Context, obj *models.PlanGeneralCharacteristics) (*models.ModelPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentModelPlan", ctx, obj)
	ret0, _ := ret[0].(*models.ModelPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentModelPlan indicates an expected call of CurrentModelPlan.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) CurrentModelPlan(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentModelPlan", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).CurrentModelPlan), ctx, obj)
}

// ExistingModel mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) ExistingModel(ctx context.Context, obj *models.PlanGeneralCharacteristics) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistingModel", ctx, obj)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistingModel indicates an expected call of ExistingModel.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) ExistingModel(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistingModel", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).ExistingModel), ctx, obj)
}

// ExistingModelPlan mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) ExistingModelPlan(ctx context.Context, obj *models.PlanGeneralCharacteristics) (*models.ExistingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistingModelPlan", ctx, obj)
	ret0, _ := ret[0].(*models.ExistingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistingModelPlan indicates an expected call of ExistingModelPlan.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) ExistingModelPlan(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistingModelPlan", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).ExistingModelPlan), ctx, obj)
}

// GeographiesRegionTypes mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) GeographiesRegionTypes(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]models.GeographyRegionType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeographiesRegionTypes", ctx, obj)
	ret0, _ := ret[0].([]models.GeographyRegionType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeographiesRegionTypes indicates an expected call of GeographiesRegionTypes.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) GeographiesRegionTypes(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeographiesRegionTypes", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).GeographiesRegionTypes), ctx, obj)
}

// GeographiesStatesAndTerritories mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) GeographiesStatesAndTerritories(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]models.StatesAndTerritories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeographiesStatesAndTerritories", ctx, obj)
	ret0, _ := ret[0].([]models.StatesAndTerritories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeographiesStatesAndTerritories indicates an expected call of GeographiesStatesAndTerritories.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) GeographiesStatesAndTerritories(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeographiesStatesAndTerritories", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).GeographiesStatesAndTerritories), ctx, obj)
}

// GeographiesTargetedAppliedTo mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) GeographiesTargetedAppliedTo(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.GeographyApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeographiesTargetedAppliedTo", ctx, obj)
	ret0, _ := ret[0].([]model.GeographyApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeographiesTargetedAppliedTo indicates an expected call of GeographiesTargetedAppliedTo.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) GeographiesTargetedAppliedTo(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeographiesTargetedAppliedTo", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).GeographiesTargetedAppliedTo), ctx, obj)
}

// GeographiesTargetedTypes mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) GeographiesTargetedTypes(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.GeographyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeographiesTargetedTypes", ctx, obj)
	ret0, _ := ret[0].([]model.GeographyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeographiesTargetedTypes indicates an expected call of GeographiesTargetedTypes.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) GeographiesTargetedTypes(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeographiesTargetedTypes", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).GeographiesTargetedTypes), ctx, obj)
}

// KeyCharacteristics mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) KeyCharacteristics(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.KeyCharacteristic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyCharacteristics", ctx, obj)
	ret0, _ := ret[0].([]model.KeyCharacteristic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyCharacteristics indicates an expected call of KeyCharacteristics.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) KeyCharacteristics(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyCharacteristics", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).KeyCharacteristics), ctx, obj)
}

// ParticipationInModelPreconditionWhich mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) ParticipationInModelPreconditionWhich(ctx context.Context, obj *models.PlanGeneralCharacteristics) (*models.ExistingModelLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipationInModelPreconditionWhich", ctx, obj)
	ret0, _ := ret[0].(*models.ExistingModelLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParticipationInModelPreconditionWhich indicates an expected call of ParticipationInModelPreconditionWhich.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) ParticipationInModelPreconditionWhich(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipationInModelPreconditionWhich", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).ParticipationInModelPreconditionWhich), ctx, obj)
}

// ResemblesExistingModelWhich mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) ResemblesExistingModelWhich(ctx context.Context, obj *models.PlanGeneralCharacteristics) (*models.ExistingModelLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResemblesExistingModelWhich", ctx, obj)
	ret0, _ := ret[0].(*models.ExistingModelLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResemblesExistingModelWhich indicates an expected call of ResemblesExistingModelWhich.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) ResemblesExistingModelWhich(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResemblesExistingModelWhich", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).ResemblesExistingModelWhich), ctx, obj)
}

// WaiversRequiredTypes mocks base method.
func (m *MockPlanGeneralCharacteristicsResolver) WaiversRequiredTypes(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.WaiverType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaiversRequiredTypes", ctx, obj)
	ret0, _ := ret[0].([]model.WaiverType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaiversRequiredTypes indicates an expected call of WaiversRequiredTypes.
func (mr *MockPlanGeneralCharacteristicsResolverMockRecorder) WaiversRequiredTypes(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaiversRequiredTypes", reflect.TypeOf((*MockPlanGeneralCharacteristicsResolver)(nil).WaiversRequiredTypes), ctx, obj)
}

// MockPlanOpsEvalAndLearningResolver is a mock of PlanOpsEvalAndLearningResolver interface.
type MockPlanOpsEvalAndLearningResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPlanOpsEvalAndLearningResolverMockRecorder
}

// MockPlanOpsEvalAndLearningResolverMockRecorder is the mock recorder for MockPlanOpsEvalAndLearningResolver.
type MockPlanOpsEvalAndLearningResolverMockRecorder struct {
	mock *MockPlanOpsEvalAndLearningResolver
}

// NewMockPlanOpsEvalAndLearningResolver creates a new mock instance.
func NewMockPlanOpsEvalAndLearningResolver(ctrl *gomock.Controller) *MockPlanOpsEvalAndLearningResolver {
	mock := &MockPlanOpsEvalAndLearningResolver{ctrl: ctrl}
	mock.recorder = &MockPlanOpsEvalAndLearningResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanOpsEvalAndLearningResolver) EXPECT() *MockPlanOpsEvalAndLearningResolverMockRecorder {
	return m.recorder
}

// CcmInvolvment mocks base method.
func (m *MockPlanOpsEvalAndLearningResolver) CcmInvolvment(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.CcmInvolvmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CcmInvolvment", ctx, obj)
	ret0, _ := ret[0].([]model.CcmInvolvmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CcmInvolvment indicates an expected call of CcmInvolvment.
func (mr *MockPlanOpsEvalAndLearningResolverMockRecorder) CcmInvolvment(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CcmInvolvment", reflect.TypeOf((*MockPlanOpsEvalAndLearningResolver)(nil).CcmInvolvment), ctx, obj)
}

// ContractorSupport mocks base method.
func (m *MockPlanOpsEvalAndLearningResolver) ContractorSupport(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.ContractorSupportType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractorSupport", ctx, obj)
	ret0, _ := ret[0].([]model.ContractorSupportType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractorSupport indicates an expected call of ContractorSupport.
func (mr *MockPlanOpsEvalAndLearningResolverMockRecorder) ContractorSupport(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractorSupport", reflect.TypeOf((*MockPlanOpsEvalAndLearningResolver)(nil).ContractorSupport), ctx, obj)
}

// DataCollectionFrequency mocks base method.
func (m *MockPlanOpsEvalAndLearningResolver) DataCollectionFrequency(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]models.FrequencyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataCollectionFrequency", ctx, obj)
	ret0, _ := ret[0].([]models.FrequencyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataCollectionFrequency indicates an expected call of DataCollectionFrequency.
func (mr *MockPlanOpsEvalAndLearningResolverMockRecorder) DataCollectionFrequency(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataCollectionFrequency", reflect.TypeOf((*MockPlanOpsEvalAndLearningResolver)(nil).DataCollectionFrequency), ctx, obj)
}

// DataMonitoringFileTypes mocks base method.
func (m *MockPlanOpsEvalAndLearningResolver) DataMonitoringFileTypes(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.MonitoringFileType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataMonitoringFileTypes", ctx, obj)
	ret0, _ := ret[0].([]model.MonitoringFileType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataMonitoringFileTypes indicates an expected call of DataMonitoringFileTypes.
func (mr *MockPlanOpsEvalAndLearningResolverMockRecorder) DataMonitoringFileTypes(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataMonitoringFileTypes", reflect.TypeOf((*MockPlanOpsEvalAndLearningResolver)(nil).DataMonitoringFileTypes), ctx, obj)
}

// DataNeededForMonitoring mocks base method.
func (m *MockPlanOpsEvalAndLearningResolver) DataNeededForMonitoring(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.DataForMonitoringType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataNeededForMonitoring", ctx, obj)
	ret0, _ := ret[0].([]model.DataForMonitoringType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataNeededForMonitoring indicates an expected call of DataNeededForMonitoring.
func (mr *MockPlanOpsEvalAndLearningResolverMockRecorder) DataNeededForMonitoring(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataNeededForMonitoring", reflect.TypeOf((*MockPlanOpsEvalAndLearningResolver)(nil).DataNeededForMonitoring), ctx, obj)
}

// DataSharingFrequency mocks base method.
func (m *MockPlanOpsEvalAndLearningResolver) DataSharingFrequency(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]models.FrequencyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataSharingFrequency", ctx, obj)
	ret0, _ := ret[0].([]models.FrequencyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataSharingFrequency indicates an expected call of DataSharingFrequency.
func (mr *MockPlanOpsEvalAndLearningResolverMockRecorder) DataSharingFrequency(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataSharingFrequency", reflect.TypeOf((*MockPlanOpsEvalAndLearningResolver)(nil).DataSharingFrequency), ctx, obj)
}

// DataToSendParticicipants mocks base method.
func (m *MockPlanOpsEvalAndLearningResolver) DataToSendParticicipants(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.DataToSendParticipantsType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataToSendParticicipants", ctx, obj)
	ret0, _ := ret[0].([]model.DataToSendParticipantsType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataToSendParticicipants indicates an expected call of DataToSendParticicipants.
func (mr *MockPlanOpsEvalAndLearningResolverMockRecorder) DataToSendParticicipants(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataToSendParticicipants", reflect.TypeOf((*MockPlanOpsEvalAndLearningResolver)(nil).DataToSendParticicipants), ctx, obj)
}

// EvaluationApproaches mocks base method.
func (m *MockPlanOpsEvalAndLearningResolver) EvaluationApproaches(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.EvaluationApproachType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluationApproaches", ctx, obj)
	ret0, _ := ret[0].([]model.EvaluationApproachType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluationApproaches indicates an expected call of EvaluationApproaches.
func (mr *MockPlanOpsEvalAndLearningResolverMockRecorder) EvaluationApproaches(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluationApproaches", reflect.TypeOf((*MockPlanOpsEvalAndLearningResolver)(nil).EvaluationApproaches), ctx, obj)
}

// ModelLearningSystems mocks base method.
func (m *MockPlanOpsEvalAndLearningResolver) ModelLearningSystems(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.ModelLearningSystemType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelLearningSystems", ctx, obj)
	ret0, _ := ret[0].([]model.ModelLearningSystemType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelLearningSystems indicates an expected call of ModelLearningSystems.
func (mr *MockPlanOpsEvalAndLearningResolverMockRecorder) ModelLearningSystems(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelLearningSystems", reflect.TypeOf((*MockPlanOpsEvalAndLearningResolver)(nil).ModelLearningSystems), ctx, obj)
}

// QualityReportingFrequency mocks base method.
func (m *MockPlanOpsEvalAndLearningResolver) QualityReportingFrequency(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]models.FrequencyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QualityReportingFrequency", ctx, obj)
	ret0, _ := ret[0].([]models.FrequencyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QualityReportingFrequency indicates an expected call of QualityReportingFrequency.
func (mr *MockPlanOpsEvalAndLearningResolverMockRecorder) QualityReportingFrequency(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QualityReportingFrequency", reflect.TypeOf((*MockPlanOpsEvalAndLearningResolver)(nil).QualityReportingFrequency), ctx, obj)
}

// Stakeholders mocks base method.
func (m *MockPlanOpsEvalAndLearningResolver) Stakeholders(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.StakeholdersType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stakeholders", ctx, obj)
	ret0, _ := ret[0].([]model.StakeholdersType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stakeholders indicates an expected call of Stakeholders.
func (mr *MockPlanOpsEvalAndLearningResolverMockRecorder) Stakeholders(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stakeholders", reflect.TypeOf((*MockPlanOpsEvalAndLearningResolver)(nil).Stakeholders), ctx, obj)
}

// MockPlanParticipantsAndProvidersResolver is a mock of PlanParticipantsAndProvidersResolver interface.
type MockPlanParticipantsAndProvidersResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPlanParticipantsAndProvidersResolverMockRecorder
}

// MockPlanParticipantsAndProvidersResolverMockRecorder is the mock recorder for MockPlanParticipantsAndProvidersResolver.
type MockPlanParticipantsAndProvidersResolverMockRecorder struct {
	mock *MockPlanParticipantsAndProvidersResolver
}

// NewMockPlanParticipantsAndProvidersResolver creates a new mock instance.
func NewMockPlanParticipantsAndProvidersResolver(ctrl *gomock.Controller) *MockPlanParticipantsAndProvidersResolver {
	mock := &MockPlanParticipantsAndProvidersResolver{ctrl: ctrl}
	mock.recorder = &MockPlanParticipantsAndProvidersResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanParticipantsAndProvidersResolver) EXPECT() *MockPlanParticipantsAndProvidersResolverMockRecorder {
	return m.recorder
}

// CommunicationMethod mocks base method.
func (m *MockPlanParticipantsAndProvidersResolver) CommunicationMethod(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ParticipantCommunicationType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommunicationMethod", ctx, obj)
	ret0, _ := ret[0].([]model.ParticipantCommunicationType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommunicationMethod indicates an expected call of CommunicationMethod.
func (mr *MockPlanParticipantsAndProvidersResolverMockRecorder) CommunicationMethod(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommunicationMethod", reflect.TypeOf((*MockPlanParticipantsAndProvidersResolver)(nil).CommunicationMethod), ctx, obj)
}

// GainsharePaymentsEligibility mocks base method.
func (m *MockPlanParticipantsAndProvidersResolver) GainsharePaymentsEligibility(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.GainshareArrangementEligibility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GainsharePaymentsEligibility", ctx, obj)
	ret0, _ := ret[0].([]model.GainshareArrangementEligibility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GainsharePaymentsEligibility indicates an expected call of GainsharePaymentsEligibility.
func (mr *MockPlanParticipantsAndProvidersResolverMockRecorder) GainsharePaymentsEligibility(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GainsharePaymentsEligibility", reflect.TypeOf((*MockPlanParticipantsAndProvidersResolver)(nil).GainsharePaymentsEligibility), ctx, obj)
}

// ParticipantAddedFrequency mocks base method.
func (m *MockPlanParticipantsAndProvidersResolver) ParticipantAddedFrequency(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]models.FrequencyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipantAddedFrequency", ctx, obj)
	ret0, _ := ret[0].([]models.FrequencyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParticipantAddedFrequency indicates an expected call of ParticipantAddedFrequency.
func (mr *MockPlanParticipantsAndProvidersResolverMockRecorder) ParticipantAddedFrequency(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipantAddedFrequency", reflect.TypeOf((*MockPlanParticipantsAndProvidersResolver)(nil).ParticipantAddedFrequency), ctx, obj)
}

// ParticipantRemovedFrequency mocks base method.
func (m *MockPlanParticipantsAndProvidersResolver) ParticipantRemovedFrequency(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]models.FrequencyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipantRemovedFrequency", ctx, obj)
	ret0, _ := ret[0].([]models.FrequencyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParticipantRemovedFrequency indicates an expected call of ParticipantRemovedFrequency.
func (mr *MockPlanParticipantsAndProvidersResolverMockRecorder) ParticipantRemovedFrequency(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipantRemovedFrequency", reflect.TypeOf((*MockPlanParticipantsAndProvidersResolver)(nil).ParticipantRemovedFrequency), ctx, obj)
}

// ParticipantRequireFinancialGuaranteeType mocks base method.
func (m *MockPlanParticipantsAndProvidersResolver) ParticipantRequireFinancialGuaranteeType(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ParticipantRequireFinancialGuaranteeType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipantRequireFinancialGuaranteeType", ctx, obj)
	ret0, _ := ret[0].([]model.ParticipantRequireFinancialGuaranteeType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParticipantRequireFinancialGuaranteeType indicates an expected call of ParticipantRequireFinancialGuaranteeType.
func (mr *MockPlanParticipantsAndProvidersResolverMockRecorder) ParticipantRequireFinancialGuaranteeType(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipantRequireFinancialGuaranteeType", reflect.TypeOf((*MockPlanParticipantsAndProvidersResolver)(nil).ParticipantRequireFinancialGuaranteeType), ctx, obj)
}

// Participants mocks base method.
func (m *MockPlanParticipantsAndProvidersResolver) Participants(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ParticipantsType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Participants", ctx, obj)
	ret0, _ := ret[0].([]model.ParticipantsType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Participants indicates an expected call of Participants.
func (mr *MockPlanParticipantsAndProvidersResolverMockRecorder) Participants(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Participants", reflect.TypeOf((*MockPlanParticipantsAndProvidersResolver)(nil).Participants), ctx, obj)
}

// ParticipantsIds mocks base method.
func (m *MockPlanParticipantsAndProvidersResolver) ParticipantsIds(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ParticipantsIDType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipantsIds", ctx, obj)
	ret0, _ := ret[0].([]model.ParticipantsIDType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParticipantsIds indicates an expected call of ParticipantsIds.
func (mr *MockPlanParticipantsAndProvidersResolverMockRecorder) ParticipantsIds(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipantsIds", reflect.TypeOf((*MockPlanParticipantsAndProvidersResolver)(nil).ParticipantsIds), ctx, obj)
}

// ProviderAddMethod mocks base method.
func (m *MockPlanParticipantsAndProvidersResolver) ProviderAddMethod(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ProviderAddType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderAddMethod", ctx, obj)
	ret0, _ := ret[0].([]model.ProviderAddType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderAddMethod indicates an expected call of ProviderAddMethod.
func (mr *MockPlanParticipantsAndProvidersResolverMockRecorder) ProviderAddMethod(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderAddMethod", reflect.TypeOf((*MockPlanParticipantsAndProvidersResolver)(nil).ProviderAddMethod), ctx, obj)
}

// ProviderAdditionFrequency mocks base method.
func (m *MockPlanParticipantsAndProvidersResolver) ProviderAdditionFrequency(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]models.FrequencyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderAdditionFrequency", ctx, obj)
	ret0, _ := ret[0].([]models.FrequencyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderAdditionFrequency indicates an expected call of ProviderAdditionFrequency.
func (mr *MockPlanParticipantsAndProvidersResolverMockRecorder) ProviderAdditionFrequency(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderAdditionFrequency", reflect.TypeOf((*MockPlanParticipantsAndProvidersResolver)(nil).ProviderAdditionFrequency), ctx, obj)
}

// ProviderLeaveMethod mocks base method.
func (m *MockPlanParticipantsAndProvidersResolver) ProviderLeaveMethod(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ProviderLeaveType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderLeaveMethod", ctx, obj)
	ret0, _ := ret[0].([]model.ProviderLeaveType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderLeaveMethod indicates an expected call of ProviderLeaveMethod.
func (mr *MockPlanParticipantsAndProvidersResolverMockRecorder) ProviderLeaveMethod(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderLeaveMethod", reflect.TypeOf((*MockPlanParticipantsAndProvidersResolver)(nil).ProviderLeaveMethod), ctx, obj)
}

// ProviderRemovalFrequency mocks base method.
func (m *MockPlanParticipantsAndProvidersResolver) ProviderRemovalFrequency(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]models.FrequencyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderRemovalFrequency", ctx, obj)
	ret0, _ := ret[0].([]models.FrequencyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProviderRemovalFrequency indicates an expected call of ProviderRemovalFrequency.
func (mr *MockPlanParticipantsAndProvidersResolverMockRecorder) ProviderRemovalFrequency(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderRemovalFrequency", reflect.TypeOf((*MockPlanParticipantsAndProvidersResolver)(nil).ProviderRemovalFrequency), ctx, obj)
}

// RiskType mocks base method.
func (m *MockPlanParticipantsAndProvidersResolver) RiskType(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]models.ParticipantRiskType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RiskType", ctx, obj)
	ret0, _ := ret[0].([]models.ParticipantRiskType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RiskType indicates an expected call of RiskType.
func (mr *MockPlanParticipantsAndProvidersResolverMockRecorder) RiskType(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RiskType", reflect.TypeOf((*MockPlanParticipantsAndProvidersResolver)(nil).RiskType), ctx, obj)
}

// SelectionMethod mocks base method.
func (m *MockPlanParticipantsAndProvidersResolver) SelectionMethod(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ParticipantSelectionType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectionMethod", ctx, obj)
	ret0, _ := ret[0].([]model.ParticipantSelectionType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectionMethod indicates an expected call of SelectionMethod.
func (mr *MockPlanParticipantsAndProvidersResolverMockRecorder) SelectionMethod(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectionMethod", reflect.TypeOf((*MockPlanParticipantsAndProvidersResolver)(nil).SelectionMethod), ctx, obj)
}

// MockPlanPaymentsResolver is a mock of PlanPaymentsResolver interface.
type MockPlanPaymentsResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPlanPaymentsResolverMockRecorder
}

// MockPlanPaymentsResolverMockRecorder is the mock recorder for MockPlanPaymentsResolver.
type MockPlanPaymentsResolverMockRecorder struct {
	mock *MockPlanPaymentsResolver
}

// NewMockPlanPaymentsResolver creates a new mock instance.
func NewMockPlanPaymentsResolver(ctrl *gomock.Controller) *MockPlanPaymentsResolver {
	mock := &MockPlanPaymentsResolver{ctrl: ctrl}
	mock.recorder = &MockPlanPaymentsResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanPaymentsResolver) EXPECT() *MockPlanPaymentsResolverMockRecorder {
	return m.recorder
}

// AnticipatedPaymentFrequency mocks base method.
func (m *MockPlanPaymentsResolver) AnticipatedPaymentFrequency(ctx context.Context, obj *models.PlanPayments) ([]models.FrequencyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnticipatedPaymentFrequency", ctx, obj)
	ret0, _ := ret[0].([]models.FrequencyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnticipatedPaymentFrequency indicates an expected call of AnticipatedPaymentFrequency.
func (mr *MockPlanPaymentsResolverMockRecorder) AnticipatedPaymentFrequency(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnticipatedPaymentFrequency", reflect.TypeOf((*MockPlanPaymentsResolver)(nil).AnticipatedPaymentFrequency), ctx, obj)
}

// FundingSource mocks base method.
func (m *MockPlanPaymentsResolver) FundingSource(ctx context.Context, obj *models.PlanPayments) ([]models.FundingSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FundingSource", ctx, obj)
	ret0, _ := ret[0].([]models.FundingSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FundingSource indicates an expected call of FundingSource.
func (mr *MockPlanPaymentsResolverMockRecorder) FundingSource(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FundingSource", reflect.TypeOf((*MockPlanPaymentsResolver)(nil).FundingSource), ctx, obj)
}

// FundingSourceR mocks base method.
func (m *MockPlanPaymentsResolver) FundingSourceR(ctx context.Context, obj *models.PlanPayments) ([]models.FundingSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FundingSourceR", ctx, obj)
	ret0, _ := ret[0].([]models.FundingSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FundingSourceR indicates an expected call of FundingSourceR.
func (mr *MockPlanPaymentsResolverMockRecorder) FundingSourceR(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FundingSourceR", reflect.TypeOf((*MockPlanPaymentsResolver)(nil).FundingSourceR), ctx, obj)
}

// NonClaimsPaymentOther mocks base method.
func (m *MockPlanPaymentsResolver) NonClaimsPaymentOther(ctx context.Context, obj *models.PlanPayments) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NonClaimsPaymentOther", ctx, obj)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NonClaimsPaymentOther indicates an expected call of NonClaimsPaymentOther.
func (mr *MockPlanPaymentsResolverMockRecorder) NonClaimsPaymentOther(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NonClaimsPaymentOther", reflect.TypeOf((*MockPlanPaymentsResolver)(nil).NonClaimsPaymentOther), ctx, obj)
}

// NonClaimsPayments mocks base method.
func (m *MockPlanPaymentsResolver) NonClaimsPayments(ctx context.Context, obj *models.PlanPayments) ([]model.NonClaimsBasedPayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NonClaimsPayments", ctx, obj)
	ret0, _ := ret[0].([]model.NonClaimsBasedPayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NonClaimsPayments indicates an expected call of NonClaimsPayments.
func (mr *MockPlanPaymentsResolverMockRecorder) NonClaimsPayments(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NonClaimsPayments", reflect.TypeOf((*MockPlanPaymentsResolver)(nil).NonClaimsPayments), ctx, obj)
}

// PayClaims mocks base method.
func (m *MockPlanPaymentsResolver) PayClaims(ctx context.Context, obj *models.PlanPayments) ([]models.ClaimsBasedPayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayClaims", ctx, obj)
	ret0, _ := ret[0].([]models.ClaimsBasedPayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayClaims indicates an expected call of PayClaims.
func (mr *MockPlanPaymentsResolverMockRecorder) PayClaims(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayClaims", reflect.TypeOf((*MockPlanPaymentsResolver)(nil).PayClaims), ctx, obj)
}

// PayRecipients mocks base method.
func (m *MockPlanPaymentsResolver) PayRecipients(ctx context.Context, obj *models.PlanPayments) ([]models.PayRecipient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayRecipients", ctx, obj)
	ret0, _ := ret[0].([]models.PayRecipient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayRecipients indicates an expected call of PayRecipients.
func (mr *MockPlanPaymentsResolverMockRecorder) PayRecipients(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayRecipients", reflect.TypeOf((*MockPlanPaymentsResolver)(nil).PayRecipients), ctx, obj)
}

// PayType mocks base method.
func (m *MockPlanPaymentsResolver) PayType(ctx context.Context, obj *models.PlanPayments) ([]models.PayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayType", ctx, obj)
	ret0, _ := ret[0].([]models.PayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayType indicates an expected call of PayType.
func (mr *MockPlanPaymentsResolverMockRecorder) PayType(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayType", reflect.TypeOf((*MockPlanPaymentsResolver)(nil).PayType), ctx, obj)
}

// PaymentDemandRecoupmentFrequency mocks base method.
func (m *MockPlanPaymentsResolver) PaymentDemandRecoupmentFrequency(ctx context.Context, obj *models.PlanPayments) ([]models.FrequencyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentDemandRecoupmentFrequency", ctx, obj)
	ret0, _ := ret[0].([]models.FrequencyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentDemandRecoupmentFrequency indicates an expected call of PaymentDemandRecoupmentFrequency.
func (mr *MockPlanPaymentsResolverMockRecorder) PaymentDemandRecoupmentFrequency(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentDemandRecoupmentFrequency", reflect.TypeOf((*MockPlanPaymentsResolver)(nil).PaymentDemandRecoupmentFrequency), ctx, obj)
}

// PaymentReconciliationFrequency mocks base method.
func (m *MockPlanPaymentsResolver) PaymentReconciliationFrequency(ctx context.Context, obj *models.PlanPayments) ([]models.FrequencyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentReconciliationFrequency", ctx, obj)
	ret0, _ := ret[0].([]models.FrequencyType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentReconciliationFrequency indicates an expected call of PaymentReconciliationFrequency.
func (mr *MockPlanPaymentsResolverMockRecorder) PaymentReconciliationFrequency(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentReconciliationFrequency", reflect.TypeOf((*MockPlanPaymentsResolver)(nil).PaymentReconciliationFrequency), ctx, obj)
}

// MockPossibleOperationalNeedResolver is a mock of PossibleOperationalNeedResolver interface.
type MockPossibleOperationalNeedResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPossibleOperationalNeedResolverMockRecorder
}

// MockPossibleOperationalNeedResolverMockRecorder is the mock recorder for MockPossibleOperationalNeedResolver.
type MockPossibleOperationalNeedResolverMockRecorder struct {
	mock *MockPossibleOperationalNeedResolver
}

// NewMockPossibleOperationalNeedResolver creates a new mock instance.
func NewMockPossibleOperationalNeedResolver(ctrl *gomock.Controller) *MockPossibleOperationalNeedResolver {
	mock := &MockPossibleOperationalNeedResolver{ctrl: ctrl}
	mock.recorder = &MockPossibleOperationalNeedResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPossibleOperationalNeedResolver) EXPECT() *MockPossibleOperationalNeedResolverMockRecorder {
	return m.recorder
}

// PossibleSolutions mocks base method.
func (m *MockPossibleOperationalNeedResolver) PossibleSolutions(ctx context.Context, obj *models.PossibleOperationalNeed) ([]*models.PossibleOperationalSolution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PossibleSolutions", ctx, obj)
	ret0, _ := ret[0].([]*models.PossibleOperationalSolution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PossibleSolutions indicates an expected call of PossibleSolutions.
func (mr *MockPossibleOperationalNeedResolverMockRecorder) PossibleSolutions(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PossibleSolutions", reflect.TypeOf((*MockPossibleOperationalNeedResolver)(nil).PossibleSolutions), ctx, obj)
}

// MockPossibleOperationalSolutionResolver is a mock of PossibleOperationalSolutionResolver interface.
type MockPossibleOperationalSolutionResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPossibleOperationalSolutionResolverMockRecorder
}

// MockPossibleOperationalSolutionResolverMockRecorder is the mock recorder for MockPossibleOperationalSolutionResolver.
type MockPossibleOperationalSolutionResolverMockRecorder struct {
	mock *MockPossibleOperationalSolutionResolver
}

// NewMockPossibleOperationalSolutionResolver creates a new mock instance.
func NewMockPossibleOperationalSolutionResolver(ctrl *gomock.Controller) *MockPossibleOperationalSolutionResolver {
	mock := &MockPossibleOperationalSolutionResolver{ctrl: ctrl}
	mock.recorder = &MockPossibleOperationalSolutionResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPossibleOperationalSolutionResolver) EXPECT() *MockPossibleOperationalSolutionResolverMockRecorder {
	return m.recorder
}

// PointsOfContact mocks base method.
func (m *MockPossibleOperationalSolutionResolver) PointsOfContact(ctx context.Context, obj *models.PossibleOperationalSolution) ([]*models.PossibleOperationalSolutionContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PointsOfContact", ctx, obj)
	ret0, _ := ret[0].([]*models.PossibleOperationalSolutionContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PointsOfContact indicates an expected call of PointsOfContact.
func (mr *MockPossibleOperationalSolutionResolverMockRecorder) PointsOfContact(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PointsOfContact", reflect.TypeOf((*MockPossibleOperationalSolutionResolver)(nil).PointsOfContact), ctx, obj)
}

// PrimaryContact mocks base method.
func (m *MockPossibleOperationalSolutionResolver) PrimaryContact(ctx context.Context, obj *models.PossibleOperationalSolution) (*models.PossibleOperationalSolutionContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrimaryContact", ctx, obj)
	ret0, _ := ret[0].(*models.PossibleOperationalSolutionContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrimaryContact indicates an expected call of PrimaryContact.
func (mr *MockPossibleOperationalSolutionResolverMockRecorder) PrimaryContact(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrimaryContact", reflect.TypeOf((*MockPossibleOperationalSolutionResolver)(nil).PrimaryContact), ctx, obj)
}

// MockQueryResolver is a mock of QueryResolver interface.
type MockQueryResolver struct {
	ctrl     *gomock.Controller
	recorder *MockQueryResolverMockRecorder
}

// MockQueryResolverMockRecorder is the mock recorder for MockQueryResolver.
type MockQueryResolverMockRecorder struct {
	mock *MockQueryResolver
}

// NewMockQueryResolver creates a new mock instance.
func NewMockQueryResolver(ctrl *gomock.Controller) *MockQueryResolver {
	mock := &MockQueryResolver{ctrl: ctrl}
	mock.recorder = &MockQueryResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryResolver) EXPECT() *MockQueryResolverMockRecorder {
	return m.recorder
}

// AnalyzedAudits mocks base method.
func (m *MockQueryResolver) AnalyzedAudits(ctx context.Context, dateAnalyzed time.Time) ([]*models.AnalyzedAudit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzedAudits", ctx, dateAnalyzed)
	ret0, _ := ret[0].([]*models.AnalyzedAudit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzedAudits indicates an expected call of AnalyzedAudits.
func (mr *MockQueryResolverMockRecorder) AnalyzedAudits(ctx, dateAnalyzed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzedAudits", reflect.TypeOf((*MockQueryResolver)(nil).AnalyzedAudits), ctx, dateAnalyzed)
}

// AuditChanges mocks base method.
func (m *MockQueryResolver) AuditChanges(ctx context.Context, tableName string, primaryKey uuid.UUID) ([]*models.AuditChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuditChanges", ctx, tableName, primaryKey)
	ret0, _ := ret[0].([]*models.AuditChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuditChanges indicates an expected call of AuditChanges.
func (mr *MockQueryResolverMockRecorder) AuditChanges(ctx, tableName, primaryKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditChanges", reflect.TypeOf((*MockQueryResolver)(nil).AuditChanges), ctx, tableName, primaryKey)
}

// CurrentUser mocks base method.
func (m *MockQueryResolver) CurrentUser(ctx context.Context) (*models.CurrentUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentUser", ctx)
	ret0, _ := ret[0].(*models.CurrentUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentUser indicates an expected call of CurrentUser.
func (mr *MockQueryResolverMockRecorder) CurrentUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUser", reflect.TypeOf((*MockQueryResolver)(nil).CurrentUser), ctx)
}

// ExistingModelCollection mocks base method.
func (m *MockQueryResolver) ExistingModelCollection(ctx context.Context) ([]*models.ExistingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistingModelCollection", ctx)
	ret0, _ := ret[0].([]*models.ExistingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistingModelCollection indicates an expected call of ExistingModelCollection.
func (mr *MockQueryResolverMockRecorder) ExistingModelCollection(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistingModelCollection", reflect.TypeOf((*MockQueryResolver)(nil).ExistingModelCollection), ctx)
}

// ExistingModelLink mocks base method.
func (m *MockQueryResolver) ExistingModelLink(ctx context.Context, id uuid.UUID) (*models.ExistingModelLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistingModelLink", ctx, id)
	ret0, _ := ret[0].(*models.ExistingModelLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistingModelLink indicates an expected call of ExistingModelLink.
func (mr *MockQueryResolverMockRecorder) ExistingModelLink(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistingModelLink", reflect.TypeOf((*MockQueryResolver)(nil).ExistingModelLink), ctx, id)
}

// ModelPlan mocks base method.
func (m *MockQueryResolver) ModelPlan(ctx context.Context, id uuid.UUID) (*models.ModelPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlan", ctx, id)
	ret0, _ := ret[0].(*models.ModelPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelPlan indicates an expected call of ModelPlan.
func (mr *MockQueryResolverMockRecorder) ModelPlan(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlan", reflect.TypeOf((*MockQueryResolver)(nil).ModelPlan), ctx, id)
}

// ModelPlanCollection mocks base method.
func (m *MockQueryResolver) ModelPlanCollection(ctx context.Context, filter model.ModelPlanFilter) ([]*models.ModelPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlanCollection", ctx, filter)
	ret0, _ := ret[0].([]*models.ModelPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelPlanCollection indicates an expected call of ModelPlanCollection.
func (mr *MockQueryResolverMockRecorder) ModelPlanCollection(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlanCollection", reflect.TypeOf((*MockQueryResolver)(nil).ModelPlanCollection), ctx, filter)
}

// ModelPlansByOperationalSolutionKey mocks base method.
func (m *MockQueryResolver) ModelPlansByOperationalSolutionKey(ctx context.Context, operationalSolutionKey models.OperationalSolutionKey) ([]*models.ModelPlanAndPossibleOperationalSolution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlansByOperationalSolutionKey", ctx, operationalSolutionKey)
	ret0, _ := ret[0].([]*models.ModelPlanAndPossibleOperationalSolution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelPlansByOperationalSolutionKey indicates an expected call of ModelPlansByOperationalSolutionKey.
func (mr *MockQueryResolverMockRecorder) ModelPlansByOperationalSolutionKey(ctx, operationalSolutionKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlansByOperationalSolutionKey", reflect.TypeOf((*MockQueryResolver)(nil).ModelPlansByOperationalSolutionKey), ctx, operationalSolutionKey)
}

// MostRecentDiscussionRoleSelection mocks base method.
func (m *MockQueryResolver) MostRecentDiscussionRoleSelection(ctx context.Context) (*models.DiscussionRoleSelection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MostRecentDiscussionRoleSelection", ctx)
	ret0, _ := ret[0].(*models.DiscussionRoleSelection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MostRecentDiscussionRoleSelection indicates an expected call of MostRecentDiscussionRoleSelection.
func (mr *MockQueryResolverMockRecorder) MostRecentDiscussionRoleSelection(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MostRecentDiscussionRoleSelection", reflect.TypeOf((*MockQueryResolver)(nil).MostRecentDiscussionRoleSelection), ctx)
}

// NdaInfo mocks base method.
func (m *MockQueryResolver) NdaInfo(ctx context.Context) (*model.NDAInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NdaInfo", ctx)
	ret0, _ := ret[0].(*model.NDAInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NdaInfo indicates an expected call of NdaInfo.
func (mr *MockQueryResolverMockRecorder) NdaInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NdaInfo", reflect.TypeOf((*MockQueryResolver)(nil).NdaInfo), ctx)
}

// OperationalNeed mocks base method.
func (m *MockQueryResolver) OperationalNeed(ctx context.Context, id uuid.UUID) (*models.OperationalNeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationalNeed", ctx, id)
	ret0, _ := ret[0].(*models.OperationalNeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationalNeed indicates an expected call of OperationalNeed.
func (mr *MockQueryResolverMockRecorder) OperationalNeed(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationalNeed", reflect.TypeOf((*MockQueryResolver)(nil).OperationalNeed), ctx, id)
}

// OperationalSolution mocks base method.
func (m *MockQueryResolver) OperationalSolution(ctx context.Context, id uuid.UUID) (*models.OperationalSolution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationalSolution", ctx, id)
	ret0, _ := ret[0].(*models.OperationalSolution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationalSolution indicates an expected call of OperationalSolution.
func (mr *MockQueryResolverMockRecorder) OperationalSolution(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationalSolution", reflect.TypeOf((*MockQueryResolver)(nil).OperationalSolution), ctx, id)
}

// OperationalSolutions mocks base method.
func (m *MockQueryResolver) OperationalSolutions(ctx context.Context, operationalNeedID uuid.UUID, includeNotNeeded bool) ([]*models.OperationalSolution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationalSolutions", ctx, operationalNeedID, includeNotNeeded)
	ret0, _ := ret[0].([]*models.OperationalSolution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationalSolutions indicates an expected call of OperationalSolutions.
func (mr *MockQueryResolverMockRecorder) OperationalSolutions(ctx, operationalNeedID, includeNotNeeded interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationalSolutions", reflect.TypeOf((*MockQueryResolver)(nil).OperationalSolutions), ctx, operationalNeedID, includeNotNeeded)
}

// PlanCollaboratorByID mocks base method.
func (m *MockQueryResolver) PlanCollaboratorByID(ctx context.Context, id uuid.UUID) (*models.PlanCollaborator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanCollaboratorByID", ctx, id)
	ret0, _ := ret[0].(*models.PlanCollaborator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlanCollaboratorByID indicates an expected call of PlanCollaboratorByID.
func (mr *MockQueryResolverMockRecorder) PlanCollaboratorByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanCollaboratorByID", reflect.TypeOf((*MockQueryResolver)(nil).PlanCollaboratorByID), ctx, id)
}

// PlanCr mocks base method.
func (m *MockQueryResolver) PlanCr(ctx context.Context, id uuid.UUID) (*models.PlanCR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanCr", ctx, id)
	ret0, _ := ret[0].(*models.PlanCR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlanCr indicates an expected call of PlanCr.
func (mr *MockQueryResolverMockRecorder) PlanCr(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanCr", reflect.TypeOf((*MockQueryResolver)(nil).PlanCr), ctx, id)
}

// PlanDocument mocks base method.
func (m *MockQueryResolver) PlanDocument(ctx context.Context, id uuid.UUID) (*models.PlanDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanDocument", ctx, id)
	ret0, _ := ret[0].(*models.PlanDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlanDocument indicates an expected call of PlanDocument.
func (mr *MockQueryResolverMockRecorder) PlanDocument(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanDocument", reflect.TypeOf((*MockQueryResolver)(nil).PlanDocument), ctx, id)
}

// PlanPayments mocks base method.
func (m *MockQueryResolver) PlanPayments(ctx context.Context, id uuid.UUID) (*models.PlanPayments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanPayments", ctx, id)
	ret0, _ := ret[0].(*models.PlanPayments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlanPayments indicates an expected call of PlanPayments.
func (mr *MockQueryResolverMockRecorder) PlanPayments(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanPayments", reflect.TypeOf((*MockQueryResolver)(nil).PlanPayments), ctx, id)
}

// PlanTdl mocks base method.
func (m *MockQueryResolver) PlanTdl(ctx context.Context, id uuid.UUID) (*models.PlanTDL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanTdl", ctx, id)
	ret0, _ := ret[0].(*models.PlanTDL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlanTdl indicates an expected call of PlanTdl.
func (mr *MockQueryResolverMockRecorder) PlanTdl(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanTdl", reflect.TypeOf((*MockQueryResolver)(nil).PlanTdl), ctx, id)
}

// PossibleOperationalNeeds mocks base method.
func (m *MockQueryResolver) PossibleOperationalNeeds(ctx context.Context) ([]*models.PossibleOperationalNeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PossibleOperationalNeeds", ctx)
	ret0, _ := ret[0].([]*models.PossibleOperationalNeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PossibleOperationalNeeds indicates an expected call of PossibleOperationalNeeds.
func (mr *MockQueryResolverMockRecorder) PossibleOperationalNeeds(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PossibleOperationalNeeds", reflect.TypeOf((*MockQueryResolver)(nil).PossibleOperationalNeeds), ctx)
}

// PossibleOperationalSolutions mocks base method.
func (m *MockQueryResolver) PossibleOperationalSolutions(ctx context.Context) ([]*models.PossibleOperationalSolution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PossibleOperationalSolutions", ctx)
	ret0, _ := ret[0].([]*models.PossibleOperationalSolution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PossibleOperationalSolutions indicates an expected call of PossibleOperationalSolutions.
func (mr *MockQueryResolverMockRecorder) PossibleOperationalSolutions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PossibleOperationalSolutions", reflect.TypeOf((*MockQueryResolver)(nil).PossibleOperationalSolutions), ctx)
}

// SearchOktaUsers mocks base method.
func (m *MockQueryResolver) SearchOktaUsers(ctx context.Context, searchTerm string) ([]*models.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOktaUsers", ctx, searchTerm)
	ret0, _ := ret[0].([]*models.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOktaUsers indicates an expected call of SearchOktaUsers.
func (mr *MockQueryResolverMockRecorder) SearchOktaUsers(ctx, searchTerm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOktaUsers", reflect.TypeOf((*MockQueryResolver)(nil).SearchOktaUsers), ctx, searchTerm)
}

// TaskListSectionLocks mocks base method.
func (m *MockQueryResolver) TaskListSectionLocks(ctx context.Context, modelPlanID uuid.UUID) ([]*model.TaskListSectionLockStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskListSectionLocks", ctx, modelPlanID)
	ret0, _ := ret[0].([]*model.TaskListSectionLockStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskListSectionLocks indicates an expected call of TaskListSectionLocks.
func (mr *MockQueryResolverMockRecorder) TaskListSectionLocks(ctx, modelPlanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskListSectionLocks", reflect.TypeOf((*MockQueryResolver)(nil).TaskListSectionLocks), ctx, modelPlanID)
}

// UserAccount mocks base method.
func (m *MockQueryResolver) UserAccount(ctx context.Context, username string) (*authentication.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAccount", ctx, username)
	ret0, _ := ret[0].(*authentication.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAccount indicates an expected call of UserAccount.
func (mr *MockQueryResolverMockRecorder) UserAccount(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAccount", reflect.TypeOf((*MockQueryResolver)(nil).UserAccount), ctx, username)
}

// UserViewCustomization mocks base method.
func (m *MockQueryResolver) UserViewCustomization(ctx context.Context) (*models.UserViewCustomization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserViewCustomization", ctx)
	ret0, _ := ret[0].(*models.UserViewCustomization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserViewCustomization indicates an expected call of UserViewCustomization.
func (mr *MockQueryResolverMockRecorder) UserViewCustomization(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserViewCustomization", reflect.TypeOf((*MockQueryResolver)(nil).UserViewCustomization), ctx)
}

// MockSubscriptionResolver is a mock of SubscriptionResolver interface.
type MockSubscriptionResolver struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionResolverMockRecorder
}

// MockSubscriptionResolverMockRecorder is the mock recorder for MockSubscriptionResolver.
type MockSubscriptionResolverMockRecorder struct {
	mock *MockSubscriptionResolver
}

// NewMockSubscriptionResolver creates a new mock instance.
func NewMockSubscriptionResolver(ctrl *gomock.Controller) *MockSubscriptionResolver {
	mock := &MockSubscriptionResolver{ctrl: ctrl}
	mock.recorder = &MockSubscriptionResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionResolver) EXPECT() *MockSubscriptionResolverMockRecorder {
	return m.recorder
}

// OnLockTaskListSectionContext mocks base method.
func (m *MockSubscriptionResolver) OnLockTaskListSectionContext(ctx context.Context, modelPlanID uuid.UUID) (<-chan *model.TaskListSectionLockStatusChanged, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnLockTaskListSectionContext", ctx, modelPlanID)
	ret0, _ := ret[0].(<-chan *model.TaskListSectionLockStatusChanged)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnLockTaskListSectionContext indicates an expected call of OnLockTaskListSectionContext.
func (mr *MockSubscriptionResolverMockRecorder) OnLockTaskListSectionContext(ctx, modelPlanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnLockTaskListSectionContext", reflect.TypeOf((*MockSubscriptionResolver)(nil).OnLockTaskListSectionContext), ctx, modelPlanID)
}

// OnTaskListSectionLocksChanged mocks base method.
func (m *MockSubscriptionResolver) OnTaskListSectionLocksChanged(ctx context.Context, modelPlanID uuid.UUID) (<-chan *model.TaskListSectionLockStatusChanged, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnTaskListSectionLocksChanged", ctx, modelPlanID)
	ret0, _ := ret[0].(<-chan *model.TaskListSectionLockStatusChanged)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnTaskListSectionLocksChanged indicates an expected call of OnTaskListSectionLocksChanged.
func (mr *MockSubscriptionResolverMockRecorder) OnTaskListSectionLocksChanged(ctx, modelPlanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnTaskListSectionLocksChanged", reflect.TypeOf((*MockSubscriptionResolver)(nil).OnTaskListSectionLocksChanged), ctx, modelPlanID)
}

// MockTagResolver is a mock of TagResolver interface.
type MockTagResolver struct {
	ctrl     *gomock.Controller
	recorder *MockTagResolverMockRecorder
}

// MockTagResolverMockRecorder is the mock recorder for MockTagResolver.
type MockTagResolverMockRecorder struct {
	mock *MockTagResolver
}

// NewMockTagResolver creates a new mock instance.
func NewMockTagResolver(ctrl *gomock.Controller) *MockTagResolver {
	mock := &MockTagResolver{ctrl: ctrl}
	mock.recorder = &MockTagResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagResolver) EXPECT() *MockTagResolverMockRecorder {
	return m.recorder
}

// Entity mocks base method.
func (m *MockTagResolver) Entity(ctx context.Context, obj *models.Tag) (models.TaggedEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entity", ctx, obj)
	ret0, _ := ret[0].(models.TaggedEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Entity indicates an expected call of Entity.
func (mr *MockTagResolverMockRecorder) Entity(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entity", reflect.TypeOf((*MockTagResolver)(nil).Entity), ctx, obj)
}

// MockTaggedContentResolver is a mock of TaggedContentResolver interface.
type MockTaggedContentResolver struct {
	ctrl     *gomock.Controller
	recorder *MockTaggedContentResolverMockRecorder
}

// MockTaggedContentResolverMockRecorder is the mock recorder for MockTaggedContentResolver.
type MockTaggedContentResolverMockRecorder struct {
	mock *MockTaggedContentResolver
}

// NewMockTaggedContentResolver creates a new mock instance.
func NewMockTaggedContentResolver(ctrl *gomock.Controller) *MockTaggedContentResolver {
	mock := &MockTaggedContentResolver{ctrl: ctrl}
	mock.recorder = &MockTaggedContentResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaggedContentResolver) EXPECT() *MockTaggedContentResolverMockRecorder {
	return m.recorder
}

// RawContent mocks base method.
func (m *MockTaggedContentResolver) RawContent(ctx context.Context, obj *models.TaggedContent) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawContent", ctx, obj)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawContent indicates an expected call of RawContent.
func (mr *MockTaggedContentResolverMockRecorder) RawContent(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawContent", reflect.TypeOf((*MockTaggedContentResolver)(nil).RawContent), ctx, obj)
}

// MockTaggedInDiscussionReplyActivityMetaResolver is a mock of TaggedInDiscussionReplyActivityMetaResolver interface.
type MockTaggedInDiscussionReplyActivityMetaResolver struct {
	ctrl     *gomock.Controller
	recorder *MockTaggedInDiscussionReplyActivityMetaResolverMockRecorder
}

// MockTaggedInDiscussionReplyActivityMetaResolverMockRecorder is the mock recorder for MockTaggedInDiscussionReplyActivityMetaResolver.
type MockTaggedInDiscussionReplyActivityMetaResolverMockRecorder struct {
	mock *MockTaggedInDiscussionReplyActivityMetaResolver
}

// NewMockTaggedInDiscussionReplyActivityMetaResolver creates a new mock instance.
func NewMockTaggedInDiscussionReplyActivityMetaResolver(ctrl *gomock.Controller) *MockTaggedInDiscussionReplyActivityMetaResolver {
	mock := &MockTaggedInDiscussionReplyActivityMetaResolver{ctrl: ctrl}
	mock.recorder = &MockTaggedInDiscussionReplyActivityMetaResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaggedInDiscussionReplyActivityMetaResolver) EXPECT() *MockTaggedInDiscussionReplyActivityMetaResolverMockRecorder {
	return m.recorder
}

// Discussion mocks base method.
func (m *MockTaggedInDiscussionReplyActivityMetaResolver) Discussion(ctx context.Context, obj *models.TaggedInDiscussionReplyActivityMeta) (*models.PlanDiscussion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discussion", ctx, obj)
	ret0, _ := ret[0].(*models.PlanDiscussion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Discussion indicates an expected call of Discussion.
func (mr *MockTaggedInDiscussionReplyActivityMetaResolverMockRecorder) Discussion(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discussion", reflect.TypeOf((*MockTaggedInDiscussionReplyActivityMetaResolver)(nil).Discussion), ctx, obj)
}

// ModelPlan mocks base method.
func (m *MockTaggedInDiscussionReplyActivityMetaResolver) ModelPlan(ctx context.Context, obj *models.TaggedInDiscussionReplyActivityMeta) (*models.ModelPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlan", ctx, obj)
	ret0, _ := ret[0].(*models.ModelPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelPlan indicates an expected call of ModelPlan.
func (mr *MockTaggedInDiscussionReplyActivityMetaResolverMockRecorder) ModelPlan(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlan", reflect.TypeOf((*MockTaggedInDiscussionReplyActivityMetaResolver)(nil).ModelPlan), ctx, obj)
}

// Reply mocks base method.
func (m *MockTaggedInDiscussionReplyActivityMetaResolver) Reply(ctx context.Context, obj *models.TaggedInDiscussionReplyActivityMeta) (*models.DiscussionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reply", ctx, obj)
	ret0, _ := ret[0].(*models.DiscussionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reply indicates an expected call of Reply.
func (mr *MockTaggedInDiscussionReplyActivityMetaResolverMockRecorder) Reply(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockTaggedInDiscussionReplyActivityMetaResolver)(nil).Reply), ctx, obj)
}

// MockTaggedInPlanDiscussionActivityMetaResolver is a mock of TaggedInPlanDiscussionActivityMetaResolver interface.
type MockTaggedInPlanDiscussionActivityMetaResolver struct {
	ctrl     *gomock.Controller
	recorder *MockTaggedInPlanDiscussionActivityMetaResolverMockRecorder
}

// MockTaggedInPlanDiscussionActivityMetaResolverMockRecorder is the mock recorder for MockTaggedInPlanDiscussionActivityMetaResolver.
type MockTaggedInPlanDiscussionActivityMetaResolverMockRecorder struct {
	mock *MockTaggedInPlanDiscussionActivityMetaResolver
}

// NewMockTaggedInPlanDiscussionActivityMetaResolver creates a new mock instance.
func NewMockTaggedInPlanDiscussionActivityMetaResolver(ctrl *gomock.Controller) *MockTaggedInPlanDiscussionActivityMetaResolver {
	mock := &MockTaggedInPlanDiscussionActivityMetaResolver{ctrl: ctrl}
	mock.recorder = &MockTaggedInPlanDiscussionActivityMetaResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaggedInPlanDiscussionActivityMetaResolver) EXPECT() *MockTaggedInPlanDiscussionActivityMetaResolverMockRecorder {
	return m.recorder
}

// Discussion mocks base method.
func (m *MockTaggedInPlanDiscussionActivityMetaResolver) Discussion(ctx context.Context, obj *models.TaggedInPlanDiscussionActivityMeta) (*models.PlanDiscussion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discussion", ctx, obj)
	ret0, _ := ret[0].(*models.PlanDiscussion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Discussion indicates an expected call of Discussion.
func (mr *MockTaggedInPlanDiscussionActivityMetaResolverMockRecorder) Discussion(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discussion", reflect.TypeOf((*MockTaggedInPlanDiscussionActivityMetaResolver)(nil).Discussion), ctx, obj)
}

// ModelPlan mocks base method.
func (m *MockTaggedInPlanDiscussionActivityMetaResolver) ModelPlan(ctx context.Context, obj *models.TaggedInPlanDiscussionActivityMeta) (*models.ModelPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlan", ctx, obj)
	ret0, _ := ret[0].(*models.ModelPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelPlan indicates an expected call of ModelPlan.
func (mr *MockTaggedInPlanDiscussionActivityMetaResolverMockRecorder) ModelPlan(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlan", reflect.TypeOf((*MockTaggedInPlanDiscussionActivityMetaResolver)(nil).ModelPlan), ctx, obj)
}

// MockUserNotificationResolver is a mock of UserNotificationResolver interface.
type MockUserNotificationResolver struct {
	ctrl     *gomock.Controller
	recorder *MockUserNotificationResolverMockRecorder
}

// MockUserNotificationResolverMockRecorder is the mock recorder for MockUserNotificationResolver.
type MockUserNotificationResolverMockRecorder struct {
	mock *MockUserNotificationResolver
}

// NewMockUserNotificationResolver creates a new mock instance.
func NewMockUserNotificationResolver(ctrl *gomock.Controller) *MockUserNotificationResolver {
	mock := &MockUserNotificationResolver{ctrl: ctrl}
	mock.recorder = &MockUserNotificationResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserNotificationResolver) EXPECT() *MockUserNotificationResolverMockRecorder {
	return m.recorder
}

// Activity mocks base method.
func (m *MockUserNotificationResolver) Activity(ctx context.Context, obj *models.UserNotification) (*models.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activity", ctx, obj)
	ret0, _ := ret[0].(*models.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Activity indicates an expected call of Activity.
func (mr *MockUserNotificationResolverMockRecorder) Activity(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activity", reflect.TypeOf((*MockUserNotificationResolver)(nil).Activity), ctx, obj)
}

// MockUserNotificationPreferencesResolver is a mock of UserNotificationPreferencesResolver interface.
type MockUserNotificationPreferencesResolver struct {
	ctrl     *gomock.Controller
	recorder *MockUserNotificationPreferencesResolverMockRecorder
}

// MockUserNotificationPreferencesResolverMockRecorder is the mock recorder for MockUserNotificationPreferencesResolver.
type MockUserNotificationPreferencesResolverMockRecorder struct {
	mock *MockUserNotificationPreferencesResolver
}

// NewMockUserNotificationPreferencesResolver creates a new mock instance.
func NewMockUserNotificationPreferencesResolver(ctrl *gomock.Controller) *MockUserNotificationPreferencesResolver {
	mock := &MockUserNotificationPreferencesResolver{ctrl: ctrl}
	mock.recorder = &MockUserNotificationPreferencesResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserNotificationPreferencesResolver) EXPECT() *MockUserNotificationPreferencesResolverMockRecorder {
	return m.recorder
}

// AddedAsCollaborator mocks base method.
func (m *MockUserNotificationPreferencesResolver) AddedAsCollaborator(ctx context.Context, obj *models.UserNotificationPreferences) ([]models.UserNotificationPreferenceFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddedAsCollaborator", ctx, obj)
	ret0, _ := ret[0].([]models.UserNotificationPreferenceFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddedAsCollaborator indicates an expected call of AddedAsCollaborator.
func (mr *MockUserNotificationPreferencesResolverMockRecorder) AddedAsCollaborator(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddedAsCollaborator", reflect.TypeOf((*MockUserNotificationPreferencesResolver)(nil).AddedAsCollaborator), ctx, obj)
}

// DailyDigestComplete mocks base method.
func (m *MockUserNotificationPreferencesResolver) DailyDigestComplete(ctx context.Context, obj *models.UserNotificationPreferences) ([]models.UserNotificationPreferenceFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DailyDigestComplete", ctx, obj)
	ret0, _ := ret[0].([]models.UserNotificationPreferenceFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DailyDigestComplete indicates an expected call of DailyDigestComplete.
func (mr *MockUserNotificationPreferencesResolverMockRecorder) DailyDigestComplete(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DailyDigestComplete", reflect.TypeOf((*MockUserNotificationPreferencesResolver)(nil).DailyDigestComplete), ctx, obj)
}

// DatesChanged mocks base method.
func (m *MockUserNotificationPreferencesResolver) DatesChanged(ctx context.Context, obj *models.UserNotificationPreferences) ([]models.UserNotificationPreferenceFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatesChanged", ctx, obj)
	ret0, _ := ret[0].([]models.UserNotificationPreferenceFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatesChanged indicates an expected call of DatesChanged.
func (mr *MockUserNotificationPreferencesResolverMockRecorder) DatesChanged(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatesChanged", reflect.TypeOf((*MockUserNotificationPreferencesResolver)(nil).DatesChanged), ctx, obj)
}

// ModelPlanShared mocks base method.
func (m *MockUserNotificationPreferencesResolver) ModelPlanShared(ctx context.Context, obj *models.UserNotificationPreferences) ([]models.UserNotificationPreferenceFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelPlanShared", ctx, obj)
	ret0, _ := ret[0].([]models.UserNotificationPreferenceFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelPlanShared indicates an expected call of ModelPlanShared.
func (mr *MockUserNotificationPreferencesResolverMockRecorder) ModelPlanShared(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelPlanShared", reflect.TypeOf((*MockUserNotificationPreferencesResolver)(nil).ModelPlanShared), ctx, obj)
}

// NewDiscussionReply mocks base method.
func (m *MockUserNotificationPreferencesResolver) NewDiscussionReply(ctx context.Context, obj *models.UserNotificationPreferences) ([]models.UserNotificationPreferenceFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDiscussionReply", ctx, obj)
	ret0, _ := ret[0].([]models.UserNotificationPreferenceFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDiscussionReply indicates an expected call of NewDiscussionReply.
func (mr *MockUserNotificationPreferencesResolverMockRecorder) NewDiscussionReply(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDiscussionReply", reflect.TypeOf((*MockUserNotificationPreferencesResolver)(nil).NewDiscussionReply), ctx, obj)
}

// NewModelPlan mocks base method.
func (m *MockUserNotificationPreferencesResolver) NewModelPlan(ctx context.Context, obj *models.UserNotificationPreferences) ([]models.UserNotificationPreferenceFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewModelPlan", ctx, obj)
	ret0, _ := ret[0].([]models.UserNotificationPreferenceFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewModelPlan indicates an expected call of NewModelPlan.
func (mr *MockUserNotificationPreferencesResolverMockRecorder) NewModelPlan(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewModelPlan", reflect.TypeOf((*MockUserNotificationPreferencesResolver)(nil).NewModelPlan), ctx, obj)
}

// TaggedInDiscussion mocks base method.
func (m *MockUserNotificationPreferencesResolver) TaggedInDiscussion(ctx context.Context, obj *models.UserNotificationPreferences) ([]models.UserNotificationPreferenceFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaggedInDiscussion", ctx, obj)
	ret0, _ := ret[0].([]models.UserNotificationPreferenceFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaggedInDiscussion indicates an expected call of TaggedInDiscussion.
func (mr *MockUserNotificationPreferencesResolverMockRecorder) TaggedInDiscussion(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaggedInDiscussion", reflect.TypeOf((*MockUserNotificationPreferencesResolver)(nil).TaggedInDiscussion), ctx, obj)
}

// TaggedInDiscussionReply mocks base method.
func (m *MockUserNotificationPreferencesResolver) TaggedInDiscussionReply(ctx context.Context, obj *models.UserNotificationPreferences) ([]models.UserNotificationPreferenceFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaggedInDiscussionReply", ctx, obj)
	ret0, _ := ret[0].([]models.UserNotificationPreferenceFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaggedInDiscussionReply indicates an expected call of TaggedInDiscussionReply.
func (mr *MockUserNotificationPreferencesResolverMockRecorder) TaggedInDiscussionReply(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaggedInDiscussionReply", reflect.TypeOf((*MockUserNotificationPreferencesResolver)(nil).TaggedInDiscussionReply), ctx, obj)
}

// MockUserViewCustomizationResolver is a mock of UserViewCustomizationResolver interface.
type MockUserViewCustomizationResolver struct {
	ctrl     *gomock.Controller
	recorder *MockUserViewCustomizationResolverMockRecorder
}

// MockUserViewCustomizationResolverMockRecorder is the mock recorder for MockUserViewCustomizationResolver.
type MockUserViewCustomizationResolverMockRecorder struct {
	mock *MockUserViewCustomizationResolver
}

// NewMockUserViewCustomizationResolver creates a new mock instance.
func NewMockUserViewCustomizationResolver(ctrl *gomock.Controller) *MockUserViewCustomizationResolver {
	mock := &MockUserViewCustomizationResolver{ctrl: ctrl}
	mock.recorder = &MockUserViewCustomizationResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserViewCustomizationResolver) EXPECT() *MockUserViewCustomizationResolverMockRecorder {
	return m.recorder
}

// PossibleOperationalSolutions mocks base method.
func (m *MockUserViewCustomizationResolver) PossibleOperationalSolutions(ctx context.Context, obj *models.UserViewCustomization) ([]models.OperationalSolutionKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PossibleOperationalSolutions", ctx, obj)
	ret0, _ := ret[0].([]models.OperationalSolutionKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PossibleOperationalSolutions indicates an expected call of PossibleOperationalSolutions.
func (mr *MockUserViewCustomizationResolverMockRecorder) PossibleOperationalSolutions(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PossibleOperationalSolutions", reflect.TypeOf((*MockUserViewCustomizationResolver)(nil).PossibleOperationalSolutions), ctx, obj)
}

// ViewCustomization mocks base method.
func (m *MockUserViewCustomizationResolver) ViewCustomization(ctx context.Context, obj *models.UserViewCustomization) ([]models.ViewCustomizationType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCustomization", ctx, obj)
	ret0, _ := ret[0].([]models.ViewCustomizationType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCustomization indicates an expected call of ViewCustomization.
func (mr *MockUserViewCustomizationResolverMockRecorder) ViewCustomization(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCustomization", reflect.TypeOf((*MockUserViewCustomizationResolver)(nil).ViewCustomization), ctx, obj)
}
