// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/cmsgov/mint-app/pkg/authentication"
	"github.com/cmsgov/mint-app/pkg/graph/model"
	"github.com/cmsgov/mint-app/pkg/models"
	"github.com/google/uuid"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	AuditChange() AuditChangeResolver
	ExistingModelLink() ExistingModelLinkResolver
	ModelPlan() ModelPlanResolver
	Mutation() MutationResolver
	OperationalNeed() OperationalNeedResolver
	OperationalSolution() OperationalSolutionResolver
	PlanBasics() PlanBasicsResolver
	PlanBeneficiaries() PlanBeneficiariesResolver
	PlanDiscussion() PlanDiscussionResolver
	PlanDocument() PlanDocumentResolver
	PlanGeneralCharacteristics() PlanGeneralCharacteristicsResolver
	PlanOpsEvalAndLearning() PlanOpsEvalAndLearningResolver
	PlanParticipantsAndProviders() PlanParticipantsAndProvidersResolver
	PlanPayments() PlanPaymentsResolver
	PossibleOperationalNeed() PossibleOperationalNeedResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
	HasAnyRole func(ctx context.Context, obj interface{}, next graphql.Resolver, roles []model.Role) (res interface{}, err error)
	HasRole    func(ctx context.Context, obj interface{}, next graphql.Resolver, role model.Role) (res interface{}, err error)
}

type ComplexityRoot struct {
	AuditChange struct {
		Action                func(childComplexity int) int
		Fields                func(childComplexity int) int
		ForeignKey            func(childComplexity int) int
		ID                    func(childComplexity int) int
		ModifiedBy            func(childComplexity int) int
		ModifiedByUserAccount func(childComplexity int) int
		ModifiedDts           func(childComplexity int) int
		PrimaryKey            func(childComplexity int) int
		TableName             func(childComplexity int) int
	}

	ChangeTableRecord struct {
		Action      func(childComplexity int) int
		Fields      func(childComplexity int) int
		ForeignKey  func(childComplexity int) int
		GUID        func(childComplexity int) int
		ModifiedBy  func(childComplexity int) int
		ModifiedDts func(childComplexity int) int
		PrimaryKey  func(childComplexity int) int
		TableID     func(childComplexity int) int
		TableName   func(childComplexity int) int
	}

	ChangedFields struct {
		Changes func(childComplexity int) int
	}

	CurrentUser struct {
		LaunchDarkly func(childComplexity int) int
	}

	DateHistogramAggregationBucket struct {
		DocCount       func(childComplexity int) int
		Key            func(childComplexity int) int
		MaxModifiedDts func(childComplexity int) int
		MinModifiedDts func(childComplexity int) int
	}

	DiscussionReply struct {
		Content               func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		CreatedByUserAccount  func(childComplexity int) int
		CreatedDts            func(childComplexity int) int
		DiscussionID          func(childComplexity int) int
		ID                    func(childComplexity int) int
		IsAssessment          func(childComplexity int) int
		ModifiedBy            func(childComplexity int) int
		ModifiedByUserAccount func(childComplexity int) int
		ModifiedDts           func(childComplexity int) int
		Resolution            func(childComplexity int) int
	}

	ExistingModel struct {
		Authority                     func(childComplexity int) int
		Category                      func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		CreatedByUserAccount          func(childComplexity int) int
		CreatedDts                    func(childComplexity int) int
		DateBegan                     func(childComplexity int) int
		DateEnded                     func(childComplexity int) int
		Description                   func(childComplexity int) int
		DisplayModelSummary           func(childComplexity int) int
		ID                            func(childComplexity int) int
		Keywords                      func(childComplexity int) int
		ModelName                     func(childComplexity int) int
		ModifiedBy                    func(childComplexity int) int
		ModifiedByUserAccount         func(childComplexity int) int
		ModifiedDts                   func(childComplexity int) int
		NumberOfBeneficiariesImpacted func(childComplexity int) int
		NumberOfParticipants          func(childComplexity int) int
		NumberOfPhysiciansImpacted    func(childComplexity int) int
		Stage                         func(childComplexity int) int
		States                        func(childComplexity int) int
		URL                           func(childComplexity int) int
	}

	ExistingModelLink struct {
		CreatedBy             func(childComplexity int) int
		CreatedByUserAccount  func(childComplexity int) int
		CreatedDts            func(childComplexity int) int
		CurrentModelPlan      func(childComplexity int) int
		CurrentModelPlanID    func(childComplexity int) int
		ExistingModel         func(childComplexity int) int
		ExistingModelID       func(childComplexity int) int
		ID                    func(childComplexity int) int
		ModelPlanID           func(childComplexity int) int
		ModifiedBy            func(childComplexity int) int
		ModifiedByUserAccount func(childComplexity int) int
		ModifiedDts           func(childComplexity int) int
	}

	Field struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	FieldValue struct {
		New func(childComplexity int) int
		Old func(childComplexity int) int
	}

	LaunchDarklySettings struct {
		SignedHash func(childComplexity int) int
		UserKey    func(childComplexity int) int
	}

	ModelPlan struct {
		Archived                 func(childComplexity int) int
		Basics                   func(childComplexity int) int
		Beneficiaries            func(childComplexity int) int
		Collaborators            func(childComplexity int) int
		CrTdls                   func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		CreatedByUserAccount     func(childComplexity int) int
		CreatedDts               func(childComplexity int) int
		Discussions              func(childComplexity int) int
		Documents                func(childComplexity int) int
		ExistingModelLinks       func(childComplexity int) int
		GeneralCharacteristics   func(childComplexity int) int
		ID                       func(childComplexity int) int
		IsCollaborator           func(childComplexity int) int
		IsFavorite               func(childComplexity int) int
		ModelName                func(childComplexity int) int
		ModifiedBy               func(childComplexity int) int
		ModifiedByUserAccount    func(childComplexity int) int
		ModifiedDts              func(childComplexity int) int
		NameHistory              func(childComplexity int, sort models.SortDirection) int
		OperationalNeeds         func(childComplexity int) int
		OpsEvalAndLearning       func(childComplexity int) int
		ParticipantsAndProviders func(childComplexity int) int
		Payments                 func(childComplexity int) int
		PrepareForClearance      func(childComplexity int) int
		Status                   func(childComplexity int) int
	}

	Mutation struct {
		AddOrUpdateCustomOperationalNeed   func(childComplexity int, modelPlanID uuid.UUID, customNeedType string, needed bool) int
		AddPlanFavorite                    func(childComplexity int, modelPlanID uuid.UUID) int
		AgreeToNda                         func(childComplexity int, agree bool) int
		CreateDiscussionReply              func(childComplexity int, input model.DiscussionReplyCreateInput) int
		CreateModelPlan                    func(childComplexity int, modelName string) int
		CreateOperationalSolution          func(childComplexity int, operationalNeedID uuid.UUID, solutionType *models.OperationalSolutionKey, changes map[string]interface{}) int
		CreateOperationalSolutionSubtasks  func(childComplexity int, solutionID uuid.UUID, inputs []*model.CreateOperationalSolutionSubtaskInput) int
		CreatePlanCollaborator             func(childComplexity int, input model.PlanCollaboratorCreateInput) int
		CreatePlanCrTdl                    func(childComplexity int, input model.PlanCrTdlCreateInput) int
		CreatePlanDiscussion               func(childComplexity int, input model.PlanDiscussionCreateInput) int
		CreatePlanDocumentSolutionLinks    func(childComplexity int, solutionID uuid.UUID, documentIDs []uuid.UUID) int
		DeleteDiscussionReply              func(childComplexity int, id uuid.UUID) int
		DeleteOperationalSolutionSubtask   func(childComplexity int, id uuid.UUID) int
		DeletePlanCollaborator             func(childComplexity int, id uuid.UUID) int
		DeletePlanCrTdl                    func(childComplexity int, id uuid.UUID) int
		DeletePlanDiscussion               func(childComplexity int, id uuid.UUID) int
		DeletePlanDocument                 func(childComplexity int, id uuid.UUID) int
		DeletePlanFavorite                 func(childComplexity int, modelPlanID uuid.UUID) int
		LockTaskListSection                func(childComplexity int, modelPlanID uuid.UUID, section models.TaskListSection) int
		RemovePlanDocumentSolutionLinks    func(childComplexity int, solutionID uuid.UUID, documentIDs []uuid.UUID) int
		UnlockAllTaskListSections          func(childComplexity int, modelPlanID uuid.UUID) int
		UnlockTaskListSection              func(childComplexity int, modelPlanID uuid.UUID, section models.TaskListSection) int
		UpdateCustomOperationalNeedByID    func(childComplexity int, id uuid.UUID, customNeedType *string, needed bool) int
		UpdateDiscussionReply              func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdateExistingModelLinks           func(childComplexity int, modelPlanID uuid.UUID, existingModelIDs []int, currentModelPlanIDs []uuid.UUID) int
		UpdateModelPlan                    func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdateOperationalSolution          func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdateOperationalSolutionSubtasks  func(childComplexity int, inputs []*model.UpdateOperationalSolutionSubtaskInput) int
		UpdatePlanBasics                   func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanBeneficiaries            func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanCollaborator             func(childComplexity int, id uuid.UUID, newRole models.TeamRole) int
		UpdatePlanCrTdl                    func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanDiscussion               func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanGeneralCharacteristics   func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanOpsEvalAndLearning       func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanParticipantsAndProviders func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanPayments                 func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UploadNewPlanDocument              func(childComplexity int, input model.PlanDocumentInput) int
	}

	NDAInfo struct {
		Agreed    func(childComplexity int) int
		AgreedDts func(childComplexity int) int
	}

	OperationalNeed struct {
		CreatedBy             func(childComplexity int) int
		CreatedByUserAccount  func(childComplexity int) int
		CreatedDts            func(childComplexity int) int
		ID                    func(childComplexity int) int
		Key                   func(childComplexity int) int
		ModelPlanID           func(childComplexity int) int
		ModifiedBy            func(childComplexity int) int
		ModifiedByUserAccount func(childComplexity int) int
		ModifiedDts           func(childComplexity int) int
		Name                  func(childComplexity int) int
		NameOther             func(childComplexity int) int
		Needed                func(childComplexity int) int
		Section               func(childComplexity int) int
		Solutions             func(childComplexity int, includeNotNeeded bool) int
	}

	OperationalSolution struct {
		CreatedBy                   func(childComplexity int) int
		CreatedByUserAccount        func(childComplexity int) int
		CreatedDts                  func(childComplexity int) int
		Documents                   func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsCommonSolution            func(childComplexity int) int
		IsOther                     func(childComplexity int) int
		Key                         func(childComplexity int) int
		ModifiedBy                  func(childComplexity int) int
		ModifiedByUserAccount       func(childComplexity int) int
		ModifiedDts                 func(childComplexity int) int
		MustFinishDts               func(childComplexity int) int
		MustStartDts                func(childComplexity int) int
		Name                        func(childComplexity int) int
		NameOther                   func(childComplexity int) int
		Needed                      func(childComplexity int) int
		OperationalNeedID           func(childComplexity int) int
		OperationalSolutionSubtasks func(childComplexity int) int
		OtherHeader                 func(childComplexity int) int
		PocEmail                    func(childComplexity int) int
		PocName                     func(childComplexity int) int
		SolutionType                func(childComplexity int) int
		Status                      func(childComplexity int) int
	}

	OperationalSolutionSubtask struct {
		CreatedBy             func(childComplexity int) int
		CreatedByUserAccount  func(childComplexity int) int
		CreatedDts            func(childComplexity int) int
		ID                    func(childComplexity int) int
		ModifiedBy            func(childComplexity int) int
		ModifiedByUserAccount func(childComplexity int) int
		ModifiedDts           func(childComplexity int) int
		Name                  func(childComplexity int) int
		SolutionID            func(childComplexity int) int
		Status                func(childComplexity int) int
	}

	PlanBasics struct {
		Announced                      func(childComplexity int) int
		ApplicationsEnd                func(childComplexity int) int
		ApplicationsStart              func(childComplexity int) int
		CMSOther                       func(childComplexity int) int
		ClearanceEnds                  func(childComplexity int) int
		ClearanceStarts                func(childComplexity int) int
		CmmiGroups                     func(childComplexity int) int
		CmsCenters                     func(childComplexity int) int
		CompleteICIP                   func(childComplexity int) int
		CreatedBy                      func(childComplexity int) int
		CreatedByUserAccount           func(childComplexity int) int
		CreatedDts                     func(childComplexity int) int
		Goal                           func(childComplexity int) int
		HighLevelNote                  func(childComplexity int) int
		ID                             func(childComplexity int) int
		ModelCategory                  func(childComplexity int) int
		ModelPlanID                    func(childComplexity int) int
		ModelType                      func(childComplexity int) int
		ModifiedBy                     func(childComplexity int) int
		ModifiedByUserAccount          func(childComplexity int) int
		ModifiedDts                    func(childComplexity int) int
		Note                           func(childComplexity int) int
		PerformancePeriodEnds          func(childComplexity int) int
		PerformancePeriodStarts        func(childComplexity int) int
		PhasedIn                       func(childComplexity int) int
		PhasedInNote                   func(childComplexity int) int
		Problem                        func(childComplexity int) int
		ReadyForClearanceBy            func(childComplexity int) int
		ReadyForClearanceByUserAccount func(childComplexity int) int
		ReadyForClearanceDts           func(childComplexity int) int
		ReadyForReviewBy               func(childComplexity int) int
		ReadyForReviewByUserAccount    func(childComplexity int) int
		ReadyForReviewDts              func(childComplexity int) int
		Status                         func(childComplexity int) int
		TestInterventions              func(childComplexity int) int
		WrapUpEnds                     func(childComplexity int) int
	}

	PlanBeneficiaries struct {
		Beneficiaries                         func(childComplexity int) int
		BeneficiariesNote                     func(childComplexity int) int
		BeneficiariesOther                    func(childComplexity int) int
		BeneficiaryOverlap                    func(childComplexity int) int
		BeneficiaryOverlapNote                func(childComplexity int) int
		BeneficiarySelectionFrequency         func(childComplexity int) int
		BeneficiarySelectionFrequencyNote     func(childComplexity int) int
		BeneficiarySelectionFrequencyOther    func(childComplexity int) int
		BeneficiarySelectionMethod            func(childComplexity int) int
		BeneficiarySelectionNote              func(childComplexity int) int
		BeneficiarySelectionOther             func(childComplexity int) int
		ConfidenceNote                        func(childComplexity int) int
		CreatedBy                             func(childComplexity int) int
		CreatedByUserAccount                  func(childComplexity int) int
		CreatedDts                            func(childComplexity int) int
		EstimateConfidence                    func(childComplexity int) int
		ExcludeCertainCharacteristics         func(childComplexity int) int
		ExcludeCertainCharacteristicsCriteria func(childComplexity int) int
		ExcludeCertainCharacteristicsNote     func(childComplexity int) int
		ID                                    func(childComplexity int) int
		ModelPlanID                           func(childComplexity int) int
		ModifiedBy                            func(childComplexity int) int
		ModifiedByUserAccount                 func(childComplexity int) int
		ModifiedDts                           func(childComplexity int) int
		NumberPeopleImpacted                  func(childComplexity int) int
		PrecedenceRules                       func(childComplexity int) int
		ReadyForClearanceBy                   func(childComplexity int) int
		ReadyForClearanceByUserAccount        func(childComplexity int) int
		ReadyForClearanceDts                  func(childComplexity int) int
		ReadyForReviewBy                      func(childComplexity int) int
		ReadyForReviewByUserAccount           func(childComplexity int) int
		ReadyForReviewDts                     func(childComplexity int) int
		Status                                func(childComplexity int) int
		TreatDualElligibleDifferent           func(childComplexity int) int
		TreatDualElligibleDifferentHow        func(childComplexity int) int
		TreatDualElligibleDifferentNote       func(childComplexity int) int
	}

	PlanCollaborator struct {
		CreatedBy             func(childComplexity int) int
		CreatedByUserAccount  func(childComplexity int) int
		CreatedDts            func(childComplexity int) int
		ID                    func(childComplexity int) int
		ModelPlanID           func(childComplexity int) int
		ModifiedBy            func(childComplexity int) int
		ModifiedByUserAccount func(childComplexity int) int
		ModifiedDts           func(childComplexity int) int
		TeamRole              func(childComplexity int) int
		UserAccount           func(childComplexity int) int
		UserID                func(childComplexity int) int
	}

	PlanCrTdl struct {
		CreatedBy             func(childComplexity int) int
		CreatedByUserAccount  func(childComplexity int) int
		CreatedDts            func(childComplexity int) int
		DateInitiated         func(childComplexity int) int
		ID                    func(childComplexity int) int
		IDNumber              func(childComplexity int) int
		ModelPlanID           func(childComplexity int) int
		ModifiedBy            func(childComplexity int) int
		ModifiedByUserAccount func(childComplexity int) int
		ModifiedDts           func(childComplexity int) int
		Note                  func(childComplexity int) int
		Title                 func(childComplexity int) int
	}

	PlanDiscussion struct {
		Content               func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		CreatedByUserAccount  func(childComplexity int) int
		CreatedDts            func(childComplexity int) int
		ID                    func(childComplexity int) int
		IsAssessment          func(childComplexity int) int
		ModelPlanID           func(childComplexity int) int
		ModifiedBy            func(childComplexity int) int
		ModifiedByUserAccount func(childComplexity int) int
		ModifiedDts           func(childComplexity int) int
		Replies               func(childComplexity int) int
		Status                func(childComplexity int) int
	}

	PlanDocument struct {
		Bucket                func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		CreatedByUserAccount  func(childComplexity int) int
		CreatedDts            func(childComplexity int) int
		DeletedAt             func(childComplexity int) int
		DocumentType          func(childComplexity int) int
		DownloadURL           func(childComplexity int) int
		FileKey               func(childComplexity int) int
		FileName              func(childComplexity int) int
		FileSize              func(childComplexity int) int
		FileType              func(childComplexity int) int
		ID                    func(childComplexity int) int
		ModelPlanID           func(childComplexity int) int
		ModifiedBy            func(childComplexity int) int
		ModifiedByUserAccount func(childComplexity int) int
		ModifiedDts           func(childComplexity int) int
		NumLinkedSolutions    func(childComplexity int) int
		OptionalNotes         func(childComplexity int) int
		OtherType             func(childComplexity int) int
		Restricted            func(childComplexity int) int
		VirusClean            func(childComplexity int) int
		VirusScanned          func(childComplexity int) int
	}

	PlanDocumentSolutionLink struct {
		CreatedBy             func(childComplexity int) int
		CreatedByUserAccount  func(childComplexity int) int
		CreatedDts            func(childComplexity int) int
		DocumentID            func(childComplexity int) int
		ID                    func(childComplexity int) int
		ModifiedBy            func(childComplexity int) int
		ModifiedByUserAccount func(childComplexity int) int
		ModifiedDts           func(childComplexity int) int
		SolutionID            func(childComplexity int) int
	}

	PlanFavorite struct {
		CreatedBy             func(childComplexity int) int
		CreatedByUserAccount  func(childComplexity int) int
		CreatedDts            func(childComplexity int) int
		ID                    func(childComplexity int) int
		ModelPlanID           func(childComplexity int) int
		ModifiedBy            func(childComplexity int) int
		ModifiedByUserAccount func(childComplexity int) int
		ModifiedDts           func(childComplexity int) int
		UserAccount           func(childComplexity int) int
		UserID                func(childComplexity int) int
	}

	PlanGeneralCharacteristics struct {
		AdditionalServicesInvolved                func(childComplexity int) int
		AdditionalServicesInvolvedDescription     func(childComplexity int) int
		AdditionalServicesInvolvedNote            func(childComplexity int) int
		AgreementTypes                            func(childComplexity int) int
		AgreementTypesOther                       func(childComplexity int) int
		AlternativePaymentModelNote               func(childComplexity int) int
		AlternativePaymentModelTypes              func(childComplexity int) int
		AuthorityAllowances                       func(childComplexity int) int
		AuthorityAllowancesNote                   func(childComplexity int) int
		AuthorityAllowancesOther                  func(childComplexity int) int
		CareCoordinationInvolved                  func(childComplexity int) int
		CareCoordinationInvolvedDescription       func(childComplexity int) int
		CareCoordinationInvolvedNote              func(childComplexity int) int
		CollectPlanBids                           func(childComplexity int) int
		CollectPlanBidsNote                       func(childComplexity int) int
		CommunityPartnersInvolved                 func(childComplexity int) int
		CommunityPartnersInvolvedDescription      func(childComplexity int) int
		CommunityPartnersInvolvedNote             func(childComplexity int) int
		CreatedBy                                 func(childComplexity int) int
		CreatedByUserAccount                      func(childComplexity int) int
		CreatedDts                                func(childComplexity int) int
		ExistingModel                             func(childComplexity int) int
		GeographiesTargeted                       func(childComplexity int) int
		GeographiesTargetedAppliedTo              func(childComplexity int) int
		GeographiesTargetedAppliedToOther         func(childComplexity int) int
		GeographiesTargetedNote                   func(childComplexity int) int
		GeographiesTargetedTypes                  func(childComplexity int) int
		GeographiesTargetedTypesOther             func(childComplexity int) int
		HasComponentsOrTracks                     func(childComplexity int) int
		HasComponentsOrTracksDiffer               func(childComplexity int) int
		HasComponentsOrTracksNote                 func(childComplexity int) int
		ID                                        func(childComplexity int) int
		IsNewModel                                func(childComplexity int) int
		KeyCharacteristics                        func(childComplexity int) int
		KeyCharacteristicsNote                    func(childComplexity int) int
		KeyCharacteristicsOther                   func(childComplexity int) int
		ManagePartCDEnrollment                    func(childComplexity int) int
		ManagePartCDEnrollmentNote                func(childComplexity int) int
		ModelPlanID                               func(childComplexity int) int
		ModifiedBy                                func(childComplexity int) int
		ModifiedByUserAccount                     func(childComplexity int) int
		ModifiedDts                               func(childComplexity int) int
		MultiplePatricipationAgreementsNeeded     func(childComplexity int) int
		MultiplePatricipationAgreementsNeededNote func(childComplexity int) int
		ParticipationOptions                      func(childComplexity int) int
		ParticipationOptionsNote                  func(childComplexity int) int
		PlanContractUpdated                       func(childComplexity int) int
		PlanContractUpdatedNote                   func(childComplexity int) int
		ReadyForClearanceBy                       func(childComplexity int) int
		ReadyForClearanceByUserAccount            func(childComplexity int) int
		ReadyForClearanceDts                      func(childComplexity int) int
		ReadyForReviewBy                          func(childComplexity int) int
		ReadyForReviewByUserAccount               func(childComplexity int) int
		ReadyForReviewDts                         func(childComplexity int) int
		ResemblesExistingModel                    func(childComplexity int) int
		ResemblesExistingModelHow                 func(childComplexity int) int
		ResemblesExistingModelNote                func(childComplexity int) int
		RulemakingRequired                        func(childComplexity int) int
		RulemakingRequiredDescription             func(childComplexity int) int
		RulemakingRequiredNote                    func(childComplexity int) int
		Status                                    func(childComplexity int) int
		WaiversRequired                           func(childComplexity int) int
		WaiversRequiredNote                       func(childComplexity int) int
		WaiversRequiredTypes                      func(childComplexity int) int
	}

	PlanOpsEvalAndLearning struct {
		AgencyOrStateHelp                            func(childComplexity int) int
		AgencyOrStateHelpNote                        func(childComplexity int) int
		AgencyOrStateHelpOther                       func(childComplexity int) int
		AnticipatedChallenges                        func(childComplexity int) int
		AppToSendFilesToKnown                        func(childComplexity int) int
		AppToSendFilesToNote                         func(childComplexity int) int
		AppToSendFilesToWhich                        func(childComplexity int) int
		AppealFeedback                               func(childComplexity int) int
		AppealNote                                   func(childComplexity int) int
		AppealOther                                  func(childComplexity int) int
		AppealPayments                               func(childComplexity int) int
		AppealPerformance                            func(childComplexity int) int
		BenchmarkForPerformance                      func(childComplexity int) int
		BenchmarkForPerformanceNote                  func(childComplexity int) int
		CaptureParticipantInfo                       func(childComplexity int) int
		CaptureParticipantInfoNote                   func(childComplexity int) int
		CcmInvolvment                                func(childComplexity int) int
		CcmInvolvmentNote                            func(childComplexity int) int
		CcmInvolvmentOther                           func(childComplexity int) int
		ComputePerformanceScores                     func(childComplexity int) int
		ComputePerformanceScoresNote                 func(childComplexity int) int
		ContractorSupport                            func(childComplexity int) int
		ContractorSupportHow                         func(childComplexity int) int
		ContractorSupportNote                        func(childComplexity int) int
		ContractorSupportOther                       func(childComplexity int) int
		CreatedBy                                    func(childComplexity int) int
		CreatedByUserAccount                         func(childComplexity int) int
		CreatedDts                                   func(childComplexity int) int
		DataCollectionFrequency                      func(childComplexity int) int
		DataCollectionFrequencyNote                  func(childComplexity int) int
		DataCollectionFrequencyOther                 func(childComplexity int) int
		DataCollectionStarts                         func(childComplexity int) int
		DataCollectionStartsOther                    func(childComplexity int) int
		DataFlowDiagramsNeeded                       func(childComplexity int) int
		DataFullTimeOrIncremental                    func(childComplexity int) int
		DataMonitoringFileOther                      func(childComplexity int) int
		DataMonitoringFileTypes                      func(childComplexity int) int
		DataMonitoringNote                           func(childComplexity int) int
		DataNeededForMonitoring                      func(childComplexity int) int
		DataNeededForMonitoringNote                  func(childComplexity int) int
		DataNeededForMonitoringOther                 func(childComplexity int) int
		DataResponseFileFrequency                    func(childComplexity int) int
		DataResponseType                             func(childComplexity int) int
		DataSharingFrequency                         func(childComplexity int) int
		DataSharingFrequencyOther                    func(childComplexity int) int
		DataSharingStarts                            func(childComplexity int) int
		DataSharingStartsNote                        func(childComplexity int) int
		DataSharingStartsOther                       func(childComplexity int) int
		DataToSendParticicipants                     func(childComplexity int) int
		DataToSendParticicipantsNote                 func(childComplexity int) int
		DataToSendParticicipantsOther                func(childComplexity int) int
		DevelopNewQualityMeasures                    func(childComplexity int) int
		DevelopNewQualityMeasuresNote                func(childComplexity int) int
		DraftIcdDueDate                              func(childComplexity int) int
		EftSetUp                                     func(childComplexity int) int
		EvaluationApproachOther                      func(childComplexity int) int
		EvaluationApproaches                         func(childComplexity int) int
		EvalutaionApproachNote                       func(childComplexity int) int
		FileNamingConventions                        func(childComplexity int) int
		HelpdeskUse                                  func(childComplexity int) int
		HelpdeskUseNote                              func(childComplexity int) int
		ID                                           func(childComplexity int) int
		IcdNote                                      func(childComplexity int) int
		IcdOwner                                     func(childComplexity int) int
		IddocSupport                                 func(childComplexity int) int
		IddocSupportNote                             func(childComplexity int) int
		ModelLearningSystems                         func(childComplexity int) int
		ModelLearningSystemsNote                     func(childComplexity int) int
		ModelLearningSystemsOther                    func(childComplexity int) int
		ModelPlanID                                  func(childComplexity int) int
		ModifiedBy                                   func(childComplexity int) int
		ModifiedByUserAccount                        func(childComplexity int) int
		ModifiedDts                                  func(childComplexity int) int
		ProduceBenefitEnhancementFiles               func(childComplexity int) int
		QualityPerformanceImpactsPayment             func(childComplexity int) int
		QualityPerformanceImpactsPaymentNote         func(childComplexity int) int
		QualityReportingStarts                       func(childComplexity int) int
		QualityReportingStartsNote                   func(childComplexity int) int
		QualityReportingStartsOther                  func(childComplexity int) int
		ReadyForClearanceBy                          func(childComplexity int) int
		ReadyForClearanceByUserAccount               func(childComplexity int) int
		ReadyForClearanceDts                         func(childComplexity int) int
		ReadyForReviewBy                             func(childComplexity int) int
		ReadyForReviewByUserAccount                  func(childComplexity int) int
		ReadyForReviewDts                            func(childComplexity int) int
		RiskAdjustFeedback                           func(childComplexity int) int
		RiskAdjustNote                               func(childComplexity int) int
		RiskAdjustOther                              func(childComplexity int) int
		RiskAdjustPayments                           func(childComplexity int) int
		RiskAdjustPerformance                        func(childComplexity int) int
		SendFilesBetweenCcw                          func(childComplexity int) int
		SendFilesBetweenCcwNote                      func(childComplexity int) int
		ShareCclfData                                func(childComplexity int) int
		ShareCclfDataNote                            func(childComplexity int) int
		Stakeholders                                 func(childComplexity int) int
		StakeholdersNote                             func(childComplexity int) int
		StakeholdersOther                            func(childComplexity int) int
		Status                                       func(childComplexity int) int
		StcNeeds                                     func(childComplexity int) int
		TechnicalContactsIdentified                  func(childComplexity int) int
		TechnicalContactsIdentifiedDetail            func(childComplexity int) int
		TechnicalContactsIdentifiedNote              func(childComplexity int) int
		TestingNote                                  func(childComplexity int) int
		TestingTimelines                             func(childComplexity int) int
		UatNeeds                                     func(childComplexity int) int
		UnsolicitedAdjustmentsIncluded               func(childComplexity int) int
		UseCcwForFileDistribiutionToParticipants     func(childComplexity int) int
		UseCcwForFileDistribiutionToParticipantsNote func(childComplexity int) int
	}

	PlanParticipantsAndProviders struct {
		CommunicationMethod               func(childComplexity int) int
		CommunicationMethodOther          func(childComplexity int) int
		CommunicationNote                 func(childComplexity int) int
		ConfidenceNote                    func(childComplexity int) int
		CoordinateWork                    func(childComplexity int) int
		CoordinateWorkNote                func(childComplexity int) int
		CreatedBy                         func(childComplexity int) int
		CreatedByUserAccount              func(childComplexity int) int
		CreatedDts                        func(childComplexity int) int
		EstimateConfidence                func(childComplexity int) int
		ExpectedNumberOfParticipants      func(childComplexity int) int
		GainsharePayments                 func(childComplexity int) int
		GainsharePaymentsNote             func(childComplexity int) int
		GainsharePaymentsTrack            func(childComplexity int) int
		ID                                func(childComplexity int) int
		MedicareProviderType              func(childComplexity int) int
		ModelApplicationLevel             func(childComplexity int) int
		ModelPlanID                       func(childComplexity int) int
		ModifiedBy                        func(childComplexity int) int
		ModifiedByUserAccount             func(childComplexity int) int
		ModifiedDts                       func(childComplexity int) int
		ParticipantAssumeRisk             func(childComplexity int) int
		Participants                      func(childComplexity int) int
		ParticipantsCurrentlyInModels     func(childComplexity int) int
		ParticipantsCurrentlyInModelsNote func(childComplexity int) int
		ParticipantsIDSNote               func(childComplexity int) int
		ParticipantsIds                   func(childComplexity int) int
		ParticipantsIdsOther              func(childComplexity int) int
		ParticipantsNote                  func(childComplexity int) int
		ParticipantsOther                 func(childComplexity int) int
		ProviderAddMethod                 func(childComplexity int) int
		ProviderAddMethodNote             func(childComplexity int) int
		ProviderAddMethodOther            func(childComplexity int) int
		ProviderAdditionFrequency         func(childComplexity int) int
		ProviderAdditionFrequencyNote     func(childComplexity int) int
		ProviderAdditionFrequencyOther    func(childComplexity int) int
		ProviderLeaveMethod               func(childComplexity int) int
		ProviderLeaveMethodNote           func(childComplexity int) int
		ProviderLeaveMethodOther          func(childComplexity int) int
		ProviderOverlap                   func(childComplexity int) int
		ProviderOverlapHierarchy          func(childComplexity int) int
		ProviderOverlapNote               func(childComplexity int) int
		ReadyForClearanceBy               func(childComplexity int) int
		ReadyForClearanceByUserAccount    func(childComplexity int) int
		ReadyForClearanceDts              func(childComplexity int) int
		ReadyForReviewBy                  func(childComplexity int) int
		ReadyForReviewByUserAccount       func(childComplexity int) int
		ReadyForReviewDts                 func(childComplexity int) int
		RecruitmentMethod                 func(childComplexity int) int
		RecruitmentNote                   func(childComplexity int) int
		RecruitmentOther                  func(childComplexity int) int
		RiskNote                          func(childComplexity int) int
		RiskOther                         func(childComplexity int) int
		RiskType                          func(childComplexity int) int
		SelectionMethod                   func(childComplexity int) int
		SelectionNote                     func(childComplexity int) int
		SelectionOther                    func(childComplexity int) int
		StatesEngagement                  func(childComplexity int) int
		Status                            func(childComplexity int) int
		WillRiskChange                    func(childComplexity int) int
		WillRiskChangeNote                func(childComplexity int) int
	}

	PlanPayments struct {
		AffectsMedicareSecondaryPayerClaims               func(childComplexity int) int
		AffectsMedicareSecondaryPayerClaimsHow            func(childComplexity int) int
		AffectsMedicareSecondaryPayerClaimsNote           func(childComplexity int) int
		AnticipateReconcilingPaymentsRetrospectively      func(childComplexity int) int
		AnticipateReconcilingPaymentsRetrospectivelyNote  func(childComplexity int) int
		AnticipatedPaymentFrequency                       func(childComplexity int) int
		AnticipatedPaymentFrequencyNote                   func(childComplexity int) int
		AnticipatedPaymentFrequencyOther                  func(childComplexity int) int
		BeneficiaryCostSharingLevelAndHandling            func(childComplexity int) int
		CanParticipantsSelectBetweenPaymentMechanisms     func(childComplexity int) int
		CanParticipantsSelectBetweenPaymentMechanismsHow  func(childComplexity int) int
		CanParticipantsSelectBetweenPaymentMechanismsNote func(childComplexity int) int
		ChangesMedicarePhysicianFeeSchedule               func(childComplexity int) int
		ChangesMedicarePhysicianFeeScheduleNote           func(childComplexity int) int
		CreatedBy                                         func(childComplexity int) int
		CreatedByUserAccount                              func(childComplexity int) int
		CreatedDts                                        func(childComplexity int) int
		CreatingDependenciesBetweenServices               func(childComplexity int) int
		CreatingDependenciesBetweenServicesNote           func(childComplexity int) int
		ExpectedCalculationComplexityLevel                func(childComplexity int) int
		ExpectedCalculationComplexityLevelNote            func(childComplexity int) int
		FundingSource                                     func(childComplexity int) int
		FundingSourceNote                                 func(childComplexity int) int
		FundingSourceOther                                func(childComplexity int) int
		FundingSourceR                                    func(childComplexity int) int
		FundingSourceRNote                                func(childComplexity int) int
		FundingSourceROther                               func(childComplexity int) int
		FundingSourceRTrustFund                           func(childComplexity int) int
		FundingSourceTrustFund                            func(childComplexity int) int
		FundingStructure                                  func(childComplexity int) int
		ID                                                func(childComplexity int) int
		IsContractorAwareTestDataRequirements             func(childComplexity int) int
		ModelPlanID                                       func(childComplexity int) int
		ModifiedBy                                        func(childComplexity int) int
		ModifiedByUserAccount                             func(childComplexity int) int
		ModifiedDts                                       func(childComplexity int) int
		NeedsClaimsDataCollection                         func(childComplexity int) int
		NeedsClaimsDataCollectionNote                     func(childComplexity int) int
		NonClaimsPaymentOther                             func(childComplexity int) int
		NonClaimsPayments                                 func(childComplexity int) int
		NonClaimsPaymentsNote                             func(childComplexity int) int
		NumberPaymentsPerPayCycle                         func(childComplexity int) int
		NumberPaymentsPerPayCycleNote                     func(childComplexity int) int
		PayClaims                                         func(childComplexity int) int
		PayClaimsNote                                     func(childComplexity int) int
		PayClaimsOther                                    func(childComplexity int) int
		PayModelDifferentiation                           func(childComplexity int) int
		PayRecipients                                     func(childComplexity int) int
		PayRecipientsNote                                 func(childComplexity int) int
		PayRecipientsOtherSpecification                   func(childComplexity int) int
		PayType                                           func(childComplexity int) int
		PayTypeNote                                       func(childComplexity int) int
		PaymentCalculationOwner                           func(childComplexity int) int
		PaymentStartDate                                  func(childComplexity int) int
		PaymentStartDateNote                              func(childComplexity int) int
		PlanningToUseInnovationPaymentContractor          func(childComplexity int) int
		PlanningToUseInnovationPaymentContractorNote      func(childComplexity int) int
		ProvidingThirdPartyFile                           func(childComplexity int) int
		ReadyForClearanceBy                               func(childComplexity int) int
		ReadyForClearanceByUserAccount                    func(childComplexity int) int
		ReadyForClearanceDts                              func(childComplexity int) int
		ReadyForReviewBy                                  func(childComplexity int) int
		ReadyForReviewByUserAccount                       func(childComplexity int) int
		ReadyForReviewDts                                 func(childComplexity int) int
		SharedSystemsInvolvedAdditionalClaimPayment       func(childComplexity int) int
		SharedSystemsInvolvedAdditionalClaimPaymentNote   func(childComplexity int) int
		ShouldAnyProviderExcludedFFSSystemsNote           func(childComplexity int) int
		ShouldAnyProvidersExcludedFFSSystems              func(childComplexity int) int
		Status                                            func(childComplexity int) int
		WaiveBeneficiaryCostSharingForAnyServices         func(childComplexity int) int
		WaiveBeneficiaryCostSharingNote                   func(childComplexity int) int
		WaiveBeneficiaryCostSharingServiceSpecification   func(childComplexity int) int
		WaiverOnlyAppliesPartOfPayment                    func(childComplexity int) int
		WillRecoverPayments                               func(childComplexity int) int
		WillRecoverPaymentsNote                           func(childComplexity int) int
	}

	PossibleOperationalNeed struct {
		CreatedBy             func(childComplexity int) int
		CreatedByUserAccount  func(childComplexity int) int
		CreatedDts            func(childComplexity int) int
		ID                    func(childComplexity int) int
		Key                   func(childComplexity int) int
		ModifiedBy            func(childComplexity int) int
		ModifiedByUserAccount func(childComplexity int) int
		ModifiedDts           func(childComplexity int) int
		Name                  func(childComplexity int) int
		PossibleSolutions     func(childComplexity int) int
		Section               func(childComplexity int) int
	}

	PossibleOperationalSolution struct {
		CreatedBy             func(childComplexity int) int
		CreatedByUserAccount  func(childComplexity int) int
		CreatedDts            func(childComplexity int) int
		ID                    func(childComplexity int) int
		Key                   func(childComplexity int) int
		ModifiedBy            func(childComplexity int) int
		ModifiedByUserAccount func(childComplexity int) int
		ModifiedDts           func(childComplexity int) int
		Name                  func(childComplexity int) int
		TreatAsOther          func(childComplexity int) int
	}

	PrepareForClearance struct {
		LatestClearanceDts func(childComplexity int) int
		Status             func(childComplexity int) int
	}

	Query struct {
		AuditChanges                                           func(childComplexity int, tableName string, primaryKey uuid.UUID) int
		CrTdl                                                  func(childComplexity int, id uuid.UUID) int
		CurrentUser                                            func(childComplexity int) int
		ExistingModelCollection                                func(childComplexity int) int
		ExistingModelLink                                      func(childComplexity int, id uuid.UUID) int
		ModelPlan                                              func(childComplexity int, id uuid.UUID) int
		ModelPlanCollection                                    func(childComplexity int, filter model.ModelPlanFilter) int
		NdaInfo                                                func(childComplexity int) int
		OperationalNeed                                        func(childComplexity int, id uuid.UUID) int
		OperationalSolution                                    func(childComplexity int, id uuid.UUID) int
		OperationalSolutions                                   func(childComplexity int, operationalNeedID uuid.UUID, includeNotNeeded bool) int
		PlanCollaboratorByID                                   func(childComplexity int, id uuid.UUID) int
		PlanDocument                                           func(childComplexity int, id uuid.UUID) int
		PlanPayments                                           func(childComplexity int, id uuid.UUID) int
		PossibleOperationalNeeds                               func(childComplexity int) int
		PossibleOperationalSolutions                           func(childComplexity int) int
		SearchChangeTable                                      func(childComplexity int, request models.SearchRequest, limit int, offset int) int
		SearchChangeTableByActor                               func(childComplexity int, actor string, limit int, offset int) int
		SearchChangeTableByDateRange                           func(childComplexity int, startDate time.Time, endDate time.Time, limit int, offset int) int
		SearchChangeTableByModelPlanID                         func(childComplexity int, modelPlanID uuid.UUID, limit int, offset int) int
		SearchChangeTableByModelStatus                         func(childComplexity int, modelStatus models.ModelStatus, limit int, offset int) int
		SearchChangeTableDateHistogramConsolidatedAggregations func(childComplexity int, interval string, limit int, offset int) int
		SearchChangeTableWithFreeText                          func(childComplexity int, searchText string, limit int, offset int) int
		SearchChanges                                          func(childComplexity int, filters []*model.SearchFilter, limit int, offset int) int
		SearchModelPlanChangesByDateRange                      func(childComplexity int, modelPlanID uuid.UUID, startDate time.Time, endDate time.Time, limit int, offset int) int
		SearchOktaUsers                                        func(childComplexity int, searchTerm string) int
		TaskListSectionLocks                                   func(childComplexity int, modelPlanID uuid.UUID) int
		UserAccount                                            func(childComplexity int, username string) int
	}

	Subscription struct {
		OnLockTaskListSectionContext  func(childComplexity int, modelPlanID uuid.UUID) int
		OnTaskListSectionLocksChanged func(childComplexity int, modelPlanID uuid.UUID) int
	}

	TaskListSectionLockStatus struct {
		IsAssessment        func(childComplexity int) int
		LockedByUserAccount func(childComplexity int) int
		ModelPlanID         func(childComplexity int) int
		Section             func(childComplexity int) int
	}

	TaskListSectionLockStatusChanged struct {
		ActionType func(childComplexity int) int
		ChangeType func(childComplexity int) int
		LockStatus func(childComplexity int) int
	}

	UserAccount struct {
		CommonName  func(childComplexity int) int
		Email       func(childComplexity int) int
		FamilyName  func(childComplexity int) int
		GivenName   func(childComplexity int) int
		HasLoggedIn func(childComplexity int) int
		ID          func(childComplexity int) int
		IsEUAID     func(childComplexity int) int
		Locale      func(childComplexity int) int
		Username    func(childComplexity int) int
		ZoneInfo    func(childComplexity int) int
	}

	UserInfo struct {
		DisplayName func(childComplexity int) int
		Email       func(childComplexity int) int
		FirstName   func(childComplexity int) int
		LastName    func(childComplexity int) int
		Username    func(childComplexity int) int
	}
}

type AuditChangeResolver interface {
	Fields(ctx context.Context, obj *models.AuditChange) (map[string]interface{}, error)
}
type ExistingModelLinkResolver interface {
	ExistingModel(ctx context.Context, obj *models.ExistingModelLink) (*models.ExistingModel, error)

	CurrentModelPlan(ctx context.Context, obj *models.ExistingModelLink) (*models.ModelPlan, error)
}
type ModelPlanResolver interface {
	Basics(ctx context.Context, obj *models.ModelPlan) (*models.PlanBasics, error)
	GeneralCharacteristics(ctx context.Context, obj *models.ModelPlan) (*models.PlanGeneralCharacteristics, error)
	ParticipantsAndProviders(ctx context.Context, obj *models.ModelPlan) (*models.PlanParticipantsAndProviders, error)
	Beneficiaries(ctx context.Context, obj *models.ModelPlan) (*models.PlanBeneficiaries, error)
	OpsEvalAndLearning(ctx context.Context, obj *models.ModelPlan) (*models.PlanOpsEvalAndLearning, error)
	Collaborators(ctx context.Context, obj *models.ModelPlan) ([]*models.PlanCollaborator, error)
	Documents(ctx context.Context, obj *models.ModelPlan) ([]*models.PlanDocument, error)
	Discussions(ctx context.Context, obj *models.ModelPlan) ([]*models.PlanDiscussion, error)
	Payments(ctx context.Context, obj *models.ModelPlan) (*models.PlanPayments, error)

	IsFavorite(ctx context.Context, obj *models.ModelPlan) (bool, error)
	IsCollaborator(ctx context.Context, obj *models.ModelPlan) (bool, error)
	CrTdls(ctx context.Context, obj *models.ModelPlan) ([]*models.PlanCrTdl, error)
	PrepareForClearance(ctx context.Context, obj *models.ModelPlan) (*model.PrepareForClearance, error)
	NameHistory(ctx context.Context, obj *models.ModelPlan, sort models.SortDirection) ([]string, error)
	OperationalNeeds(ctx context.Context, obj *models.ModelPlan) ([]*models.OperationalNeed, error)
	ExistingModelLinks(ctx context.Context, obj *models.ModelPlan) ([]*models.ExistingModelLink, error)
}
type MutationResolver interface {
	CreateModelPlan(ctx context.Context, modelName string) (*models.ModelPlan, error)
	UpdateModelPlan(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.ModelPlan, error)
	CreatePlanCollaborator(ctx context.Context, input model.PlanCollaboratorCreateInput) (*models.PlanCollaborator, error)
	UpdatePlanCollaborator(ctx context.Context, id uuid.UUID, newRole models.TeamRole) (*models.PlanCollaborator, error)
	DeletePlanCollaborator(ctx context.Context, id uuid.UUID) (*models.PlanCollaborator, error)
	UpdatePlanBasics(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanBasics, error)
	UpdatePlanGeneralCharacteristics(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanGeneralCharacteristics, error)
	UpdatePlanBeneficiaries(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanBeneficiaries, error)
	UpdatePlanParticipantsAndProviders(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanParticipantsAndProviders, error)
	UpdatePlanOpsEvalAndLearning(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanOpsEvalAndLearning, error)
	UploadNewPlanDocument(ctx context.Context, input model.PlanDocumentInput) (*models.PlanDocument, error)
	DeletePlanDocument(ctx context.Context, id uuid.UUID) (int, error)
	CreatePlanDiscussion(ctx context.Context, input model.PlanDiscussionCreateInput) (*models.PlanDiscussion, error)
	UpdatePlanDiscussion(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanDiscussion, error)
	DeletePlanDiscussion(ctx context.Context, id uuid.UUID) (*models.PlanDiscussion, error)
	CreateDiscussionReply(ctx context.Context, input model.DiscussionReplyCreateInput) (*models.DiscussionReply, error)
	UpdateDiscussionReply(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.DiscussionReply, error)
	DeleteDiscussionReply(ctx context.Context, id uuid.UUID) (*models.DiscussionReply, error)
	LockTaskListSection(ctx context.Context, modelPlanID uuid.UUID, section models.TaskListSection) (bool, error)
	UnlockTaskListSection(ctx context.Context, modelPlanID uuid.UUID, section models.TaskListSection) (bool, error)
	UnlockAllTaskListSections(ctx context.Context, modelPlanID uuid.UUID) ([]*model.TaskListSectionLockStatus, error)
	UpdatePlanPayments(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanPayments, error)
	AgreeToNda(ctx context.Context, agree bool) (*model.NDAInfo, error)
	AddPlanFavorite(ctx context.Context, modelPlanID uuid.UUID) (*models.PlanFavorite, error)
	DeletePlanFavorite(ctx context.Context, modelPlanID uuid.UUID) (*models.PlanFavorite, error)
	CreatePlanCrTdl(ctx context.Context, input model.PlanCrTdlCreateInput) (*models.PlanCrTdl, error)
	UpdatePlanCrTdl(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanCrTdl, error)
	DeletePlanCrTdl(ctx context.Context, id uuid.UUID) (*models.PlanCrTdl, error)
	AddOrUpdateCustomOperationalNeed(ctx context.Context, modelPlanID uuid.UUID, customNeedType string, needed bool) (*models.OperationalNeed, error)
	UpdateCustomOperationalNeedByID(ctx context.Context, id uuid.UUID, customNeedType *string, needed bool) (*models.OperationalNeed, error)
	CreateOperationalSolution(ctx context.Context, operationalNeedID uuid.UUID, solutionType *models.OperationalSolutionKey, changes map[string]interface{}) (*models.OperationalSolution, error)
	UpdateOperationalSolution(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.OperationalSolution, error)
	CreatePlanDocumentSolutionLinks(ctx context.Context, solutionID uuid.UUID, documentIDs []uuid.UUID) ([]*models.PlanDocumentSolutionLink, error)
	RemovePlanDocumentSolutionLinks(ctx context.Context, solutionID uuid.UUID, documentIDs []uuid.UUID) (bool, error)
	CreateOperationalSolutionSubtasks(ctx context.Context, solutionID uuid.UUID, inputs []*model.CreateOperationalSolutionSubtaskInput) ([]*models.OperationalSolutionSubtask, error)
	UpdateOperationalSolutionSubtasks(ctx context.Context, inputs []*model.UpdateOperationalSolutionSubtaskInput) ([]*models.OperationalSolutionSubtask, error)
	DeleteOperationalSolutionSubtask(ctx context.Context, id uuid.UUID) (int, error)
	UpdateExistingModelLinks(ctx context.Context, modelPlanID uuid.UUID, existingModelIDs []int, currentModelPlanIDs []uuid.UUID) ([]*models.ExistingModelLink, error)
}
type OperationalNeedResolver interface {
	Solutions(ctx context.Context, obj *models.OperationalNeed, includeNotNeeded bool) ([]*models.OperationalSolution, error)
}
type OperationalSolutionResolver interface {
	Documents(ctx context.Context, obj *models.OperationalSolution) ([]*models.PlanDocument, error)
	OperationalSolutionSubtasks(ctx context.Context, obj *models.OperationalSolution) ([]*models.OperationalSolutionSubtask, error)
}
type PlanBasicsResolver interface {
	CmsCenters(ctx context.Context, obj *models.PlanBasics) ([]model.CMSCenter, error)

	CmmiGroups(ctx context.Context, obj *models.PlanBasics) ([]model.CMMIGroup, error)
}
type PlanBeneficiariesResolver interface {
	Beneficiaries(ctx context.Context, obj *models.PlanBeneficiaries) ([]model.BeneficiariesType, error)

	BeneficiarySelectionMethod(ctx context.Context, obj *models.PlanBeneficiaries) ([]model.SelectionMethodType, error)
}
type PlanDiscussionResolver interface {
	Replies(ctx context.Context, obj *models.PlanDiscussion) ([]*models.DiscussionReply, error)
}
type PlanDocumentResolver interface {
	OtherType(ctx context.Context, obj *models.PlanDocument) (*string, error)
	OptionalNotes(ctx context.Context, obj *models.PlanDocument) (*string, error)
	DownloadURL(ctx context.Context, obj *models.PlanDocument) (*string, error)

	NumLinkedSolutions(ctx context.Context, obj *models.PlanDocument) (int, error)
}
type PlanGeneralCharacteristicsResolver interface {
	AlternativePaymentModelTypes(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.AlternativePaymentModelType, error)

	KeyCharacteristics(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.KeyCharacteristic, error)

	GeographiesTargetedTypes(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.GeographyType, error)

	GeographiesTargetedAppliedTo(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.GeographyApplication, error)

	AgreementTypes(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.AgreementType, error)

	AuthorityAllowances(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.AuthorityAllowance, error)

	WaiversRequiredTypes(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.WaiverType, error)
}
type PlanOpsEvalAndLearningResolver interface {
	AgencyOrStateHelp(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.AgencyOrStateHelpType, error)

	Stakeholders(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.StakeholdersType, error)

	ContractorSupport(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.ContractorSupportType, error)

	DataMonitoringFileTypes(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.MonitoringFileType, error)

	EvaluationApproaches(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.EvaluationApproachType, error)

	CcmInvolvment(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.CcmInvolvmentType, error)

	DataNeededForMonitoring(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.DataForMonitoringType, error)

	DataToSendParticicipants(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.DataToSendParticipantsType, error)

	DataSharingFrequency(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.DataFrequencyType, error)

	DataCollectionFrequency(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.DataFrequencyType, error)

	ModelLearningSystems(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.ModelLearningSystemType, error)
}
type PlanParticipantsAndProvidersResolver interface {
	Participants(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ParticipantsType, error)

	SelectionMethod(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ParticipantSelectionType, error)

	CommunicationMethod(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ParticipantCommunicationType, error)

	ParticipantsIds(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ParticipantsIDType, error)

	ProviderAddMethod(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ProviderAddType, error)

	ProviderLeaveMethod(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ProviderLeaveType, error)
}
type PlanPaymentsResolver interface {
	FundingSource(ctx context.Context, obj *models.PlanPayments) ([]models.FundingSource, error)

	FundingSourceR(ctx context.Context, obj *models.PlanPayments) ([]models.FundingSource, error)

	PayRecipients(ctx context.Context, obj *models.PlanPayments) ([]models.PayRecipient, error)

	PayType(ctx context.Context, obj *models.PlanPayments) ([]models.PayType, error)

	PayClaims(ctx context.Context, obj *models.PlanPayments) ([]models.ClaimsBasedPayType, error)

	NonClaimsPayments(ctx context.Context, obj *models.PlanPayments) ([]model.NonClaimsBasedPayType, error)
	NonClaimsPaymentOther(ctx context.Context, obj *models.PlanPayments) (*string, error)

	AnticipatedPaymentFrequency(ctx context.Context, obj *models.PlanPayments) ([]models.AnticipatedPaymentFrequencyType, error)
}
type PossibleOperationalNeedResolver interface {
	PossibleSolutions(ctx context.Context, obj *models.PossibleOperationalNeed) ([]*models.PossibleOperationalSolution, error)
}
type QueryResolver interface {
	CurrentUser(ctx context.Context) (*model.CurrentUser, error)
	ModelPlan(ctx context.Context, id uuid.UUID) (*models.ModelPlan, error)
	PlanDocument(ctx context.Context, id uuid.UUID) (*models.PlanDocument, error)
	ModelPlanCollection(ctx context.Context, filter model.ModelPlanFilter) ([]*models.ModelPlan, error)
	ExistingModelCollection(ctx context.Context) ([]*models.ExistingModel, error)
	SearchOktaUsers(ctx context.Context, searchTerm string) ([]*models.UserInfo, error)
	PlanCollaboratorByID(ctx context.Context, id uuid.UUID) (*models.PlanCollaborator, error)
	TaskListSectionLocks(ctx context.Context, modelPlanID uuid.UUID) ([]*model.TaskListSectionLockStatus, error)
	PlanPayments(ctx context.Context, id uuid.UUID) (*models.PlanPayments, error)
	NdaInfo(ctx context.Context) (*model.NDAInfo, error)
	CrTdl(ctx context.Context, id uuid.UUID) (*models.PlanCrTdl, error)
	OperationalSolutions(ctx context.Context, operationalNeedID uuid.UUID, includeNotNeeded bool) ([]*models.OperationalSolution, error)
	OperationalSolution(ctx context.Context, id uuid.UUID) (*models.OperationalSolution, error)
	OperationalNeed(ctx context.Context, id uuid.UUID) (*models.OperationalNeed, error)
	AuditChanges(ctx context.Context, tableName string, primaryKey uuid.UUID) ([]*models.AuditChange, error)
	PossibleOperationalNeeds(ctx context.Context) ([]*models.PossibleOperationalNeed, error)
	PossibleOperationalSolutions(ctx context.Context) ([]*models.PossibleOperationalSolution, error)
	UserAccount(ctx context.Context, username string) (*authentication.UserAccount, error)
	ExistingModelLink(ctx context.Context, id uuid.UUID) (*models.ExistingModelLink, error)
	SearchChanges(ctx context.Context, filters []*model.SearchFilter, limit int, offset int) ([]*models.ChangeTableRecord, error)
	SearchChangeTable(ctx context.Context, request models.SearchRequest, limit int, offset int) ([]*models.ChangeTableRecord, error)
	SearchChangeTableWithFreeText(ctx context.Context, searchText string, limit int, offset int) ([]*models.ChangeTableRecord, error)
	SearchChangeTableByModelPlanID(ctx context.Context, modelPlanID uuid.UUID, limit int, offset int) ([]*models.ChangeTableRecord, error)
	SearchChangeTableByDateRange(ctx context.Context, startDate time.Time, endDate time.Time, limit int, offset int) ([]*models.ChangeTableRecord, error)
	SearchModelPlanChangesByDateRange(ctx context.Context, modelPlanID uuid.UUID, startDate time.Time, endDate time.Time, limit int, offset int) ([]*models.ChangeTableRecord, error)
	SearchChangeTableByActor(ctx context.Context, actor string, limit int, offset int) ([]*models.ChangeTableRecord, error)
	SearchChangeTableByModelStatus(ctx context.Context, modelStatus models.ModelStatus, limit int, offset int) ([]*models.ChangeTableRecord, error)
	SearchChangeTableDateHistogramConsolidatedAggregations(ctx context.Context, interval string, limit int, offset int) ([]*models.DateHistogramAggregationBucket, error)
}
type SubscriptionResolver interface {
	OnTaskListSectionLocksChanged(ctx context.Context, modelPlanID uuid.UUID) (<-chan *model.TaskListSectionLockStatusChanged, error)
	OnLockTaskListSectionContext(ctx context.Context, modelPlanID uuid.UUID) (<-chan *model.TaskListSectionLockStatusChanged, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AuditChange.action":
		if e.complexity.AuditChange.Action == nil {
			break
		}

		return e.complexity.AuditChange.Action(childComplexity), true

	case "AuditChange.fields":
		if e.complexity.AuditChange.Fields == nil {
			break
		}

		return e.complexity.AuditChange.Fields(childComplexity), true

	case "AuditChange.foreignKey":
		if e.complexity.AuditChange.ForeignKey == nil {
			break
		}

		return e.complexity.AuditChange.ForeignKey(childComplexity), true

	case "AuditChange.id":
		if e.complexity.AuditChange.ID == nil {
			break
		}

		return e.complexity.AuditChange.ID(childComplexity), true

	case "AuditChange.modifiedBy":
		if e.complexity.AuditChange.ModifiedBy == nil {
			break
		}

		return e.complexity.AuditChange.ModifiedBy(childComplexity), true

	case "AuditChange.modifiedByUserAccount":
		if e.complexity.AuditChange.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.AuditChange.ModifiedByUserAccount(childComplexity), true

	case "AuditChange.modifiedDts":
		if e.complexity.AuditChange.ModifiedDts == nil {
			break
		}

		return e.complexity.AuditChange.ModifiedDts(childComplexity), true

	case "AuditChange.primaryKey":
		if e.complexity.AuditChange.PrimaryKey == nil {
			break
		}

		return e.complexity.AuditChange.PrimaryKey(childComplexity), true

	case "AuditChange.tableName":
		if e.complexity.AuditChange.TableName == nil {
			break
		}

		return e.complexity.AuditChange.TableName(childComplexity), true

	case "ChangeTableRecord.action":
		if e.complexity.ChangeTableRecord.Action == nil {
			break
		}

		return e.complexity.ChangeTableRecord.Action(childComplexity), true

	case "ChangeTableRecord.fields":
		if e.complexity.ChangeTableRecord.Fields == nil {
			break
		}

		return e.complexity.ChangeTableRecord.Fields(childComplexity), true

	case "ChangeTableRecord.foreignKey":
		if e.complexity.ChangeTableRecord.ForeignKey == nil {
			break
		}

		return e.complexity.ChangeTableRecord.ForeignKey(childComplexity), true

	case "ChangeTableRecord.guid":
		if e.complexity.ChangeTableRecord.GUID == nil {
			break
		}

		return e.complexity.ChangeTableRecord.GUID(childComplexity), true

	case "ChangeTableRecord.modifiedBy":
		if e.complexity.ChangeTableRecord.ModifiedBy == nil {
			break
		}

		return e.complexity.ChangeTableRecord.ModifiedBy(childComplexity), true

	case "ChangeTableRecord.modifiedDts":
		if e.complexity.ChangeTableRecord.ModifiedDts == nil {
			break
		}

		return e.complexity.ChangeTableRecord.ModifiedDts(childComplexity), true

	case "ChangeTableRecord.primaryKey":
		if e.complexity.ChangeTableRecord.PrimaryKey == nil {
			break
		}

		return e.complexity.ChangeTableRecord.PrimaryKey(childComplexity), true

	case "ChangeTableRecord.tableID":
		if e.complexity.ChangeTableRecord.TableID == nil {
			break
		}

		return e.complexity.ChangeTableRecord.TableID(childComplexity), true

	case "ChangeTableRecord.tableName":
		if e.complexity.ChangeTableRecord.TableName == nil {
			break
		}

		return e.complexity.ChangeTableRecord.TableName(childComplexity), true

	case "ChangedFields.changes":
		if e.complexity.ChangedFields.Changes == nil {
			break
		}

		return e.complexity.ChangedFields.Changes(childComplexity), true

	case "CurrentUser.launchDarkly":
		if e.complexity.CurrentUser.LaunchDarkly == nil {
			break
		}

		return e.complexity.CurrentUser.LaunchDarkly(childComplexity), true

	case "DateHistogramAggregationBucket.docCount":
		if e.complexity.DateHistogramAggregationBucket.DocCount == nil {
			break
		}

		return e.complexity.DateHistogramAggregationBucket.DocCount(childComplexity), true

	case "DateHistogramAggregationBucket.key":
		if e.complexity.DateHistogramAggregationBucket.Key == nil {
			break
		}

		return e.complexity.DateHistogramAggregationBucket.Key(childComplexity), true

	case "DateHistogramAggregationBucket.maxModifiedDts":
		if e.complexity.DateHistogramAggregationBucket.MaxModifiedDts == nil {
			break
		}

		return e.complexity.DateHistogramAggregationBucket.MaxModifiedDts(childComplexity), true

	case "DateHistogramAggregationBucket.minModifiedDts":
		if e.complexity.DateHistogramAggregationBucket.MinModifiedDts == nil {
			break
		}

		return e.complexity.DateHistogramAggregationBucket.MinModifiedDts(childComplexity), true

	case "DiscussionReply.content":
		if e.complexity.DiscussionReply.Content == nil {
			break
		}

		return e.complexity.DiscussionReply.Content(childComplexity), true

	case "DiscussionReply.createdBy":
		if e.complexity.DiscussionReply.CreatedBy == nil {
			break
		}

		return e.complexity.DiscussionReply.CreatedBy(childComplexity), true

	case "DiscussionReply.createdByUserAccount":
		if e.complexity.DiscussionReply.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.DiscussionReply.CreatedByUserAccount(childComplexity), true

	case "DiscussionReply.createdDts":
		if e.complexity.DiscussionReply.CreatedDts == nil {
			break
		}

		return e.complexity.DiscussionReply.CreatedDts(childComplexity), true

	case "DiscussionReply.discussionID":
		if e.complexity.DiscussionReply.DiscussionID == nil {
			break
		}

		return e.complexity.DiscussionReply.DiscussionID(childComplexity), true

	case "DiscussionReply.id":
		if e.complexity.DiscussionReply.ID == nil {
			break
		}

		return e.complexity.DiscussionReply.ID(childComplexity), true

	case "DiscussionReply.isAssessment":
		if e.complexity.DiscussionReply.IsAssessment == nil {
			break
		}

		return e.complexity.DiscussionReply.IsAssessment(childComplexity), true

	case "DiscussionReply.modifiedBy":
		if e.complexity.DiscussionReply.ModifiedBy == nil {
			break
		}

		return e.complexity.DiscussionReply.ModifiedBy(childComplexity), true

	case "DiscussionReply.modifiedByUserAccount":
		if e.complexity.DiscussionReply.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.DiscussionReply.ModifiedByUserAccount(childComplexity), true

	case "DiscussionReply.modifiedDts":
		if e.complexity.DiscussionReply.ModifiedDts == nil {
			break
		}

		return e.complexity.DiscussionReply.ModifiedDts(childComplexity), true

	case "DiscussionReply.resolution":
		if e.complexity.DiscussionReply.Resolution == nil {
			break
		}

		return e.complexity.DiscussionReply.Resolution(childComplexity), true

	case "ExistingModel.authority":
		if e.complexity.ExistingModel.Authority == nil {
			break
		}

		return e.complexity.ExistingModel.Authority(childComplexity), true

	case "ExistingModel.category":
		if e.complexity.ExistingModel.Category == nil {
			break
		}

		return e.complexity.ExistingModel.Category(childComplexity), true

	case "ExistingModel.createdBy":
		if e.complexity.ExistingModel.CreatedBy == nil {
			break
		}

		return e.complexity.ExistingModel.CreatedBy(childComplexity), true

	case "ExistingModel.createdByUserAccount":
		if e.complexity.ExistingModel.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.ExistingModel.CreatedByUserAccount(childComplexity), true

	case "ExistingModel.createdDts":
		if e.complexity.ExistingModel.CreatedDts == nil {
			break
		}

		return e.complexity.ExistingModel.CreatedDts(childComplexity), true

	case "ExistingModel.dateBegan":
		if e.complexity.ExistingModel.DateBegan == nil {
			break
		}

		return e.complexity.ExistingModel.DateBegan(childComplexity), true

	case "ExistingModel.dateEnded":
		if e.complexity.ExistingModel.DateEnded == nil {
			break
		}

		return e.complexity.ExistingModel.DateEnded(childComplexity), true

	case "ExistingModel.description":
		if e.complexity.ExistingModel.Description == nil {
			break
		}

		return e.complexity.ExistingModel.Description(childComplexity), true

	case "ExistingModel.displayModelSummary":
		if e.complexity.ExistingModel.DisplayModelSummary == nil {
			break
		}

		return e.complexity.ExistingModel.DisplayModelSummary(childComplexity), true

	case "ExistingModel.id":
		if e.complexity.ExistingModel.ID == nil {
			break
		}

		return e.complexity.ExistingModel.ID(childComplexity), true

	case "ExistingModel.keywords":
		if e.complexity.ExistingModel.Keywords == nil {
			break
		}

		return e.complexity.ExistingModel.Keywords(childComplexity), true

	case "ExistingModel.modelName":
		if e.complexity.ExistingModel.ModelName == nil {
			break
		}

		return e.complexity.ExistingModel.ModelName(childComplexity), true

	case "ExistingModel.modifiedBy":
		if e.complexity.ExistingModel.ModifiedBy == nil {
			break
		}

		return e.complexity.ExistingModel.ModifiedBy(childComplexity), true

	case "ExistingModel.modifiedByUserAccount":
		if e.complexity.ExistingModel.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.ExistingModel.ModifiedByUserAccount(childComplexity), true

	case "ExistingModel.modifiedDts":
		if e.complexity.ExistingModel.ModifiedDts == nil {
			break
		}

		return e.complexity.ExistingModel.ModifiedDts(childComplexity), true

	case "ExistingModel.numberOfBeneficiariesImpacted":
		if e.complexity.ExistingModel.NumberOfBeneficiariesImpacted == nil {
			break
		}

		return e.complexity.ExistingModel.NumberOfBeneficiariesImpacted(childComplexity), true

	case "ExistingModel.numberOfParticipants":
		if e.complexity.ExistingModel.NumberOfParticipants == nil {
			break
		}

		return e.complexity.ExistingModel.NumberOfParticipants(childComplexity), true

	case "ExistingModel.numberOfPhysiciansImpacted":
		if e.complexity.ExistingModel.NumberOfPhysiciansImpacted == nil {
			break
		}

		return e.complexity.ExistingModel.NumberOfPhysiciansImpacted(childComplexity), true

	case "ExistingModel.stage":
		if e.complexity.ExistingModel.Stage == nil {
			break
		}

		return e.complexity.ExistingModel.Stage(childComplexity), true

	case "ExistingModel.states":
		if e.complexity.ExistingModel.States == nil {
			break
		}

		return e.complexity.ExistingModel.States(childComplexity), true

	case "ExistingModel.url":
		if e.complexity.ExistingModel.URL == nil {
			break
		}

		return e.complexity.ExistingModel.URL(childComplexity), true

	case "ExistingModelLink.createdBy":
		if e.complexity.ExistingModelLink.CreatedBy == nil {
			break
		}

		return e.complexity.ExistingModelLink.CreatedBy(childComplexity), true

	case "ExistingModelLink.createdByUserAccount":
		if e.complexity.ExistingModelLink.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.ExistingModelLink.CreatedByUserAccount(childComplexity), true

	case "ExistingModelLink.createdDts":
		if e.complexity.ExistingModelLink.CreatedDts == nil {
			break
		}

		return e.complexity.ExistingModelLink.CreatedDts(childComplexity), true

	case "ExistingModelLink.currentModelPlan":
		if e.complexity.ExistingModelLink.CurrentModelPlan == nil {
			break
		}

		return e.complexity.ExistingModelLink.CurrentModelPlan(childComplexity), true

	case "ExistingModelLink.currentModelPlanID":
		if e.complexity.ExistingModelLink.CurrentModelPlanID == nil {
			break
		}

		return e.complexity.ExistingModelLink.CurrentModelPlanID(childComplexity), true

	case "ExistingModelLink.existingModel":
		if e.complexity.ExistingModelLink.ExistingModel == nil {
			break
		}

		return e.complexity.ExistingModelLink.ExistingModel(childComplexity), true

	case "ExistingModelLink.existingModelID":
		if e.complexity.ExistingModelLink.ExistingModelID == nil {
			break
		}

		return e.complexity.ExistingModelLink.ExistingModelID(childComplexity), true

	case "ExistingModelLink.id":
		if e.complexity.ExistingModelLink.ID == nil {
			break
		}

		return e.complexity.ExistingModelLink.ID(childComplexity), true

	case "ExistingModelLink.modelPlanID":
		if e.complexity.ExistingModelLink.ModelPlanID == nil {
			break
		}

		return e.complexity.ExistingModelLink.ModelPlanID(childComplexity), true

	case "ExistingModelLink.modifiedBy":
		if e.complexity.ExistingModelLink.ModifiedBy == nil {
			break
		}

		return e.complexity.ExistingModelLink.ModifiedBy(childComplexity), true

	case "ExistingModelLink.modifiedByUserAccount":
		if e.complexity.ExistingModelLink.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.ExistingModelLink.ModifiedByUserAccount(childComplexity), true

	case "ExistingModelLink.modifiedDts":
		if e.complexity.ExistingModelLink.ModifiedDts == nil {
			break
		}

		return e.complexity.ExistingModelLink.ModifiedDts(childComplexity), true

	case "Field.name":
		if e.complexity.Field.Name == nil {
			break
		}

		return e.complexity.Field.Name(childComplexity), true

	case "Field.value":
		if e.complexity.Field.Value == nil {
			break
		}

		return e.complexity.Field.Value(childComplexity), true

	case "FieldValue.new":
		if e.complexity.FieldValue.New == nil {
			break
		}

		return e.complexity.FieldValue.New(childComplexity), true

	case "FieldValue.old":
		if e.complexity.FieldValue.Old == nil {
			break
		}

		return e.complexity.FieldValue.Old(childComplexity), true

	case "LaunchDarklySettings.signedHash":
		if e.complexity.LaunchDarklySettings.SignedHash == nil {
			break
		}

		return e.complexity.LaunchDarklySettings.SignedHash(childComplexity), true

	case "LaunchDarklySettings.userKey":
		if e.complexity.LaunchDarklySettings.UserKey == nil {
			break
		}

		return e.complexity.LaunchDarklySettings.UserKey(childComplexity), true

	case "ModelPlan.archived":
		if e.complexity.ModelPlan.Archived == nil {
			break
		}

		return e.complexity.ModelPlan.Archived(childComplexity), true

	case "ModelPlan.basics":
		if e.complexity.ModelPlan.Basics == nil {
			break
		}

		return e.complexity.ModelPlan.Basics(childComplexity), true

	case "ModelPlan.beneficiaries":
		if e.complexity.ModelPlan.Beneficiaries == nil {
			break
		}

		return e.complexity.ModelPlan.Beneficiaries(childComplexity), true

	case "ModelPlan.collaborators":
		if e.complexity.ModelPlan.Collaborators == nil {
			break
		}

		return e.complexity.ModelPlan.Collaborators(childComplexity), true

	case "ModelPlan.crTdls":
		if e.complexity.ModelPlan.CrTdls == nil {
			break
		}

		return e.complexity.ModelPlan.CrTdls(childComplexity), true

	case "ModelPlan.createdBy":
		if e.complexity.ModelPlan.CreatedBy == nil {
			break
		}

		return e.complexity.ModelPlan.CreatedBy(childComplexity), true

	case "ModelPlan.createdByUserAccount":
		if e.complexity.ModelPlan.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.ModelPlan.CreatedByUserAccount(childComplexity), true

	case "ModelPlan.createdDts":
		if e.complexity.ModelPlan.CreatedDts == nil {
			break
		}

		return e.complexity.ModelPlan.CreatedDts(childComplexity), true

	case "ModelPlan.discussions":
		if e.complexity.ModelPlan.Discussions == nil {
			break
		}

		return e.complexity.ModelPlan.Discussions(childComplexity), true

	case "ModelPlan.documents":
		if e.complexity.ModelPlan.Documents == nil {
			break
		}

		return e.complexity.ModelPlan.Documents(childComplexity), true

	case "ModelPlan.existingModelLinks":
		if e.complexity.ModelPlan.ExistingModelLinks == nil {
			break
		}

		return e.complexity.ModelPlan.ExistingModelLinks(childComplexity), true

	case "ModelPlan.generalCharacteristics":
		if e.complexity.ModelPlan.GeneralCharacteristics == nil {
			break
		}

		return e.complexity.ModelPlan.GeneralCharacteristics(childComplexity), true

	case "ModelPlan.id":
		if e.complexity.ModelPlan.ID == nil {
			break
		}

		return e.complexity.ModelPlan.ID(childComplexity), true

	case "ModelPlan.isCollaborator":
		if e.complexity.ModelPlan.IsCollaborator == nil {
			break
		}

		return e.complexity.ModelPlan.IsCollaborator(childComplexity), true

	case "ModelPlan.isFavorite":
		if e.complexity.ModelPlan.IsFavorite == nil {
			break
		}

		return e.complexity.ModelPlan.IsFavorite(childComplexity), true

	case "ModelPlan.modelName":
		if e.complexity.ModelPlan.ModelName == nil {
			break
		}

		return e.complexity.ModelPlan.ModelName(childComplexity), true

	case "ModelPlan.modifiedBy":
		if e.complexity.ModelPlan.ModifiedBy == nil {
			break
		}

		return e.complexity.ModelPlan.ModifiedBy(childComplexity), true

	case "ModelPlan.modifiedByUserAccount":
		if e.complexity.ModelPlan.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.ModelPlan.ModifiedByUserAccount(childComplexity), true

	case "ModelPlan.modifiedDts":
		if e.complexity.ModelPlan.ModifiedDts == nil {
			break
		}

		return e.complexity.ModelPlan.ModifiedDts(childComplexity), true

	case "ModelPlan.nameHistory":
		if e.complexity.ModelPlan.NameHistory == nil {
			break
		}

		args, err := ec.field_ModelPlan_nameHistory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ModelPlan.NameHistory(childComplexity, args["sort"].(models.SortDirection)), true

	case "ModelPlan.operationalNeeds":
		if e.complexity.ModelPlan.OperationalNeeds == nil {
			break
		}

		return e.complexity.ModelPlan.OperationalNeeds(childComplexity), true

	case "ModelPlan.opsEvalAndLearning":
		if e.complexity.ModelPlan.OpsEvalAndLearning == nil {
			break
		}

		return e.complexity.ModelPlan.OpsEvalAndLearning(childComplexity), true

	case "ModelPlan.participantsAndProviders":
		if e.complexity.ModelPlan.ParticipantsAndProviders == nil {
			break
		}

		return e.complexity.ModelPlan.ParticipantsAndProviders(childComplexity), true

	case "ModelPlan.payments":
		if e.complexity.ModelPlan.Payments == nil {
			break
		}

		return e.complexity.ModelPlan.Payments(childComplexity), true

	case "ModelPlan.prepareForClearance":
		if e.complexity.ModelPlan.PrepareForClearance == nil {
			break
		}

		return e.complexity.ModelPlan.PrepareForClearance(childComplexity), true

	case "ModelPlan.status":
		if e.complexity.ModelPlan.Status == nil {
			break
		}

		return e.complexity.ModelPlan.Status(childComplexity), true

	case "Mutation.addOrUpdateCustomOperationalNeed":
		if e.complexity.Mutation.AddOrUpdateCustomOperationalNeed == nil {
			break
		}

		args, err := ec.field_Mutation_addOrUpdateCustomOperationalNeed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrUpdateCustomOperationalNeed(childComplexity, args["modelPlanID"].(uuid.UUID), args["customNeedType"].(string), args["needed"].(bool)), true

	case "Mutation.addPlanFavorite":
		if e.complexity.Mutation.AddPlanFavorite == nil {
			break
		}

		args, err := ec.field_Mutation_addPlanFavorite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddPlanFavorite(childComplexity, args["modelPlanID"].(uuid.UUID)), true

	case "Mutation.agreeToNDA":
		if e.complexity.Mutation.AgreeToNda == nil {
			break
		}

		args, err := ec.field_Mutation_agreeToNDA_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AgreeToNda(childComplexity, args["agree"].(bool)), true

	case "Mutation.createDiscussionReply":
		if e.complexity.Mutation.CreateDiscussionReply == nil {
			break
		}

		args, err := ec.field_Mutation_createDiscussionReply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDiscussionReply(childComplexity, args["input"].(model.DiscussionReplyCreateInput)), true

	case "Mutation.createModelPlan":
		if e.complexity.Mutation.CreateModelPlan == nil {
			break
		}

		args, err := ec.field_Mutation_createModelPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateModelPlan(childComplexity, args["modelName"].(string)), true

	case "Mutation.createOperationalSolution":
		if e.complexity.Mutation.CreateOperationalSolution == nil {
			break
		}

		args, err := ec.field_Mutation_createOperationalSolution_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOperationalSolution(childComplexity, args["operationalNeedID"].(uuid.UUID), args["solutionType"].(*models.OperationalSolutionKey), args["changes"].(map[string]interface{})), true

	case "Mutation.createOperationalSolutionSubtasks":
		if e.complexity.Mutation.CreateOperationalSolutionSubtasks == nil {
			break
		}

		args, err := ec.field_Mutation_createOperationalSolutionSubtasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOperationalSolutionSubtasks(childComplexity, args["solutionID"].(uuid.UUID), args["inputs"].([]*model.CreateOperationalSolutionSubtaskInput)), true

	case "Mutation.createPlanCollaborator":
		if e.complexity.Mutation.CreatePlanCollaborator == nil {
			break
		}

		args, err := ec.field_Mutation_createPlanCollaborator_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlanCollaborator(childComplexity, args["input"].(model.PlanCollaboratorCreateInput)), true

	case "Mutation.createPlanCrTdl":
		if e.complexity.Mutation.CreatePlanCrTdl == nil {
			break
		}

		args, err := ec.field_Mutation_createPlanCrTdl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlanCrTdl(childComplexity, args["input"].(model.PlanCrTdlCreateInput)), true

	case "Mutation.createPlanDiscussion":
		if e.complexity.Mutation.CreatePlanDiscussion == nil {
			break
		}

		args, err := ec.field_Mutation_createPlanDiscussion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlanDiscussion(childComplexity, args["input"].(model.PlanDiscussionCreateInput)), true

	case "Mutation.createPlanDocumentSolutionLinks":
		if e.complexity.Mutation.CreatePlanDocumentSolutionLinks == nil {
			break
		}

		args, err := ec.field_Mutation_createPlanDocumentSolutionLinks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlanDocumentSolutionLinks(childComplexity, args["solutionID"].(uuid.UUID), args["documentIDs"].([]uuid.UUID)), true

	case "Mutation.deleteDiscussionReply":
		if e.complexity.Mutation.DeleteDiscussionReply == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDiscussionReply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDiscussionReply(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deleteOperationalSolutionSubtask":
		if e.complexity.Mutation.DeleteOperationalSolutionSubtask == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOperationalSolutionSubtask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOperationalSolutionSubtask(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deletePlanCollaborator":
		if e.complexity.Mutation.DeletePlanCollaborator == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlanCollaborator_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlanCollaborator(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deletePlanCrTdl":
		if e.complexity.Mutation.DeletePlanCrTdl == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlanCrTdl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlanCrTdl(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deletePlanDiscussion":
		if e.complexity.Mutation.DeletePlanDiscussion == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlanDiscussion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlanDiscussion(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deletePlanDocument":
		if e.complexity.Mutation.DeletePlanDocument == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlanDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlanDocument(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deletePlanFavorite":
		if e.complexity.Mutation.DeletePlanFavorite == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlanFavorite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlanFavorite(childComplexity, args["modelPlanID"].(uuid.UUID)), true

	case "Mutation.lockTaskListSection":
		if e.complexity.Mutation.LockTaskListSection == nil {
			break
		}

		args, err := ec.field_Mutation_lockTaskListSection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LockTaskListSection(childComplexity, args["modelPlanID"].(uuid.UUID), args["section"].(models.TaskListSection)), true

	case "Mutation.removePlanDocumentSolutionLinks":
		if e.complexity.Mutation.RemovePlanDocumentSolutionLinks == nil {
			break
		}

		args, err := ec.field_Mutation_removePlanDocumentSolutionLinks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemovePlanDocumentSolutionLinks(childComplexity, args["solutionID"].(uuid.UUID), args["documentIDs"].([]uuid.UUID)), true

	case "Mutation.unlockAllTaskListSections":
		if e.complexity.Mutation.UnlockAllTaskListSections == nil {
			break
		}

		args, err := ec.field_Mutation_unlockAllTaskListSections_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnlockAllTaskListSections(childComplexity, args["modelPlanID"].(uuid.UUID)), true

	case "Mutation.unlockTaskListSection":
		if e.complexity.Mutation.UnlockTaskListSection == nil {
			break
		}

		args, err := ec.field_Mutation_unlockTaskListSection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnlockTaskListSection(childComplexity, args["modelPlanID"].(uuid.UUID), args["section"].(models.TaskListSection)), true

	case "Mutation.updateCustomOperationalNeedByID":
		if e.complexity.Mutation.UpdateCustomOperationalNeedByID == nil {
			break
		}

		args, err := ec.field_Mutation_updateCustomOperationalNeedByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCustomOperationalNeedByID(childComplexity, args["id"].(uuid.UUID), args["customNeedType"].(*string), args["needed"].(bool)), true

	case "Mutation.updateDiscussionReply":
		if e.complexity.Mutation.UpdateDiscussionReply == nil {
			break
		}

		args, err := ec.field_Mutation_updateDiscussionReply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDiscussionReply(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updateExistingModelLinks":
		if e.complexity.Mutation.UpdateExistingModelLinks == nil {
			break
		}

		args, err := ec.field_Mutation_updateExistingModelLinks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateExistingModelLinks(childComplexity, args["modelPlanID"].(uuid.UUID), args["existingModelIDs"].([]int), args["currentModelPlanIDs"].([]uuid.UUID)), true

	case "Mutation.updateModelPlan":
		if e.complexity.Mutation.UpdateModelPlan == nil {
			break
		}

		args, err := ec.field_Mutation_updateModelPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateModelPlan(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updateOperationalSolution":
		if e.complexity.Mutation.UpdateOperationalSolution == nil {
			break
		}

		args, err := ec.field_Mutation_updateOperationalSolution_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOperationalSolution(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updateOperationalSolutionSubtasks":
		if e.complexity.Mutation.UpdateOperationalSolutionSubtasks == nil {
			break
		}

		args, err := ec.field_Mutation_updateOperationalSolutionSubtasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOperationalSolutionSubtasks(childComplexity, args["inputs"].([]*model.UpdateOperationalSolutionSubtaskInput)), true

	case "Mutation.updatePlanBasics":
		if e.complexity.Mutation.UpdatePlanBasics == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanBasics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanBasics(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanBeneficiaries":
		if e.complexity.Mutation.UpdatePlanBeneficiaries == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanBeneficiaries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanBeneficiaries(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanCollaborator":
		if e.complexity.Mutation.UpdatePlanCollaborator == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanCollaborator_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanCollaborator(childComplexity, args["id"].(uuid.UUID), args["newRole"].(models.TeamRole)), true

	case "Mutation.updatePlanCrTdl":
		if e.complexity.Mutation.UpdatePlanCrTdl == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanCrTdl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanCrTdl(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanDiscussion":
		if e.complexity.Mutation.UpdatePlanDiscussion == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanDiscussion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanDiscussion(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanGeneralCharacteristics":
		if e.complexity.Mutation.UpdatePlanGeneralCharacteristics == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanGeneralCharacteristics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanGeneralCharacteristics(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanOpsEvalAndLearning":
		if e.complexity.Mutation.UpdatePlanOpsEvalAndLearning == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanOpsEvalAndLearning_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanOpsEvalAndLearning(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanParticipantsAndProviders":
		if e.complexity.Mutation.UpdatePlanParticipantsAndProviders == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanParticipantsAndProviders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanParticipantsAndProviders(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanPayments":
		if e.complexity.Mutation.UpdatePlanPayments == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanPayments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanPayments(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.uploadNewPlanDocument":
		if e.complexity.Mutation.UploadNewPlanDocument == nil {
			break
		}

		args, err := ec.field_Mutation_uploadNewPlanDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadNewPlanDocument(childComplexity, args["input"].(model.PlanDocumentInput)), true

	case "NDAInfo.agreed":
		if e.complexity.NDAInfo.Agreed == nil {
			break
		}

		return e.complexity.NDAInfo.Agreed(childComplexity), true

	case "NDAInfo.agreedDts":
		if e.complexity.NDAInfo.AgreedDts == nil {
			break
		}

		return e.complexity.NDAInfo.AgreedDts(childComplexity), true

	case "OperationalNeed.createdBy":
		if e.complexity.OperationalNeed.CreatedBy == nil {
			break
		}

		return e.complexity.OperationalNeed.CreatedBy(childComplexity), true

	case "OperationalNeed.createdByUserAccount":
		if e.complexity.OperationalNeed.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.OperationalNeed.CreatedByUserAccount(childComplexity), true

	case "OperationalNeed.createdDts":
		if e.complexity.OperationalNeed.CreatedDts == nil {
			break
		}

		return e.complexity.OperationalNeed.CreatedDts(childComplexity), true

	case "OperationalNeed.id":
		if e.complexity.OperationalNeed.ID == nil {
			break
		}

		return e.complexity.OperationalNeed.ID(childComplexity), true

	case "OperationalNeed.key":
		if e.complexity.OperationalNeed.Key == nil {
			break
		}

		return e.complexity.OperationalNeed.Key(childComplexity), true

	case "OperationalNeed.modelPlanID":
		if e.complexity.OperationalNeed.ModelPlanID == nil {
			break
		}

		return e.complexity.OperationalNeed.ModelPlanID(childComplexity), true

	case "OperationalNeed.modifiedBy":
		if e.complexity.OperationalNeed.ModifiedBy == nil {
			break
		}

		return e.complexity.OperationalNeed.ModifiedBy(childComplexity), true

	case "OperationalNeed.modifiedByUserAccount":
		if e.complexity.OperationalNeed.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.OperationalNeed.ModifiedByUserAccount(childComplexity), true

	case "OperationalNeed.modifiedDts":
		if e.complexity.OperationalNeed.ModifiedDts == nil {
			break
		}

		return e.complexity.OperationalNeed.ModifiedDts(childComplexity), true

	case "OperationalNeed.name":
		if e.complexity.OperationalNeed.Name == nil {
			break
		}

		return e.complexity.OperationalNeed.Name(childComplexity), true

	case "OperationalNeed.nameOther":
		if e.complexity.OperationalNeed.NameOther == nil {
			break
		}

		return e.complexity.OperationalNeed.NameOther(childComplexity), true

	case "OperationalNeed.needed":
		if e.complexity.OperationalNeed.Needed == nil {
			break
		}

		return e.complexity.OperationalNeed.Needed(childComplexity), true

	case "OperationalNeed.section":
		if e.complexity.OperationalNeed.Section == nil {
			break
		}

		return e.complexity.OperationalNeed.Section(childComplexity), true

	case "OperationalNeed.solutions":
		if e.complexity.OperationalNeed.Solutions == nil {
			break
		}

		args, err := ec.field_OperationalNeed_solutions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.OperationalNeed.Solutions(childComplexity, args["includeNotNeeded"].(bool)), true

	case "OperationalSolution.createdBy":
		if e.complexity.OperationalSolution.CreatedBy == nil {
			break
		}

		return e.complexity.OperationalSolution.CreatedBy(childComplexity), true

	case "OperationalSolution.createdByUserAccount":
		if e.complexity.OperationalSolution.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.OperationalSolution.CreatedByUserAccount(childComplexity), true

	case "OperationalSolution.createdDts":
		if e.complexity.OperationalSolution.CreatedDts == nil {
			break
		}

		return e.complexity.OperationalSolution.CreatedDts(childComplexity), true

	case "OperationalSolution.documents":
		if e.complexity.OperationalSolution.Documents == nil {
			break
		}

		return e.complexity.OperationalSolution.Documents(childComplexity), true

	case "OperationalSolution.id":
		if e.complexity.OperationalSolution.ID == nil {
			break
		}

		return e.complexity.OperationalSolution.ID(childComplexity), true

	case "OperationalSolution.isCommonSolution":
		if e.complexity.OperationalSolution.IsCommonSolution == nil {
			break
		}

		return e.complexity.OperationalSolution.IsCommonSolution(childComplexity), true

	case "OperationalSolution.isOther":
		if e.complexity.OperationalSolution.IsOther == nil {
			break
		}

		return e.complexity.OperationalSolution.IsOther(childComplexity), true

	case "OperationalSolution.key":
		if e.complexity.OperationalSolution.Key == nil {
			break
		}

		return e.complexity.OperationalSolution.Key(childComplexity), true

	case "OperationalSolution.modifiedBy":
		if e.complexity.OperationalSolution.ModifiedBy == nil {
			break
		}

		return e.complexity.OperationalSolution.ModifiedBy(childComplexity), true

	case "OperationalSolution.modifiedByUserAccount":
		if e.complexity.OperationalSolution.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.OperationalSolution.ModifiedByUserAccount(childComplexity), true

	case "OperationalSolution.modifiedDts":
		if e.complexity.OperationalSolution.ModifiedDts == nil {
			break
		}

		return e.complexity.OperationalSolution.ModifiedDts(childComplexity), true

	case "OperationalSolution.mustFinishDts":
		if e.complexity.OperationalSolution.MustFinishDts == nil {
			break
		}

		return e.complexity.OperationalSolution.MustFinishDts(childComplexity), true

	case "OperationalSolution.mustStartDts":
		if e.complexity.OperationalSolution.MustStartDts == nil {
			break
		}

		return e.complexity.OperationalSolution.MustStartDts(childComplexity), true

	case "OperationalSolution.name":
		if e.complexity.OperationalSolution.Name == nil {
			break
		}

		return e.complexity.OperationalSolution.Name(childComplexity), true

	case "OperationalSolution.nameOther":
		if e.complexity.OperationalSolution.NameOther == nil {
			break
		}

		return e.complexity.OperationalSolution.NameOther(childComplexity), true

	case "OperationalSolution.needed":
		if e.complexity.OperationalSolution.Needed == nil {
			break
		}

		return e.complexity.OperationalSolution.Needed(childComplexity), true

	case "OperationalSolution.operationalNeedID":
		if e.complexity.OperationalSolution.OperationalNeedID == nil {
			break
		}

		return e.complexity.OperationalSolution.OperationalNeedID(childComplexity), true

	case "OperationalSolution.operationalSolutionSubtasks":
		if e.complexity.OperationalSolution.OperationalSolutionSubtasks == nil {
			break
		}

		return e.complexity.OperationalSolution.OperationalSolutionSubtasks(childComplexity), true

	case "OperationalSolution.otherHeader":
		if e.complexity.OperationalSolution.OtherHeader == nil {
			break
		}

		return e.complexity.OperationalSolution.OtherHeader(childComplexity), true

	case "OperationalSolution.pocEmail":
		if e.complexity.OperationalSolution.PocEmail == nil {
			break
		}

		return e.complexity.OperationalSolution.PocEmail(childComplexity), true

	case "OperationalSolution.pocName":
		if e.complexity.OperationalSolution.PocName == nil {
			break
		}

		return e.complexity.OperationalSolution.PocName(childComplexity), true

	case "OperationalSolution.solutionType":
		if e.complexity.OperationalSolution.SolutionType == nil {
			break
		}

		return e.complexity.OperationalSolution.SolutionType(childComplexity), true

	case "OperationalSolution.status":
		if e.complexity.OperationalSolution.Status == nil {
			break
		}

		return e.complexity.OperationalSolution.Status(childComplexity), true

	case "OperationalSolutionSubtask.createdBy":
		if e.complexity.OperationalSolutionSubtask.CreatedBy == nil {
			break
		}

		return e.complexity.OperationalSolutionSubtask.CreatedBy(childComplexity), true

	case "OperationalSolutionSubtask.createdByUserAccount":
		if e.complexity.OperationalSolutionSubtask.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.OperationalSolutionSubtask.CreatedByUserAccount(childComplexity), true

	case "OperationalSolutionSubtask.createdDts":
		if e.complexity.OperationalSolutionSubtask.CreatedDts == nil {
			break
		}

		return e.complexity.OperationalSolutionSubtask.CreatedDts(childComplexity), true

	case "OperationalSolutionSubtask.id":
		if e.complexity.OperationalSolutionSubtask.ID == nil {
			break
		}

		return e.complexity.OperationalSolutionSubtask.ID(childComplexity), true

	case "OperationalSolutionSubtask.modifiedBy":
		if e.complexity.OperationalSolutionSubtask.ModifiedBy == nil {
			break
		}

		return e.complexity.OperationalSolutionSubtask.ModifiedBy(childComplexity), true

	case "OperationalSolutionSubtask.modifiedByUserAccount":
		if e.complexity.OperationalSolutionSubtask.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.OperationalSolutionSubtask.ModifiedByUserAccount(childComplexity), true

	case "OperationalSolutionSubtask.modifiedDts":
		if e.complexity.OperationalSolutionSubtask.ModifiedDts == nil {
			break
		}

		return e.complexity.OperationalSolutionSubtask.ModifiedDts(childComplexity), true

	case "OperationalSolutionSubtask.name":
		if e.complexity.OperationalSolutionSubtask.Name == nil {
			break
		}

		return e.complexity.OperationalSolutionSubtask.Name(childComplexity), true

	case "OperationalSolutionSubtask.solutionID":
		if e.complexity.OperationalSolutionSubtask.SolutionID == nil {
			break
		}

		return e.complexity.OperationalSolutionSubtask.SolutionID(childComplexity), true

	case "OperationalSolutionSubtask.status":
		if e.complexity.OperationalSolutionSubtask.Status == nil {
			break
		}

		return e.complexity.OperationalSolutionSubtask.Status(childComplexity), true

	case "PlanBasics.announced":
		if e.complexity.PlanBasics.Announced == nil {
			break
		}

		return e.complexity.PlanBasics.Announced(childComplexity), true

	case "PlanBasics.applicationsEnd":
		if e.complexity.PlanBasics.ApplicationsEnd == nil {
			break
		}

		return e.complexity.PlanBasics.ApplicationsEnd(childComplexity), true

	case "PlanBasics.applicationsStart":
		if e.complexity.PlanBasics.ApplicationsStart == nil {
			break
		}

		return e.complexity.PlanBasics.ApplicationsStart(childComplexity), true

	case "PlanBasics.cmsOther":
		if e.complexity.PlanBasics.CMSOther == nil {
			break
		}

		return e.complexity.PlanBasics.CMSOther(childComplexity), true

	case "PlanBasics.clearanceEnds":
		if e.complexity.PlanBasics.ClearanceEnds == nil {
			break
		}

		return e.complexity.PlanBasics.ClearanceEnds(childComplexity), true

	case "PlanBasics.clearanceStarts":
		if e.complexity.PlanBasics.ClearanceStarts == nil {
			break
		}

		return e.complexity.PlanBasics.ClearanceStarts(childComplexity), true

	case "PlanBasics.cmmiGroups":
		if e.complexity.PlanBasics.CmmiGroups == nil {
			break
		}

		return e.complexity.PlanBasics.CmmiGroups(childComplexity), true

	case "PlanBasics.cmsCenters":
		if e.complexity.PlanBasics.CmsCenters == nil {
			break
		}

		return e.complexity.PlanBasics.CmsCenters(childComplexity), true

	case "PlanBasics.completeICIP":
		if e.complexity.PlanBasics.CompleteICIP == nil {
			break
		}

		return e.complexity.PlanBasics.CompleteICIP(childComplexity), true

	case "PlanBasics.createdBy":
		if e.complexity.PlanBasics.CreatedBy == nil {
			break
		}

		return e.complexity.PlanBasics.CreatedBy(childComplexity), true

	case "PlanBasics.createdByUserAccount":
		if e.complexity.PlanBasics.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.PlanBasics.CreatedByUserAccount(childComplexity), true

	case "PlanBasics.createdDts":
		if e.complexity.PlanBasics.CreatedDts == nil {
			break
		}

		return e.complexity.PlanBasics.CreatedDts(childComplexity), true

	case "PlanBasics.goal":
		if e.complexity.PlanBasics.Goal == nil {
			break
		}

		return e.complexity.PlanBasics.Goal(childComplexity), true

	case "PlanBasics.highLevelNote":
		if e.complexity.PlanBasics.HighLevelNote == nil {
			break
		}

		return e.complexity.PlanBasics.HighLevelNote(childComplexity), true

	case "PlanBasics.id":
		if e.complexity.PlanBasics.ID == nil {
			break
		}

		return e.complexity.PlanBasics.ID(childComplexity), true

	case "PlanBasics.modelCategory":
		if e.complexity.PlanBasics.ModelCategory == nil {
			break
		}

		return e.complexity.PlanBasics.ModelCategory(childComplexity), true

	case "PlanBasics.modelPlanID":
		if e.complexity.PlanBasics.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanBasics.ModelPlanID(childComplexity), true

	case "PlanBasics.modelType":
		if e.complexity.PlanBasics.ModelType == nil {
			break
		}

		return e.complexity.PlanBasics.ModelType(childComplexity), true

	case "PlanBasics.modifiedBy":
		if e.complexity.PlanBasics.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanBasics.ModifiedBy(childComplexity), true

	case "PlanBasics.modifiedByUserAccount":
		if e.complexity.PlanBasics.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.PlanBasics.ModifiedByUserAccount(childComplexity), true

	case "PlanBasics.modifiedDts":
		if e.complexity.PlanBasics.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanBasics.ModifiedDts(childComplexity), true

	case "PlanBasics.note":
		if e.complexity.PlanBasics.Note == nil {
			break
		}

		return e.complexity.PlanBasics.Note(childComplexity), true

	case "PlanBasics.performancePeriodEnds":
		if e.complexity.PlanBasics.PerformancePeriodEnds == nil {
			break
		}

		return e.complexity.PlanBasics.PerformancePeriodEnds(childComplexity), true

	case "PlanBasics.performancePeriodStarts":
		if e.complexity.PlanBasics.PerformancePeriodStarts == nil {
			break
		}

		return e.complexity.PlanBasics.PerformancePeriodStarts(childComplexity), true

	case "PlanBasics.phasedIn":
		if e.complexity.PlanBasics.PhasedIn == nil {
			break
		}

		return e.complexity.PlanBasics.PhasedIn(childComplexity), true

	case "PlanBasics.phasedInNote":
		if e.complexity.PlanBasics.PhasedInNote == nil {
			break
		}

		return e.complexity.PlanBasics.PhasedInNote(childComplexity), true

	case "PlanBasics.problem":
		if e.complexity.PlanBasics.Problem == nil {
			break
		}

		return e.complexity.PlanBasics.Problem(childComplexity), true

	case "PlanBasics.readyForClearanceBy":
		if e.complexity.PlanBasics.ReadyForClearanceBy == nil {
			break
		}

		return e.complexity.PlanBasics.ReadyForClearanceBy(childComplexity), true

	case "PlanBasics.readyForClearanceByUserAccount":
		if e.complexity.PlanBasics.ReadyForClearanceByUserAccount == nil {
			break
		}

		return e.complexity.PlanBasics.ReadyForClearanceByUserAccount(childComplexity), true

	case "PlanBasics.readyForClearanceDts":
		if e.complexity.PlanBasics.ReadyForClearanceDts == nil {
			break
		}

		return e.complexity.PlanBasics.ReadyForClearanceDts(childComplexity), true

	case "PlanBasics.readyForReviewBy":
		if e.complexity.PlanBasics.ReadyForReviewBy == nil {
			break
		}

		return e.complexity.PlanBasics.ReadyForReviewBy(childComplexity), true

	case "PlanBasics.readyForReviewByUserAccount":
		if e.complexity.PlanBasics.ReadyForReviewByUserAccount == nil {
			break
		}

		return e.complexity.PlanBasics.ReadyForReviewByUserAccount(childComplexity), true

	case "PlanBasics.readyForReviewDts":
		if e.complexity.PlanBasics.ReadyForReviewDts == nil {
			break
		}

		return e.complexity.PlanBasics.ReadyForReviewDts(childComplexity), true

	case "PlanBasics.status":
		if e.complexity.PlanBasics.Status == nil {
			break
		}

		return e.complexity.PlanBasics.Status(childComplexity), true

	case "PlanBasics.testInterventions":
		if e.complexity.PlanBasics.TestInterventions == nil {
			break
		}

		return e.complexity.PlanBasics.TestInterventions(childComplexity), true

	case "PlanBasics.wrapUpEnds":
		if e.complexity.PlanBasics.WrapUpEnds == nil {
			break
		}

		return e.complexity.PlanBasics.WrapUpEnds(childComplexity), true

	case "PlanBeneficiaries.beneficiaries":
		if e.complexity.PlanBeneficiaries.Beneficiaries == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.Beneficiaries(childComplexity), true

	case "PlanBeneficiaries.beneficiariesNote":
		if e.complexity.PlanBeneficiaries.BeneficiariesNote == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiariesNote(childComplexity), true

	case "PlanBeneficiaries.beneficiariesOther":
		if e.complexity.PlanBeneficiaries.BeneficiariesOther == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiariesOther(childComplexity), true

	case "PlanBeneficiaries.beneficiaryOverlap":
		if e.complexity.PlanBeneficiaries.BeneficiaryOverlap == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiaryOverlap(childComplexity), true

	case "PlanBeneficiaries.beneficiaryOverlapNote":
		if e.complexity.PlanBeneficiaries.BeneficiaryOverlapNote == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiaryOverlapNote(childComplexity), true

	case "PlanBeneficiaries.beneficiarySelectionFrequency":
		if e.complexity.PlanBeneficiaries.BeneficiarySelectionFrequency == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiarySelectionFrequency(childComplexity), true

	case "PlanBeneficiaries.beneficiarySelectionFrequencyNote":
		if e.complexity.PlanBeneficiaries.BeneficiarySelectionFrequencyNote == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiarySelectionFrequencyNote(childComplexity), true

	case "PlanBeneficiaries.beneficiarySelectionFrequencyOther":
		if e.complexity.PlanBeneficiaries.BeneficiarySelectionFrequencyOther == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiarySelectionFrequencyOther(childComplexity), true

	case "PlanBeneficiaries.beneficiarySelectionMethod":
		if e.complexity.PlanBeneficiaries.BeneficiarySelectionMethod == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiarySelectionMethod(childComplexity), true

	case "PlanBeneficiaries.beneficiarySelectionNote":
		if e.complexity.PlanBeneficiaries.BeneficiarySelectionNote == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiarySelectionNote(childComplexity), true

	case "PlanBeneficiaries.beneficiarySelectionOther":
		if e.complexity.PlanBeneficiaries.BeneficiarySelectionOther == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiarySelectionOther(childComplexity), true

	case "PlanBeneficiaries.confidenceNote":
		if e.complexity.PlanBeneficiaries.ConfidenceNote == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ConfidenceNote(childComplexity), true

	case "PlanBeneficiaries.createdBy":
		if e.complexity.PlanBeneficiaries.CreatedBy == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.CreatedBy(childComplexity), true

	case "PlanBeneficiaries.createdByUserAccount":
		if e.complexity.PlanBeneficiaries.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.CreatedByUserAccount(childComplexity), true

	case "PlanBeneficiaries.createdDts":
		if e.complexity.PlanBeneficiaries.CreatedDts == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.CreatedDts(childComplexity), true

	case "PlanBeneficiaries.estimateConfidence":
		if e.complexity.PlanBeneficiaries.EstimateConfidence == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.EstimateConfidence(childComplexity), true

	case "PlanBeneficiaries.excludeCertainCharacteristics":
		if e.complexity.PlanBeneficiaries.ExcludeCertainCharacteristics == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ExcludeCertainCharacteristics(childComplexity), true

	case "PlanBeneficiaries.excludeCertainCharacteristicsCriteria":
		if e.complexity.PlanBeneficiaries.ExcludeCertainCharacteristicsCriteria == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ExcludeCertainCharacteristicsCriteria(childComplexity), true

	case "PlanBeneficiaries.excludeCertainCharacteristicsNote":
		if e.complexity.PlanBeneficiaries.ExcludeCertainCharacteristicsNote == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ExcludeCertainCharacteristicsNote(childComplexity), true

	case "PlanBeneficiaries.id":
		if e.complexity.PlanBeneficiaries.ID == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ID(childComplexity), true

	case "PlanBeneficiaries.modelPlanID":
		if e.complexity.PlanBeneficiaries.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ModelPlanID(childComplexity), true

	case "PlanBeneficiaries.modifiedBy":
		if e.complexity.PlanBeneficiaries.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ModifiedBy(childComplexity), true

	case "PlanBeneficiaries.modifiedByUserAccount":
		if e.complexity.PlanBeneficiaries.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ModifiedByUserAccount(childComplexity), true

	case "PlanBeneficiaries.modifiedDts":
		if e.complexity.PlanBeneficiaries.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ModifiedDts(childComplexity), true

	case "PlanBeneficiaries.numberPeopleImpacted":
		if e.complexity.PlanBeneficiaries.NumberPeopleImpacted == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.NumberPeopleImpacted(childComplexity), true

	case "PlanBeneficiaries.precedenceRules":
		if e.complexity.PlanBeneficiaries.PrecedenceRules == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.PrecedenceRules(childComplexity), true

	case "PlanBeneficiaries.readyForClearanceBy":
		if e.complexity.PlanBeneficiaries.ReadyForClearanceBy == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ReadyForClearanceBy(childComplexity), true

	case "PlanBeneficiaries.readyForClearanceByUserAccount":
		if e.complexity.PlanBeneficiaries.ReadyForClearanceByUserAccount == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ReadyForClearanceByUserAccount(childComplexity), true

	case "PlanBeneficiaries.readyForClearanceDts":
		if e.complexity.PlanBeneficiaries.ReadyForClearanceDts == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ReadyForClearanceDts(childComplexity), true

	case "PlanBeneficiaries.readyForReviewBy":
		if e.complexity.PlanBeneficiaries.ReadyForReviewBy == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ReadyForReviewBy(childComplexity), true

	case "PlanBeneficiaries.readyForReviewByUserAccount":
		if e.complexity.PlanBeneficiaries.ReadyForReviewByUserAccount == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ReadyForReviewByUserAccount(childComplexity), true

	case "PlanBeneficiaries.readyForReviewDts":
		if e.complexity.PlanBeneficiaries.ReadyForReviewDts == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ReadyForReviewDts(childComplexity), true

	case "PlanBeneficiaries.status":
		if e.complexity.PlanBeneficiaries.Status == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.Status(childComplexity), true

	case "PlanBeneficiaries.treatDualElligibleDifferent":
		if e.complexity.PlanBeneficiaries.TreatDualElligibleDifferent == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.TreatDualElligibleDifferent(childComplexity), true

	case "PlanBeneficiaries.treatDualElligibleDifferentHow":
		if e.complexity.PlanBeneficiaries.TreatDualElligibleDifferentHow == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.TreatDualElligibleDifferentHow(childComplexity), true

	case "PlanBeneficiaries.treatDualElligibleDifferentNote":
		if e.complexity.PlanBeneficiaries.TreatDualElligibleDifferentNote == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.TreatDualElligibleDifferentNote(childComplexity), true

	case "PlanCollaborator.createdBy":
		if e.complexity.PlanCollaborator.CreatedBy == nil {
			break
		}

		return e.complexity.PlanCollaborator.CreatedBy(childComplexity), true

	case "PlanCollaborator.createdByUserAccount":
		if e.complexity.PlanCollaborator.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.PlanCollaborator.CreatedByUserAccount(childComplexity), true

	case "PlanCollaborator.createdDts":
		if e.complexity.PlanCollaborator.CreatedDts == nil {
			break
		}

		return e.complexity.PlanCollaborator.CreatedDts(childComplexity), true

	case "PlanCollaborator.id":
		if e.complexity.PlanCollaborator.ID == nil {
			break
		}

		return e.complexity.PlanCollaborator.ID(childComplexity), true

	case "PlanCollaborator.modelPlanID":
		if e.complexity.PlanCollaborator.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanCollaborator.ModelPlanID(childComplexity), true

	case "PlanCollaborator.modifiedBy":
		if e.complexity.PlanCollaborator.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanCollaborator.ModifiedBy(childComplexity), true

	case "PlanCollaborator.modifiedByUserAccount":
		if e.complexity.PlanCollaborator.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.PlanCollaborator.ModifiedByUserAccount(childComplexity), true

	case "PlanCollaborator.modifiedDts":
		if e.complexity.PlanCollaborator.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanCollaborator.ModifiedDts(childComplexity), true

	case "PlanCollaborator.teamRole":
		if e.complexity.PlanCollaborator.TeamRole == nil {
			break
		}

		return e.complexity.PlanCollaborator.TeamRole(childComplexity), true

	case "PlanCollaborator.userAccount":
		if e.complexity.PlanCollaborator.UserAccount == nil {
			break
		}

		return e.complexity.PlanCollaborator.UserAccount(childComplexity), true

	case "PlanCollaborator.userID":
		if e.complexity.PlanCollaborator.UserID == nil {
			break
		}

		return e.complexity.PlanCollaborator.UserID(childComplexity), true

	case "PlanCrTdl.createdBy":
		if e.complexity.PlanCrTdl.CreatedBy == nil {
			break
		}

		return e.complexity.PlanCrTdl.CreatedBy(childComplexity), true

	case "PlanCrTdl.createdByUserAccount":
		if e.complexity.PlanCrTdl.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.PlanCrTdl.CreatedByUserAccount(childComplexity), true

	case "PlanCrTdl.createdDts":
		if e.complexity.PlanCrTdl.CreatedDts == nil {
			break
		}

		return e.complexity.PlanCrTdl.CreatedDts(childComplexity), true

	case "PlanCrTdl.dateInitiated":
		if e.complexity.PlanCrTdl.DateInitiated == nil {
			break
		}

		return e.complexity.PlanCrTdl.DateInitiated(childComplexity), true

	case "PlanCrTdl.id":
		if e.complexity.PlanCrTdl.ID == nil {
			break
		}

		return e.complexity.PlanCrTdl.ID(childComplexity), true

	case "PlanCrTdl.idNumber":
		if e.complexity.PlanCrTdl.IDNumber == nil {
			break
		}

		return e.complexity.PlanCrTdl.IDNumber(childComplexity), true

	case "PlanCrTdl.modelPlanID":
		if e.complexity.PlanCrTdl.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanCrTdl.ModelPlanID(childComplexity), true

	case "PlanCrTdl.modifiedBy":
		if e.complexity.PlanCrTdl.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanCrTdl.ModifiedBy(childComplexity), true

	case "PlanCrTdl.modifiedByUserAccount":
		if e.complexity.PlanCrTdl.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.PlanCrTdl.ModifiedByUserAccount(childComplexity), true

	case "PlanCrTdl.modifiedDts":
		if e.complexity.PlanCrTdl.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanCrTdl.ModifiedDts(childComplexity), true

	case "PlanCrTdl.note":
		if e.complexity.PlanCrTdl.Note == nil {
			break
		}

		return e.complexity.PlanCrTdl.Note(childComplexity), true

	case "PlanCrTdl.title":
		if e.complexity.PlanCrTdl.Title == nil {
			break
		}

		return e.complexity.PlanCrTdl.Title(childComplexity), true

	case "PlanDiscussion.content":
		if e.complexity.PlanDiscussion.Content == nil {
			break
		}

		return e.complexity.PlanDiscussion.Content(childComplexity), true

	case "PlanDiscussion.createdBy":
		if e.complexity.PlanDiscussion.CreatedBy == nil {
			break
		}

		return e.complexity.PlanDiscussion.CreatedBy(childComplexity), true

	case "PlanDiscussion.createdByUserAccount":
		if e.complexity.PlanDiscussion.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.PlanDiscussion.CreatedByUserAccount(childComplexity), true

	case "PlanDiscussion.createdDts":
		if e.complexity.PlanDiscussion.CreatedDts == nil {
			break
		}

		return e.complexity.PlanDiscussion.CreatedDts(childComplexity), true

	case "PlanDiscussion.id":
		if e.complexity.PlanDiscussion.ID == nil {
			break
		}

		return e.complexity.PlanDiscussion.ID(childComplexity), true

	case "PlanDiscussion.isAssessment":
		if e.complexity.PlanDiscussion.IsAssessment == nil {
			break
		}

		return e.complexity.PlanDiscussion.IsAssessment(childComplexity), true

	case "PlanDiscussion.modelPlanID":
		if e.complexity.PlanDiscussion.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanDiscussion.ModelPlanID(childComplexity), true

	case "PlanDiscussion.modifiedBy":
		if e.complexity.PlanDiscussion.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanDiscussion.ModifiedBy(childComplexity), true

	case "PlanDiscussion.modifiedByUserAccount":
		if e.complexity.PlanDiscussion.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.PlanDiscussion.ModifiedByUserAccount(childComplexity), true

	case "PlanDiscussion.modifiedDts":
		if e.complexity.PlanDiscussion.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanDiscussion.ModifiedDts(childComplexity), true

	case "PlanDiscussion.replies":
		if e.complexity.PlanDiscussion.Replies == nil {
			break
		}

		return e.complexity.PlanDiscussion.Replies(childComplexity), true

	case "PlanDiscussion.status":
		if e.complexity.PlanDiscussion.Status == nil {
			break
		}

		return e.complexity.PlanDiscussion.Status(childComplexity), true

	case "PlanDocument.bucket":
		if e.complexity.PlanDocument.Bucket == nil {
			break
		}

		return e.complexity.PlanDocument.Bucket(childComplexity), true

	case "PlanDocument.createdBy":
		if e.complexity.PlanDocument.CreatedBy == nil {
			break
		}

		return e.complexity.PlanDocument.CreatedBy(childComplexity), true

	case "PlanDocument.createdByUserAccount":
		if e.complexity.PlanDocument.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.PlanDocument.CreatedByUserAccount(childComplexity), true

	case "PlanDocument.createdDts":
		if e.complexity.PlanDocument.CreatedDts == nil {
			break
		}

		return e.complexity.PlanDocument.CreatedDts(childComplexity), true

	case "PlanDocument.deletedAt":
		if e.complexity.PlanDocument.DeletedAt == nil {
			break
		}

		return e.complexity.PlanDocument.DeletedAt(childComplexity), true

	case "PlanDocument.documentType":
		if e.complexity.PlanDocument.DocumentType == nil {
			break
		}

		return e.complexity.PlanDocument.DocumentType(childComplexity), true

	case "PlanDocument.downloadUrl":
		if e.complexity.PlanDocument.DownloadURL == nil {
			break
		}

		return e.complexity.PlanDocument.DownloadURL(childComplexity), true

	case "PlanDocument.fileKey":
		if e.complexity.PlanDocument.FileKey == nil {
			break
		}

		return e.complexity.PlanDocument.FileKey(childComplexity), true

	case "PlanDocument.fileName":
		if e.complexity.PlanDocument.FileName == nil {
			break
		}

		return e.complexity.PlanDocument.FileName(childComplexity), true

	case "PlanDocument.fileSize":
		if e.complexity.PlanDocument.FileSize == nil {
			break
		}

		return e.complexity.PlanDocument.FileSize(childComplexity), true

	case "PlanDocument.fileType":
		if e.complexity.PlanDocument.FileType == nil {
			break
		}

		return e.complexity.PlanDocument.FileType(childComplexity), true

	case "PlanDocument.id":
		if e.complexity.PlanDocument.ID == nil {
			break
		}

		return e.complexity.PlanDocument.ID(childComplexity), true

	case "PlanDocument.modelPlanID":
		if e.complexity.PlanDocument.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanDocument.ModelPlanID(childComplexity), true

	case "PlanDocument.modifiedBy":
		if e.complexity.PlanDocument.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanDocument.ModifiedBy(childComplexity), true

	case "PlanDocument.modifiedByUserAccount":
		if e.complexity.PlanDocument.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.PlanDocument.ModifiedByUserAccount(childComplexity), true

	case "PlanDocument.modifiedDts":
		if e.complexity.PlanDocument.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanDocument.ModifiedDts(childComplexity), true

	case "PlanDocument.numLinkedSolutions":
		if e.complexity.PlanDocument.NumLinkedSolutions == nil {
			break
		}

		return e.complexity.PlanDocument.NumLinkedSolutions(childComplexity), true

	case "PlanDocument.optionalNotes":
		if e.complexity.PlanDocument.OptionalNotes == nil {
			break
		}

		return e.complexity.PlanDocument.OptionalNotes(childComplexity), true

	case "PlanDocument.otherType":
		if e.complexity.PlanDocument.OtherType == nil {
			break
		}

		return e.complexity.PlanDocument.OtherType(childComplexity), true

	case "PlanDocument.restricted":
		if e.complexity.PlanDocument.Restricted == nil {
			break
		}

		return e.complexity.PlanDocument.Restricted(childComplexity), true

	case "PlanDocument.virusClean":
		if e.complexity.PlanDocument.VirusClean == nil {
			break
		}

		return e.complexity.PlanDocument.VirusClean(childComplexity), true

	case "PlanDocument.virusScanned":
		if e.complexity.PlanDocument.VirusScanned == nil {
			break
		}

		return e.complexity.PlanDocument.VirusScanned(childComplexity), true

	case "PlanDocumentSolutionLink.createdBy":
		if e.complexity.PlanDocumentSolutionLink.CreatedBy == nil {
			break
		}

		return e.complexity.PlanDocumentSolutionLink.CreatedBy(childComplexity), true

	case "PlanDocumentSolutionLink.createdByUserAccount":
		if e.complexity.PlanDocumentSolutionLink.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.PlanDocumentSolutionLink.CreatedByUserAccount(childComplexity), true

	case "PlanDocumentSolutionLink.createdDts":
		if e.complexity.PlanDocumentSolutionLink.CreatedDts == nil {
			break
		}

		return e.complexity.PlanDocumentSolutionLink.CreatedDts(childComplexity), true

	case "PlanDocumentSolutionLink.documentID":
		if e.complexity.PlanDocumentSolutionLink.DocumentID == nil {
			break
		}

		return e.complexity.PlanDocumentSolutionLink.DocumentID(childComplexity), true

	case "PlanDocumentSolutionLink.id":
		if e.complexity.PlanDocumentSolutionLink.ID == nil {
			break
		}

		return e.complexity.PlanDocumentSolutionLink.ID(childComplexity), true

	case "PlanDocumentSolutionLink.modifiedBy":
		if e.complexity.PlanDocumentSolutionLink.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanDocumentSolutionLink.ModifiedBy(childComplexity), true

	case "PlanDocumentSolutionLink.modifiedByUserAccount":
		if e.complexity.PlanDocumentSolutionLink.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.PlanDocumentSolutionLink.ModifiedByUserAccount(childComplexity), true

	case "PlanDocumentSolutionLink.modifiedDts":
		if e.complexity.PlanDocumentSolutionLink.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanDocumentSolutionLink.ModifiedDts(childComplexity), true

	case "PlanDocumentSolutionLink.solutionID":
		if e.complexity.PlanDocumentSolutionLink.SolutionID == nil {
			break
		}

		return e.complexity.PlanDocumentSolutionLink.SolutionID(childComplexity), true

	case "PlanFavorite.createdBy":
		if e.complexity.PlanFavorite.CreatedBy == nil {
			break
		}

		return e.complexity.PlanFavorite.CreatedBy(childComplexity), true

	case "PlanFavorite.createdByUserAccount":
		if e.complexity.PlanFavorite.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.PlanFavorite.CreatedByUserAccount(childComplexity), true

	case "PlanFavorite.createdDts":
		if e.complexity.PlanFavorite.CreatedDts == nil {
			break
		}

		return e.complexity.PlanFavorite.CreatedDts(childComplexity), true

	case "PlanFavorite.id":
		if e.complexity.PlanFavorite.ID == nil {
			break
		}

		return e.complexity.PlanFavorite.ID(childComplexity), true

	case "PlanFavorite.modelPlanID":
		if e.complexity.PlanFavorite.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanFavorite.ModelPlanID(childComplexity), true

	case "PlanFavorite.modifiedBy":
		if e.complexity.PlanFavorite.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanFavorite.ModifiedBy(childComplexity), true

	case "PlanFavorite.modifiedByUserAccount":
		if e.complexity.PlanFavorite.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.PlanFavorite.ModifiedByUserAccount(childComplexity), true

	case "PlanFavorite.modifiedDts":
		if e.complexity.PlanFavorite.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanFavorite.ModifiedDts(childComplexity), true

	case "PlanFavorite.userAccount":
		if e.complexity.PlanFavorite.UserAccount == nil {
			break
		}

		return e.complexity.PlanFavorite.UserAccount(childComplexity), true

	case "PlanFavorite.userID":
		if e.complexity.PlanFavorite.UserID == nil {
			break
		}

		return e.complexity.PlanFavorite.UserID(childComplexity), true

	case "PlanGeneralCharacteristics.additionalServicesInvolved":
		if e.complexity.PlanGeneralCharacteristics.AdditionalServicesInvolved == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AdditionalServicesInvolved(childComplexity), true

	case "PlanGeneralCharacteristics.additionalServicesInvolvedDescription":
		if e.complexity.PlanGeneralCharacteristics.AdditionalServicesInvolvedDescription == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AdditionalServicesInvolvedDescription(childComplexity), true

	case "PlanGeneralCharacteristics.additionalServicesInvolvedNote":
		if e.complexity.PlanGeneralCharacteristics.AdditionalServicesInvolvedNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AdditionalServicesInvolvedNote(childComplexity), true

	case "PlanGeneralCharacteristics.agreementTypes":
		if e.complexity.PlanGeneralCharacteristics.AgreementTypes == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AgreementTypes(childComplexity), true

	case "PlanGeneralCharacteristics.agreementTypesOther":
		if e.complexity.PlanGeneralCharacteristics.AgreementTypesOther == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AgreementTypesOther(childComplexity), true

	case "PlanGeneralCharacteristics.alternativePaymentModelNote":
		if e.complexity.PlanGeneralCharacteristics.AlternativePaymentModelNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AlternativePaymentModelNote(childComplexity), true

	case "PlanGeneralCharacteristics.alternativePaymentModelTypes":
		if e.complexity.PlanGeneralCharacteristics.AlternativePaymentModelTypes == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AlternativePaymentModelTypes(childComplexity), true

	case "PlanGeneralCharacteristics.authorityAllowances":
		if e.complexity.PlanGeneralCharacteristics.AuthorityAllowances == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AuthorityAllowances(childComplexity), true

	case "PlanGeneralCharacteristics.authorityAllowancesNote":
		if e.complexity.PlanGeneralCharacteristics.AuthorityAllowancesNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AuthorityAllowancesNote(childComplexity), true

	case "PlanGeneralCharacteristics.authorityAllowancesOther":
		if e.complexity.PlanGeneralCharacteristics.AuthorityAllowancesOther == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AuthorityAllowancesOther(childComplexity), true

	case "PlanGeneralCharacteristics.careCoordinationInvolved":
		if e.complexity.PlanGeneralCharacteristics.CareCoordinationInvolved == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CareCoordinationInvolved(childComplexity), true

	case "PlanGeneralCharacteristics.careCoordinationInvolvedDescription":
		if e.complexity.PlanGeneralCharacteristics.CareCoordinationInvolvedDescription == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CareCoordinationInvolvedDescription(childComplexity), true

	case "PlanGeneralCharacteristics.careCoordinationInvolvedNote":
		if e.complexity.PlanGeneralCharacteristics.CareCoordinationInvolvedNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CareCoordinationInvolvedNote(childComplexity), true

	case "PlanGeneralCharacteristics.collectPlanBids":
		if e.complexity.PlanGeneralCharacteristics.CollectPlanBids == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CollectPlanBids(childComplexity), true

	case "PlanGeneralCharacteristics.collectPlanBidsNote":
		if e.complexity.PlanGeneralCharacteristics.CollectPlanBidsNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CollectPlanBidsNote(childComplexity), true

	case "PlanGeneralCharacteristics.communityPartnersInvolved":
		if e.complexity.PlanGeneralCharacteristics.CommunityPartnersInvolved == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CommunityPartnersInvolved(childComplexity), true

	case "PlanGeneralCharacteristics.communityPartnersInvolvedDescription":
		if e.complexity.PlanGeneralCharacteristics.CommunityPartnersInvolvedDescription == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CommunityPartnersInvolvedDescription(childComplexity), true

	case "PlanGeneralCharacteristics.communityPartnersInvolvedNote":
		if e.complexity.PlanGeneralCharacteristics.CommunityPartnersInvolvedNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CommunityPartnersInvolvedNote(childComplexity), true

	case "PlanGeneralCharacteristics.createdBy":
		if e.complexity.PlanGeneralCharacteristics.CreatedBy == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CreatedBy(childComplexity), true

	case "PlanGeneralCharacteristics.createdByUserAccount":
		if e.complexity.PlanGeneralCharacteristics.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CreatedByUserAccount(childComplexity), true

	case "PlanGeneralCharacteristics.createdDts":
		if e.complexity.PlanGeneralCharacteristics.CreatedDts == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CreatedDts(childComplexity), true

	case "PlanGeneralCharacteristics.existingModel":
		if e.complexity.PlanGeneralCharacteristics.ExistingModel == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ExistingModel(childComplexity), true

	case "PlanGeneralCharacteristics.geographiesTargeted":
		if e.complexity.PlanGeneralCharacteristics.GeographiesTargeted == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.GeographiesTargeted(childComplexity), true

	case "PlanGeneralCharacteristics.geographiesTargetedAppliedTo":
		if e.complexity.PlanGeneralCharacteristics.GeographiesTargetedAppliedTo == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.GeographiesTargetedAppliedTo(childComplexity), true

	case "PlanGeneralCharacteristics.geographiesTargetedAppliedToOther":
		if e.complexity.PlanGeneralCharacteristics.GeographiesTargetedAppliedToOther == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.GeographiesTargetedAppliedToOther(childComplexity), true

	case "PlanGeneralCharacteristics.geographiesTargetedNote":
		if e.complexity.PlanGeneralCharacteristics.GeographiesTargetedNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.GeographiesTargetedNote(childComplexity), true

	case "PlanGeneralCharacteristics.geographiesTargetedTypes":
		if e.complexity.PlanGeneralCharacteristics.GeographiesTargetedTypes == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.GeographiesTargetedTypes(childComplexity), true

	case "PlanGeneralCharacteristics.geographiesTargetedTypesOther":
		if e.complexity.PlanGeneralCharacteristics.GeographiesTargetedTypesOther == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.GeographiesTargetedTypesOther(childComplexity), true

	case "PlanGeneralCharacteristics.hasComponentsOrTracks":
		if e.complexity.PlanGeneralCharacteristics.HasComponentsOrTracks == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.HasComponentsOrTracks(childComplexity), true

	case "PlanGeneralCharacteristics.hasComponentsOrTracksDiffer":
		if e.complexity.PlanGeneralCharacteristics.HasComponentsOrTracksDiffer == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.HasComponentsOrTracksDiffer(childComplexity), true

	case "PlanGeneralCharacteristics.hasComponentsOrTracksNote":
		if e.complexity.PlanGeneralCharacteristics.HasComponentsOrTracksNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.HasComponentsOrTracksNote(childComplexity), true

	case "PlanGeneralCharacteristics.id":
		if e.complexity.PlanGeneralCharacteristics.ID == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ID(childComplexity), true

	case "PlanGeneralCharacteristics.isNewModel":
		if e.complexity.PlanGeneralCharacteristics.IsNewModel == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.IsNewModel(childComplexity), true

	case "PlanGeneralCharacteristics.keyCharacteristics":
		if e.complexity.PlanGeneralCharacteristics.KeyCharacteristics == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.KeyCharacteristics(childComplexity), true

	case "PlanGeneralCharacteristics.keyCharacteristicsNote":
		if e.complexity.PlanGeneralCharacteristics.KeyCharacteristicsNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.KeyCharacteristicsNote(childComplexity), true

	case "PlanGeneralCharacteristics.keyCharacteristicsOther":
		if e.complexity.PlanGeneralCharacteristics.KeyCharacteristicsOther == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.KeyCharacteristicsOther(childComplexity), true

	case "PlanGeneralCharacteristics.managePartCDEnrollment":
		if e.complexity.PlanGeneralCharacteristics.ManagePartCDEnrollment == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ManagePartCDEnrollment(childComplexity), true

	case "PlanGeneralCharacteristics.managePartCDEnrollmentNote":
		if e.complexity.PlanGeneralCharacteristics.ManagePartCDEnrollmentNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ManagePartCDEnrollmentNote(childComplexity), true

	case "PlanGeneralCharacteristics.modelPlanID":
		if e.complexity.PlanGeneralCharacteristics.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ModelPlanID(childComplexity), true

	case "PlanGeneralCharacteristics.modifiedBy":
		if e.complexity.PlanGeneralCharacteristics.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ModifiedBy(childComplexity), true

	case "PlanGeneralCharacteristics.modifiedByUserAccount":
		if e.complexity.PlanGeneralCharacteristics.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ModifiedByUserAccount(childComplexity), true

	case "PlanGeneralCharacteristics.modifiedDts":
		if e.complexity.PlanGeneralCharacteristics.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ModifiedDts(childComplexity), true

	case "PlanGeneralCharacteristics.multiplePatricipationAgreementsNeeded":
		if e.complexity.PlanGeneralCharacteristics.MultiplePatricipationAgreementsNeeded == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.MultiplePatricipationAgreementsNeeded(childComplexity), true

	case "PlanGeneralCharacteristics.multiplePatricipationAgreementsNeededNote":
		if e.complexity.PlanGeneralCharacteristics.MultiplePatricipationAgreementsNeededNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.MultiplePatricipationAgreementsNeededNote(childComplexity), true

	case "PlanGeneralCharacteristics.participationOptions":
		if e.complexity.PlanGeneralCharacteristics.ParticipationOptions == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ParticipationOptions(childComplexity), true

	case "PlanGeneralCharacteristics.participationOptionsNote":
		if e.complexity.PlanGeneralCharacteristics.ParticipationOptionsNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ParticipationOptionsNote(childComplexity), true

	case "PlanGeneralCharacteristics.planContractUpdated":
		if e.complexity.PlanGeneralCharacteristics.PlanContractUpdated == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.PlanContractUpdated(childComplexity), true

	case "PlanGeneralCharacteristics.planContractUpdatedNote":
		if e.complexity.PlanGeneralCharacteristics.PlanContractUpdatedNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.PlanContractUpdatedNote(childComplexity), true

	case "PlanGeneralCharacteristics.readyForClearanceBy":
		if e.complexity.PlanGeneralCharacteristics.ReadyForClearanceBy == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ReadyForClearanceBy(childComplexity), true

	case "PlanGeneralCharacteristics.readyForClearanceByUserAccount":
		if e.complexity.PlanGeneralCharacteristics.ReadyForClearanceByUserAccount == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ReadyForClearanceByUserAccount(childComplexity), true

	case "PlanGeneralCharacteristics.readyForClearanceDts":
		if e.complexity.PlanGeneralCharacteristics.ReadyForClearanceDts == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ReadyForClearanceDts(childComplexity), true

	case "PlanGeneralCharacteristics.readyForReviewBy":
		if e.complexity.PlanGeneralCharacteristics.ReadyForReviewBy == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ReadyForReviewBy(childComplexity), true

	case "PlanGeneralCharacteristics.readyForReviewByUserAccount":
		if e.complexity.PlanGeneralCharacteristics.ReadyForReviewByUserAccount == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ReadyForReviewByUserAccount(childComplexity), true

	case "PlanGeneralCharacteristics.readyForReviewDts":
		if e.complexity.PlanGeneralCharacteristics.ReadyForReviewDts == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ReadyForReviewDts(childComplexity), true

	case "PlanGeneralCharacteristics.resemblesExistingModel":
		if e.complexity.PlanGeneralCharacteristics.ResemblesExistingModel == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ResemblesExistingModel(childComplexity), true

	case "PlanGeneralCharacteristics.resemblesExistingModelHow":
		if e.complexity.PlanGeneralCharacteristics.ResemblesExistingModelHow == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ResemblesExistingModelHow(childComplexity), true

	case "PlanGeneralCharacteristics.resemblesExistingModelNote":
		if e.complexity.PlanGeneralCharacteristics.ResemblesExistingModelNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ResemblesExistingModelNote(childComplexity), true

	case "PlanGeneralCharacteristics.rulemakingRequired":
		if e.complexity.PlanGeneralCharacteristics.RulemakingRequired == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.RulemakingRequired(childComplexity), true

	case "PlanGeneralCharacteristics.rulemakingRequiredDescription":
		if e.complexity.PlanGeneralCharacteristics.RulemakingRequiredDescription == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.RulemakingRequiredDescription(childComplexity), true

	case "PlanGeneralCharacteristics.rulemakingRequiredNote":
		if e.complexity.PlanGeneralCharacteristics.RulemakingRequiredNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.RulemakingRequiredNote(childComplexity), true

	case "PlanGeneralCharacteristics.status":
		if e.complexity.PlanGeneralCharacteristics.Status == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.Status(childComplexity), true

	case "PlanGeneralCharacteristics.waiversRequired":
		if e.complexity.PlanGeneralCharacteristics.WaiversRequired == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.WaiversRequired(childComplexity), true

	case "PlanGeneralCharacteristics.waiversRequiredNote":
		if e.complexity.PlanGeneralCharacteristics.WaiversRequiredNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.WaiversRequiredNote(childComplexity), true

	case "PlanGeneralCharacteristics.waiversRequiredTypes":
		if e.complexity.PlanGeneralCharacteristics.WaiversRequiredTypes == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.WaiversRequiredTypes(childComplexity), true

	case "PlanOpsEvalAndLearning.agencyOrStateHelp":
		if e.complexity.PlanOpsEvalAndLearning.AgencyOrStateHelp == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AgencyOrStateHelp(childComplexity), true

	case "PlanOpsEvalAndLearning.agencyOrStateHelpNote":
		if e.complexity.PlanOpsEvalAndLearning.AgencyOrStateHelpNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AgencyOrStateHelpNote(childComplexity), true

	case "PlanOpsEvalAndLearning.agencyOrStateHelpOther":
		if e.complexity.PlanOpsEvalAndLearning.AgencyOrStateHelpOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AgencyOrStateHelpOther(childComplexity), true

	case "PlanOpsEvalAndLearning.anticipatedChallenges":
		if e.complexity.PlanOpsEvalAndLearning.AnticipatedChallenges == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AnticipatedChallenges(childComplexity), true

	case "PlanOpsEvalAndLearning.appToSendFilesToKnown":
		if e.complexity.PlanOpsEvalAndLearning.AppToSendFilesToKnown == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppToSendFilesToKnown(childComplexity), true

	case "PlanOpsEvalAndLearning.appToSendFilesToNote":
		if e.complexity.PlanOpsEvalAndLearning.AppToSendFilesToNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppToSendFilesToNote(childComplexity), true

	case "PlanOpsEvalAndLearning.appToSendFilesToWhich":
		if e.complexity.PlanOpsEvalAndLearning.AppToSendFilesToWhich == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppToSendFilesToWhich(childComplexity), true

	case "PlanOpsEvalAndLearning.appealFeedback":
		if e.complexity.PlanOpsEvalAndLearning.AppealFeedback == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppealFeedback(childComplexity), true

	case "PlanOpsEvalAndLearning.appealNote":
		if e.complexity.PlanOpsEvalAndLearning.AppealNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppealNote(childComplexity), true

	case "PlanOpsEvalAndLearning.appealOther":
		if e.complexity.PlanOpsEvalAndLearning.AppealOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppealOther(childComplexity), true

	case "PlanOpsEvalAndLearning.appealPayments":
		if e.complexity.PlanOpsEvalAndLearning.AppealPayments == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppealPayments(childComplexity), true

	case "PlanOpsEvalAndLearning.appealPerformance":
		if e.complexity.PlanOpsEvalAndLearning.AppealPerformance == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppealPerformance(childComplexity), true

	case "PlanOpsEvalAndLearning.benchmarkForPerformance":
		if e.complexity.PlanOpsEvalAndLearning.BenchmarkForPerformance == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.BenchmarkForPerformance(childComplexity), true

	case "PlanOpsEvalAndLearning.benchmarkForPerformanceNote":
		if e.complexity.PlanOpsEvalAndLearning.BenchmarkForPerformanceNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.BenchmarkForPerformanceNote(childComplexity), true

	case "PlanOpsEvalAndLearning.captureParticipantInfo":
		if e.complexity.PlanOpsEvalAndLearning.CaptureParticipantInfo == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CaptureParticipantInfo(childComplexity), true

	case "PlanOpsEvalAndLearning.captureParticipantInfoNote":
		if e.complexity.PlanOpsEvalAndLearning.CaptureParticipantInfoNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CaptureParticipantInfoNote(childComplexity), true

	case "PlanOpsEvalAndLearning.ccmInvolvment":
		if e.complexity.PlanOpsEvalAndLearning.CcmInvolvment == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CcmInvolvment(childComplexity), true

	case "PlanOpsEvalAndLearning.ccmInvolvmentNote":
		if e.complexity.PlanOpsEvalAndLearning.CcmInvolvmentNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CcmInvolvmentNote(childComplexity), true

	case "PlanOpsEvalAndLearning.ccmInvolvmentOther":
		if e.complexity.PlanOpsEvalAndLearning.CcmInvolvmentOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CcmInvolvmentOther(childComplexity), true

	case "PlanOpsEvalAndLearning.computePerformanceScores":
		if e.complexity.PlanOpsEvalAndLearning.ComputePerformanceScores == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ComputePerformanceScores(childComplexity), true

	case "PlanOpsEvalAndLearning.computePerformanceScoresNote":
		if e.complexity.PlanOpsEvalAndLearning.ComputePerformanceScoresNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ComputePerformanceScoresNote(childComplexity), true

	case "PlanOpsEvalAndLearning.contractorSupport":
		if e.complexity.PlanOpsEvalAndLearning.ContractorSupport == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ContractorSupport(childComplexity), true

	case "PlanOpsEvalAndLearning.contractorSupportHow":
		if e.complexity.PlanOpsEvalAndLearning.ContractorSupportHow == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ContractorSupportHow(childComplexity), true

	case "PlanOpsEvalAndLearning.contractorSupportNote":
		if e.complexity.PlanOpsEvalAndLearning.ContractorSupportNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ContractorSupportNote(childComplexity), true

	case "PlanOpsEvalAndLearning.contractorSupportOther":
		if e.complexity.PlanOpsEvalAndLearning.ContractorSupportOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ContractorSupportOther(childComplexity), true

	case "PlanOpsEvalAndLearning.createdBy":
		if e.complexity.PlanOpsEvalAndLearning.CreatedBy == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CreatedBy(childComplexity), true

	case "PlanOpsEvalAndLearning.createdByUserAccount":
		if e.complexity.PlanOpsEvalAndLearning.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CreatedByUserAccount(childComplexity), true

	case "PlanOpsEvalAndLearning.createdDts":
		if e.complexity.PlanOpsEvalAndLearning.CreatedDts == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CreatedDts(childComplexity), true

	case "PlanOpsEvalAndLearning.dataCollectionFrequency":
		if e.complexity.PlanOpsEvalAndLearning.DataCollectionFrequency == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataCollectionFrequency(childComplexity), true

	case "PlanOpsEvalAndLearning.dataCollectionFrequencyNote":
		if e.complexity.PlanOpsEvalAndLearning.DataCollectionFrequencyNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataCollectionFrequencyNote(childComplexity), true

	case "PlanOpsEvalAndLearning.dataCollectionFrequencyOther":
		if e.complexity.PlanOpsEvalAndLearning.DataCollectionFrequencyOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataCollectionFrequencyOther(childComplexity), true

	case "PlanOpsEvalAndLearning.dataCollectionStarts":
		if e.complexity.PlanOpsEvalAndLearning.DataCollectionStarts == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataCollectionStarts(childComplexity), true

	case "PlanOpsEvalAndLearning.dataCollectionStartsOther":
		if e.complexity.PlanOpsEvalAndLearning.DataCollectionStartsOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataCollectionStartsOther(childComplexity), true

	case "PlanOpsEvalAndLearning.dataFlowDiagramsNeeded":
		if e.complexity.PlanOpsEvalAndLearning.DataFlowDiagramsNeeded == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataFlowDiagramsNeeded(childComplexity), true

	case "PlanOpsEvalAndLearning.dataFullTimeOrIncremental":
		if e.complexity.PlanOpsEvalAndLearning.DataFullTimeOrIncremental == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataFullTimeOrIncremental(childComplexity), true

	case "PlanOpsEvalAndLearning.dataMonitoringFileOther":
		if e.complexity.PlanOpsEvalAndLearning.DataMonitoringFileOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataMonitoringFileOther(childComplexity), true

	case "PlanOpsEvalAndLearning.dataMonitoringFileTypes":
		if e.complexity.PlanOpsEvalAndLearning.DataMonitoringFileTypes == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataMonitoringFileTypes(childComplexity), true

	case "PlanOpsEvalAndLearning.dataMonitoringNote":
		if e.complexity.PlanOpsEvalAndLearning.DataMonitoringNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataMonitoringNote(childComplexity), true

	case "PlanOpsEvalAndLearning.dataNeededForMonitoring":
		if e.complexity.PlanOpsEvalAndLearning.DataNeededForMonitoring == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataNeededForMonitoring(childComplexity), true

	case "PlanOpsEvalAndLearning.dataNeededForMonitoringNote":
		if e.complexity.PlanOpsEvalAndLearning.DataNeededForMonitoringNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataNeededForMonitoringNote(childComplexity), true

	case "PlanOpsEvalAndLearning.dataNeededForMonitoringOther":
		if e.complexity.PlanOpsEvalAndLearning.DataNeededForMonitoringOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataNeededForMonitoringOther(childComplexity), true

	case "PlanOpsEvalAndLearning.dataResponseFileFrequency":
		if e.complexity.PlanOpsEvalAndLearning.DataResponseFileFrequency == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataResponseFileFrequency(childComplexity), true

	case "PlanOpsEvalAndLearning.dataResponseType":
		if e.complexity.PlanOpsEvalAndLearning.DataResponseType == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataResponseType(childComplexity), true

	case "PlanOpsEvalAndLearning.dataSharingFrequency":
		if e.complexity.PlanOpsEvalAndLearning.DataSharingFrequency == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataSharingFrequency(childComplexity), true

	case "PlanOpsEvalAndLearning.dataSharingFrequencyOther":
		if e.complexity.PlanOpsEvalAndLearning.DataSharingFrequencyOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataSharingFrequencyOther(childComplexity), true

	case "PlanOpsEvalAndLearning.dataSharingStarts":
		if e.complexity.PlanOpsEvalAndLearning.DataSharingStarts == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataSharingStarts(childComplexity), true

	case "PlanOpsEvalAndLearning.dataSharingStartsNote":
		if e.complexity.PlanOpsEvalAndLearning.DataSharingStartsNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataSharingStartsNote(childComplexity), true

	case "PlanOpsEvalAndLearning.dataSharingStartsOther":
		if e.complexity.PlanOpsEvalAndLearning.DataSharingStartsOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataSharingStartsOther(childComplexity), true

	case "PlanOpsEvalAndLearning.dataToSendParticicipants":
		if e.complexity.PlanOpsEvalAndLearning.DataToSendParticicipants == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataToSendParticicipants(childComplexity), true

	case "PlanOpsEvalAndLearning.dataToSendParticicipantsNote":
		if e.complexity.PlanOpsEvalAndLearning.DataToSendParticicipantsNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataToSendParticicipantsNote(childComplexity), true

	case "PlanOpsEvalAndLearning.dataToSendParticicipantsOther":
		if e.complexity.PlanOpsEvalAndLearning.DataToSendParticicipantsOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataToSendParticicipantsOther(childComplexity), true

	case "PlanOpsEvalAndLearning.developNewQualityMeasures":
		if e.complexity.PlanOpsEvalAndLearning.DevelopNewQualityMeasures == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DevelopNewQualityMeasures(childComplexity), true

	case "PlanOpsEvalAndLearning.developNewQualityMeasuresNote":
		if e.complexity.PlanOpsEvalAndLearning.DevelopNewQualityMeasuresNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DevelopNewQualityMeasuresNote(childComplexity), true

	case "PlanOpsEvalAndLearning.draftIcdDueDate":
		if e.complexity.PlanOpsEvalAndLearning.DraftIcdDueDate == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DraftIcdDueDate(childComplexity), true

	case "PlanOpsEvalAndLearning.eftSetUp":
		if e.complexity.PlanOpsEvalAndLearning.EftSetUp == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.EftSetUp(childComplexity), true

	case "PlanOpsEvalAndLearning.evaluationApproachOther":
		if e.complexity.PlanOpsEvalAndLearning.EvaluationApproachOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.EvaluationApproachOther(childComplexity), true

	case "PlanOpsEvalAndLearning.evaluationApproaches":
		if e.complexity.PlanOpsEvalAndLearning.EvaluationApproaches == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.EvaluationApproaches(childComplexity), true

	case "PlanOpsEvalAndLearning.evalutaionApproachNote":
		if e.complexity.PlanOpsEvalAndLearning.EvalutaionApproachNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.EvalutaionApproachNote(childComplexity), true

	case "PlanOpsEvalAndLearning.fileNamingConventions":
		if e.complexity.PlanOpsEvalAndLearning.FileNamingConventions == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.FileNamingConventions(childComplexity), true

	case "PlanOpsEvalAndLearning.helpdeskUse":
		if e.complexity.PlanOpsEvalAndLearning.HelpdeskUse == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.HelpdeskUse(childComplexity), true

	case "PlanOpsEvalAndLearning.helpdeskUseNote":
		if e.complexity.PlanOpsEvalAndLearning.HelpdeskUseNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.HelpdeskUseNote(childComplexity), true

	case "PlanOpsEvalAndLearning.id":
		if e.complexity.PlanOpsEvalAndLearning.ID == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ID(childComplexity), true

	case "PlanOpsEvalAndLearning.icdNote":
		if e.complexity.PlanOpsEvalAndLearning.IcdNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.IcdNote(childComplexity), true

	case "PlanOpsEvalAndLearning.icdOwner":
		if e.complexity.PlanOpsEvalAndLearning.IcdOwner == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.IcdOwner(childComplexity), true

	case "PlanOpsEvalAndLearning.iddocSupport":
		if e.complexity.PlanOpsEvalAndLearning.IddocSupport == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.IddocSupport(childComplexity), true

	case "PlanOpsEvalAndLearning.iddocSupportNote":
		if e.complexity.PlanOpsEvalAndLearning.IddocSupportNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.IddocSupportNote(childComplexity), true

	case "PlanOpsEvalAndLearning.modelLearningSystems":
		if e.complexity.PlanOpsEvalAndLearning.ModelLearningSystems == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ModelLearningSystems(childComplexity), true

	case "PlanOpsEvalAndLearning.modelLearningSystemsNote":
		if e.complexity.PlanOpsEvalAndLearning.ModelLearningSystemsNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ModelLearningSystemsNote(childComplexity), true

	case "PlanOpsEvalAndLearning.modelLearningSystemsOther":
		if e.complexity.PlanOpsEvalAndLearning.ModelLearningSystemsOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ModelLearningSystemsOther(childComplexity), true

	case "PlanOpsEvalAndLearning.modelPlanID":
		if e.complexity.PlanOpsEvalAndLearning.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ModelPlanID(childComplexity), true

	case "PlanOpsEvalAndLearning.modifiedBy":
		if e.complexity.PlanOpsEvalAndLearning.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ModifiedBy(childComplexity), true

	case "PlanOpsEvalAndLearning.modifiedByUserAccount":
		if e.complexity.PlanOpsEvalAndLearning.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ModifiedByUserAccount(childComplexity), true

	case "PlanOpsEvalAndLearning.modifiedDts":
		if e.complexity.PlanOpsEvalAndLearning.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ModifiedDts(childComplexity), true

	case "PlanOpsEvalAndLearning.produceBenefitEnhancementFiles":
		if e.complexity.PlanOpsEvalAndLearning.ProduceBenefitEnhancementFiles == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ProduceBenefitEnhancementFiles(childComplexity), true

	case "PlanOpsEvalAndLearning.qualityPerformanceImpactsPayment":
		if e.complexity.PlanOpsEvalAndLearning.QualityPerformanceImpactsPayment == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.QualityPerformanceImpactsPayment(childComplexity), true

	case "PlanOpsEvalAndLearning.qualityPerformanceImpactsPaymentNote":
		if e.complexity.PlanOpsEvalAndLearning.QualityPerformanceImpactsPaymentNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.QualityPerformanceImpactsPaymentNote(childComplexity), true

	case "PlanOpsEvalAndLearning.qualityReportingStarts":
		if e.complexity.PlanOpsEvalAndLearning.QualityReportingStarts == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.QualityReportingStarts(childComplexity), true

	case "PlanOpsEvalAndLearning.qualityReportingStartsNote":
		if e.complexity.PlanOpsEvalAndLearning.QualityReportingStartsNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.QualityReportingStartsNote(childComplexity), true

	case "PlanOpsEvalAndLearning.qualityReportingStartsOther":
		if e.complexity.PlanOpsEvalAndLearning.QualityReportingStartsOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.QualityReportingStartsOther(childComplexity), true

	case "PlanOpsEvalAndLearning.readyForClearanceBy":
		if e.complexity.PlanOpsEvalAndLearning.ReadyForClearanceBy == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ReadyForClearanceBy(childComplexity), true

	case "PlanOpsEvalAndLearning.readyForClearanceByUserAccount":
		if e.complexity.PlanOpsEvalAndLearning.ReadyForClearanceByUserAccount == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ReadyForClearanceByUserAccount(childComplexity), true

	case "PlanOpsEvalAndLearning.readyForClearanceDts":
		if e.complexity.PlanOpsEvalAndLearning.ReadyForClearanceDts == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ReadyForClearanceDts(childComplexity), true

	case "PlanOpsEvalAndLearning.readyForReviewBy":
		if e.complexity.PlanOpsEvalAndLearning.ReadyForReviewBy == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ReadyForReviewBy(childComplexity), true

	case "PlanOpsEvalAndLearning.readyForReviewByUserAccount":
		if e.complexity.PlanOpsEvalAndLearning.ReadyForReviewByUserAccount == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ReadyForReviewByUserAccount(childComplexity), true

	case "PlanOpsEvalAndLearning.readyForReviewDts":
		if e.complexity.PlanOpsEvalAndLearning.ReadyForReviewDts == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ReadyForReviewDts(childComplexity), true

	case "PlanOpsEvalAndLearning.riskAdjustFeedback":
		if e.complexity.PlanOpsEvalAndLearning.RiskAdjustFeedback == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.RiskAdjustFeedback(childComplexity), true

	case "PlanOpsEvalAndLearning.riskAdjustNote":
		if e.complexity.PlanOpsEvalAndLearning.RiskAdjustNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.RiskAdjustNote(childComplexity), true

	case "PlanOpsEvalAndLearning.riskAdjustOther":
		if e.complexity.PlanOpsEvalAndLearning.RiskAdjustOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.RiskAdjustOther(childComplexity), true

	case "PlanOpsEvalAndLearning.riskAdjustPayments":
		if e.complexity.PlanOpsEvalAndLearning.RiskAdjustPayments == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.RiskAdjustPayments(childComplexity), true

	case "PlanOpsEvalAndLearning.riskAdjustPerformance":
		if e.complexity.PlanOpsEvalAndLearning.RiskAdjustPerformance == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.RiskAdjustPerformance(childComplexity), true

	case "PlanOpsEvalAndLearning.sendFilesBetweenCcw":
		if e.complexity.PlanOpsEvalAndLearning.SendFilesBetweenCcw == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.SendFilesBetweenCcw(childComplexity), true

	case "PlanOpsEvalAndLearning.sendFilesBetweenCcwNote":
		if e.complexity.PlanOpsEvalAndLearning.SendFilesBetweenCcwNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.SendFilesBetweenCcwNote(childComplexity), true

	case "PlanOpsEvalAndLearning.shareCclfData":
		if e.complexity.PlanOpsEvalAndLearning.ShareCclfData == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ShareCclfData(childComplexity), true

	case "PlanOpsEvalAndLearning.shareCclfDataNote":
		if e.complexity.PlanOpsEvalAndLearning.ShareCclfDataNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ShareCclfDataNote(childComplexity), true

	case "PlanOpsEvalAndLearning.stakeholders":
		if e.complexity.PlanOpsEvalAndLearning.Stakeholders == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.Stakeholders(childComplexity), true

	case "PlanOpsEvalAndLearning.stakeholdersNote":
		if e.complexity.PlanOpsEvalAndLearning.StakeholdersNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.StakeholdersNote(childComplexity), true

	case "PlanOpsEvalAndLearning.stakeholdersOther":
		if e.complexity.PlanOpsEvalAndLearning.StakeholdersOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.StakeholdersOther(childComplexity), true

	case "PlanOpsEvalAndLearning.status":
		if e.complexity.PlanOpsEvalAndLearning.Status == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.Status(childComplexity), true

	case "PlanOpsEvalAndLearning.stcNeeds":
		if e.complexity.PlanOpsEvalAndLearning.StcNeeds == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.StcNeeds(childComplexity), true

	case "PlanOpsEvalAndLearning.technicalContactsIdentified":
		if e.complexity.PlanOpsEvalAndLearning.TechnicalContactsIdentified == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.TechnicalContactsIdentified(childComplexity), true

	case "PlanOpsEvalAndLearning.technicalContactsIdentifiedDetail":
		if e.complexity.PlanOpsEvalAndLearning.TechnicalContactsIdentifiedDetail == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.TechnicalContactsIdentifiedDetail(childComplexity), true

	case "PlanOpsEvalAndLearning.technicalContactsIdentifiedNote":
		if e.complexity.PlanOpsEvalAndLearning.TechnicalContactsIdentifiedNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.TechnicalContactsIdentifiedNote(childComplexity), true

	case "PlanOpsEvalAndLearning.testingNote":
		if e.complexity.PlanOpsEvalAndLearning.TestingNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.TestingNote(childComplexity), true

	case "PlanOpsEvalAndLearning.testingTimelines":
		if e.complexity.PlanOpsEvalAndLearning.TestingTimelines == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.TestingTimelines(childComplexity), true

	case "PlanOpsEvalAndLearning.uatNeeds":
		if e.complexity.PlanOpsEvalAndLearning.UatNeeds == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.UatNeeds(childComplexity), true

	case "PlanOpsEvalAndLearning.unsolicitedAdjustmentsIncluded":
		if e.complexity.PlanOpsEvalAndLearning.UnsolicitedAdjustmentsIncluded == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.UnsolicitedAdjustmentsIncluded(childComplexity), true

	case "PlanOpsEvalAndLearning.useCcwForFileDistribiutionToParticipants":
		if e.complexity.PlanOpsEvalAndLearning.UseCcwForFileDistribiutionToParticipants == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.UseCcwForFileDistribiutionToParticipants(childComplexity), true

	case "PlanOpsEvalAndLearning.useCcwForFileDistribiutionToParticipantsNote":
		if e.complexity.PlanOpsEvalAndLearning.UseCcwForFileDistribiutionToParticipantsNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.UseCcwForFileDistribiutionToParticipantsNote(childComplexity), true

	case "PlanParticipantsAndProviders.communicationMethod":
		if e.complexity.PlanParticipantsAndProviders.CommunicationMethod == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CommunicationMethod(childComplexity), true

	case "PlanParticipantsAndProviders.communicationMethodOther":
		if e.complexity.PlanParticipantsAndProviders.CommunicationMethodOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CommunicationMethodOther(childComplexity), true

	case "PlanParticipantsAndProviders.communicationNote":
		if e.complexity.PlanParticipantsAndProviders.CommunicationNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CommunicationNote(childComplexity), true

	case "PlanParticipantsAndProviders.confidenceNote":
		if e.complexity.PlanParticipantsAndProviders.ConfidenceNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ConfidenceNote(childComplexity), true

	case "PlanParticipantsAndProviders.coordinateWork":
		if e.complexity.PlanParticipantsAndProviders.CoordinateWork == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CoordinateWork(childComplexity), true

	case "PlanParticipantsAndProviders.coordinateWorkNote":
		if e.complexity.PlanParticipantsAndProviders.CoordinateWorkNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CoordinateWorkNote(childComplexity), true

	case "PlanParticipantsAndProviders.createdBy":
		if e.complexity.PlanParticipantsAndProviders.CreatedBy == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CreatedBy(childComplexity), true

	case "PlanParticipantsAndProviders.createdByUserAccount":
		if e.complexity.PlanParticipantsAndProviders.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CreatedByUserAccount(childComplexity), true

	case "PlanParticipantsAndProviders.createdDts":
		if e.complexity.PlanParticipantsAndProviders.CreatedDts == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CreatedDts(childComplexity), true

	case "PlanParticipantsAndProviders.estimateConfidence":
		if e.complexity.PlanParticipantsAndProviders.EstimateConfidence == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.EstimateConfidence(childComplexity), true

	case "PlanParticipantsAndProviders.expectedNumberOfParticipants":
		if e.complexity.PlanParticipantsAndProviders.ExpectedNumberOfParticipants == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ExpectedNumberOfParticipants(childComplexity), true

	case "PlanParticipantsAndProviders.gainsharePayments":
		if e.complexity.PlanParticipantsAndProviders.GainsharePayments == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.GainsharePayments(childComplexity), true

	case "PlanParticipantsAndProviders.gainsharePaymentsNote":
		if e.complexity.PlanParticipantsAndProviders.GainsharePaymentsNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.GainsharePaymentsNote(childComplexity), true

	case "PlanParticipantsAndProviders.gainsharePaymentsTrack":
		if e.complexity.PlanParticipantsAndProviders.GainsharePaymentsTrack == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.GainsharePaymentsTrack(childComplexity), true

	case "PlanParticipantsAndProviders.id":
		if e.complexity.PlanParticipantsAndProviders.ID == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ID(childComplexity), true

	case "PlanParticipantsAndProviders.medicareProviderType":
		if e.complexity.PlanParticipantsAndProviders.MedicareProviderType == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.MedicareProviderType(childComplexity), true

	case "PlanParticipantsAndProviders.modelApplicationLevel":
		if e.complexity.PlanParticipantsAndProviders.ModelApplicationLevel == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ModelApplicationLevel(childComplexity), true

	case "PlanParticipantsAndProviders.modelPlanID":
		if e.complexity.PlanParticipantsAndProviders.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ModelPlanID(childComplexity), true

	case "PlanParticipantsAndProviders.modifiedBy":
		if e.complexity.PlanParticipantsAndProviders.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ModifiedBy(childComplexity), true

	case "PlanParticipantsAndProviders.modifiedByUserAccount":
		if e.complexity.PlanParticipantsAndProviders.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ModifiedByUserAccount(childComplexity), true

	case "PlanParticipantsAndProviders.modifiedDts":
		if e.complexity.PlanParticipantsAndProviders.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ModifiedDts(childComplexity), true

	case "PlanParticipantsAndProviders.participantAssumeRisk":
		if e.complexity.PlanParticipantsAndProviders.ParticipantAssumeRisk == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantAssumeRisk(childComplexity), true

	case "PlanParticipantsAndProviders.participants":
		if e.complexity.PlanParticipantsAndProviders.Participants == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.Participants(childComplexity), true

	case "PlanParticipantsAndProviders.participantsCurrentlyInModels":
		if e.complexity.PlanParticipantsAndProviders.ParticipantsCurrentlyInModels == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantsCurrentlyInModels(childComplexity), true

	case "PlanParticipantsAndProviders.participantsCurrentlyInModelsNote":
		if e.complexity.PlanParticipantsAndProviders.ParticipantsCurrentlyInModelsNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantsCurrentlyInModelsNote(childComplexity), true

	case "PlanParticipantsAndProviders.participantsIDSNote":
		if e.complexity.PlanParticipantsAndProviders.ParticipantsIDSNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantsIDSNote(childComplexity), true

	case "PlanParticipantsAndProviders.participantsIds":
		if e.complexity.PlanParticipantsAndProviders.ParticipantsIds == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantsIds(childComplexity), true

	case "PlanParticipantsAndProviders.participantsIdsOther":
		if e.complexity.PlanParticipantsAndProviders.ParticipantsIdsOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantsIdsOther(childComplexity), true

	case "PlanParticipantsAndProviders.participantsNote":
		if e.complexity.PlanParticipantsAndProviders.ParticipantsNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantsNote(childComplexity), true

	case "PlanParticipantsAndProviders.participantsOther":
		if e.complexity.PlanParticipantsAndProviders.ParticipantsOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantsOther(childComplexity), true

	case "PlanParticipantsAndProviders.providerAddMethod":
		if e.complexity.PlanParticipantsAndProviders.ProviderAddMethod == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderAddMethod(childComplexity), true

	case "PlanParticipantsAndProviders.providerAddMethodNote":
		if e.complexity.PlanParticipantsAndProviders.ProviderAddMethodNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderAddMethodNote(childComplexity), true

	case "PlanParticipantsAndProviders.providerAddMethodOther":
		if e.complexity.PlanParticipantsAndProviders.ProviderAddMethodOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderAddMethodOther(childComplexity), true

	case "PlanParticipantsAndProviders.providerAdditionFrequency":
		if e.complexity.PlanParticipantsAndProviders.ProviderAdditionFrequency == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderAdditionFrequency(childComplexity), true

	case "PlanParticipantsAndProviders.providerAdditionFrequencyNote":
		if e.complexity.PlanParticipantsAndProviders.ProviderAdditionFrequencyNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderAdditionFrequencyNote(childComplexity), true

	case "PlanParticipantsAndProviders.providerAdditionFrequencyOther":
		if e.complexity.PlanParticipantsAndProviders.ProviderAdditionFrequencyOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderAdditionFrequencyOther(childComplexity), true

	case "PlanParticipantsAndProviders.providerLeaveMethod":
		if e.complexity.PlanParticipantsAndProviders.ProviderLeaveMethod == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderLeaveMethod(childComplexity), true

	case "PlanParticipantsAndProviders.providerLeaveMethodNote":
		if e.complexity.PlanParticipantsAndProviders.ProviderLeaveMethodNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderLeaveMethodNote(childComplexity), true

	case "PlanParticipantsAndProviders.providerLeaveMethodOther":
		if e.complexity.PlanParticipantsAndProviders.ProviderLeaveMethodOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderLeaveMethodOther(childComplexity), true

	case "PlanParticipantsAndProviders.providerOverlap":
		if e.complexity.PlanParticipantsAndProviders.ProviderOverlap == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderOverlap(childComplexity), true

	case "PlanParticipantsAndProviders.providerOverlapHierarchy":
		if e.complexity.PlanParticipantsAndProviders.ProviderOverlapHierarchy == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderOverlapHierarchy(childComplexity), true

	case "PlanParticipantsAndProviders.providerOverlapNote":
		if e.complexity.PlanParticipantsAndProviders.ProviderOverlapNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderOverlapNote(childComplexity), true

	case "PlanParticipantsAndProviders.readyForClearanceBy":
		if e.complexity.PlanParticipantsAndProviders.ReadyForClearanceBy == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ReadyForClearanceBy(childComplexity), true

	case "PlanParticipantsAndProviders.readyForClearanceByUserAccount":
		if e.complexity.PlanParticipantsAndProviders.ReadyForClearanceByUserAccount == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ReadyForClearanceByUserAccount(childComplexity), true

	case "PlanParticipantsAndProviders.readyForClearanceDts":
		if e.complexity.PlanParticipantsAndProviders.ReadyForClearanceDts == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ReadyForClearanceDts(childComplexity), true

	case "PlanParticipantsAndProviders.readyForReviewBy":
		if e.complexity.PlanParticipantsAndProviders.ReadyForReviewBy == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ReadyForReviewBy(childComplexity), true

	case "PlanParticipantsAndProviders.readyForReviewByUserAccount":
		if e.complexity.PlanParticipantsAndProviders.ReadyForReviewByUserAccount == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ReadyForReviewByUserAccount(childComplexity), true

	case "PlanParticipantsAndProviders.readyForReviewDts":
		if e.complexity.PlanParticipantsAndProviders.ReadyForReviewDts == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ReadyForReviewDts(childComplexity), true

	case "PlanParticipantsAndProviders.recruitmentMethod":
		if e.complexity.PlanParticipantsAndProviders.RecruitmentMethod == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.RecruitmentMethod(childComplexity), true

	case "PlanParticipantsAndProviders.recruitmentNote":
		if e.complexity.PlanParticipantsAndProviders.RecruitmentNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.RecruitmentNote(childComplexity), true

	case "PlanParticipantsAndProviders.recruitmentOther":
		if e.complexity.PlanParticipantsAndProviders.RecruitmentOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.RecruitmentOther(childComplexity), true

	case "PlanParticipantsAndProviders.riskNote":
		if e.complexity.PlanParticipantsAndProviders.RiskNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.RiskNote(childComplexity), true

	case "PlanParticipantsAndProviders.riskOther":
		if e.complexity.PlanParticipantsAndProviders.RiskOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.RiskOther(childComplexity), true

	case "PlanParticipantsAndProviders.riskType":
		if e.complexity.PlanParticipantsAndProviders.RiskType == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.RiskType(childComplexity), true

	case "PlanParticipantsAndProviders.selectionMethod":
		if e.complexity.PlanParticipantsAndProviders.SelectionMethod == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.SelectionMethod(childComplexity), true

	case "PlanParticipantsAndProviders.selectionNote":
		if e.complexity.PlanParticipantsAndProviders.SelectionNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.SelectionNote(childComplexity), true

	case "PlanParticipantsAndProviders.selectionOther":
		if e.complexity.PlanParticipantsAndProviders.SelectionOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.SelectionOther(childComplexity), true

	case "PlanParticipantsAndProviders.statesEngagement":
		if e.complexity.PlanParticipantsAndProviders.StatesEngagement == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.StatesEngagement(childComplexity), true

	case "PlanParticipantsAndProviders.status":
		if e.complexity.PlanParticipantsAndProviders.Status == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.Status(childComplexity), true

	case "PlanParticipantsAndProviders.willRiskChange":
		if e.complexity.PlanParticipantsAndProviders.WillRiskChange == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.WillRiskChange(childComplexity), true

	case "PlanParticipantsAndProviders.willRiskChangeNote":
		if e.complexity.PlanParticipantsAndProviders.WillRiskChangeNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.WillRiskChangeNote(childComplexity), true

	case "PlanPayments.affectsMedicareSecondaryPayerClaims":
		if e.complexity.PlanPayments.AffectsMedicareSecondaryPayerClaims == nil {
			break
		}

		return e.complexity.PlanPayments.AffectsMedicareSecondaryPayerClaims(childComplexity), true

	case "PlanPayments.affectsMedicareSecondaryPayerClaimsHow":
		if e.complexity.PlanPayments.AffectsMedicareSecondaryPayerClaimsHow == nil {
			break
		}

		return e.complexity.PlanPayments.AffectsMedicareSecondaryPayerClaimsHow(childComplexity), true

	case "PlanPayments.affectsMedicareSecondaryPayerClaimsNote":
		if e.complexity.PlanPayments.AffectsMedicareSecondaryPayerClaimsNote == nil {
			break
		}

		return e.complexity.PlanPayments.AffectsMedicareSecondaryPayerClaimsNote(childComplexity), true

	case "PlanPayments.anticipateReconcilingPaymentsRetrospectively":
		if e.complexity.PlanPayments.AnticipateReconcilingPaymentsRetrospectively == nil {
			break
		}

		return e.complexity.PlanPayments.AnticipateReconcilingPaymentsRetrospectively(childComplexity), true

	case "PlanPayments.anticipateReconcilingPaymentsRetrospectivelyNote":
		if e.complexity.PlanPayments.AnticipateReconcilingPaymentsRetrospectivelyNote == nil {
			break
		}

		return e.complexity.PlanPayments.AnticipateReconcilingPaymentsRetrospectivelyNote(childComplexity), true

	case "PlanPayments.anticipatedPaymentFrequency":
		if e.complexity.PlanPayments.AnticipatedPaymentFrequency == nil {
			break
		}

		return e.complexity.PlanPayments.AnticipatedPaymentFrequency(childComplexity), true

	case "PlanPayments.anticipatedPaymentFrequencyNote":
		if e.complexity.PlanPayments.AnticipatedPaymentFrequencyNote == nil {
			break
		}

		return e.complexity.PlanPayments.AnticipatedPaymentFrequencyNote(childComplexity), true

	case "PlanPayments.anticipatedPaymentFrequencyOther":
		if e.complexity.PlanPayments.AnticipatedPaymentFrequencyOther == nil {
			break
		}

		return e.complexity.PlanPayments.AnticipatedPaymentFrequencyOther(childComplexity), true

	case "PlanPayments.beneficiaryCostSharingLevelAndHandling":
		if e.complexity.PlanPayments.BeneficiaryCostSharingLevelAndHandling == nil {
			break
		}

		return e.complexity.PlanPayments.BeneficiaryCostSharingLevelAndHandling(childComplexity), true

	case "PlanPayments.canParticipantsSelectBetweenPaymentMechanisms":
		if e.complexity.PlanPayments.CanParticipantsSelectBetweenPaymentMechanisms == nil {
			break
		}

		return e.complexity.PlanPayments.CanParticipantsSelectBetweenPaymentMechanisms(childComplexity), true

	case "PlanPayments.canParticipantsSelectBetweenPaymentMechanismsHow":
		if e.complexity.PlanPayments.CanParticipantsSelectBetweenPaymentMechanismsHow == nil {
			break
		}

		return e.complexity.PlanPayments.CanParticipantsSelectBetweenPaymentMechanismsHow(childComplexity), true

	case "PlanPayments.canParticipantsSelectBetweenPaymentMechanismsNote":
		if e.complexity.PlanPayments.CanParticipantsSelectBetweenPaymentMechanismsNote == nil {
			break
		}

		return e.complexity.PlanPayments.CanParticipantsSelectBetweenPaymentMechanismsNote(childComplexity), true

	case "PlanPayments.changesMedicarePhysicianFeeSchedule":
		if e.complexity.PlanPayments.ChangesMedicarePhysicianFeeSchedule == nil {
			break
		}

		return e.complexity.PlanPayments.ChangesMedicarePhysicianFeeSchedule(childComplexity), true

	case "PlanPayments.changesMedicarePhysicianFeeScheduleNote":
		if e.complexity.PlanPayments.ChangesMedicarePhysicianFeeScheduleNote == nil {
			break
		}

		return e.complexity.PlanPayments.ChangesMedicarePhysicianFeeScheduleNote(childComplexity), true

	case "PlanPayments.createdBy":
		if e.complexity.PlanPayments.CreatedBy == nil {
			break
		}

		return e.complexity.PlanPayments.CreatedBy(childComplexity), true

	case "PlanPayments.createdByUserAccount":
		if e.complexity.PlanPayments.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.PlanPayments.CreatedByUserAccount(childComplexity), true

	case "PlanPayments.createdDts":
		if e.complexity.PlanPayments.CreatedDts == nil {
			break
		}

		return e.complexity.PlanPayments.CreatedDts(childComplexity), true

	case "PlanPayments.creatingDependenciesBetweenServices":
		if e.complexity.PlanPayments.CreatingDependenciesBetweenServices == nil {
			break
		}

		return e.complexity.PlanPayments.CreatingDependenciesBetweenServices(childComplexity), true

	case "PlanPayments.creatingDependenciesBetweenServicesNote":
		if e.complexity.PlanPayments.CreatingDependenciesBetweenServicesNote == nil {
			break
		}

		return e.complexity.PlanPayments.CreatingDependenciesBetweenServicesNote(childComplexity), true

	case "PlanPayments.expectedCalculationComplexityLevel":
		if e.complexity.PlanPayments.ExpectedCalculationComplexityLevel == nil {
			break
		}

		return e.complexity.PlanPayments.ExpectedCalculationComplexityLevel(childComplexity), true

	case "PlanPayments.expectedCalculationComplexityLevelNote":
		if e.complexity.PlanPayments.ExpectedCalculationComplexityLevelNote == nil {
			break
		}

		return e.complexity.PlanPayments.ExpectedCalculationComplexityLevelNote(childComplexity), true

	case "PlanPayments.fundingSource":
		if e.complexity.PlanPayments.FundingSource == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSource(childComplexity), true

	case "PlanPayments.fundingSourceNote":
		if e.complexity.PlanPayments.FundingSourceNote == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSourceNote(childComplexity), true

	case "PlanPayments.fundingSourceOther":
		if e.complexity.PlanPayments.FundingSourceOther == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSourceOther(childComplexity), true

	case "PlanPayments.fundingSourceR":
		if e.complexity.PlanPayments.FundingSourceR == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSourceR(childComplexity), true

	case "PlanPayments.fundingSourceRNote":
		if e.complexity.PlanPayments.FundingSourceRNote == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSourceRNote(childComplexity), true

	case "PlanPayments.fundingSourceROther":
		if e.complexity.PlanPayments.FundingSourceROther == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSourceROther(childComplexity), true

	case "PlanPayments.fundingSourceRTrustFund":
		if e.complexity.PlanPayments.FundingSourceRTrustFund == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSourceRTrustFund(childComplexity), true

	case "PlanPayments.fundingSourceTrustFund":
		if e.complexity.PlanPayments.FundingSourceTrustFund == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSourceTrustFund(childComplexity), true

	case "PlanPayments.fundingStructure":
		if e.complexity.PlanPayments.FundingStructure == nil {
			break
		}

		return e.complexity.PlanPayments.FundingStructure(childComplexity), true

	case "PlanPayments.id":
		if e.complexity.PlanPayments.ID == nil {
			break
		}

		return e.complexity.PlanPayments.ID(childComplexity), true

	case "PlanPayments.isContractorAwareTestDataRequirements":
		if e.complexity.PlanPayments.IsContractorAwareTestDataRequirements == nil {
			break
		}

		return e.complexity.PlanPayments.IsContractorAwareTestDataRequirements(childComplexity), true

	case "PlanPayments.modelPlanID":
		if e.complexity.PlanPayments.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanPayments.ModelPlanID(childComplexity), true

	case "PlanPayments.modifiedBy":
		if e.complexity.PlanPayments.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanPayments.ModifiedBy(childComplexity), true

	case "PlanPayments.modifiedByUserAccount":
		if e.complexity.PlanPayments.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.PlanPayments.ModifiedByUserAccount(childComplexity), true

	case "PlanPayments.modifiedDts":
		if e.complexity.PlanPayments.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanPayments.ModifiedDts(childComplexity), true

	case "PlanPayments.needsClaimsDataCollection":
		if e.complexity.PlanPayments.NeedsClaimsDataCollection == nil {
			break
		}

		return e.complexity.PlanPayments.NeedsClaimsDataCollection(childComplexity), true

	case "PlanPayments.needsClaimsDataCollectionNote":
		if e.complexity.PlanPayments.NeedsClaimsDataCollectionNote == nil {
			break
		}

		return e.complexity.PlanPayments.NeedsClaimsDataCollectionNote(childComplexity), true

	case "PlanPayments.nonClaimsPaymentOther":
		if e.complexity.PlanPayments.NonClaimsPaymentOther == nil {
			break
		}

		return e.complexity.PlanPayments.NonClaimsPaymentOther(childComplexity), true

	case "PlanPayments.nonClaimsPayments":
		if e.complexity.PlanPayments.NonClaimsPayments == nil {
			break
		}

		return e.complexity.PlanPayments.NonClaimsPayments(childComplexity), true

	case "PlanPayments.nonClaimsPaymentsNote":
		if e.complexity.PlanPayments.NonClaimsPaymentsNote == nil {
			break
		}

		return e.complexity.PlanPayments.NonClaimsPaymentsNote(childComplexity), true

	case "PlanPayments.numberPaymentsPerPayCycle":
		if e.complexity.PlanPayments.NumberPaymentsPerPayCycle == nil {
			break
		}

		return e.complexity.PlanPayments.NumberPaymentsPerPayCycle(childComplexity), true

	case "PlanPayments.numberPaymentsPerPayCycleNote":
		if e.complexity.PlanPayments.NumberPaymentsPerPayCycleNote == nil {
			break
		}

		return e.complexity.PlanPayments.NumberPaymentsPerPayCycleNote(childComplexity), true

	case "PlanPayments.payClaims":
		if e.complexity.PlanPayments.PayClaims == nil {
			break
		}

		return e.complexity.PlanPayments.PayClaims(childComplexity), true

	case "PlanPayments.payClaimsNote":
		if e.complexity.PlanPayments.PayClaimsNote == nil {
			break
		}

		return e.complexity.PlanPayments.PayClaimsNote(childComplexity), true

	case "PlanPayments.payClaimsOther":
		if e.complexity.PlanPayments.PayClaimsOther == nil {
			break
		}

		return e.complexity.PlanPayments.PayClaimsOther(childComplexity), true

	case "PlanPayments.payModelDifferentiation":
		if e.complexity.PlanPayments.PayModelDifferentiation == nil {
			break
		}

		return e.complexity.PlanPayments.PayModelDifferentiation(childComplexity), true

	case "PlanPayments.payRecipients":
		if e.complexity.PlanPayments.PayRecipients == nil {
			break
		}

		return e.complexity.PlanPayments.PayRecipients(childComplexity), true

	case "PlanPayments.payRecipientsNote":
		if e.complexity.PlanPayments.PayRecipientsNote == nil {
			break
		}

		return e.complexity.PlanPayments.PayRecipientsNote(childComplexity), true

	case "PlanPayments.payRecipientsOtherSpecification":
		if e.complexity.PlanPayments.PayRecipientsOtherSpecification == nil {
			break
		}

		return e.complexity.PlanPayments.PayRecipientsOtherSpecification(childComplexity), true

	case "PlanPayments.payType":
		if e.complexity.PlanPayments.PayType == nil {
			break
		}

		return e.complexity.PlanPayments.PayType(childComplexity), true

	case "PlanPayments.payTypeNote":
		if e.complexity.PlanPayments.PayTypeNote == nil {
			break
		}

		return e.complexity.PlanPayments.PayTypeNote(childComplexity), true

	case "PlanPayments.paymentCalculationOwner":
		if e.complexity.PlanPayments.PaymentCalculationOwner == nil {
			break
		}

		return e.complexity.PlanPayments.PaymentCalculationOwner(childComplexity), true

	case "PlanPayments.paymentStartDate":
		if e.complexity.PlanPayments.PaymentStartDate == nil {
			break
		}

		return e.complexity.PlanPayments.PaymentStartDate(childComplexity), true

	case "PlanPayments.paymentStartDateNote":
		if e.complexity.PlanPayments.PaymentStartDateNote == nil {
			break
		}

		return e.complexity.PlanPayments.PaymentStartDateNote(childComplexity), true

	case "PlanPayments.planningToUseInnovationPaymentContractor":
		if e.complexity.PlanPayments.PlanningToUseInnovationPaymentContractor == nil {
			break
		}

		return e.complexity.PlanPayments.PlanningToUseInnovationPaymentContractor(childComplexity), true

	case "PlanPayments.planningToUseInnovationPaymentContractorNote":
		if e.complexity.PlanPayments.PlanningToUseInnovationPaymentContractorNote == nil {
			break
		}

		return e.complexity.PlanPayments.PlanningToUseInnovationPaymentContractorNote(childComplexity), true

	case "PlanPayments.providingThirdPartyFile":
		if e.complexity.PlanPayments.ProvidingThirdPartyFile == nil {
			break
		}

		return e.complexity.PlanPayments.ProvidingThirdPartyFile(childComplexity), true

	case "PlanPayments.readyForClearanceBy":
		if e.complexity.PlanPayments.ReadyForClearanceBy == nil {
			break
		}

		return e.complexity.PlanPayments.ReadyForClearanceBy(childComplexity), true

	case "PlanPayments.readyForClearanceByUserAccount":
		if e.complexity.PlanPayments.ReadyForClearanceByUserAccount == nil {
			break
		}

		return e.complexity.PlanPayments.ReadyForClearanceByUserAccount(childComplexity), true

	case "PlanPayments.readyForClearanceDts":
		if e.complexity.PlanPayments.ReadyForClearanceDts == nil {
			break
		}

		return e.complexity.PlanPayments.ReadyForClearanceDts(childComplexity), true

	case "PlanPayments.readyForReviewBy":
		if e.complexity.PlanPayments.ReadyForReviewBy == nil {
			break
		}

		return e.complexity.PlanPayments.ReadyForReviewBy(childComplexity), true

	case "PlanPayments.readyForReviewByUserAccount":
		if e.complexity.PlanPayments.ReadyForReviewByUserAccount == nil {
			break
		}

		return e.complexity.PlanPayments.ReadyForReviewByUserAccount(childComplexity), true

	case "PlanPayments.readyForReviewDts":
		if e.complexity.PlanPayments.ReadyForReviewDts == nil {
			break
		}

		return e.complexity.PlanPayments.ReadyForReviewDts(childComplexity), true

	case "PlanPayments.sharedSystemsInvolvedAdditionalClaimPayment":
		if e.complexity.PlanPayments.SharedSystemsInvolvedAdditionalClaimPayment == nil {
			break
		}

		return e.complexity.PlanPayments.SharedSystemsInvolvedAdditionalClaimPayment(childComplexity), true

	case "PlanPayments.sharedSystemsInvolvedAdditionalClaimPaymentNote":
		if e.complexity.PlanPayments.SharedSystemsInvolvedAdditionalClaimPaymentNote == nil {
			break
		}

		return e.complexity.PlanPayments.SharedSystemsInvolvedAdditionalClaimPaymentNote(childComplexity), true

	case "PlanPayments.shouldAnyProviderExcludedFFSSystemsNote":
		if e.complexity.PlanPayments.ShouldAnyProviderExcludedFFSSystemsNote == nil {
			break
		}

		return e.complexity.PlanPayments.ShouldAnyProviderExcludedFFSSystemsNote(childComplexity), true

	case "PlanPayments.shouldAnyProvidersExcludedFFSSystems":
		if e.complexity.PlanPayments.ShouldAnyProvidersExcludedFFSSystems == nil {
			break
		}

		return e.complexity.PlanPayments.ShouldAnyProvidersExcludedFFSSystems(childComplexity), true

	case "PlanPayments.status":
		if e.complexity.PlanPayments.Status == nil {
			break
		}

		return e.complexity.PlanPayments.Status(childComplexity), true

	case "PlanPayments.waiveBeneficiaryCostSharingForAnyServices":
		if e.complexity.PlanPayments.WaiveBeneficiaryCostSharingForAnyServices == nil {
			break
		}

		return e.complexity.PlanPayments.WaiveBeneficiaryCostSharingForAnyServices(childComplexity), true

	case "PlanPayments.waiveBeneficiaryCostSharingNote":
		if e.complexity.PlanPayments.WaiveBeneficiaryCostSharingNote == nil {
			break
		}

		return e.complexity.PlanPayments.WaiveBeneficiaryCostSharingNote(childComplexity), true

	case "PlanPayments.waiveBeneficiaryCostSharingServiceSpecification":
		if e.complexity.PlanPayments.WaiveBeneficiaryCostSharingServiceSpecification == nil {
			break
		}

		return e.complexity.PlanPayments.WaiveBeneficiaryCostSharingServiceSpecification(childComplexity), true

	case "PlanPayments.waiverOnlyAppliesPartOfPayment":
		if e.complexity.PlanPayments.WaiverOnlyAppliesPartOfPayment == nil {
			break
		}

		return e.complexity.PlanPayments.WaiverOnlyAppliesPartOfPayment(childComplexity), true

	case "PlanPayments.willRecoverPayments":
		if e.complexity.PlanPayments.WillRecoverPayments == nil {
			break
		}

		return e.complexity.PlanPayments.WillRecoverPayments(childComplexity), true

	case "PlanPayments.willRecoverPaymentsNote":
		if e.complexity.PlanPayments.WillRecoverPaymentsNote == nil {
			break
		}

		return e.complexity.PlanPayments.WillRecoverPaymentsNote(childComplexity), true

	case "PossibleOperationalNeed.createdBy":
		if e.complexity.PossibleOperationalNeed.CreatedBy == nil {
			break
		}

		return e.complexity.PossibleOperationalNeed.CreatedBy(childComplexity), true

	case "PossibleOperationalNeed.createdByUserAccount":
		if e.complexity.PossibleOperationalNeed.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.PossibleOperationalNeed.CreatedByUserAccount(childComplexity), true

	case "PossibleOperationalNeed.createdDts":
		if e.complexity.PossibleOperationalNeed.CreatedDts == nil {
			break
		}

		return e.complexity.PossibleOperationalNeed.CreatedDts(childComplexity), true

	case "PossibleOperationalNeed.id":
		if e.complexity.PossibleOperationalNeed.ID == nil {
			break
		}

		return e.complexity.PossibleOperationalNeed.ID(childComplexity), true

	case "PossibleOperationalNeed.key":
		if e.complexity.PossibleOperationalNeed.Key == nil {
			break
		}

		return e.complexity.PossibleOperationalNeed.Key(childComplexity), true

	case "PossibleOperationalNeed.modifiedBy":
		if e.complexity.PossibleOperationalNeed.ModifiedBy == nil {
			break
		}

		return e.complexity.PossibleOperationalNeed.ModifiedBy(childComplexity), true

	case "PossibleOperationalNeed.modifiedByUserAccount":
		if e.complexity.PossibleOperationalNeed.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.PossibleOperationalNeed.ModifiedByUserAccount(childComplexity), true

	case "PossibleOperationalNeed.modifiedDts":
		if e.complexity.PossibleOperationalNeed.ModifiedDts == nil {
			break
		}

		return e.complexity.PossibleOperationalNeed.ModifiedDts(childComplexity), true

	case "PossibleOperationalNeed.name":
		if e.complexity.PossibleOperationalNeed.Name == nil {
			break
		}

		return e.complexity.PossibleOperationalNeed.Name(childComplexity), true

	case "PossibleOperationalNeed.possibleSolutions":
		if e.complexity.PossibleOperationalNeed.PossibleSolutions == nil {
			break
		}

		return e.complexity.PossibleOperationalNeed.PossibleSolutions(childComplexity), true

	case "PossibleOperationalNeed.section":
		if e.complexity.PossibleOperationalNeed.Section == nil {
			break
		}

		return e.complexity.PossibleOperationalNeed.Section(childComplexity), true

	case "PossibleOperationalSolution.createdBy":
		if e.complexity.PossibleOperationalSolution.CreatedBy == nil {
			break
		}

		return e.complexity.PossibleOperationalSolution.CreatedBy(childComplexity), true

	case "PossibleOperationalSolution.createdByUserAccount":
		if e.complexity.PossibleOperationalSolution.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.PossibleOperationalSolution.CreatedByUserAccount(childComplexity), true

	case "PossibleOperationalSolution.createdDts":
		if e.complexity.PossibleOperationalSolution.CreatedDts == nil {
			break
		}

		return e.complexity.PossibleOperationalSolution.CreatedDts(childComplexity), true

	case "PossibleOperationalSolution.id":
		if e.complexity.PossibleOperationalSolution.ID == nil {
			break
		}

		return e.complexity.PossibleOperationalSolution.ID(childComplexity), true

	case "PossibleOperationalSolution.key":
		if e.complexity.PossibleOperationalSolution.Key == nil {
			break
		}

		return e.complexity.PossibleOperationalSolution.Key(childComplexity), true

	case "PossibleOperationalSolution.modifiedBy":
		if e.complexity.PossibleOperationalSolution.ModifiedBy == nil {
			break
		}

		return e.complexity.PossibleOperationalSolution.ModifiedBy(childComplexity), true

	case "PossibleOperationalSolution.modifiedByUserAccount":
		if e.complexity.PossibleOperationalSolution.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.PossibleOperationalSolution.ModifiedByUserAccount(childComplexity), true

	case "PossibleOperationalSolution.modifiedDts":
		if e.complexity.PossibleOperationalSolution.ModifiedDts == nil {
			break
		}

		return e.complexity.PossibleOperationalSolution.ModifiedDts(childComplexity), true

	case "PossibleOperationalSolution.name":
		if e.complexity.PossibleOperationalSolution.Name == nil {
			break
		}

		return e.complexity.PossibleOperationalSolution.Name(childComplexity), true

	case "PossibleOperationalSolution.treatAsOther":
		if e.complexity.PossibleOperationalSolution.TreatAsOther == nil {
			break
		}

		return e.complexity.PossibleOperationalSolution.TreatAsOther(childComplexity), true

	case "PrepareForClearance.latestClearanceDts":
		if e.complexity.PrepareForClearance.LatestClearanceDts == nil {
			break
		}

		return e.complexity.PrepareForClearance.LatestClearanceDts(childComplexity), true

	case "PrepareForClearance.status":
		if e.complexity.PrepareForClearance.Status == nil {
			break
		}

		return e.complexity.PrepareForClearance.Status(childComplexity), true

	case "Query.auditChanges":
		if e.complexity.Query.AuditChanges == nil {
			break
		}

		args, err := ec.field_Query_auditChanges_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuditChanges(childComplexity, args["tableName"].(string), args["primaryKey"].(uuid.UUID)), true

	case "Query.crTdl":
		if e.complexity.Query.CrTdl == nil {
			break
		}

		args, err := ec.field_Query_crTdl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CrTdl(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.currentUser":
		if e.complexity.Query.CurrentUser == nil {
			break
		}

		return e.complexity.Query.CurrentUser(childComplexity), true

	case "Query.existingModelCollection":
		if e.complexity.Query.ExistingModelCollection == nil {
			break
		}

		return e.complexity.Query.ExistingModelCollection(childComplexity), true

	case "Query.existingModelLink":
		if e.complexity.Query.ExistingModelLink == nil {
			break
		}

		args, err := ec.field_Query_existingModelLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ExistingModelLink(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.modelPlan":
		if e.complexity.Query.ModelPlan == nil {
			break
		}

		args, err := ec.field_Query_modelPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModelPlan(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.modelPlanCollection":
		if e.complexity.Query.ModelPlanCollection == nil {
			break
		}

		args, err := ec.field_Query_modelPlanCollection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModelPlanCollection(childComplexity, args["filter"].(model.ModelPlanFilter)), true

	case "Query.ndaInfo":
		if e.complexity.Query.NdaInfo == nil {
			break
		}

		return e.complexity.Query.NdaInfo(childComplexity), true

	case "Query.operationalNeed":
		if e.complexity.Query.OperationalNeed == nil {
			break
		}

		args, err := ec.field_Query_operationalNeed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OperationalNeed(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.operationalSolution":
		if e.complexity.Query.OperationalSolution == nil {
			break
		}

		args, err := ec.field_Query_operationalSolution_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OperationalSolution(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.operationalSolutions":
		if e.complexity.Query.OperationalSolutions == nil {
			break
		}

		args, err := ec.field_Query_operationalSolutions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OperationalSolutions(childComplexity, args["operationalNeedID"].(uuid.UUID), args["includeNotNeeded"].(bool)), true

	case "Query.planCollaboratorByID":
		if e.complexity.Query.PlanCollaboratorByID == nil {
			break
		}

		args, err := ec.field_Query_planCollaboratorByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PlanCollaboratorByID(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.planDocument":
		if e.complexity.Query.PlanDocument == nil {
			break
		}

		args, err := ec.field_Query_planDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PlanDocument(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.planPayments":
		if e.complexity.Query.PlanPayments == nil {
			break
		}

		args, err := ec.field_Query_planPayments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PlanPayments(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.possibleOperationalNeeds":
		if e.complexity.Query.PossibleOperationalNeeds == nil {
			break
		}

		return e.complexity.Query.PossibleOperationalNeeds(childComplexity), true

	case "Query.possibleOperationalSolutions":
		if e.complexity.Query.PossibleOperationalSolutions == nil {
			break
		}

		return e.complexity.Query.PossibleOperationalSolutions(childComplexity), true

	case "Query.searchChangeTable":
		if e.complexity.Query.SearchChangeTable == nil {
			break
		}

		args, err := ec.field_Query_searchChangeTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchChangeTable(childComplexity, args["request"].(models.SearchRequest), args["limit"].(int), args["offset"].(int)), true

	case "Query.searchChangeTableByActor":
		if e.complexity.Query.SearchChangeTableByActor == nil {
			break
		}

		args, err := ec.field_Query_searchChangeTableByActor_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchChangeTableByActor(childComplexity, args["actor"].(string), args["limit"].(int), args["offset"].(int)), true

	case "Query.searchChangeTableByDateRange":
		if e.complexity.Query.SearchChangeTableByDateRange == nil {
			break
		}

		args, err := ec.field_Query_searchChangeTableByDateRange_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchChangeTableByDateRange(childComplexity, args["startDate"].(time.Time), args["endDate"].(time.Time), args["limit"].(int), args["offset"].(int)), true

	case "Query.searchChangeTableByModelPlanID":
		if e.complexity.Query.SearchChangeTableByModelPlanID == nil {
			break
		}

		args, err := ec.field_Query_searchChangeTableByModelPlanID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchChangeTableByModelPlanID(childComplexity, args["modelPlanID"].(uuid.UUID), args["limit"].(int), args["offset"].(int)), true

	case "Query.searchChangeTableByModelStatus":
		if e.complexity.Query.SearchChangeTableByModelStatus == nil {
			break
		}

		args, err := ec.field_Query_searchChangeTableByModelStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchChangeTableByModelStatus(childComplexity, args["modelStatus"].(models.ModelStatus), args["limit"].(int), args["offset"].(int)), true

	case "Query.searchChangeTableDateHistogramConsolidatedAggregations":
		if e.complexity.Query.SearchChangeTableDateHistogramConsolidatedAggregations == nil {
			break
		}

		args, err := ec.field_Query_searchChangeTableDateHistogramConsolidatedAggregations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchChangeTableDateHistogramConsolidatedAggregations(childComplexity, args["interval"].(string), args["limit"].(int), args["offset"].(int)), true

	case "Query.searchChangeTableWithFreeText":
		if e.complexity.Query.SearchChangeTableWithFreeText == nil {
			break
		}

		args, err := ec.field_Query_searchChangeTableWithFreeText_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchChangeTableWithFreeText(childComplexity, args["searchText"].(string), args["limit"].(int), args["offset"].(int)), true

	case "Query.searchChanges":
		if e.complexity.Query.SearchChanges == nil {
			break
		}

		args, err := ec.field_Query_searchChanges_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchChanges(childComplexity, args["filters"].([]*model.SearchFilter), args["limit"].(int), args["offset"].(int)), true

	case "Query.searchModelPlanChangesByDateRange":
		if e.complexity.Query.SearchModelPlanChangesByDateRange == nil {
			break
		}

		args, err := ec.field_Query_searchModelPlanChangesByDateRange_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchModelPlanChangesByDateRange(childComplexity, args["modelPlanID"].(uuid.UUID), args["startDate"].(time.Time), args["endDate"].(time.Time), args["limit"].(int), args["offset"].(int)), true

	case "Query.searchOktaUsers":
		if e.complexity.Query.SearchOktaUsers == nil {
			break
		}

		args, err := ec.field_Query_searchOktaUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchOktaUsers(childComplexity, args["searchTerm"].(string)), true

	case "Query.taskListSectionLocks":
		if e.complexity.Query.TaskListSectionLocks == nil {
			break
		}

		args, err := ec.field_Query_taskListSectionLocks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TaskListSectionLocks(childComplexity, args["modelPlanID"].(uuid.UUID)), true

	case "Query.userAccount":
		if e.complexity.Query.UserAccount == nil {
			break
		}

		args, err := ec.field_Query_userAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserAccount(childComplexity, args["username"].(string)), true

	case "Subscription.onLockTaskListSectionContext":
		if e.complexity.Subscription.OnLockTaskListSectionContext == nil {
			break
		}

		args, err := ec.field_Subscription_onLockTaskListSectionContext_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.OnLockTaskListSectionContext(childComplexity, args["modelPlanID"].(uuid.UUID)), true

	case "Subscription.onTaskListSectionLocksChanged":
		if e.complexity.Subscription.OnTaskListSectionLocksChanged == nil {
			break
		}

		args, err := ec.field_Subscription_onTaskListSectionLocksChanged_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.OnTaskListSectionLocksChanged(childComplexity, args["modelPlanID"].(uuid.UUID)), true

	case "TaskListSectionLockStatus.isAssessment":
		if e.complexity.TaskListSectionLockStatus.IsAssessment == nil {
			break
		}

		return e.complexity.TaskListSectionLockStatus.IsAssessment(childComplexity), true

	case "TaskListSectionLockStatus.lockedByUserAccount":
		if e.complexity.TaskListSectionLockStatus.LockedByUserAccount == nil {
			break
		}

		return e.complexity.TaskListSectionLockStatus.LockedByUserAccount(childComplexity), true

	case "TaskListSectionLockStatus.modelPlanID":
		if e.complexity.TaskListSectionLockStatus.ModelPlanID == nil {
			break
		}

		return e.complexity.TaskListSectionLockStatus.ModelPlanID(childComplexity), true

	case "TaskListSectionLockStatus.section":
		if e.complexity.TaskListSectionLockStatus.Section == nil {
			break
		}

		return e.complexity.TaskListSectionLockStatus.Section(childComplexity), true

	case "TaskListSectionLockStatusChanged.actionType":
		if e.complexity.TaskListSectionLockStatusChanged.ActionType == nil {
			break
		}

		return e.complexity.TaskListSectionLockStatusChanged.ActionType(childComplexity), true

	case "TaskListSectionLockStatusChanged.changeType":
		if e.complexity.TaskListSectionLockStatusChanged.ChangeType == nil {
			break
		}

		return e.complexity.TaskListSectionLockStatusChanged.ChangeType(childComplexity), true

	case "TaskListSectionLockStatusChanged.lockStatus":
		if e.complexity.TaskListSectionLockStatusChanged.LockStatus == nil {
			break
		}

		return e.complexity.TaskListSectionLockStatusChanged.LockStatus(childComplexity), true

	case "UserAccount.commonName":
		if e.complexity.UserAccount.CommonName == nil {
			break
		}

		return e.complexity.UserAccount.CommonName(childComplexity), true

	case "UserAccount.email":
		if e.complexity.UserAccount.Email == nil {
			break
		}

		return e.complexity.UserAccount.Email(childComplexity), true

	case "UserAccount.familyName":
		if e.complexity.UserAccount.FamilyName == nil {
			break
		}

		return e.complexity.UserAccount.FamilyName(childComplexity), true

	case "UserAccount.givenName":
		if e.complexity.UserAccount.GivenName == nil {
			break
		}

		return e.complexity.UserAccount.GivenName(childComplexity), true

	case "UserAccount.hasLoggedIn":
		if e.complexity.UserAccount.HasLoggedIn == nil {
			break
		}

		return e.complexity.UserAccount.HasLoggedIn(childComplexity), true

	case "UserAccount.id":
		if e.complexity.UserAccount.ID == nil {
			break
		}

		return e.complexity.UserAccount.ID(childComplexity), true

	case "UserAccount.isEUAID":
		if e.complexity.UserAccount.IsEUAID == nil {
			break
		}

		return e.complexity.UserAccount.IsEUAID(childComplexity), true

	case "UserAccount.locale":
		if e.complexity.UserAccount.Locale == nil {
			break
		}

		return e.complexity.UserAccount.Locale(childComplexity), true

	case "UserAccount.username":
		if e.complexity.UserAccount.Username == nil {
			break
		}

		return e.complexity.UserAccount.Username(childComplexity), true

	case "UserAccount.zoneInfo":
		if e.complexity.UserAccount.ZoneInfo == nil {
			break
		}

		return e.complexity.UserAccount.ZoneInfo(childComplexity), true

	case "UserInfo.displayName":
		if e.complexity.UserInfo.DisplayName == nil {
			break
		}

		return e.complexity.UserInfo.DisplayName(childComplexity), true

	case "UserInfo.email":
		if e.complexity.UserInfo.Email == nil {
			break
		}

		return e.complexity.UserInfo.Email(childComplexity), true

	case "UserInfo.firstName":
		if e.complexity.UserInfo.FirstName == nil {
			break
		}

		return e.complexity.UserInfo.FirstName(childComplexity), true

	case "UserInfo.lastName":
		if e.complexity.UserInfo.LastName == nil {
			break
		}

		return e.complexity.UserInfo.LastName(childComplexity), true

	case "UserInfo.username":
		if e.complexity.UserInfo.Username == nil {
			break
		}

		return e.complexity.UserInfo.Username(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCreateOperationalSolutionSubtaskInput,
		ec.unmarshalInputDiscussionReplyCreateInput,
		ec.unmarshalInputPlanCollaboratorCreateInput,
		ec.unmarshalInputPlanCrTdlCreateInput,
		ec.unmarshalInputPlanDiscussionCreateInput,
		ec.unmarshalInputPlanDocumentInput,
		ec.unmarshalInputSearchFilter,
		ec.unmarshalInputSearchRequest,
		ec.unmarshalInputUpdateOperationalSolutionSubtaskInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphql", Input: `

"""
The current user's Launch Darkly key
"""
type LaunchDarklySettings {
  userKey: String!
  signedHash: String!
}

"""
The current user of the application
"""
type CurrentUser {
  launchDarkly: LaunchDarklySettings!
}
"""
UUIDs are represented using 36 ASCII characters, for example B0511859-ADE6-4A67-8969-16EC280C0E1A
"""
scalar UUID
"""
Time values are represented as strings using RFC3339 format, for example 2019-10-12T07:20:50G.52Z
"""
scalar Time
"""
Maps an arbitrary GraphQL value to a map[string]interface{} Go type.
"""
scalar Map

"""
Any represents any GraphQL value.
"""
scalar Any


enum SortDirection {
  ASC
  DESC
}
"""
https://gqlgen.com/reference/file-upload/
Represents a multipart file upload
"""
scalar Upload

"""
ModelPlan represent the data point for plans about a model. It is the central data type in the application
"""
type ModelPlan {
  id: UUID!
  modelName: String!
  archived: Boolean!
  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
  basics: PlanBasics!
  generalCharacteristics: PlanGeneralCharacteristics!
  participantsAndProviders: PlanParticipantsAndProviders!
  beneficiaries: PlanBeneficiaries!
  opsEvalAndLearning: PlanOpsEvalAndLearning!
  collaborators: [PlanCollaborator!]!
  documents: [PlanDocument!]!
  discussions: [PlanDiscussion!]!
  payments: PlanPayments!
  status: ModelStatus!
  isFavorite: Boolean!
  isCollaborator: Boolean!
  crTdls: [PlanCrTdl!]!
  prepareForClearance: PrepareForClearance!
  nameHistory(sort: SortDirection! = DESC): [String!]!
  operationalNeeds: [OperationalNeed!]!
  existingModelLinks: [ExistingModelLink!]!
}

type OperationalNeed {
    id: UUID!
    modelPlanID: UUID!

    needed: Boolean # if null, it has not been answered
    solutions(includeNotNeeded: Boolean! = false): [OperationalSolution!]!

    key: OperationalNeedKey
    name: String
    nameOther: String
    section: TaskListSection

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}

type PossibleOperationalNeed {
    id: Int!
    possibleSolutions: [PossibleOperationalSolution!]!
    name: String!
    key: OperationalNeedKey!
    section: TaskListSection

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}
type PossibleOperationalSolution {
    id: Int!
    name: String!
    key: OperationalSolutionKey!
    treatAsOther: Boolean!

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}

"""
ModelPlanChanges represents the possible changes you can make to a model plan when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input ModelPlanChanges @goModel(model: "map[string]interface{}") {
  modelName: String
  someNumbers: [Int!]
  archived: Boolean
  status: ModelStatus
}

"""
PlanCollaborator represents a collaborator on a plan
"""
type PlanCollaborator {
  id: UUID!
  modelPlanID: UUID!
  userID: UUID!
  userAccount: UserAccount!
  teamRole: TeamRole!
  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}
"""
ExistingModel represents a model that already exists outside of the scope of MINT
"""
type ExistingModel {
  id: Int
  modelName: String
  stage: String!
  numberOfParticipants: String
  category: String
  authority: String
  description: String
  numberOfBeneficiariesImpacted: Int
  numberOfPhysiciansImpacted: Int
  dateBegan: Time
  dateEnded: Time
  states: String
  keywords: String
  url: String
  displayModelSummary: Boolean

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

type ExistingModelLink {
  id: UUID
  modelPlanID: UUID!
  existingModelID: Int
  existingModel: ExistingModel
  currentModelPlanID: UUID
  currentModelPlan: ModelPlan

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

type TaskListSectionLockStatusChanged {
  changeType: ChangeType!
  lockStatus: TaskListSectionLockStatus!
  actionType: ActionType!
}

type TaskListSectionLockStatus {
  modelPlanID: UUID!
  section: TaskListSection!
  lockedByUserAccount: UserAccount!
  isAssessment: Boolean!
}

"""
PlanCollaboratorCreateInput represents the data required to create a collaborator on a plan
"""
input PlanCollaboratorCreateInput {
  modelPlanID: UUID!
  userName: String!
  teamRole: TeamRole!
}

"""
PlanDocument represents a document on a plan
"""
type PlanDocument {
  id: UUID!
  modelPlanID: UUID!
  fileType: String!
  bucket: String!
  fileKey: String!
  virusScanned: Boolean!
  virusClean: Boolean!
  restricted: Boolean!
  fileName: String!
  fileSize: Int!
  documentType: DocumentType!
  otherType: String
  optionalNotes: String
  downloadUrl: String
  deletedAt: Time
  numLinkedSolutions: Int!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}


"""
PlanDocumentInput
"""
input PlanDocumentInput {
  modelPlanID: UUID!
  fileData: Upload!
  documentType: DocumentType!
  restricted: Boolean!
  otherTypeDescription: String
  optionalNotes: String
}

"""
Represents plan basics
"""
type PlanBasics {
  id: UUID!
  modelPlanID: UUID!

  modelCategory: ModelCategory
  cmsCenters: [CMSCenter!]!
  cmsOther: String
  cmmiGroups: [CMMIGroup!]!
  modelType: ModelType
  problem: String
  goal: String
  testInterventions: String
  note: String

  # Milestones
  completeICIP: Time
  clearanceStarts: Time
  clearanceEnds: Time
  announced: Time
  applicationsStart: Time
  applicationsEnd: Time
  performancePeriodStarts: Time
  performancePeriodEnds: Time
  wrapUpEnds: Time
  highLevelNote: String
  phasedIn: Boolean
  phasedInNote: String

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

  readyForReviewBy: UUID
  readyForReviewByUserAccount: UserAccount
  readyForReviewDts: Time
  readyForClearanceBy: UUID
  readyForClearanceByUserAccount: UserAccount
  readyForClearanceDts: Time

  status: TaskStatus!
}

"""
PlanBasicsChanges represents the possible changes you can make to a Plan Basics object when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input PlanBasicsChanges @goModel(model: "map[string]interface{}") {
  modelCategory: ModelCategory
  cmsCenters: [CMSCenter!]
  cmsOther: String
  cmmiGroups: [CMMIGroup!]
  modelType: ModelType
  problem: String
  goal: String
  testInterventions: String
  note: String

  # Milestones
  completeICIP: Time
  clearanceStarts: Time
  clearanceEnds: Time
  announced: Time
  applicationsStart: Time
  applicationsEnd: Time
  performancePeriodStarts: Time
  performancePeriodEnds: Time
  wrapUpEnds: Time
  highLevelNote: String
  phasedIn: Boolean
  phasedInNote: String
  status: TaskStatusInput
}

"""
Represents a person response from the Okta API
"""
type UserInfo {
  firstName: String!
  lastName: String!
  displayName: String!
  email: String!
  username: String!
}

"""
PlanDiscussion represents plan discussion
"""
type PlanDiscussion  {
	id:          UUID!
	modelPlanID: UUID!
	content: String
	status: DiscussionStatus!
  replies: [DiscussionReply!]!
  isAssessment: Boolean!


  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

"""
PlanDiscussionCreateInput represents the necessary fields to create a plan discussion
"""
input PlanDiscussionCreateInput {
  modelPlanID: UUID!
  content: String!
}

"""
PlanDiscussionChanges represents the possible changes you can make to a plan discussion when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input PlanDiscussionChanges @goModel(model: "map[string]interface{}") {
  content: String
  status: DiscussionStatus
}

"""
DiscussionReply represents a discussion reply
"""
type DiscussionReply  {
	id: UUID!
	discussionID: UUID!
	content: String
	resolution: Boolean
  isAssessment: Boolean!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

"""
DiscussionReplyCreateInput represents the necessary fields to create a discussion reply
"""
input DiscussionReplyCreateInput {
  discussionID: UUID!
  content: String!
  resolution: Boolean! = false
}

"""
DiscussionReplyChanges represents the possible changes you can make to a discussion reply when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input DiscussionReplyChanges @goModel(model: "map[string]interface{}") {
  content: String
  resolution: Boolean
}

"""
PlanGeneralCharacteristics represents a plan general characteristics object
"""
type PlanGeneralCharacteristics {
  id: UUID!
  modelPlanID: UUID!

  # Page 1
  isNewModel: Boolean
  existingModel: String
  resemblesExistingModel: Boolean
  resemblesExistingModelHow: String
  resemblesExistingModelNote: String
  hasComponentsOrTracks: Boolean
  hasComponentsOrTracksDiffer: String
  hasComponentsOrTracksNote: String

  # Page 2
  alternativePaymentModelTypes: [AlternativePaymentModelType!]!
  alternativePaymentModelNote: String
  keyCharacteristics: [KeyCharacteristic!]!
  keyCharacteristicsOther: String
  keyCharacteristicsNote: String
  collectPlanBids: Boolean
  collectPlanBidsNote: String
  managePartCDEnrollment: Boolean
  managePartCDEnrollmentNote: String
  planContractUpdated: Boolean
  planContractUpdatedNote: String

  # Page 3
  careCoordinationInvolved: Boolean
  careCoordinationInvolvedDescription: String
  careCoordinationInvolvedNote: String
  additionalServicesInvolved: Boolean
  additionalServicesInvolvedDescription: String
  additionalServicesInvolvedNote: String
  communityPartnersInvolved: Boolean
  communityPartnersInvolvedDescription: String
  communityPartnersInvolvedNote: String

  # Page 4
  geographiesTargeted: Boolean
  geographiesTargetedTypes: [GeographyType!]!
  geographiesTargetedTypesOther: String
  geographiesTargetedAppliedTo: [GeographyApplication!]!
  geographiesTargetedAppliedToOther: String
  geographiesTargetedNote: String
  participationOptions: Boolean
  participationOptionsNote: String
  agreementTypes: [AgreementType!]!
  agreementTypesOther: String
  multiplePatricipationAgreementsNeeded: Boolean
  multiplePatricipationAgreementsNeededNote: String

  # Page 5
  rulemakingRequired: Boolean
  rulemakingRequiredDescription: String
  rulemakingRequiredNote: String
  authorityAllowances: [AuthorityAllowance!]!
  authorityAllowancesOther: String
  authorityAllowancesNote: String
  waiversRequired: Boolean
  waiversRequiredTypes: [WaiverType!]!
  waiversRequiredNote: String

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

  readyForReviewBy: UUID
  readyForReviewByUserAccount: UserAccount
  readyForReviewDts: Time
  readyForClearanceBy: UUID
  readyForClearanceByUserAccount: UserAccount
  readyForClearanceDts: Time

  status: TaskStatus!
}

"""
PlanGeneralCharacteristicsChanges represents the possible changes you can make to a
general characteristics object when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input PlanGeneralCharacteristicsChanges @goModel(model: "map[string]interface{}") {
  # Page 1
  isNewModel: Boolean
  existingModel: String
  resemblesExistingModel: Boolean
  resemblesExistingModelHow: String
  resemblesExistingModelNote: String
  hasComponentsOrTracks: Boolean
  hasComponentsOrTracksDiffer: String
  hasComponentsOrTracksNote: String

  # Page 2
  alternativePaymentModelTypes: [AlternativePaymentModelType!]
  alternativePaymentModelNote: String
  keyCharacteristics: [KeyCharacteristic!]
  keyCharacteristicsOther: String
  keyCharacteristicsNote: String
  collectPlanBids: Boolean
  collectPlanBidsNote: String
  managePartCDEnrollment: Boolean
  managePartCDEnrollmentNote: String
  planContractUpdated: Boolean
  planContractUpdatedNote: String

  # Page 3
  careCoordinationInvolved: Boolean
  careCoordinationInvolvedDescription: String
  careCoordinationInvolvedNote: String
  additionalServicesInvolved: Boolean
  additionalServicesInvolvedDescription: String
  additionalServicesInvolvedNote: String
  communityPartnersInvolved: Boolean
  communityPartnersInvolvedDescription: String
  communityPartnersInvolvedNote: String

  # Page 4
  geographiesTargeted: Boolean
  geographiesTargetedTypes: [GeographyType!]
  geographiesTargetedTypesOther: String
  geographiesTargetedAppliedTo: [GeographyApplication!]
  geographiesTargetedAppliedToOther: String
  geographiesTargetedNote: String
  participationOptions: Boolean
  participationOptionsNote: String
  agreementTypes: [AgreementType!]
  agreementTypesOther: String
  multiplePatricipationAgreementsNeeded: Boolean
  multiplePatricipationAgreementsNeededNote: String

  # Page 5
  rulemakingRequired: Boolean
  rulemakingRequiredDescription: String
  rulemakingRequiredNote: String
  authorityAllowances: [AuthorityAllowance!]
  authorityAllowancesOther: String
  authorityAllowancesNote: String
  waiversRequired: Boolean
  waiversRequiredTypes: [WaiverType!]
  waiversRequiredNote: String

  status: TaskStatusInput
}

"""
Plan Beneficiaries represents the the beneficiaries section of the task list
"""

type PlanBeneficiaries {
  id: UUID!
  modelPlanID: UUID!
  #Page 1
  beneficiaries: [BeneficiariesType!]!
  beneficiariesOther: String
  beneficiariesNote: String
  treatDualElligibleDifferent: TriStateAnswer
  treatDualElligibleDifferentHow: String
  treatDualElligibleDifferentNote: String
  excludeCertainCharacteristics: TriStateAnswer
  excludeCertainCharacteristicsCriteria: String
  excludeCertainCharacteristicsNote: String
  #Page 2
  numberPeopleImpacted: Int
  estimateConfidence: ConfidenceType
  confidenceNote: String
  beneficiarySelectionMethod: [SelectionMethodType!]!
  beneficiarySelectionOther: String
  beneficiarySelectionNote: String
  #Page 3
  beneficiarySelectionFrequency: FrequencyType
  beneficiarySelectionFrequencyOther: String
  beneficiarySelectionFrequencyNote: String
  beneficiaryOverlap: OverlapType
  beneficiaryOverlapNote: String
  precedenceRules: String

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

  readyForReviewBy: UUID
  readyForReviewByUserAccount: UserAccount
  readyForReviewDts: Time
  readyForClearanceBy: UUID
  readyForClearanceByUserAccount: UserAccount
  readyForClearanceDts: Time

  status: TaskStatus!
}

input PlanBeneficiariesChanges @goModel(model: "map[string]interface{}") {
  #Page 1
  beneficiaries: [BeneficiariesType!]
  beneficiariesOther: String
  beneficiariesNote: String
  treatDualElligibleDifferent: TriStateAnswer
  treatDualElligibleDifferentHow: String
  treatDualElligibleDifferentNote: String
  excludeCertainCharacteristics: TriStateAnswer
  excludeCertainCharacteristicsCriteria: String
  excludeCertainCharacteristicsNote: String
  #Page 2
  numberPeopleImpacted: Int
  estimateConfidence: ConfidenceType
  confidenceNote: String
  beneficiarySelectionMethod: [SelectionMethodType!]
  beneficiarySelectionOther: String
  beneficiarySelectionNote: String
  #Page 3
  beneficiarySelectionFrequency: FrequencyType
  beneficiarySelectionFrequencyOther: String
  beneficiarySelectionFrequencyNote: String
  beneficiaryOverlap: OverlapType
  beneficiaryOverlapNote: String
  precedenceRules: String

  status: TaskStatusInput
}

"""
PlanParticipantsAndProviders is the task list section that deals with information regarding all Providers and Participants
"""
type PlanParticipantsAndProviders {
  id: UUID!
  modelPlanID: UUID!

  #Page 1
  participants:                      [ParticipantsType!]!
  medicareProviderType:              String
  statesEngagement:                  String
  participantsOther:                 String
  participantsNote:                  String
  participantsCurrentlyInModels:     Boolean
  participantsCurrentlyInModelsNote: String
  modelApplicationLevel:             String

  #Page 2
  expectedNumberOfParticipants: Int
  estimateConfidence:           ConfidenceType
  confidenceNote:               String
  recruitmentMethod:            RecruitmentType
  recruitmentOther:             String
  recruitmentNote:              String
  selectionMethod:              [ParticipantSelectionType!]!
  selectionOther:               String
  selectionNote:                String

  #Page 3
  communicationMethod:   [ParticipantCommunicationType!]!
  communicationMethodOther:   String
  communicationNote:     String
  participantAssumeRisk: Boolean
  riskType:              ParticipantRiskType
  riskOther:             String
  riskNote:              String
  willRiskChange:        Boolean
  willRiskChangeNote:    String

  #Page 4
  coordinateWork:          Boolean
  coordinateWorkNote:      String
  gainsharePayments:       Boolean
  gainsharePaymentsTrack: Boolean
  gainsharePaymentsNote:   String
  participantsIds:         [ParticipantsIDType!]!
  participantsIdsOther:    String
  participantsIDSNote:     String

  #Page 5
  providerAdditionFrequency:      FrequencyType
  providerAdditionFrequencyOther: String
  providerAdditionFrequencyNote:  String
  providerAddMethod:              [ProviderAddType!]!
  providerAddMethodOther:         String
  providerAddMethodNote:          String
  providerLeaveMethod:            [ProviderLeaveType!]!
  providerLeaveMethodOther:       String
  providerLeaveMethodNote:        String
  providerOverlap:                OverlapType
  providerOverlapHierarchy:       String
  providerOverlapNote:            String


  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

  readyForReviewBy: UUID
  readyForReviewByUserAccount: UserAccount
  readyForReviewDts: Time
  readyForClearanceBy: UUID
  readyForClearanceByUserAccount: UserAccount
  readyForClearanceDts: Time

  status: TaskStatus!

}

"""
PlanParticipantsAndProvidersChanges represents the possible changes you can make to a
providers and participants object when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input PlanParticipantsAndProvidersChanges @goModel(model: "map[string]interface{}") {
  #Page 1
  participants:                      [ParticipantsType!]
  medicareProviderType:              String
  statesEngagement:                  String
  participantsOther:                 String
  participantsNote:                  String
  participantsCurrentlyInModels:     Boolean
  participantsCurrentlyInModelsNote: String
  modelApplicationLevel:             String

  #Page 2
  expectedNumberOfParticipants: Int
  estimateConfidence:           ConfidenceType
  confidenceNote:               String
  recruitmentMethod:            RecruitmentType
  recruitmentOther:             String
  recruitmentNote:              String
  selectionMethod:              [ParticipantSelectionType!]
  selectionOther:               String
  selectionNote:                String

  #Page 3
  communicationMethod:   [ParticipantCommunicationType!]
  communicationMethodOther:   String
  communicationNote:     String
  participantAssumeRisk: Boolean
  riskType:              ParticipantRiskType
  riskOther:             String
  riskNote:              String
  willRiskChange:        Boolean
  willRiskChangeNote:    String

  #Page 4
  coordinateWork:          Boolean
  coordinateWorkNote:      String
  gainsharePayments:       Boolean
  gainsharePaymentsTrack: Boolean
  gainsharePaymentsNote:   String
  participantsIds:         [ParticipantsIDType!]
  participantsIdsOther:    String
  participantsIDSNote:     String

  #Page 5
  providerAdditionFrequency:      FrequencyType
  providerAdditionFrequencyOther: String
  providerAdditionFrequencyNote:  String
  providerAddMethod:              [ProviderAddType!]
  providerAddMethodOther:         String
  providerAddMethodNote:          String
  providerLeaveMethod:            [ProviderLeaveType!]
  providerLeaveMethodOther:       String
  providerLeaveMethodNote:        String
  providerOverlap:                OverlapType
  providerOverlapHierarchy:       String
  providerOverlapNote:            String

  status: TaskStatusInput
}

"""
PlanPayments is the task list section that deals with information regarding Payments
"""
type PlanPayments {
  id: UUID!
  modelPlanID: UUID!

  # Page 1
  fundingSource:                      [FundingSource!]!
  fundingSourceTrustFund:             String
  fundingSourceOther:                 String
  fundingSourceNote:                  String
  fundingSourceR:                     [FundingSource!]!
  fundingSourceRTrustFund:            String
  fundingSourceROther:                String
  fundingSourceRNote:                 String
  payRecipients:                      [PayRecipient!]!
  payRecipientsOtherSpecification:    String
  payRecipientsNote:                  String
  payType:                            [PayType!]!
  payTypeNote:                        String

  # Page 2
  payClaims:                                      [ClaimsBasedPayType!]!
  payClaimsOther:                                 String
  payClaimsNote:                                  String
  shouldAnyProvidersExcludedFFSSystems:           Boolean
  shouldAnyProviderExcludedFFSSystemsNote:        String
  changesMedicarePhysicianFeeSchedule:            Boolean
  changesMedicarePhysicianFeeScheduleNote:        String
  affectsMedicareSecondaryPayerClaims:            Boolean
  affectsMedicareSecondaryPayerClaimsHow:         String
  affectsMedicareSecondaryPayerClaimsNote:        String
  payModelDifferentiation:                        String

  # Page 3
  creatingDependenciesBetweenServices:     Boolean
  creatingDependenciesBetweenServicesNote: String
  needsClaimsDataCollection:               Boolean
  needsClaimsDataCollectionNote:           String
  providingThirdPartyFile:                 Boolean
  isContractorAwareTestDataRequirements:   Boolean

  # Page 4
  beneficiaryCostSharingLevelAndHandling:          String
  waiveBeneficiaryCostSharingForAnyServices:       Boolean
  waiveBeneficiaryCostSharingServiceSpecification: String
  waiverOnlyAppliesPartOfPayment:                  Boolean
  waiveBeneficiaryCostSharingNote:                 String

  # Page 5
  nonClaimsPayments:                               [NonClaimsBasedPayType!]!
  nonClaimsPaymentOther:                           String
  nonClaimsPaymentsNote:                           String
  paymentCalculationOwner:                         String
  numberPaymentsPerPayCycle:                       String
  numberPaymentsPerPayCycleNote:                   String
  sharedSystemsInvolvedAdditionalClaimPayment:     Boolean
  sharedSystemsInvolvedAdditionalClaimPaymentNote: String
  planningToUseInnovationPaymentContractor:        Boolean
  planningToUseInnovationPaymentContractorNote:    String
  fundingStructure:                                String

  # Page 6
  expectedCalculationComplexityLevel:                ComplexityCalculationLevelType
  expectedCalculationComplexityLevelNote:            String
  canParticipantsSelectBetweenPaymentMechanisms:     Boolean
  canParticipantsSelectBetweenPaymentMechanismsHow:  String
  canParticipantsSelectBetweenPaymentMechanismsNote: String
  anticipatedPaymentFrequency:                       [AnticipatedPaymentFrequencyType!]!
  anticipatedPaymentFrequencyOther:                  String
  anticipatedPaymentFrequencyNote:                   String

  # Page 7
  willRecoverPayments:                               Boolean
  willRecoverPaymentsNote:                           String
  anticipateReconcilingPaymentsRetrospectively:      Boolean
  anticipateReconcilingPaymentsRetrospectivelyNote:  String
  paymentStartDate:                                  Time
  paymentStartDateNote:                              String

  # Meta

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

  readyForReviewBy: UUID
  readyForReviewByUserAccount: UserAccount
  readyForReviewDts: Time
  readyForClearanceBy: UUID
  readyForClearanceByUserAccount: UserAccount
  readyForClearanceDts: Time

  status:      TaskStatus!
}

input PlanPaymentsChanges @goModel(model: "map[string]interface{}") {
  # Page 1
  fundingSource:                      [FundingSource!]
  fundingSourceTrustFund:             String
  fundingSourceOther:                 String
  fundingSourceNote:                  String
  fundingSourceR:                     [FundingSource!]
  fundingSourceRTrustFund:            String
  fundingSourceROther:                String
  fundingSourceRNote:                 String
  payRecipients:                      [PayRecipient!]
  payRecipientsOtherSpecification:    String
  payRecipientsNote:                  String
  payType:                            [PayType!]
  payTypeNote:                        String

  # Page 2
  payClaims:                                      [ClaimsBasedPayType!]
  payClaimsOther:                                 String
  payClaimsNote:                                  String
  shouldAnyProvidersExcludedFFSSystems:           Boolean
  shouldAnyProviderExcludedFFSSystemsNote:        String
  changesMedicarePhysicianFeeSchedule:            Boolean
  changesMedicarePhysicianFeeScheduleNote:        String
  affectsMedicareSecondaryPayerClaims:            Boolean
  affectsMedicareSecondaryPayerClaimsHow:         String
  affectsMedicareSecondaryPayerClaimsNote:        String
  payModelDifferentiation:                        String

  # Page 3
  creatingDependenciesBetweenServices:     Boolean
  creatingDependenciesBetweenServicesNote: String
  needsClaimsDataCollection:               Boolean
  needsClaimsDataCollectionNote:           String
  providingThirdPartyFile:                 Boolean
  isContractorAwareTestDataRequirements:   Boolean

  # Page 4
  beneficiaryCostSharingLevelAndHandling:          String
  waiveBeneficiaryCostSharingForAnyServices:       Boolean
  waiveBeneficiaryCostSharingServiceSpecification: String
  waiverOnlyAppliesPartOfPayment:                  Boolean
  waiveBeneficiaryCostSharingNote:                 String

  # Page 5
  nonClaimsPayments:                               [NonClaimsBasedPayType!]
  nonClaimsPaymentOther:                           String
  nonClaimsPaymentsNote:                           String
  paymentCalculationOwner:                         String
  numberPaymentsPerPayCycle:                       String
  numberPaymentsPerPayCycleNote:                  String
  sharedSystemsInvolvedAdditionalClaimPayment:     Boolean
  sharedSystemsInvolvedAdditionalClaimPaymentNote: String
  planningToUseInnovationPaymentContractor:        Boolean
  planningToUseInnovationPaymentContractorNote:    String
  fundingStructure:                                String

  # Page 6
  expectedCalculationComplexityLevel:                       ComplexityCalculationLevelType
  expectedCalculationComplexityLevelNote:                   String
  canParticipantsSelectBetweenPaymentMechanisms:            Boolean
  canParticipantsSelectBetweenPaymentMechanismsHow:         String
  canParticipantsSelectBetweenPaymentMechanismsNote:        String
  anticipatedPaymentFrequency:                              [AnticipatedPaymentFrequencyType!]
  anticipatedPaymentFrequencyOther:                         String
  anticipatedPaymentFrequencyNote:                         String

  # Page 7
  willRecoverPayments:                               Boolean
  willRecoverPaymentsNote:                          String
  anticipateReconcilingPaymentsRetrospectively:      Boolean
  anticipateReconcilingPaymentsRetrospectivelyNote: String
  paymentStartDate:                                  Time
  paymentStartDateNote:                             String

  status: TaskStatusInput
}

"""
PlanOpsEvalAndLearning represents the task list section that deals with information regarding the Ops Eval and Learning
"""
type PlanOpsEvalAndLearning {
    id: UUID!
    modelPlanID: UUID!

    #Page 1
    agencyOrStateHelp: [AgencyOrStateHelpType!]!
    agencyOrStateHelpOther: String
    agencyOrStateHelpNote: String
    stakeholders: [StakeholdersType!]!
    stakeholdersOther: String
    stakeholdersNote: String
    helpdeskUse: Boolean
    helpdeskUseNote: String
    contractorSupport: [ContractorSupportType!]!
    contractorSupportOther: String
    contractorSupportHow: String
    contractorSupportNote: String
    iddocSupport: Boolean
    iddocSupportNote: String
    #Page 2
    technicalContactsIdentified: Boolean
    technicalContactsIdentifiedDetail: String
    technicalContactsIdentifiedNote: String
    captureParticipantInfo: Boolean
    captureParticipantInfoNote: String
    icdOwner: String
    draftIcdDueDate: Time
    icdNote: String
    #Page 3
    uatNeeds: String
    stcNeeds: String
    testingTimelines: String
    testingNote: String
    dataMonitoringFileTypes: [MonitoringFileType!]!
    dataMonitoringFileOther: String
    dataResponseType: String
    dataResponseFileFrequency: String
    #Page 4
    dataFullTimeOrIncremental: DataFullTimeOrIncrementalType
    eftSetUp: Boolean
    unsolicitedAdjustmentsIncluded: Boolean
    dataFlowDiagramsNeeded: Boolean
    produceBenefitEnhancementFiles: Boolean
    fileNamingConventions: String
    dataMonitoringNote: String
    #Page 5
    benchmarkForPerformance: BenchmarkForPerformanceType
    benchmarkForPerformanceNote: String
    computePerformanceScores: Boolean
    computePerformanceScoresNote: String
    riskAdjustPerformance: Boolean
    riskAdjustFeedback: Boolean
    riskAdjustPayments: Boolean
    riskAdjustOther: Boolean
    riskAdjustNote: String
    appealPerformance: Boolean
    appealFeedback: Boolean
    appealPayments: Boolean
    appealOther: Boolean
    appealNote: String
    #Page 6
    evaluationApproaches: [EvaluationApproachType!]!
    evaluationApproachOther: String
    evalutaionApproachNote: String
    ccmInvolvment: [CcmInvolvmentType!]!
    ccmInvolvmentOther: String
    ccmInvolvmentNote: String
    dataNeededForMonitoring: [DataForMonitoringType!]!
    dataNeededForMonitoringOther: String
    dataNeededForMonitoringNote: String
    dataToSendParticicipants: [DataToSendParticipantsType!]!
    dataToSendParticicipantsOther: String
    dataToSendParticicipantsNote: String
    shareCclfData: Boolean
    shareCclfDataNote: String
    #Page 7
    sendFilesBetweenCcw: Boolean
    sendFilesBetweenCcwNote: String
    appToSendFilesToKnown: Boolean
    appToSendFilesToWhich: String
    appToSendFilesToNote: String
    useCcwForFileDistribiutionToParticipants: Boolean
    useCcwForFileDistribiutionToParticipantsNote: String
    developNewQualityMeasures: Boolean
    developNewQualityMeasuresNote: String
    qualityPerformanceImpactsPayment: Boolean
    qualityPerformanceImpactsPaymentNote: String
    #Page 8
    dataSharingStarts: DataStartsType
    dataSharingStartsOther: String
    dataSharingFrequency: [DataFrequencyType!]!
    dataSharingFrequencyOther: String
    dataSharingStartsNote: String
    dataCollectionStarts: DataStartsType
    dataCollectionStartsOther: String
    dataCollectionFrequency: [DataFrequencyType!]!
    dataCollectionFrequencyOther: String
    dataCollectionFrequencyNote: String
    qualityReportingStarts: DataStartsType
    qualityReportingStartsOther: String
    qualityReportingStartsNote: String
    #Page 9
    modelLearningSystems: [ModelLearningSystemType!]!
    modelLearningSystemsOther: String
    modelLearningSystemsNote: String
    anticipatedChallenges: String

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time

    readyForReviewBy: UUID
    readyForReviewByUserAccount: UserAccount
    readyForReviewDts: Time
    readyForClearanceBy: UUID
    readyForClearanceByUserAccount: UserAccount
    readyForClearanceDts: Time

    status: TaskStatus!
}

"""
PlanOpsEvalAndLearningChanges represents the possible changes you can make to a
ops, eval and learning object when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input PlanOpsEvalAndLearningChanges @goModel(model: "map[string]interface{}") {

    #Page 1
    agencyOrStateHelp: [AgencyOrStateHelpType!]
    agencyOrStateHelpOther: String
    agencyOrStateHelpNote: String
    stakeholders: [StakeholdersType!]
    stakeholdersOther: String
    stakeholdersNote: String
    helpdeskUse: Boolean
    helpdeskUseNote: String
    contractorSupport: [ContractorSupportType!]
    contractorSupportOther: String
    contractorSupportHow: String
    contractorSupportNote: String
    iddocSupport: Boolean
    iddocSupportNote: String
    #Page 2
    technicalContactsIdentified: Boolean
    technicalContactsIdentifiedDetail: String
    technicalContactsIdentifiedNote: String
    captureParticipantInfo: Boolean
    captureParticipantInfoNote: String
    icdOwner: String
    draftIcdDueDate: Time
    icdNote: String
    #Page 3
    uatNeeds: String
    stcNeeds: String
    testingTimelines: String
    testingNote: String
    dataMonitoringFileTypes: [MonitoringFileType!]
    dataMonitoringFileOther: String
    dataResponseType: String
    dataResponseFileFrequency: String
    #Page 4
    dataFullTimeOrIncremental: DataFullTimeOrIncrementalType
    eftSetUp: Boolean
    unsolicitedAdjustmentsIncluded: Boolean
    dataFlowDiagramsNeeded: Boolean
    produceBenefitEnhancementFiles: Boolean
    fileNamingConventions: String
    dataMonitoringNote: String
    #Page 5
    benchmarkForPerformance: BenchmarkForPerformanceType
    benchmarkForPerformanceNote: String
    computePerformanceScores: Boolean
    computePerformanceScoresNote: String
    riskAdjustPerformance: Boolean
    riskAdjustFeedback: Boolean
    riskAdjustPayments: Boolean
    riskAdjustOther: Boolean
    riskAdjustNote: String
    appealPerformance: Boolean
    appealFeedback: Boolean
    appealPayments: Boolean
    appealOther: Boolean
    appealNote: String
    #Page 6
    evaluationApproaches: [EvaluationApproachType!]
    evaluationApproachOther: String
    evalutaionApproachNote: String
    ccmInvolvment: [CcmInvolvmentType!]
    ccmInvolvmentOther: String
    ccmInvolvmentNote: String
    dataNeededForMonitoring: [DataForMonitoringType!]
    dataNeededForMonitoringOther: String
    dataNeededForMonitoringNote: String
    dataToSendParticicipants: [DataToSendParticipantsType!]
    dataToSendParticicipantsOther: String
    dataToSendParticicipantsNote: String
    shareCclfData: Boolean
    shareCclfDataNote: String
    #Page 7
    sendFilesBetweenCcw: Boolean
    sendFilesBetweenCcwNote: String
    appToSendFilesToKnown: Boolean
    appToSendFilesToWhich: String
    appToSendFilesToNote: String
    useCcwForFileDistribiutionToParticipants: Boolean
    useCcwForFileDistribiutionToParticipantsNote: String
    developNewQualityMeasures: Boolean
    developNewQualityMeasuresNote: String
    qualityPerformanceImpactsPayment: Boolean
    qualityPerformanceImpactsPaymentNote: String
    #Page 8
    dataSharingStarts: DataStartsType
    dataSharingStartsOther: String
    dataSharingFrequency: [DataFrequencyType!]
    dataSharingFrequencyOther: String
    dataSharingStartsNote: String
    dataCollectionStarts: DataStartsType
    dataCollectionStartsOther: String
    dataCollectionFrequency: [DataFrequencyType!]
    dataCollectionFrequencyOther: String
    dataCollectionFrequencyNote: String
    qualityReportingStarts: DataStartsType
    qualityReportingStartsOther: String
    qualityReportingStartsNote: String
    #Page 9
    modelLearningSystems: [ModelLearningSystemType!]
    modelLearningSystemsOther: String
    modelLearningSystemsNote: String
    anticipatedChallenges: String

    status: TaskStatusInput
}
"""
NDAInfo represents whether a user has agreed to an NDA or not. If agreed to previously, there will be a datestamp visible
"""
type NDAInfo {
  agreed: Boolean!
  agreedDts: Time
}

type PlanFavorite {
    id: UUID!
    modelPlanID: UUID!
    userID: UUID!
    userAccount: UserAccount!

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time

}

type PlanCrTdl {
    id: UUID!
    modelPlanID: UUID!

    idNumber: String!
    dateInitiated: Time!
    title: String!
    note: String

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}

input PlanCrTdlCreateInput {
    modelPlanID: UUID!

    idNumber: String!
    dateInitiated: Time!
    title: String!
    note: String
}

input PlanCrTdlChanges @goModel(model: "map[string]interface{}") {
    idNumber: String
    dateInitiated: Time
    title: String
    note: String
}

type PrepareForClearance {
  status: PrepareForClearanceStatus!
  latestClearanceDts: Time
}

type AuditChange {
  id: Int!
  primaryKey: UUID!
  foreignKey: UUID
  tableName: String!
  action: String!
  fields: Map!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}


type OperationalSolution {
    id: UUID!
    operationalNeedID: UUID!

    solutionType: Int
    needed: Boolean # if null, it has not been selectd
    name: String
    key: OperationalSolutionKey
    nameOther: String

    pocName: String
    pocEmail: String
    mustStartDts: Time
    mustFinishDts: Time
    isOther: Boolean!
    isCommonSolution: Boolean!
    otherHeader: String
    status: OpSolutionStatus!

    documents: [PlanDocument!]!
    operationalSolutionSubtasks: [OperationalSolutionSubtask!]!

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}

input OperationalSolutionChanges @goModel(model: "map[string]interface{}"){
    needed: Boolean
    nameOther: String # Only valid for when solution type is null

    pocName: String
    pocEmail: String
    mustStartDts: Time
    mustFinishDts: Time
    otherHeader: String
    status: OpSolutionStatus
}

type PlanDocumentSolutionLink {
id: UUID!
solutionID: UUID!
documentID: UUID!

createdBy: UUID!
createdByUserAccount: UserAccount!
createdDts: Time!
modifiedBy: UUID
modifiedByUserAccount: UserAccount
modifiedDts: Time
}

input CreateOperationalSolutionSubtaskInput {
  name: String!
  status: OperationalSolutionSubtaskStatus!
}

input UpdateOperationalSolutionSubtaskInput {
  id: UUID!
  changes: UpdateOperationalSolutionSubtaskChangesInput!
}

input UpdateOperationalSolutionSubtaskChangesInput @goModel(model: "map[string]interface{}") {
  name: String!
  status: OperationalSolutionSubtaskStatus!
}

type OperationalSolutionSubtask {
  id: UUID!
  solutionID: UUID!
  name: String!
  status: OperationalSolutionSubtaskStatus!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

type ChangedFields {
  changes: [Field!]!
}

type Field {
  name: String!
  value: FieldValue!
}

type FieldValue {
  new: Any
  old: Any
}

type ChangeTableRecord {
  guid: ID!
  tableID: Int!
  tableName: String!
  primaryKey: UUID!
  foreignKey: UUID
  action: String!
  fields: ChangedFields!
  modifiedDts: Time
  modifiedBy: UserAccount
}

input SearchRequest {
  query: Map!
}

type DateHistogramAggregationBucket {
  key: String!
  docCount: Int!
  maxModifiedDts: Time!
  minModifiedDts: Time!
}

input SearchFilter {
  type: SearchFilterType!
  value: Any!
}

"""
Query definition for the schema
"""
type Query {
  currentUser: CurrentUser!
  modelPlan(id: UUID!): ModelPlan!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planDocument(id: UUID!): PlanDocument!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  modelPlanCollection(filter: ModelPlanFilter! = COLLAB_ONLY): [ModelPlan!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  existingModelCollection: [ExistingModel!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchOktaUsers(searchTerm: String!): [UserInfo!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planCollaboratorByID(id: UUID!): PlanCollaborator!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  taskListSectionLocks(modelPlanID: UUID!): [TaskListSectionLockStatus!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planPayments(id: UUID!): PlanPayments!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  ndaInfo: NDAInfo!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  crTdl(id: UUID!): PlanCrTdl!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  operationalSolutions(operationalNeedID: UUID!, includeNotNeeded: Boolean! = false): [OperationalSolution!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  operationalSolution(id: UUID!): OperationalSolution!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  operationalNeed(id: UUID!): OperationalNeed!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  auditChanges(tableName: String!, primaryKey: UUID!): [AuditChange!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  possibleOperationalNeeds: [PossibleOperationalNeed!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  possibleOperationalSolutions: [PossibleOperationalSolution!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  userAccount(username: String!): UserAccount!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  existingModelLink(id: UUID!): ExistingModelLink!
  @hasAnyRole(roles:[MINT_USER, MINT_MAC])
  searchChanges(filters: [SearchFilter!], limit: Int!, offset: Int!): [ChangeTableRecord!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchChangeTable(request: SearchRequest!, limit: Int!, offset: Int!): [ChangeTableRecord!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchChangeTableWithFreeText(searchText: String!, limit: Int!, offset: Int!): [ChangeTableRecord!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchChangeTableByModelPlanID(modelPlanID: UUID!, limit: Int!, offset: Int!): [ChangeTableRecord!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchChangeTableByDateRange(startDate: Time!, endDate: Time!, limit: Int!, offset: Int!): [ChangeTableRecord!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchModelPlanChangesByDateRange(modelPlanID: UUID!, startDate: Time!, endDate: Time!, limit: Int!, offset: Int!): [ChangeTableRecord!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchChangeTableByActor(actor: String!, limit: Int!, offset: Int!): [ChangeTableRecord!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchChangeTableByModelStatus(modelStatus: ModelStatus!, limit: Int!, offset: Int!): [ChangeTableRecord!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchChangeTableDateHistogramConsolidatedAggregations(interval: String!, limit: Int!, offset: Int!): [DateHistogramAggregationBucket!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
}

enum ModelPlanFilter {
  INCLUDE_ALL,
  COLLAB_ONLY,
  WITH_CR_TDLS,
}

"""
Mutations definition for the schema
"""
type Mutation {
createModelPlan(modelName: String!): ModelPlan!
@hasRole(role: MINT_USER)

updateModelPlan(id: UUID!, changes: ModelPlanChanges!): ModelPlan!
@hasRole(role: MINT_USER)

createPlanCollaborator(input: PlanCollaboratorCreateInput!): PlanCollaborator!
@hasRole(role: MINT_USER)

updatePlanCollaborator(id: UUID!, newRole: TeamRole!): PlanCollaborator!
@hasRole(role: MINT_USER)

deletePlanCollaborator(id: UUID!): PlanCollaborator!
@hasRole(role: MINT_USER)

updatePlanBasics(id: UUID!, changes: PlanBasicsChanges!): PlanBasics!
@hasRole(role: MINT_USER)

updatePlanGeneralCharacteristics(id: UUID!, changes: PlanGeneralCharacteristicsChanges!): PlanGeneralCharacteristics!
@hasRole(role: MINT_USER)

updatePlanBeneficiaries(id: UUID!, changes: PlanBeneficiariesChanges!): PlanBeneficiaries!
@hasRole(role: MINT_USER)

updatePlanParticipantsAndProviders(id: UUID!, changes: PlanParticipantsAndProvidersChanges!): PlanParticipantsAndProviders!
@hasRole(role: MINT_USER)

updatePlanOpsEvalAndLearning(id: UUID!, changes: PlanOpsEvalAndLearningChanges!): PlanOpsEvalAndLearning!
@hasRole(role: MINT_USER)

uploadNewPlanDocument(input: PlanDocumentInput!): PlanDocument!
@hasRole(role: MINT_USER)

deletePlanDocument(id: UUID!): Int!
@hasRole(role: MINT_USER)

createPlanDiscussion(input: PlanDiscussionCreateInput!): PlanDiscussion!
@hasRole(role: MINT_USER)

updatePlanDiscussion(id: UUID!, changes: PlanDiscussionChanges!): PlanDiscussion!
@hasRole(role: MINT_USER)

deletePlanDiscussion(id: UUID!): PlanDiscussion!
@hasRole(role: MINT_USER)

createDiscussionReply(input: DiscussionReplyCreateInput!): DiscussionReply!
@hasRole(role: MINT_USER)

updateDiscussionReply(id: UUID!, changes: DiscussionReplyChanges!): DiscussionReply!
@hasRole(role: MINT_USER)

deleteDiscussionReply(id: UUID!): DiscussionReply!
@hasRole(role: MINT_USER)

lockTaskListSection(modelPlanID: UUID!, section: TaskListSection!): Boolean!
@hasRole(role: MINT_USER)

unlockTaskListSection(modelPlanID: UUID!, section: TaskListSection!): Boolean!
@hasRole(role: MINT_USER)

unlockAllTaskListSections(modelPlanID: UUID!): [TaskListSectionLockStatus!]!
@hasRole(role: MINT_ASSESSMENT)

updatePlanPayments(id: UUID!, changes: PlanPaymentsChanges!): PlanPayments!
@hasRole(role: MINT_USER)

agreeToNDA(agree: Boolean! = true): NDAInfo!
@hasAnyRole(roles: [MINT_USER, MINT_MAC])

addPlanFavorite(modelPlanID: UUID!): PlanFavorite!
@hasRole(role: MINT_USER)

deletePlanFavorite(modelPlanID: UUID!): PlanFavorite!
@hasRole(role: MINT_USER)

createPlanCrTdl(input: PlanCrTdlCreateInput!): PlanCrTdl!
@hasRole(role: MINT_USER)

updatePlanCrTdl(id: UUID!, changes: PlanCrTdlChanges!): PlanCrTdl!
@hasRole(role: MINT_USER)

deletePlanCrTdl(id: UUID!): PlanCrTdl!
@hasRole(role: MINT_USER)

addOrUpdateCustomOperationalNeed(modelPlanID: UUID!, customNeedType: String! needed: Boolean!): OperationalNeed!
@hasRole(role: MINT_USER)

updateCustomOperationalNeedByID(id: UUID!, customNeedType: String needed: Boolean!): OperationalNeed!
@hasRole(role: MINT_USER)

createOperationalSolution(operationalNeedID: UUID!, solutionType: OperationalSolutionKey, changes: OperationalSolutionChanges!): OperationalSolution!
@hasRole(role: MINT_USER)

updateOperationalSolution(id: UUID!, changes: OperationalSolutionChanges!): OperationalSolution!
@hasRole(role: MINT_USER)

createPlanDocumentSolutionLinks(solutionID: UUID!, documentIDs: [UUID!]!): [PlanDocumentSolutionLink!]
@hasRole(role: MINT_USER)

removePlanDocumentSolutionLinks(solutionID: UUID!, documentIDs: [UUID!]!): Boolean!
@hasRole(role: MINT_USER)

createOperationalSolutionSubtasks(solutionID: UUID!, inputs: [CreateOperationalSolutionSubtaskInput!]!): [OperationalSolutionSubtask!]
@hasRole(role: MINT_USER)

updateOperationalSolutionSubtasks(inputs: [UpdateOperationalSolutionSubtaskInput!]!): [OperationalSolutionSubtask!]
@hasRole(role: MINT_USER)

deleteOperationalSolutionSubtask(id: UUID!): Int!
@hasRole(role: MINT_USER)

updateExistingModelLinks(modelPlanID: UUID!, existingModelIDs: [Int!],currentModelPlanIDs: [UUID!]): [ExistingModelLink!]!
@hasRole(role: MINT_USER)
}

type Subscription {
  onTaskListSectionLocksChanged(modelPlanID: UUID!): TaskListSectionLockStatusChanged!
  @hasRole(role: MINT_USER)

  onLockTaskListSectionContext(modelPlanID: UUID!): TaskListSectionLockStatusChanged!
  @hasRole(role: MINT_USER)
}

enum ChangeType {
  ADDED
  UPDATED
  REMOVED
}

enum TaskStatus {
  READY
  IN_PROGRESS
  READY_FOR_REVIEW
  READY_FOR_CLEARANCE
}

enum PrepareForClearanceStatus {
  CANNOT_START
  READY
  IN_PROGRESS
  READY_FOR_CLEARANCE
}

enum TaskStatusInput {
  IN_PROGRESS
  READY_FOR_REVIEW
  READY_FOR_CLEARANCE
}

enum TaskListSection {
  BASICS,
  GENERAL_CHARACTERISTICS,
  PARTICIPANTS_AND_PROVIDERS,
  BENEFICIARIES,
  OPERATIONS_EVALUATION_AND_LEARNING,
  PAYMENT,
  PREPARE_FOR_CLEARANCE
}

enum TeamRole {
  MODEL_LEAD
  MODEL_TEAM
  LEADERSHIP
  LEARNING
  EVALUATION
  IT_LEAD
  QUALITY
}

enum ModelType
{
  VOLUNTARY
  MANDATORY
  TBD
}

enum ModelCategory {
	ACCOUNTABLE_CARE
	DEMONSTRATION
	EPISODE_BASED_PAYMENT_INITIATIVES
	INIT_MEDICAID_CHIP_POP
	INIT__MEDICARE_MEDICAID_ENROLLEES
	INIT_ACCEL_DEV_AND_TEST
	INIT_SPEED_ADOPT_BEST_PRACTICE
	PRIMARY_CARE_TRANSFORMATION
	UNKNOWN
}

enum ModelStatus {
	PLAN_DRAFT
	PLAN_COMPLETE
	ICIP_COMPLETE
	INTERNAL_CMMI_CLEARANCE
	CMS_CLEARANCE
	HHS_CLEARANCE
	OMB_ASRF_CLEARANCE
	CLEARED
	ANNOUNCED
  PAUSED
  CANCELED
}

enum CMSCenter {
  CMMI
  CENTER_FOR_MEDICARE
  FEDERAL_COORDINATED_HEALTH_CARE_OFFICE
  CENTER_FOR_CLINICAL_STANDARDS_AND_QUALITY
  CENTER_FOR_PROGRAM_INTEGRITY
  OTHER
}

enum CMMIGroup {
  PATIENT_CARE_MODELS_GROUP
  POLICY_AND_PROGRAMS_GROUP
  SEAMLESS_CARE_MODELS_GROUP
  STATE_AND_POPULATION_HEALTH_GROUP
  TBD
}

enum DiscussionStatus {
  ANSWERED
  WAITING_FOR_RESPONSE
  UNANSWERED
}

enum DocumentType {
  CONCEPT_PAPER,
  POLICY_PAPER,
  ICIP_DRAFT,
  MARKET_RESEARCH,
  OTHER
}

enum AlternativePaymentModelType {
  REGULAR
  MIPS
  ADVANCED
  NOT_APM
}

enum KeyCharacteristic {
  EPISODE_BASED
  PART_C
  PART_D
  PAYMENT
  POPULATION_BASED
  PREVENTATIVE
  SERVICE_DELIVERY
  SHARED_SAVINGS
  OTHER
}

enum GeographyType {
  STATE
  REGION
  OTHER
}

enum GeographyApplication {
  PARTICIPANTS
  PROVIDERS
  BENEFICIARIES
  OTHER
}

enum AgreementType {
  PARTICIPATION
  COOPERATIVE
  OTHER
}

enum AuthorityAllowance {
  ACA
  CONGRESSIONALLY_MANDATED
  SSA_PART_B
  OTHER
}

enum WaiverType {
  FRAUD_ABUSE
  PROGRAM_PAYMENT
  MEDICAID
}

enum BeneficiariesType {
  MEDICARE_FFS
  MEDICARE_ADVANTAGE
  MEDICARE_PART_D
  MEDICAID
  DUALLY_ELIGIBLE
  DISEASE_SPECIFIC
  OTHER
  NA
}
enum SelectionMethodType {
  HISTORICAL
  PROSPECTIVE
  RETROSPECTIVE
  VOLUNTARY
  PROVIDER_SIGN_UP
  OTHER
  NA
}
enum OverlapType {
  YES_NEED_POLICIES
  YES_NO_ISSUES
  NO
}
enum ConfidenceType {
  NOT_AT_ALL
  SLIGHTLY
  FAIRLY
  COMPLETELY
}
enum FrequencyType {
  ANNUALLY
  BIANNUALLY
  QUARTERLY
  MONTHLY
  ROLLING
  OTHER
}
enum TriStateAnswer {
  YES
  NO
  TBD
}
enum ParticipantsType {
  MEDICARE_PROVIDERS
  ENTITIES
  CONVENER
  MEDICARE_ADVANTAGE_PLANS
  STANDALONE_PART_D_PLANS
  MEDICARE_ADVANTAGE_PRESCRIPTION_DRUG_PLANS
  STATE_MEDICAID_AGENCIES
  MEDICAID_MANAGED_CARE_ORGANIZATIONS
  MEDICAID_PROVIDERS
  STATES
  COMMUNITY_BASED_ORGANIZATIONS
  NON_PROFIT_ORGANIZATIONS
  COMMERCIAL_PAYERS
  OTHER
}

enum RecruitmentType {
  LOI
  APPLICATION_COLLECTION_TOOL
  NOFO
  OTHER
  NA
}
enum ParticipantSelectionType {
  MODEL_TEAM_REVIEW_APPLICATIONS
  SUPPORT_FROM_CMMI
  CMS_COMPONENT_OR_PROCESS
  APPLICATION_REVIEW_AND_SCORING_TOOL
  APPLICATION_SUPPORT_CONTRACTOR
  BASIC_CRITERIA
  OTHER
  NO_SELECTING_PARTICIPANTS
}
enum ParticipantCommunicationType {
  MASS_EMAIL
  IT_TOOL
  OTHER
  NO_COMMUNICATION
}
enum ParticipantRiskType {
  TWO_SIDED
  ONE_SIDED
  CAPITATION
  OTHER
}

enum ParticipantsIDType{
  TINS
  NPIS
  CCNS
  OTHER
  NO_IDENTIFIERS
}

enum ProviderAddType {
  PROSPECTIVELY
  RETROSPECTIVELY
  VOLUNTARILY
  MANDATORILY
  ONLINE_TOOLS
  OTHER
  NA
}

enum ProviderLeaveType {

VOLUNTARILY_WITHOUT_IMPLICATIONS
AFTER_A_CERTAIN_WITH_IMPLICATIONS
VARIES_BY_TYPE_OF_PROVIDER
NOT_ALLOWED_TO_LEAVE
OTHER
NOT_APPLICABLE
}


#Ops Eval and Learning types begin

enum AgencyOrStateHelpType {
    YES_STATE
    YES_AGENCY_IDEAS
    YES_AGENCY_IAA
    NO
    OTHER
}

enum StakeholdersType {
    BENEFICIARIES
    COMMUNITY_ORGANIZATIONS
    PARTICIPANTS
    PROFESSIONAL_ORGANIZATIONS
    PROVIDERS
    STATES
    OTHER
}


enum ContractorSupportType {
    ONE
    MULTIPLE
    NONE
    OTHER
}

enum MonitoringFileType {
    BENEFICIARY
    PROVIDER
    PART_A
    PART_B
    OTHER
}

enum EvaluationApproachType {
    CONTROL_INTERVENTION
    COMPARISON_MATCH
    INTERRUPTED_TIME
    NON_MEDICARE_DATA
    OTHER
}

enum CcmInvolvmentType {
    YES_EVALUATION
    YES__IMPLEMENTATION
    NO
    OTHER
}

enum DataForMonitoringType {
    SITE_VISITS
    MEDICARE_CLAIMS
    MEDICAID_CLAIMS
    ENCOUNTER_DATA
    NO_PAY_CLAIMS
    QUALITY_CLAIMS_BASED_MEASURES
    QUALITY_REPORTED_MEASURES
    CLINICAL_DATA
    NON_CLINICAL_DATA
    NON_MEDICAL_DATA
    OTHER
    NOT_PLANNING_TO_COLLECT_DATA
}

enum DataToSendParticipantsType {
    BASELINE_HISTORICAL_DATA
    CLAIMS_LEVEL_DATA
    BENEFICIARY_LEVEL_DATA
    PARTICIPANT_LEVEL_DATA
    PROVIDER_LEVEL_DATA
    OTHER_MIPS_DATA
    NOT_PLANNING_TO_SEND_DATA
}

enum DataFrequencyType {
    ANNUALLY
    BIANNUALLY
    QUARTERLY
    MONTHLY
    SEMI_MONTHLY
    WEEKLY
    DAILY
    OTHER
    NOT_PLANNING_TO_DO_THIS
}

enum ModelLearningSystemType {
    LEARNING_CONTRACTOR
    IT_PLATFORM_CONNECT
    PARTICIPANT_COLLABORATION
    EDUCATE_BENEFICIARIES
    OTHER
    NO_LEARNING_SYSTEM
}


enum DataFullTimeOrIncrementalType {
    FULL_TIME
    INCREMENTAL
}

enum BenchmarkForPerformanceType {
    YES_RECONCILE
    YES_NO_RECONCILE
    NO
}

enum DataStartsType {
    DURING_APPLICATION_PERIOD
    SHORTLY_BEFORE_THE_START_DATE
    EARLY_IN_THE_FIRST_PERFORMANCE_YEAR
    LATER_IN_THE_FIRST_PERFORMANCE_YEAR
    IN_THE_SUBSEQUENT_PERFORMANCE_YEAR
    AT_SOME_OTHER_POINT_IN_TIME
    NOT_PLANNING_TO_DO_THIS
    OTHER
}
#Ops Eval and Learning types end

enum FundingSource {
  PATIENT_PROTECTION_AFFORDABLE_CARE_ACT
  TRUST_FUND
  OTHER
}

enum PayRecipient {
  PROVIDERS
  BENEFICIARIES
  PARTICIPANTS
  STATES
  OTHER
}

enum PayType {
  CLAIMS_BASED_PAYMENTS
  NON_CLAIMS_BASED_PAYMENTS
  GRANTS
}

enum ClaimsBasedPayType {
  ADJUSTMENTS_TO_FFS_PAYMENTS
  CARE_MANAGEMENT_HOME_VISITS
  REDUCTIONS_TO_BENEFICIARY_COST_SHARING
  SNF_CLAIMS_WITHOUT_3DAY_HOSPITAL_ADMISSIONS
  TELEHEALTH_SERVICES_NOT_TRADITIONAL_MEDICARE
  SERVICES_NOT_COVERED_THROUGH_TRADITIONAL_MEDICARE
  OTHER
}

enum NonClaimsBasedPayType {
  ADVANCED_PAYMENT
  BUNDLED_EPISODE_OF_CARE
  CAPITATION_POPULATION_BASED_FULL
  CAPITATION_POPULATION_BASED_PARTIAL
  CARE_COORDINATION_MANAGEMENT_FEE
  GLOBAL_BUDGET
  GRANTS
  INCENTIVE_PAYMENT
  MAPD_SHARED_SAVINGS
  SHARED_SAVINGS
  OTHER
}

enum ComplexityCalculationLevelType {
  LOW
  MIDDLE
  HIGH
}

enum AnticipatedPaymentFrequencyType {
  ANNUALLY
  BIANNUALLY
  QUARTERLY
  MONTHLY
  SEMIMONTHLY
  WEEKLY
  DAILY
  OTHER
}

enum OpSolutionStatus {
  NOT_STARTED
  ONBOARDING
  BACKLOG
  IN_PROGRESS
  COMPLETED
  AT_RISK
}

enum OperationalNeedKey{
  MANAGE_CD
  REV_COL_BIDS
  UPDATE_CONTRACT
  RECRUIT_PARTICIPANTS
  REV_SCORE_APP
  APP_SUPPORT_CON
  COMM_W_PART
  MANAGE_PROV_OVERLAP
  MANAGE_BEN_OVERLAP
  HELPDESK_SUPPORT
  IDDOC_SUPPORT
  ESTABLISH_BENCH
  PROCESS_PART_APPEALS
  ACQUIRE_AN_EVAL_CONT
  DATA_TO_MONITOR
  DATA_TO_SUPPORT_EVAL
  CLAIMS_BASED_MEASURES
  QUALITY_PERFORMANCE_SCORES
  SEND_REPDATA_TO_PART
  ACQUIRE_A_LEARN_CONT
  PART_TO_PART_COLLAB
  EDUCATE_BENEF
  ADJUST_FFS_CLAIMS
  MANAGE_FFS_EXCL_PAYMENTS
  MAKE_NON_CLAIMS_BASED_PAYMENTS
  COMPUTE_SHARED_SAVINGS_PAYMENT
  RECOVER_PAYMENTS
  SIGN_PARTICIPATION_AGREEMENTS
  VET_PROVIDERS_FOR_PROGRAM_INTEGRITY
  UTILIZE_QUALITY_MEASURES_DEVELOPMENT_CONTRACTOR
  IT_PLATFORM_FOR_LEARNING
}

enum OperationalSolutionKey{
  INNOVATION
  ACO_OS
  APPS
  CDX
  CCW
  CMS_BOX
  CMS_QUALTRICS
  CBOSC
  CONTRACTOR
  CPI_VETTING
  CROSS_MODEL_CONTRACT
  EFT
  EXISTING_CMS_DATA_AND_PROCESS
  EDFR
  GOVDELIVERY
  GS
  HDR
  HPMS
  HIGLAS
  IPC
  IDR
  INTERNAL_STAFF
  LDG
  LV
  MDM
  MARX
  OTHER_NEW_PROCESS
  OUTLOOK_MAILBOX
  QV
  RMADA
  ARS
  CONNECT
  LOI
  POST_PORTAL
  RFA
  SHARED_SYSTEMS
}

enum OperationalSolutionSubtaskStatus {
  TODO,
  IN_PROGRESS,
  DONE
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

directive @hasAnyRole(roles: [Role!]!) on FIELD_DEFINITION

# https://gqlgen.com/config/#inline-config-with-directives
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

type UserAccount {
	id: UUID!
	username: String!
	isEUAID: Boolean
	commonName: String!
	locale: String!
	email: String!
	givenName: String!
	familyName: String!
	zoneInfo: String!
	hasLoggedIn: Boolean
}


"""
A user role associated with a job code
"""
enum Role {
  """
  A basic MINT user
  """
  MINT_USER

  """
  A MINT assessment team user
  """
  MINT_ASSESSMENT

  """
  A MINT MAC user
  """
  MINT_MAC
}

enum ActionType {
  """
  A normal flow action
  """
  NORMAL

  """
  An administrative action
  """
  ADMIN
}

enum SearchFilterType {
  """
  Filter search results to include changes on or after the specified date
  """
  CHANGED_AFTER

  """
  Filter search results to include changes on or before the specified date
  """
  CHANGED_BEFORE

  """
  Filter search results to include changes made by the specified actor
  """
  CHANGED_BY_ACTOR

  """
  Filter search results to include changes made to the specified object
  """
  MODEL_PLAN_SECTION

  """
  Filter search results to include changes made to the specified model plan by ID
  """
  MODEL_PLAN_ID

  """
  Filter search results to include model plans with the specified status
  """
  MODEL_PLAN_STATUS

  """
  Filter results with a free text search
  """
  FREE_TEXT

  """
  Filter results by table id
  """
  TABLE_ID

  """
  Filter results by table name
  """
  TABLE_NAME
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_hasAnyRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.Role
	if tmp, ok := rawArgs["roles"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
		arg0, err = ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roles"] = arg0
	return args, nil
}

func (ec *executionContext) dir_hasRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.Role
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg0, err = ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg0
	return args, nil
}

func (ec *executionContext) field_ModelPlan_nameHistory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SortDirection
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg0, err = ec.unmarshalNSortDirection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐSortDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrUpdateCustomOperationalNeed_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["customNeedType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customNeedType"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["customNeedType"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["needed"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("needed"))
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["needed"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_addPlanFavorite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_agreeToNDA_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["agree"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agree"))
		arg0, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agree"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createDiscussionReply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DiscussionReplyCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDiscussionReplyCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDiscussionReplyCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createModelPlan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["modelName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelName"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createOperationalSolutionSubtasks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["solutionID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("solutionID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["solutionID"] = arg0
	var arg1 []*model.CreateOperationalSolutionSubtaskInput
	if tmp, ok := rawArgs["inputs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputs"))
		arg1, err = ec.unmarshalNCreateOperationalSolutionSubtaskInput2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCreateOperationalSolutionSubtaskInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputs"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createOperationalSolution_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["operationalNeedID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operationalNeedID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["operationalNeedID"] = arg0
	var arg1 *models.OperationalSolutionKey
	if tmp, ok := rawArgs["solutionType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("solutionType"))
		arg1, err = ec.unmarshalOOperationalSolutionKey2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionKey(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["solutionType"] = arg1
	var arg2 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg2, err = ec.unmarshalNOperationalSolutionChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_createPlanCollaborator_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PlanCollaboratorCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPlanCollaboratorCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanCollaboratorCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPlanCrTdl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PlanCrTdlCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPlanCrTdlCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanCrTdlCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPlanDiscussion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PlanDiscussionCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPlanDiscussionCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanDiscussionCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPlanDocumentSolutionLinks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["solutionID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("solutionID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["solutionID"] = arg0
	var arg1 []uuid.UUID
	if tmp, ok := rawArgs["documentIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentIDs"))
		arg1, err = ec.unmarshalNUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["documentIDs"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDiscussionReply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteOperationalSolutionSubtask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlanCollaborator_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlanCrTdl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlanDiscussion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlanDocument_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlanFavorite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_lockTaskListSection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	var arg1 models.TaskListSection
	if tmp, ok := rawArgs["section"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("section"))
		arg1, err = ec.unmarshalNTaskListSection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskListSection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["section"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_removePlanDocumentSolutionLinks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["solutionID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("solutionID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["solutionID"] = arg0
	var arg1 []uuid.UUID
	if tmp, ok := rawArgs["documentIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentIDs"))
		arg1, err = ec.unmarshalNUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["documentIDs"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_unlockAllTaskListSections_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_unlockTaskListSection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	var arg1 models.TaskListSection
	if tmp, ok := rawArgs["section"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("section"))
		arg1, err = ec.unmarshalNTaskListSection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskListSection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["section"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCustomOperationalNeedByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["customNeedType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customNeedType"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["customNeedType"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["needed"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("needed"))
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["needed"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDiscussionReply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNDiscussionReplyChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateExistingModelLinks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	var arg1 []int
	if tmp, ok := rawArgs["existingModelIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("existingModelIDs"))
		arg1, err = ec.unmarshalOInt2ᚕintᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["existingModelIDs"] = arg1
	var arg2 []uuid.UUID
	if tmp, ok := rawArgs["currentModelPlanIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentModelPlanIDs"))
		arg2, err = ec.unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["currentModelPlanIDs"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateModelPlan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNModelPlanChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOperationalSolutionSubtasks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.UpdateOperationalSolutionSubtaskInput
	if tmp, ok := rawArgs["inputs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputs"))
		arg0, err = ec.unmarshalNUpdateOperationalSolutionSubtaskInput2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐUpdateOperationalSolutionSubtaskInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputs"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOperationalSolution_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNOperationalSolutionChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanBasics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanBasicsChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanBeneficiaries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanBeneficiariesChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanCollaborator_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.TeamRole
	if tmp, ok := rawArgs["newRole"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRole"))
		arg1, err = ec.unmarshalNTeamRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTeamRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newRole"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanCrTdl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanCrTdlChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanDiscussion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanDiscussionChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanGeneralCharacteristics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanGeneralCharacteristicsChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanOpsEvalAndLearning_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanOpsEvalAndLearningChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanParticipantsAndProviders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanParticipantsAndProvidersChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanPayments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanPaymentsChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_uploadNewPlanDocument_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PlanDocumentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPlanDocumentInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanDocumentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_OperationalNeed_solutions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeNotNeeded"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeNotNeeded"))
		arg0, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeNotNeeded"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_auditChanges_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["tableName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tableName"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tableName"] = arg0
	var arg1 uuid.UUID
	if tmp, ok := rawArgs["primaryKey"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primaryKey"))
		arg1, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["primaryKey"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_crTdl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_existingModelLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_modelPlanCollection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ModelPlanFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalNModelPlanFilter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelPlanFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_modelPlan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_operationalNeed_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_operationalSolution_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_operationalSolutions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["operationalNeedID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operationalNeedID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["operationalNeedID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["includeNotNeeded"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeNotNeeded"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeNotNeeded"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_planCollaboratorByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_planDocument_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_planPayments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchChangeTableByActor_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["actor"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actor"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["actor"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_searchChangeTableByDateRange_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 time.Time
	if tmp, ok := rawArgs["startDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
		arg0, err = ec.unmarshalNTime2timeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startDate"] = arg0
	var arg1 time.Time
	if tmp, ok := rawArgs["endDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
		arg1, err = ec.unmarshalNTime2timeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endDate"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	var arg3 int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg3, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_searchChangeTableByModelPlanID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_searchChangeTableByModelStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.ModelStatus
	if tmp, ok := rawArgs["modelStatus"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelStatus"))
		arg0, err = ec.unmarshalNModelStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelStatus"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_searchChangeTableDateHistogramConsolidatedAggregations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["interval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interval"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["interval"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_searchChangeTableWithFreeText_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["searchText"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchText"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchText"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_searchChangeTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SearchRequest
	if tmp, ok := rawArgs["request"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("request"))
		arg0, err = ec.unmarshalNSearchRequest2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐSearchRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["request"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_searchChanges_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.SearchFilter
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg0, err = ec.unmarshalOSearchFilter2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSearchFilterᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_searchModelPlanChangesByDateRange_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	var arg1 time.Time
	if tmp, ok := rawArgs["startDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
		arg1, err = ec.unmarshalNTime2timeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startDate"] = arg1
	var arg2 time.Time
	if tmp, ok := rawArgs["endDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
		arg2, err = ec.unmarshalNTime2timeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endDate"] = arg2
	var arg3 int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg3, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg3
	var arg4 int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg4, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_searchOktaUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["searchTerm"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchTerm"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchTerm"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_taskListSectionLocks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_userAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["username"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["username"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_onLockTaskListSectionContext_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_onTaskListSectionLocksChanged_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AuditChange_id(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_primaryKey(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_primaryKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_primaryKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_foreignKey(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_foreignKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ForeignKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_foreignKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_tableName(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_tableName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TableName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_tableName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_action(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_action(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_action(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_fields(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuditChange().Fields(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChangeTableRecord_guid(ctx context.Context, field graphql.CollectedField, obj *models.ChangeTableRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChangeTableRecord_guid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChangeTableRecord_guid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChangeTableRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChangeTableRecord_tableID(ctx context.Context, field graphql.CollectedField, obj *models.ChangeTableRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChangeTableRecord_tableID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TableID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChangeTableRecord_tableID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChangeTableRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChangeTableRecord_tableName(ctx context.Context, field graphql.CollectedField, obj *models.ChangeTableRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChangeTableRecord_tableName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TableName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChangeTableRecord_tableName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChangeTableRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChangeTableRecord_primaryKey(ctx context.Context, field graphql.CollectedField, obj *models.ChangeTableRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChangeTableRecord_primaryKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChangeTableRecord_primaryKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChangeTableRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChangeTableRecord_foreignKey(ctx context.Context, field graphql.CollectedField, obj *models.ChangeTableRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChangeTableRecord_foreignKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ForeignKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChangeTableRecord_foreignKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChangeTableRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChangeTableRecord_action(ctx context.Context, field graphql.CollectedField, obj *models.ChangeTableRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChangeTableRecord_action(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChangeTableRecord_action(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChangeTableRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChangeTableRecord_fields(ctx context.Context, field graphql.CollectedField, obj *models.ChangeTableRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChangeTableRecord_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ChangedFields)
	fc.Result = res
	return ec.marshalNChangedFields2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐChangedFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChangeTableRecord_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChangeTableRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "changes":
				return ec.fieldContext_ChangedFields_changes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChangedFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChangeTableRecord_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.ChangeTableRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChangeTableRecord_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChangeTableRecord_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChangeTableRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChangeTableRecord_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.ChangeTableRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChangeTableRecord_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChangeTableRecord_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChangeTableRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChangedFields_changes(ctx context.Context, field graphql.CollectedField, obj *models.ChangedFields) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChangedFields_changes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Changes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Field)
	fc.Result = res
	return ec.marshalNField2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChangedFields_changes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChangedFields",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Field_name(ctx, field)
			case "value":
				return ec.fieldContext_Field_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Field", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurrentUser_launchDarkly(ctx context.Context, field graphql.CollectedField, obj *model.CurrentUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CurrentUser_launchDarkly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaunchDarkly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LaunchDarklySettings)
	fc.Result = res
	return ec.marshalNLaunchDarklySettings2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐLaunchDarklySettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CurrentUser_launchDarkly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurrentUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userKey":
				return ec.fieldContext_LaunchDarklySettings_userKey(ctx, field)
			case "signedHash":
				return ec.fieldContext_LaunchDarklySettings_signedHash(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LaunchDarklySettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DateHistogramAggregationBucket_key(ctx context.Context, field graphql.CollectedField, obj *models.DateHistogramAggregationBucket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DateHistogramAggregationBucket_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DateHistogramAggregationBucket_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DateHistogramAggregationBucket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DateHistogramAggregationBucket_docCount(ctx context.Context, field graphql.CollectedField, obj *models.DateHistogramAggregationBucket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DateHistogramAggregationBucket_docCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DateHistogramAggregationBucket_docCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DateHistogramAggregationBucket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DateHistogramAggregationBucket_maxModifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.DateHistogramAggregationBucket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DateHistogramAggregationBucket_maxModifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DateHistogramAggregationBucket_maxModifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DateHistogramAggregationBucket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DateHistogramAggregationBucket_minModifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.DateHistogramAggregationBucket) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DateHistogramAggregationBucket_minModifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DateHistogramAggregationBucket_minModifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DateHistogramAggregationBucket",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_id(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_discussionID(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_discussionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscussionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_discussionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_content(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_resolution(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_resolution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resolution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_resolution(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_isAssessment(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_isAssessment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAssessment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_isAssessment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_id(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_modelName(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_modelName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_modelName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_stage(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_stage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_stage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_numberOfParticipants(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_numberOfParticipants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfParticipants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_numberOfParticipants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_category(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_authority(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_authority(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_authority(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_description(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_numberOfBeneficiariesImpacted(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_numberOfBeneficiariesImpacted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfBeneficiariesImpacted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_numberOfBeneficiariesImpacted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_numberOfPhysiciansImpacted(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_numberOfPhysiciansImpacted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfPhysiciansImpacted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_numberOfPhysiciansImpacted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_dateBegan(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_dateBegan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateBegan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_dateBegan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_dateEnded(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_dateEnded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateEnded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_dateEnded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_states(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_states(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.States, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_states(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_keywords(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_keywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keywords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_keywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_url(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_displayModelSummary(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_displayModelSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayModelSummary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_displayModelSummary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModelLink_id(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModelLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModelLink_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModelLink_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModelLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModelLink_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModelLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModelLink_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModelLink_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModelLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModelLink_existingModelID(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModelLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModelLink_existingModelID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExistingModelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModelLink_existingModelID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModelLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModelLink_existingModel(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModelLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModelLink_existingModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ExistingModelLink().ExistingModel(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ExistingModel)
	fc.Result = res
	return ec.marshalOExistingModel2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModelLink_existingModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModelLink",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExistingModel_id(ctx, field)
			case "modelName":
				return ec.fieldContext_ExistingModel_modelName(ctx, field)
			case "stage":
				return ec.fieldContext_ExistingModel_stage(ctx, field)
			case "numberOfParticipants":
				return ec.fieldContext_ExistingModel_numberOfParticipants(ctx, field)
			case "category":
				return ec.fieldContext_ExistingModel_category(ctx, field)
			case "authority":
				return ec.fieldContext_ExistingModel_authority(ctx, field)
			case "description":
				return ec.fieldContext_ExistingModel_description(ctx, field)
			case "numberOfBeneficiariesImpacted":
				return ec.fieldContext_ExistingModel_numberOfBeneficiariesImpacted(ctx, field)
			case "numberOfPhysiciansImpacted":
				return ec.fieldContext_ExistingModel_numberOfPhysiciansImpacted(ctx, field)
			case "dateBegan":
				return ec.fieldContext_ExistingModel_dateBegan(ctx, field)
			case "dateEnded":
				return ec.fieldContext_ExistingModel_dateEnded(ctx, field)
			case "states":
				return ec.fieldContext_ExistingModel_states(ctx, field)
			case "keywords":
				return ec.fieldContext_ExistingModel_keywords(ctx, field)
			case "url":
				return ec.fieldContext_ExistingModel_url(ctx, field)
			case "displayModelSummary":
				return ec.fieldContext_ExistingModel_displayModelSummary(ctx, field)
			case "createdBy":
				return ec.fieldContext_ExistingModel_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_ExistingModel_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_ExistingModel_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ExistingModel_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_ExistingModel_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ExistingModel_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExistingModel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModelLink_currentModelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModelLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModelLink_currentModelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModelLink_currentModelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModelLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModelLink_currentModelPlan(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModelLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModelLink_currentModelPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ExistingModelLink().CurrentModelPlan(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ModelPlan)
	fc.Result = res
	return ec.marshalOModelPlan2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModelLink_currentModelPlan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModelLink",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModelPlan_id(ctx, field)
			case "modelName":
				return ec.fieldContext_ModelPlan_modelName(ctx, field)
			case "archived":
				return ec.fieldContext_ModelPlan_archived(ctx, field)
			case "createdBy":
				return ec.fieldContext_ModelPlan_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_ModelPlan_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_ModelPlan_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ModelPlan_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_ModelPlan_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ModelPlan_modifiedDts(ctx, field)
			case "basics":
				return ec.fieldContext_ModelPlan_basics(ctx, field)
			case "generalCharacteristics":
				return ec.fieldContext_ModelPlan_generalCharacteristics(ctx, field)
			case "participantsAndProviders":
				return ec.fieldContext_ModelPlan_participantsAndProviders(ctx, field)
			case "beneficiaries":
				return ec.fieldContext_ModelPlan_beneficiaries(ctx, field)
			case "opsEvalAndLearning":
				return ec.fieldContext_ModelPlan_opsEvalAndLearning(ctx, field)
			case "collaborators":
				return ec.fieldContext_ModelPlan_collaborators(ctx, field)
			case "documents":
				return ec.fieldContext_ModelPlan_documents(ctx, field)
			case "discussions":
				return ec.fieldContext_ModelPlan_discussions(ctx, field)
			case "payments":
				return ec.fieldContext_ModelPlan_payments(ctx, field)
			case "status":
				return ec.fieldContext_ModelPlan_status(ctx, field)
			case "isFavorite":
				return ec.fieldContext_ModelPlan_isFavorite(ctx, field)
			case "isCollaborator":
				return ec.fieldContext_ModelPlan_isCollaborator(ctx, field)
			case "crTdls":
				return ec.fieldContext_ModelPlan_crTdls(ctx, field)
			case "prepareForClearance":
				return ec.fieldContext_ModelPlan_prepareForClearance(ctx, field)
			case "nameHistory":
				return ec.fieldContext_ModelPlan_nameHistory(ctx, field)
			case "operationalNeeds":
				return ec.fieldContext_ModelPlan_operationalNeeds(ctx, field)
			case "existingModelLinks":
				return ec.fieldContext_ModelPlan_existingModelLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModelPlan", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModelLink_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModelLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModelLink_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModelLink_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModelLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModelLink_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModelLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModelLink_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModelLink_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModelLink",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModelLink_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModelLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModelLink_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModelLink_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModelLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModelLink_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModelLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModelLink_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModelLink_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModelLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModelLink_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModelLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModelLink_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModelLink_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModelLink",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModelLink_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModelLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModelLink_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModelLink_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModelLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Field_name(ctx context.Context, field graphql.CollectedField, obj *models.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Field_value(ctx context.Context, field graphql.CollectedField, obj *models.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Field_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.FieldValue)
	fc.Result = res
	return ec.marshalNFieldValue2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFieldValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Field_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "new":
				return ec.fieldContext_FieldValue_new(ctx, field)
			case "old":
				return ec.fieldContext_FieldValue_old(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValue_new(ctx context.Context, field graphql.CollectedField, obj *models.FieldValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValue_new(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.New, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValue_new(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValue_old(ctx context.Context, field graphql.CollectedField, obj *models.FieldValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValue_old(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Old, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValue_old(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LaunchDarklySettings_userKey(ctx context.Context, field graphql.CollectedField, obj *model.LaunchDarklySettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LaunchDarklySettings_userKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LaunchDarklySettings_userKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LaunchDarklySettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LaunchDarklySettings_signedHash(ctx context.Context, field graphql.CollectedField, obj *model.LaunchDarklySettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LaunchDarklySettings_signedHash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignedHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LaunchDarklySettings_signedHash(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LaunchDarklySettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_id(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_modelName(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_modelName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_modelName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_archived(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_archived(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Archived, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_archived(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_basics(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_basics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().Basics(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanBasics)
	fc.Result = res
	return ec.marshalNPlanBasics2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBasics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_basics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanBasics_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanBasics_modelPlanID(ctx, field)
			case "modelCategory":
				return ec.fieldContext_PlanBasics_modelCategory(ctx, field)
			case "cmsCenters":
				return ec.fieldContext_PlanBasics_cmsCenters(ctx, field)
			case "cmsOther":
				return ec.fieldContext_PlanBasics_cmsOther(ctx, field)
			case "cmmiGroups":
				return ec.fieldContext_PlanBasics_cmmiGroups(ctx, field)
			case "modelType":
				return ec.fieldContext_PlanBasics_modelType(ctx, field)
			case "problem":
				return ec.fieldContext_PlanBasics_problem(ctx, field)
			case "goal":
				return ec.fieldContext_PlanBasics_goal(ctx, field)
			case "testInterventions":
				return ec.fieldContext_PlanBasics_testInterventions(ctx, field)
			case "note":
				return ec.fieldContext_PlanBasics_note(ctx, field)
			case "completeICIP":
				return ec.fieldContext_PlanBasics_completeICIP(ctx, field)
			case "clearanceStarts":
				return ec.fieldContext_PlanBasics_clearanceStarts(ctx, field)
			case "clearanceEnds":
				return ec.fieldContext_PlanBasics_clearanceEnds(ctx, field)
			case "announced":
				return ec.fieldContext_PlanBasics_announced(ctx, field)
			case "applicationsStart":
				return ec.fieldContext_PlanBasics_applicationsStart(ctx, field)
			case "applicationsEnd":
				return ec.fieldContext_PlanBasics_applicationsEnd(ctx, field)
			case "performancePeriodStarts":
				return ec.fieldContext_PlanBasics_performancePeriodStarts(ctx, field)
			case "performancePeriodEnds":
				return ec.fieldContext_PlanBasics_performancePeriodEnds(ctx, field)
			case "wrapUpEnds":
				return ec.fieldContext_PlanBasics_wrapUpEnds(ctx, field)
			case "highLevelNote":
				return ec.fieldContext_PlanBasics_highLevelNote(ctx, field)
			case "phasedIn":
				return ec.fieldContext_PlanBasics_phasedIn(ctx, field)
			case "phasedInNote":
				return ec.fieldContext_PlanBasics_phasedInNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanBasics_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanBasics_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanBasics_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanBasics_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanBasics_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanBasics_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanBasics_readyForReviewBy(ctx, field)
			case "readyForReviewByUserAccount":
				return ec.fieldContext_PlanBasics_readyForReviewByUserAccount(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanBasics_readyForReviewDts(ctx, field)
			case "readyForClearanceBy":
				return ec.fieldContext_PlanBasics_readyForClearanceBy(ctx, field)
			case "readyForClearanceByUserAccount":
				return ec.fieldContext_PlanBasics_readyForClearanceByUserAccount(ctx, field)
			case "readyForClearanceDts":
				return ec.fieldContext_PlanBasics_readyForClearanceDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanBasics_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanBasics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_generalCharacteristics(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_generalCharacteristics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().GeneralCharacteristics(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanGeneralCharacteristics)
	fc.Result = res
	return ec.marshalNPlanGeneralCharacteristics2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanGeneralCharacteristics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_generalCharacteristics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanGeneralCharacteristics_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanGeneralCharacteristics_modelPlanID(ctx, field)
			case "isNewModel":
				return ec.fieldContext_PlanGeneralCharacteristics_isNewModel(ctx, field)
			case "existingModel":
				return ec.fieldContext_PlanGeneralCharacteristics_existingModel(ctx, field)
			case "resemblesExistingModel":
				return ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModel(ctx, field)
			case "resemblesExistingModelHow":
				return ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelHow(ctx, field)
			case "resemblesExistingModelNote":
				return ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelNote(ctx, field)
			case "hasComponentsOrTracks":
				return ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracks(ctx, field)
			case "hasComponentsOrTracksDiffer":
				return ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksDiffer(ctx, field)
			case "hasComponentsOrTracksNote":
				return ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksNote(ctx, field)
			case "alternativePaymentModelTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModelTypes(ctx, field)
			case "alternativePaymentModelNote":
				return ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModelNote(ctx, field)
			case "keyCharacteristics":
				return ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristics(ctx, field)
			case "keyCharacteristicsOther":
				return ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristicsOther(ctx, field)
			case "keyCharacteristicsNote":
				return ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristicsNote(ctx, field)
			case "collectPlanBids":
				return ec.fieldContext_PlanGeneralCharacteristics_collectPlanBids(ctx, field)
			case "collectPlanBidsNote":
				return ec.fieldContext_PlanGeneralCharacteristics_collectPlanBidsNote(ctx, field)
			case "managePartCDEnrollment":
				return ec.fieldContext_PlanGeneralCharacteristics_managePartCDEnrollment(ctx, field)
			case "managePartCDEnrollmentNote":
				return ec.fieldContext_PlanGeneralCharacteristics_managePartCDEnrollmentNote(ctx, field)
			case "planContractUpdated":
				return ec.fieldContext_PlanGeneralCharacteristics_planContractUpdated(ctx, field)
			case "planContractUpdatedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_planContractUpdatedNote(ctx, field)
			case "careCoordinationInvolved":
				return ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolved(ctx, field)
			case "careCoordinationInvolvedDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedDescription(ctx, field)
			case "careCoordinationInvolvedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedNote(ctx, field)
			case "additionalServicesInvolved":
				return ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolved(ctx, field)
			case "additionalServicesInvolvedDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedDescription(ctx, field)
			case "additionalServicesInvolvedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedNote(ctx, field)
			case "communityPartnersInvolved":
				return ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolved(ctx, field)
			case "communityPartnersInvolvedDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedDescription(ctx, field)
			case "communityPartnersInvolvedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedNote(ctx, field)
			case "geographiesTargeted":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargeted(ctx, field)
			case "geographiesTargetedTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypes(ctx, field)
			case "geographiesTargetedTypesOther":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypesOther(ctx, field)
			case "geographiesTargetedAppliedTo":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedTo(ctx, field)
			case "geographiesTargetedAppliedToOther":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedToOther(ctx, field)
			case "geographiesTargetedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedNote(ctx, field)
			case "participationOptions":
				return ec.fieldContext_PlanGeneralCharacteristics_participationOptions(ctx, field)
			case "participationOptionsNote":
				return ec.fieldContext_PlanGeneralCharacteristics_participationOptionsNote(ctx, field)
			case "agreementTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_agreementTypes(ctx, field)
			case "agreementTypesOther":
				return ec.fieldContext_PlanGeneralCharacteristics_agreementTypesOther(ctx, field)
			case "multiplePatricipationAgreementsNeeded":
				return ec.fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeeded(ctx, field)
			case "multiplePatricipationAgreementsNeededNote":
				return ec.fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeededNote(ctx, field)
			case "rulemakingRequired":
				return ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequired(ctx, field)
			case "rulemakingRequiredDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequiredDescription(ctx, field)
			case "rulemakingRequiredNote":
				return ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequiredNote(ctx, field)
			case "authorityAllowances":
				return ec.fieldContext_PlanGeneralCharacteristics_authorityAllowances(ctx, field)
			case "authorityAllowancesOther":
				return ec.fieldContext_PlanGeneralCharacteristics_authorityAllowancesOther(ctx, field)
			case "authorityAllowancesNote":
				return ec.fieldContext_PlanGeneralCharacteristics_authorityAllowancesNote(ctx, field)
			case "waiversRequired":
				return ec.fieldContext_PlanGeneralCharacteristics_waiversRequired(ctx, field)
			case "waiversRequiredTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_waiversRequiredTypes(ctx, field)
			case "waiversRequiredNote":
				return ec.fieldContext_PlanGeneralCharacteristics_waiversRequiredNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanGeneralCharacteristics_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanGeneralCharacteristics_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanGeneralCharacteristics_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanGeneralCharacteristics_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanGeneralCharacteristics_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanGeneralCharacteristics_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForReviewBy(ctx, field)
			case "readyForReviewByUserAccount":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForReviewByUserAccount(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForReviewDts(ctx, field)
			case "readyForClearanceBy":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForClearanceBy(ctx, field)
			case "readyForClearanceByUserAccount":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForClearanceByUserAccount(ctx, field)
			case "readyForClearanceDts":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForClearanceDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanGeneralCharacteristics_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanGeneralCharacteristics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_participantsAndProviders(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_participantsAndProviders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().ParticipantsAndProviders(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanParticipantsAndProviders)
	fc.Result = res
	return ec.marshalNPlanParticipantsAndProviders2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanParticipantsAndProviders(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_participantsAndProviders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanParticipantsAndProviders_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanParticipantsAndProviders_modelPlanID(ctx, field)
			case "participants":
				return ec.fieldContext_PlanParticipantsAndProviders_participants(ctx, field)
			case "medicareProviderType":
				return ec.fieldContext_PlanParticipantsAndProviders_medicareProviderType(ctx, field)
			case "statesEngagement":
				return ec.fieldContext_PlanParticipantsAndProviders_statesEngagement(ctx, field)
			case "participantsOther":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsOther(ctx, field)
			case "participantsNote":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsNote(ctx, field)
			case "participantsCurrentlyInModels":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModels(ctx, field)
			case "participantsCurrentlyInModelsNote":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModelsNote(ctx, field)
			case "modelApplicationLevel":
				return ec.fieldContext_PlanParticipantsAndProviders_modelApplicationLevel(ctx, field)
			case "expectedNumberOfParticipants":
				return ec.fieldContext_PlanParticipantsAndProviders_expectedNumberOfParticipants(ctx, field)
			case "estimateConfidence":
				return ec.fieldContext_PlanParticipantsAndProviders_estimateConfidence(ctx, field)
			case "confidenceNote":
				return ec.fieldContext_PlanParticipantsAndProviders_confidenceNote(ctx, field)
			case "recruitmentMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_recruitmentMethod(ctx, field)
			case "recruitmentOther":
				return ec.fieldContext_PlanParticipantsAndProviders_recruitmentOther(ctx, field)
			case "recruitmentNote":
				return ec.fieldContext_PlanParticipantsAndProviders_recruitmentNote(ctx, field)
			case "selectionMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_selectionMethod(ctx, field)
			case "selectionOther":
				return ec.fieldContext_PlanParticipantsAndProviders_selectionOther(ctx, field)
			case "selectionNote":
				return ec.fieldContext_PlanParticipantsAndProviders_selectionNote(ctx, field)
			case "communicationMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_communicationMethod(ctx, field)
			case "communicationMethodOther":
				return ec.fieldContext_PlanParticipantsAndProviders_communicationMethodOther(ctx, field)
			case "communicationNote":
				return ec.fieldContext_PlanParticipantsAndProviders_communicationNote(ctx, field)
			case "participantAssumeRisk":
				return ec.fieldContext_PlanParticipantsAndProviders_participantAssumeRisk(ctx, field)
			case "riskType":
				return ec.fieldContext_PlanParticipantsAndProviders_riskType(ctx, field)
			case "riskOther":
				return ec.fieldContext_PlanParticipantsAndProviders_riskOther(ctx, field)
			case "riskNote":
				return ec.fieldContext_PlanParticipantsAndProviders_riskNote(ctx, field)
			case "willRiskChange":
				return ec.fieldContext_PlanParticipantsAndProviders_willRiskChange(ctx, field)
			case "willRiskChangeNote":
				return ec.fieldContext_PlanParticipantsAndProviders_willRiskChangeNote(ctx, field)
			case "coordinateWork":
				return ec.fieldContext_PlanParticipantsAndProviders_coordinateWork(ctx, field)
			case "coordinateWorkNote":
				return ec.fieldContext_PlanParticipantsAndProviders_coordinateWorkNote(ctx, field)
			case "gainsharePayments":
				return ec.fieldContext_PlanParticipantsAndProviders_gainsharePayments(ctx, field)
			case "gainsharePaymentsTrack":
				return ec.fieldContext_PlanParticipantsAndProviders_gainsharePaymentsTrack(ctx, field)
			case "gainsharePaymentsNote":
				return ec.fieldContext_PlanParticipantsAndProviders_gainsharePaymentsNote(ctx, field)
			case "participantsIds":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsIds(ctx, field)
			case "participantsIdsOther":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsIdsOther(ctx, field)
			case "participantsIDSNote":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsIDSNote(ctx, field)
			case "providerAdditionFrequency":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequency(ctx, field)
			case "providerAdditionFrequencyOther":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyOther(ctx, field)
			case "providerAdditionFrequencyNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyNote(ctx, field)
			case "providerAddMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAddMethod(ctx, field)
			case "providerAddMethodOther":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAddMethodOther(ctx, field)
			case "providerAddMethodNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAddMethodNote(ctx, field)
			case "providerLeaveMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethod(ctx, field)
			case "providerLeaveMethodOther":
				return ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethodOther(ctx, field)
			case "providerLeaveMethodNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethodNote(ctx, field)
			case "providerOverlap":
				return ec.fieldContext_PlanParticipantsAndProviders_providerOverlap(ctx, field)
			case "providerOverlapHierarchy":
				return ec.fieldContext_PlanParticipantsAndProviders_providerOverlapHierarchy(ctx, field)
			case "providerOverlapNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerOverlapNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanParticipantsAndProviders_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanParticipantsAndProviders_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanParticipantsAndProviders_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanParticipantsAndProviders_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanParticipantsAndProviders_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanParticipantsAndProviders_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForReviewBy(ctx, field)
			case "readyForReviewByUserAccount":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForReviewByUserAccount(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForReviewDts(ctx, field)
			case "readyForClearanceBy":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForClearanceBy(ctx, field)
			case "readyForClearanceByUserAccount":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForClearanceByUserAccount(ctx, field)
			case "readyForClearanceDts":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForClearanceDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanParticipantsAndProviders_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanParticipantsAndProviders", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_beneficiaries(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_beneficiaries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().Beneficiaries(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanBeneficiaries)
	fc.Result = res
	return ec.marshalNPlanBeneficiaries2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBeneficiaries(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_beneficiaries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanBeneficiaries_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanBeneficiaries_modelPlanID(ctx, field)
			case "beneficiaries":
				return ec.fieldContext_PlanBeneficiaries_beneficiaries(ctx, field)
			case "beneficiariesOther":
				return ec.fieldContext_PlanBeneficiaries_beneficiariesOther(ctx, field)
			case "beneficiariesNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiariesNote(ctx, field)
			case "treatDualElligibleDifferent":
				return ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferent(ctx, field)
			case "treatDualElligibleDifferentHow":
				return ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferentHow(ctx, field)
			case "treatDualElligibleDifferentNote":
				return ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferentNote(ctx, field)
			case "excludeCertainCharacteristics":
				return ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristics(ctx, field)
			case "excludeCertainCharacteristicsCriteria":
				return ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsCriteria(ctx, field)
			case "excludeCertainCharacteristicsNote":
				return ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsNote(ctx, field)
			case "numberPeopleImpacted":
				return ec.fieldContext_PlanBeneficiaries_numberPeopleImpacted(ctx, field)
			case "estimateConfidence":
				return ec.fieldContext_PlanBeneficiaries_estimateConfidence(ctx, field)
			case "confidenceNote":
				return ec.fieldContext_PlanBeneficiaries_confidenceNote(ctx, field)
			case "beneficiarySelectionMethod":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionMethod(ctx, field)
			case "beneficiarySelectionOther":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionOther(ctx, field)
			case "beneficiarySelectionNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionNote(ctx, field)
			case "beneficiarySelectionFrequency":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequency(ctx, field)
			case "beneficiarySelectionFrequencyOther":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyOther(ctx, field)
			case "beneficiarySelectionFrequencyNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyNote(ctx, field)
			case "beneficiaryOverlap":
				return ec.fieldContext_PlanBeneficiaries_beneficiaryOverlap(ctx, field)
			case "beneficiaryOverlapNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiaryOverlapNote(ctx, field)
			case "precedenceRules":
				return ec.fieldContext_PlanBeneficiaries_precedenceRules(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanBeneficiaries_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanBeneficiaries_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanBeneficiaries_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanBeneficiaries_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanBeneficiaries_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanBeneficiaries_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanBeneficiaries_readyForReviewBy(ctx, field)
			case "readyForReviewByUserAccount":
				return ec.fieldContext_PlanBeneficiaries_readyForReviewByUserAccount(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanBeneficiaries_readyForReviewDts(ctx, field)
			case "readyForClearanceBy":
				return ec.fieldContext_PlanBeneficiaries_readyForClearanceBy(ctx, field)
			case "readyForClearanceByUserAccount":
				return ec.fieldContext_PlanBeneficiaries_readyForClearanceByUserAccount(ctx, field)
			case "readyForClearanceDts":
				return ec.fieldContext_PlanBeneficiaries_readyForClearanceDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanBeneficiaries_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanBeneficiaries", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_opsEvalAndLearning(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_opsEvalAndLearning(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().OpsEvalAndLearning(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanOpsEvalAndLearning)
	fc.Result = res
	return ec.marshalNPlanOpsEvalAndLearning2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanOpsEvalAndLearning(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_opsEvalAndLearning(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanOpsEvalAndLearning_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelPlanID(ctx, field)
			case "agencyOrStateHelp":
				return ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelp(ctx, field)
			case "agencyOrStateHelpOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpOther(ctx, field)
			case "agencyOrStateHelpNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpNote(ctx, field)
			case "stakeholders":
				return ec.fieldContext_PlanOpsEvalAndLearning_stakeholders(ctx, field)
			case "stakeholdersOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_stakeholdersOther(ctx, field)
			case "stakeholdersNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_stakeholdersNote(ctx, field)
			case "helpdeskUse":
				return ec.fieldContext_PlanOpsEvalAndLearning_helpdeskUse(ctx, field)
			case "helpdeskUseNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_helpdeskUseNote(ctx, field)
			case "contractorSupport":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupport(ctx, field)
			case "contractorSupportOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportOther(ctx, field)
			case "contractorSupportHow":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportHow(ctx, field)
			case "contractorSupportNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportNote(ctx, field)
			case "iddocSupport":
				return ec.fieldContext_PlanOpsEvalAndLearning_iddocSupport(ctx, field)
			case "iddocSupportNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_iddocSupportNote(ctx, field)
			case "technicalContactsIdentified":
				return ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentified(ctx, field)
			case "technicalContactsIdentifiedDetail":
				return ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedDetail(ctx, field)
			case "technicalContactsIdentifiedNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedNote(ctx, field)
			case "captureParticipantInfo":
				return ec.fieldContext_PlanOpsEvalAndLearning_captureParticipantInfo(ctx, field)
			case "captureParticipantInfoNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_captureParticipantInfoNote(ctx, field)
			case "icdOwner":
				return ec.fieldContext_PlanOpsEvalAndLearning_icdOwner(ctx, field)
			case "draftIcdDueDate":
				return ec.fieldContext_PlanOpsEvalAndLearning_draftIcdDueDate(ctx, field)
			case "icdNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_icdNote(ctx, field)
			case "uatNeeds":
				return ec.fieldContext_PlanOpsEvalAndLearning_uatNeeds(ctx, field)
			case "stcNeeds":
				return ec.fieldContext_PlanOpsEvalAndLearning_stcNeeds(ctx, field)
			case "testingTimelines":
				return ec.fieldContext_PlanOpsEvalAndLearning_testingTimelines(ctx, field)
			case "testingNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_testingNote(ctx, field)
			case "dataMonitoringFileTypes":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileTypes(ctx, field)
			case "dataMonitoringFileOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileOther(ctx, field)
			case "dataResponseType":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataResponseType(ctx, field)
			case "dataResponseFileFrequency":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataResponseFileFrequency(ctx, field)
			case "dataFullTimeOrIncremental":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataFullTimeOrIncremental(ctx, field)
			case "eftSetUp":
				return ec.fieldContext_PlanOpsEvalAndLearning_eftSetUp(ctx, field)
			case "unsolicitedAdjustmentsIncluded":
				return ec.fieldContext_PlanOpsEvalAndLearning_unsolicitedAdjustmentsIncluded(ctx, field)
			case "dataFlowDiagramsNeeded":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataFlowDiagramsNeeded(ctx, field)
			case "produceBenefitEnhancementFiles":
				return ec.fieldContext_PlanOpsEvalAndLearning_produceBenefitEnhancementFiles(ctx, field)
			case "fileNamingConventions":
				return ec.fieldContext_PlanOpsEvalAndLearning_fileNamingConventions(ctx, field)
			case "dataMonitoringNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringNote(ctx, field)
			case "benchmarkForPerformance":
				return ec.fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformance(ctx, field)
			case "benchmarkForPerformanceNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformanceNote(ctx, field)
			case "computePerformanceScores":
				return ec.fieldContext_PlanOpsEvalAndLearning_computePerformanceScores(ctx, field)
			case "computePerformanceScoresNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_computePerformanceScoresNote(ctx, field)
			case "riskAdjustPerformance":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustPerformance(ctx, field)
			case "riskAdjustFeedback":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustFeedback(ctx, field)
			case "riskAdjustPayments":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustPayments(ctx, field)
			case "riskAdjustOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustOther(ctx, field)
			case "riskAdjustNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustNote(ctx, field)
			case "appealPerformance":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealPerformance(ctx, field)
			case "appealFeedback":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealFeedback(ctx, field)
			case "appealPayments":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealPayments(ctx, field)
			case "appealOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealOther(ctx, field)
			case "appealNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealNote(ctx, field)
			case "evaluationApproaches":
				return ec.fieldContext_PlanOpsEvalAndLearning_evaluationApproaches(ctx, field)
			case "evaluationApproachOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_evaluationApproachOther(ctx, field)
			case "evalutaionApproachNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_evalutaionApproachNote(ctx, field)
			case "ccmInvolvment":
				return ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvment(ctx, field)
			case "ccmInvolvmentOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentOther(ctx, field)
			case "ccmInvolvmentNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentNote(ctx, field)
			case "dataNeededForMonitoring":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoring(ctx, field)
			case "dataNeededForMonitoringOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringOther(ctx, field)
			case "dataNeededForMonitoringNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringNote(ctx, field)
			case "dataToSendParticicipants":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipants(ctx, field)
			case "dataToSendParticicipantsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsOther(ctx, field)
			case "dataToSendParticicipantsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsNote(ctx, field)
			case "shareCclfData":
				return ec.fieldContext_PlanOpsEvalAndLearning_shareCclfData(ctx, field)
			case "shareCclfDataNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_shareCclfDataNote(ctx, field)
			case "sendFilesBetweenCcw":
				return ec.fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcw(ctx, field)
			case "sendFilesBetweenCcwNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcwNote(ctx, field)
			case "appToSendFilesToKnown":
				return ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToKnown(ctx, field)
			case "appToSendFilesToWhich":
				return ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToWhich(ctx, field)
			case "appToSendFilesToNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToNote(ctx, field)
			case "useCcwForFileDistribiutionToParticipants":
				return ec.fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipants(ctx, field)
			case "useCcwForFileDistribiutionToParticipantsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipantsNote(ctx, field)
			case "developNewQualityMeasures":
				return ec.fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasures(ctx, field)
			case "developNewQualityMeasuresNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasuresNote(ctx, field)
			case "qualityPerformanceImpactsPayment":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPayment(ctx, field)
			case "qualityPerformanceImpactsPaymentNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPaymentNote(ctx, field)
			case "dataSharingStarts":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStarts(ctx, field)
			case "dataSharingStartsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStartsOther(ctx, field)
			case "dataSharingFrequency":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingFrequency(ctx, field)
			case "dataSharingFrequencyOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingFrequencyOther(ctx, field)
			case "dataSharingStartsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStartsNote(ctx, field)
			case "dataCollectionStarts":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionStarts(ctx, field)
			case "dataCollectionStartsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionStartsOther(ctx, field)
			case "dataCollectionFrequency":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequency(ctx, field)
			case "dataCollectionFrequencyOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyOther(ctx, field)
			case "dataCollectionFrequencyNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyNote(ctx, field)
			case "qualityReportingStarts":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStarts(ctx, field)
			case "qualityReportingStartsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsOther(ctx, field)
			case "qualityReportingStartsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsNote(ctx, field)
			case "modelLearningSystems":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystems(ctx, field)
			case "modelLearningSystemsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsOther(ctx, field)
			case "modelLearningSystemsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsNote(ctx, field)
			case "anticipatedChallenges":
				return ec.fieldContext_PlanOpsEvalAndLearning_anticipatedChallenges(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanOpsEvalAndLearning_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanOpsEvalAndLearning_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanOpsEvalAndLearning_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanOpsEvalAndLearning_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanOpsEvalAndLearning_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanOpsEvalAndLearning_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewBy(ctx, field)
			case "readyForReviewByUserAccount":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewByUserAccount(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewDts(ctx, field)
			case "readyForClearanceBy":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForClearanceBy(ctx, field)
			case "readyForClearanceByUserAccount":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForClearanceByUserAccount(ctx, field)
			case "readyForClearanceDts":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForClearanceDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanOpsEvalAndLearning_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanOpsEvalAndLearning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_collaborators(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_collaborators(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().Collaborators(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PlanCollaborator)
	fc.Result = res
	return ec.marshalNPlanCollaborator2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaboratorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_collaborators(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCollaborator_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCollaborator_modelPlanID(ctx, field)
			case "userID":
				return ec.fieldContext_PlanCollaborator_userID(ctx, field)
			case "userAccount":
				return ec.fieldContext_PlanCollaborator_userAccount(ctx, field)
			case "teamRole":
				return ec.fieldContext_PlanCollaborator_teamRole(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCollaborator_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanCollaborator_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCollaborator_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCollaborator_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanCollaborator_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCollaborator_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCollaborator", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_documents(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PlanDocument)
	fc.Result = res
	return ec.marshalNPlanDocument2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_documents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDocument_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDocument_modelPlanID(ctx, field)
			case "fileType":
				return ec.fieldContext_PlanDocument_fileType(ctx, field)
			case "bucket":
				return ec.fieldContext_PlanDocument_bucket(ctx, field)
			case "fileKey":
				return ec.fieldContext_PlanDocument_fileKey(ctx, field)
			case "virusScanned":
				return ec.fieldContext_PlanDocument_virusScanned(ctx, field)
			case "virusClean":
				return ec.fieldContext_PlanDocument_virusClean(ctx, field)
			case "restricted":
				return ec.fieldContext_PlanDocument_restricted(ctx, field)
			case "fileName":
				return ec.fieldContext_PlanDocument_fileName(ctx, field)
			case "fileSize":
				return ec.fieldContext_PlanDocument_fileSize(ctx, field)
			case "documentType":
				return ec.fieldContext_PlanDocument_documentType(ctx, field)
			case "otherType":
				return ec.fieldContext_PlanDocument_otherType(ctx, field)
			case "optionalNotes":
				return ec.fieldContext_PlanDocument_optionalNotes(ctx, field)
			case "downloadUrl":
				return ec.fieldContext_PlanDocument_downloadUrl(ctx, field)
			case "deletedAt":
				return ec.fieldContext_PlanDocument_deletedAt(ctx, field)
			case "numLinkedSolutions":
				return ec.fieldContext_PlanDocument_numLinkedSolutions(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDocument_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanDocument_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDocument_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDocument_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanDocument_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDocument_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_discussions(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_discussions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().Discussions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PlanDiscussion)
	fc.Result = res
	return ec.marshalNPlanDiscussion2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_discussions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDiscussion_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDiscussion_modelPlanID(ctx, field)
			case "content":
				return ec.fieldContext_PlanDiscussion_content(ctx, field)
			case "status":
				return ec.fieldContext_PlanDiscussion_status(ctx, field)
			case "replies":
				return ec.fieldContext_PlanDiscussion_replies(ctx, field)
			case "isAssessment":
				return ec.fieldContext_PlanDiscussion_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDiscussion_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanDiscussion_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDiscussion_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDiscussion_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanDiscussion_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDiscussion_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDiscussion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_payments(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_payments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().Payments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanPayments)
	fc.Result = res
	return ec.marshalNPlanPayments2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanPayments(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_payments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanPayments_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanPayments_modelPlanID(ctx, field)
			case "fundingSource":
				return ec.fieldContext_PlanPayments_fundingSource(ctx, field)
			case "fundingSourceTrustFund":
				return ec.fieldContext_PlanPayments_fundingSourceTrustFund(ctx, field)
			case "fundingSourceOther":
				return ec.fieldContext_PlanPayments_fundingSourceOther(ctx, field)
			case "fundingSourceNote":
				return ec.fieldContext_PlanPayments_fundingSourceNote(ctx, field)
			case "fundingSourceR":
				return ec.fieldContext_PlanPayments_fundingSourceR(ctx, field)
			case "fundingSourceRTrustFund":
				return ec.fieldContext_PlanPayments_fundingSourceRTrustFund(ctx, field)
			case "fundingSourceROther":
				return ec.fieldContext_PlanPayments_fundingSourceROther(ctx, field)
			case "fundingSourceRNote":
				return ec.fieldContext_PlanPayments_fundingSourceRNote(ctx, field)
			case "payRecipients":
				return ec.fieldContext_PlanPayments_payRecipients(ctx, field)
			case "payRecipientsOtherSpecification":
				return ec.fieldContext_PlanPayments_payRecipientsOtherSpecification(ctx, field)
			case "payRecipientsNote":
				return ec.fieldContext_PlanPayments_payRecipientsNote(ctx, field)
			case "payType":
				return ec.fieldContext_PlanPayments_payType(ctx, field)
			case "payTypeNote":
				return ec.fieldContext_PlanPayments_payTypeNote(ctx, field)
			case "payClaims":
				return ec.fieldContext_PlanPayments_payClaims(ctx, field)
			case "payClaimsOther":
				return ec.fieldContext_PlanPayments_payClaimsOther(ctx, field)
			case "payClaimsNote":
				return ec.fieldContext_PlanPayments_payClaimsNote(ctx, field)
			case "shouldAnyProvidersExcludedFFSSystems":
				return ec.fieldContext_PlanPayments_shouldAnyProvidersExcludedFFSSystems(ctx, field)
			case "shouldAnyProviderExcludedFFSSystemsNote":
				return ec.fieldContext_PlanPayments_shouldAnyProviderExcludedFFSSystemsNote(ctx, field)
			case "changesMedicarePhysicianFeeSchedule":
				return ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeSchedule(ctx, field)
			case "changesMedicarePhysicianFeeScheduleNote":
				return ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeScheduleNote(ctx, field)
			case "affectsMedicareSecondaryPayerClaims":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaims(ctx, field)
			case "affectsMedicareSecondaryPayerClaimsHow":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsHow(ctx, field)
			case "affectsMedicareSecondaryPayerClaimsNote":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsNote(ctx, field)
			case "payModelDifferentiation":
				return ec.fieldContext_PlanPayments_payModelDifferentiation(ctx, field)
			case "creatingDependenciesBetweenServices":
				return ec.fieldContext_PlanPayments_creatingDependenciesBetweenServices(ctx, field)
			case "creatingDependenciesBetweenServicesNote":
				return ec.fieldContext_PlanPayments_creatingDependenciesBetweenServicesNote(ctx, field)
			case "needsClaimsDataCollection":
				return ec.fieldContext_PlanPayments_needsClaimsDataCollection(ctx, field)
			case "needsClaimsDataCollectionNote":
				return ec.fieldContext_PlanPayments_needsClaimsDataCollectionNote(ctx, field)
			case "providingThirdPartyFile":
				return ec.fieldContext_PlanPayments_providingThirdPartyFile(ctx, field)
			case "isContractorAwareTestDataRequirements":
				return ec.fieldContext_PlanPayments_isContractorAwareTestDataRequirements(ctx, field)
			case "beneficiaryCostSharingLevelAndHandling":
				return ec.fieldContext_PlanPayments_beneficiaryCostSharingLevelAndHandling(ctx, field)
			case "waiveBeneficiaryCostSharingForAnyServices":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingForAnyServices(ctx, field)
			case "waiveBeneficiaryCostSharingServiceSpecification":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingServiceSpecification(ctx, field)
			case "waiverOnlyAppliesPartOfPayment":
				return ec.fieldContext_PlanPayments_waiverOnlyAppliesPartOfPayment(ctx, field)
			case "waiveBeneficiaryCostSharingNote":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingNote(ctx, field)
			case "nonClaimsPayments":
				return ec.fieldContext_PlanPayments_nonClaimsPayments(ctx, field)
			case "nonClaimsPaymentOther":
				return ec.fieldContext_PlanPayments_nonClaimsPaymentOther(ctx, field)
			case "nonClaimsPaymentsNote":
				return ec.fieldContext_PlanPayments_nonClaimsPaymentsNote(ctx, field)
			case "paymentCalculationOwner":
				return ec.fieldContext_PlanPayments_paymentCalculationOwner(ctx, field)
			case "numberPaymentsPerPayCycle":
				return ec.fieldContext_PlanPayments_numberPaymentsPerPayCycle(ctx, field)
			case "numberPaymentsPerPayCycleNote":
				return ec.fieldContext_PlanPayments_numberPaymentsPerPayCycleNote(ctx, field)
			case "sharedSystemsInvolvedAdditionalClaimPayment":
				return ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPayment(ctx, field)
			case "sharedSystemsInvolvedAdditionalClaimPaymentNote":
				return ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPaymentNote(ctx, field)
			case "planningToUseInnovationPaymentContractor":
				return ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractor(ctx, field)
			case "planningToUseInnovationPaymentContractorNote":
				return ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractorNote(ctx, field)
			case "fundingStructure":
				return ec.fieldContext_PlanPayments_fundingStructure(ctx, field)
			case "expectedCalculationComplexityLevel":
				return ec.fieldContext_PlanPayments_expectedCalculationComplexityLevel(ctx, field)
			case "expectedCalculationComplexityLevelNote":
				return ec.fieldContext_PlanPayments_expectedCalculationComplexityLevelNote(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanisms":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanisms(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanismsHow":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsHow(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanismsNote":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsNote(ctx, field)
			case "anticipatedPaymentFrequency":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequency(ctx, field)
			case "anticipatedPaymentFrequencyOther":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyOther(ctx, field)
			case "anticipatedPaymentFrequencyNote":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyNote(ctx, field)
			case "willRecoverPayments":
				return ec.fieldContext_PlanPayments_willRecoverPayments(ctx, field)
			case "willRecoverPaymentsNote":
				return ec.fieldContext_PlanPayments_willRecoverPaymentsNote(ctx, field)
			case "anticipateReconcilingPaymentsRetrospectively":
				return ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectively(ctx, field)
			case "anticipateReconcilingPaymentsRetrospectivelyNote":
				return ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectivelyNote(ctx, field)
			case "paymentStartDate":
				return ec.fieldContext_PlanPayments_paymentStartDate(ctx, field)
			case "paymentStartDateNote":
				return ec.fieldContext_PlanPayments_paymentStartDateNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanPayments_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanPayments_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanPayments_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanPayments_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanPayments_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanPayments_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanPayments_readyForReviewBy(ctx, field)
			case "readyForReviewByUserAccount":
				return ec.fieldContext_PlanPayments_readyForReviewByUserAccount(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanPayments_readyForReviewDts(ctx, field)
			case "readyForClearanceBy":
				return ec.fieldContext_PlanPayments_readyForClearanceBy(ctx, field)
			case "readyForClearanceByUserAccount":
				return ec.fieldContext_PlanPayments_readyForClearanceByUserAccount(ctx, field)
			case "readyForClearanceDts":
				return ec.fieldContext_PlanPayments_readyForClearanceDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanPayments_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanPayments", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_status(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ModelStatus)
	fc.Result = res
	return ec.marshalNModelStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ModelStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_isFavorite(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_isFavorite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().IsFavorite(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_isFavorite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_isCollaborator(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_isCollaborator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().IsCollaborator(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_isCollaborator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_crTdls(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_crTdls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().CrTdls(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PlanCrTdl)
	fc.Result = res
	return ec.marshalNPlanCrTdl2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdlᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_crTdls(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCrTdl_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCrTdl_modelPlanID(ctx, field)
			case "idNumber":
				return ec.fieldContext_PlanCrTdl_idNumber(ctx, field)
			case "dateInitiated":
				return ec.fieldContext_PlanCrTdl_dateInitiated(ctx, field)
			case "title":
				return ec.fieldContext_PlanCrTdl_title(ctx, field)
			case "note":
				return ec.fieldContext_PlanCrTdl_note(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCrTdl_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanCrTdl_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCrTdl_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCrTdl_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanCrTdl_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCrTdl_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCrTdl", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_prepareForClearance(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_prepareForClearance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().PrepareForClearance(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PrepareForClearance)
	fc.Result = res
	return ec.marshalNPrepareForClearance2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPrepareForClearance(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_prepareForClearance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_PrepareForClearance_status(ctx, field)
			case "latestClearanceDts":
				return ec.fieldContext_PrepareForClearance_latestClearanceDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PrepareForClearance", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_nameHistory(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_nameHistory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().NameHistory(rctx, obj, fc.Args["sort"].(models.SortDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_nameHistory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ModelPlan_nameHistory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_operationalNeeds(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_operationalNeeds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().OperationalNeeds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OperationalNeed)
	fc.Result = res
	return ec.marshalNOperationalNeed2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalNeedᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_operationalNeeds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OperationalNeed_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_OperationalNeed_modelPlanID(ctx, field)
			case "needed":
				return ec.fieldContext_OperationalNeed_needed(ctx, field)
			case "solutions":
				return ec.fieldContext_OperationalNeed_solutions(ctx, field)
			case "key":
				return ec.fieldContext_OperationalNeed_key(ctx, field)
			case "name":
				return ec.fieldContext_OperationalNeed_name(ctx, field)
			case "nameOther":
				return ec.fieldContext_OperationalNeed_nameOther(ctx, field)
			case "section":
				return ec.fieldContext_OperationalNeed_section(ctx, field)
			case "createdBy":
				return ec.fieldContext_OperationalNeed_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_OperationalNeed_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_OperationalNeed_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_OperationalNeed_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_OperationalNeed_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_OperationalNeed_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationalNeed", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_existingModelLinks(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_existingModelLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().ExistingModelLinks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ExistingModelLink)
	fc.Result = res
	return ec.marshalNExistingModelLink2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModelLinkᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_existingModelLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExistingModelLink_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_ExistingModelLink_modelPlanID(ctx, field)
			case "existingModelID":
				return ec.fieldContext_ExistingModelLink_existingModelID(ctx, field)
			case "existingModel":
				return ec.fieldContext_ExistingModelLink_existingModel(ctx, field)
			case "currentModelPlanID":
				return ec.fieldContext_ExistingModelLink_currentModelPlanID(ctx, field)
			case "currentModelPlan":
				return ec.fieldContext_ExistingModelLink_currentModelPlan(ctx, field)
			case "createdBy":
				return ec.fieldContext_ExistingModelLink_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_ExistingModelLink_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_ExistingModelLink_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ExistingModelLink_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_ExistingModelLink_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ExistingModelLink_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExistingModelLink", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createModelPlan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createModelPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateModelPlan(rctx, fc.Args["modelName"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ModelPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.ModelPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModelPlan)
	fc.Result = res
	return ec.marshalNModelPlan2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createModelPlan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModelPlan_id(ctx, field)
			case "modelName":
				return ec.fieldContext_ModelPlan_modelName(ctx, field)
			case "archived":
				return ec.fieldContext_ModelPlan_archived(ctx, field)
			case "createdBy":
				return ec.fieldContext_ModelPlan_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_ModelPlan_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_ModelPlan_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ModelPlan_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_ModelPlan_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ModelPlan_modifiedDts(ctx, field)
			case "basics":
				return ec.fieldContext_ModelPlan_basics(ctx, field)
			case "generalCharacteristics":
				return ec.fieldContext_ModelPlan_generalCharacteristics(ctx, field)
			case "participantsAndProviders":
				return ec.fieldContext_ModelPlan_participantsAndProviders(ctx, field)
			case "beneficiaries":
				return ec.fieldContext_ModelPlan_beneficiaries(ctx, field)
			case "opsEvalAndLearning":
				return ec.fieldContext_ModelPlan_opsEvalAndLearning(ctx, field)
			case "collaborators":
				return ec.fieldContext_ModelPlan_collaborators(ctx, field)
			case "documents":
				return ec.fieldContext_ModelPlan_documents(ctx, field)
			case "discussions":
				return ec.fieldContext_ModelPlan_discussions(ctx, field)
			case "payments":
				return ec.fieldContext_ModelPlan_payments(ctx, field)
			case "status":
				return ec.fieldContext_ModelPlan_status(ctx, field)
			case "isFavorite":
				return ec.fieldContext_ModelPlan_isFavorite(ctx, field)
			case "isCollaborator":
				return ec.fieldContext_ModelPlan_isCollaborator(ctx, field)
			case "crTdls":
				return ec.fieldContext_ModelPlan_crTdls(ctx, field)
			case "prepareForClearance":
				return ec.fieldContext_ModelPlan_prepareForClearance(ctx, field)
			case "nameHistory":
				return ec.fieldContext_ModelPlan_nameHistory(ctx, field)
			case "operationalNeeds":
				return ec.fieldContext_ModelPlan_operationalNeeds(ctx, field)
			case "existingModelLinks":
				return ec.fieldContext_ModelPlan_existingModelLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModelPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createModelPlan_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateModelPlan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateModelPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateModelPlan(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ModelPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.ModelPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModelPlan)
	fc.Result = res
	return ec.marshalNModelPlan2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateModelPlan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModelPlan_id(ctx, field)
			case "modelName":
				return ec.fieldContext_ModelPlan_modelName(ctx, field)
			case "archived":
				return ec.fieldContext_ModelPlan_archived(ctx, field)
			case "createdBy":
				return ec.fieldContext_ModelPlan_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_ModelPlan_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_ModelPlan_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ModelPlan_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_ModelPlan_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ModelPlan_modifiedDts(ctx, field)
			case "basics":
				return ec.fieldContext_ModelPlan_basics(ctx, field)
			case "generalCharacteristics":
				return ec.fieldContext_ModelPlan_generalCharacteristics(ctx, field)
			case "participantsAndProviders":
				return ec.fieldContext_ModelPlan_participantsAndProviders(ctx, field)
			case "beneficiaries":
				return ec.fieldContext_ModelPlan_beneficiaries(ctx, field)
			case "opsEvalAndLearning":
				return ec.fieldContext_ModelPlan_opsEvalAndLearning(ctx, field)
			case "collaborators":
				return ec.fieldContext_ModelPlan_collaborators(ctx, field)
			case "documents":
				return ec.fieldContext_ModelPlan_documents(ctx, field)
			case "discussions":
				return ec.fieldContext_ModelPlan_discussions(ctx, field)
			case "payments":
				return ec.fieldContext_ModelPlan_payments(ctx, field)
			case "status":
				return ec.fieldContext_ModelPlan_status(ctx, field)
			case "isFavorite":
				return ec.fieldContext_ModelPlan_isFavorite(ctx, field)
			case "isCollaborator":
				return ec.fieldContext_ModelPlan_isCollaborator(ctx, field)
			case "crTdls":
				return ec.fieldContext_ModelPlan_crTdls(ctx, field)
			case "prepareForClearance":
				return ec.fieldContext_ModelPlan_prepareForClearance(ctx, field)
			case "nameHistory":
				return ec.fieldContext_ModelPlan_nameHistory(ctx, field)
			case "operationalNeeds":
				return ec.fieldContext_ModelPlan_operationalNeeds(ctx, field)
			case "existingModelLinks":
				return ec.fieldContext_ModelPlan_existingModelLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModelPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateModelPlan_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPlanCollaborator(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPlanCollaborator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreatePlanCollaborator(rctx, fc.Args["input"].(model.PlanCollaboratorCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanCollaborator); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanCollaborator`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCollaborator)
	fc.Result = res
	return ec.marshalNPlanCollaborator2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaborator(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPlanCollaborator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCollaborator_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCollaborator_modelPlanID(ctx, field)
			case "userID":
				return ec.fieldContext_PlanCollaborator_userID(ctx, field)
			case "userAccount":
				return ec.fieldContext_PlanCollaborator_userAccount(ctx, field)
			case "teamRole":
				return ec.fieldContext_PlanCollaborator_teamRole(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCollaborator_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanCollaborator_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCollaborator_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCollaborator_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanCollaborator_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCollaborator_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCollaborator", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPlanCollaborator_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanCollaborator(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanCollaborator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanCollaborator(rctx, fc.Args["id"].(uuid.UUID), fc.Args["newRole"].(models.TeamRole))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanCollaborator); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanCollaborator`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCollaborator)
	fc.Result = res
	return ec.marshalNPlanCollaborator2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaborator(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanCollaborator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCollaborator_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCollaborator_modelPlanID(ctx, field)
			case "userID":
				return ec.fieldContext_PlanCollaborator_userID(ctx, field)
			case "userAccount":
				return ec.fieldContext_PlanCollaborator_userAccount(ctx, field)
			case "teamRole":
				return ec.fieldContext_PlanCollaborator_teamRole(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCollaborator_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanCollaborator_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCollaborator_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCollaborator_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanCollaborator_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCollaborator_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCollaborator", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanCollaborator_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePlanCollaborator(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePlanCollaborator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePlanCollaborator(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanCollaborator); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanCollaborator`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCollaborator)
	fc.Result = res
	return ec.marshalNPlanCollaborator2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaborator(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePlanCollaborator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCollaborator_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCollaborator_modelPlanID(ctx, field)
			case "userID":
				return ec.fieldContext_PlanCollaborator_userID(ctx, field)
			case "userAccount":
				return ec.fieldContext_PlanCollaborator_userAccount(ctx, field)
			case "teamRole":
				return ec.fieldContext_PlanCollaborator_teamRole(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCollaborator_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanCollaborator_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCollaborator_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCollaborator_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanCollaborator_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCollaborator_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCollaborator", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePlanCollaborator_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanBasics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanBasics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanBasics(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanBasics); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanBasics`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanBasics)
	fc.Result = res
	return ec.marshalNPlanBasics2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBasics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanBasics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanBasics_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanBasics_modelPlanID(ctx, field)
			case "modelCategory":
				return ec.fieldContext_PlanBasics_modelCategory(ctx, field)
			case "cmsCenters":
				return ec.fieldContext_PlanBasics_cmsCenters(ctx, field)
			case "cmsOther":
				return ec.fieldContext_PlanBasics_cmsOther(ctx, field)
			case "cmmiGroups":
				return ec.fieldContext_PlanBasics_cmmiGroups(ctx, field)
			case "modelType":
				return ec.fieldContext_PlanBasics_modelType(ctx, field)
			case "problem":
				return ec.fieldContext_PlanBasics_problem(ctx, field)
			case "goal":
				return ec.fieldContext_PlanBasics_goal(ctx, field)
			case "testInterventions":
				return ec.fieldContext_PlanBasics_testInterventions(ctx, field)
			case "note":
				return ec.fieldContext_PlanBasics_note(ctx, field)
			case "completeICIP":
				return ec.fieldContext_PlanBasics_completeICIP(ctx, field)
			case "clearanceStarts":
				return ec.fieldContext_PlanBasics_clearanceStarts(ctx, field)
			case "clearanceEnds":
				return ec.fieldContext_PlanBasics_clearanceEnds(ctx, field)
			case "announced":
				return ec.fieldContext_PlanBasics_announced(ctx, field)
			case "applicationsStart":
				return ec.fieldContext_PlanBasics_applicationsStart(ctx, field)
			case "applicationsEnd":
				return ec.fieldContext_PlanBasics_applicationsEnd(ctx, field)
			case "performancePeriodStarts":
				return ec.fieldContext_PlanBasics_performancePeriodStarts(ctx, field)
			case "performancePeriodEnds":
				return ec.fieldContext_PlanBasics_performancePeriodEnds(ctx, field)
			case "wrapUpEnds":
				return ec.fieldContext_PlanBasics_wrapUpEnds(ctx, field)
			case "highLevelNote":
				return ec.fieldContext_PlanBasics_highLevelNote(ctx, field)
			case "phasedIn":
				return ec.fieldContext_PlanBasics_phasedIn(ctx, field)
			case "phasedInNote":
				return ec.fieldContext_PlanBasics_phasedInNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanBasics_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanBasics_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanBasics_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanBasics_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanBasics_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanBasics_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanBasics_readyForReviewBy(ctx, field)
			case "readyForReviewByUserAccount":
				return ec.fieldContext_PlanBasics_readyForReviewByUserAccount(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanBasics_readyForReviewDts(ctx, field)
			case "readyForClearanceBy":
				return ec.fieldContext_PlanBasics_readyForClearanceBy(ctx, field)
			case "readyForClearanceByUserAccount":
				return ec.fieldContext_PlanBasics_readyForClearanceByUserAccount(ctx, field)
			case "readyForClearanceDts":
				return ec.fieldContext_PlanBasics_readyForClearanceDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanBasics_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanBasics", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanBasics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanGeneralCharacteristics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanGeneralCharacteristics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanGeneralCharacteristics(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanGeneralCharacteristics); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanGeneralCharacteristics`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanGeneralCharacteristics)
	fc.Result = res
	return ec.marshalNPlanGeneralCharacteristics2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanGeneralCharacteristics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanGeneralCharacteristics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanGeneralCharacteristics_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanGeneralCharacteristics_modelPlanID(ctx, field)
			case "isNewModel":
				return ec.fieldContext_PlanGeneralCharacteristics_isNewModel(ctx, field)
			case "existingModel":
				return ec.fieldContext_PlanGeneralCharacteristics_existingModel(ctx, field)
			case "resemblesExistingModel":
				return ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModel(ctx, field)
			case "resemblesExistingModelHow":
				return ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelHow(ctx, field)
			case "resemblesExistingModelNote":
				return ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelNote(ctx, field)
			case "hasComponentsOrTracks":
				return ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracks(ctx, field)
			case "hasComponentsOrTracksDiffer":
				return ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksDiffer(ctx, field)
			case "hasComponentsOrTracksNote":
				return ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksNote(ctx, field)
			case "alternativePaymentModelTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModelTypes(ctx, field)
			case "alternativePaymentModelNote":
				return ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModelNote(ctx, field)
			case "keyCharacteristics":
				return ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristics(ctx, field)
			case "keyCharacteristicsOther":
				return ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristicsOther(ctx, field)
			case "keyCharacteristicsNote":
				return ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristicsNote(ctx, field)
			case "collectPlanBids":
				return ec.fieldContext_PlanGeneralCharacteristics_collectPlanBids(ctx, field)
			case "collectPlanBidsNote":
				return ec.fieldContext_PlanGeneralCharacteristics_collectPlanBidsNote(ctx, field)
			case "managePartCDEnrollment":
				return ec.fieldContext_PlanGeneralCharacteristics_managePartCDEnrollment(ctx, field)
			case "managePartCDEnrollmentNote":
				return ec.fieldContext_PlanGeneralCharacteristics_managePartCDEnrollmentNote(ctx, field)
			case "planContractUpdated":
				return ec.fieldContext_PlanGeneralCharacteristics_planContractUpdated(ctx, field)
			case "planContractUpdatedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_planContractUpdatedNote(ctx, field)
			case "careCoordinationInvolved":
				return ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolved(ctx, field)
			case "careCoordinationInvolvedDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedDescription(ctx, field)
			case "careCoordinationInvolvedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedNote(ctx, field)
			case "additionalServicesInvolved":
				return ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolved(ctx, field)
			case "additionalServicesInvolvedDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedDescription(ctx, field)
			case "additionalServicesInvolvedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedNote(ctx, field)
			case "communityPartnersInvolved":
				return ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolved(ctx, field)
			case "communityPartnersInvolvedDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedDescription(ctx, field)
			case "communityPartnersInvolvedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedNote(ctx, field)
			case "geographiesTargeted":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargeted(ctx, field)
			case "geographiesTargetedTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypes(ctx, field)
			case "geographiesTargetedTypesOther":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypesOther(ctx, field)
			case "geographiesTargetedAppliedTo":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedTo(ctx, field)
			case "geographiesTargetedAppliedToOther":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedToOther(ctx, field)
			case "geographiesTargetedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedNote(ctx, field)
			case "participationOptions":
				return ec.fieldContext_PlanGeneralCharacteristics_participationOptions(ctx, field)
			case "participationOptionsNote":
				return ec.fieldContext_PlanGeneralCharacteristics_participationOptionsNote(ctx, field)
			case "agreementTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_agreementTypes(ctx, field)
			case "agreementTypesOther":
				return ec.fieldContext_PlanGeneralCharacteristics_agreementTypesOther(ctx, field)
			case "multiplePatricipationAgreementsNeeded":
				return ec.fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeeded(ctx, field)
			case "multiplePatricipationAgreementsNeededNote":
				return ec.fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeededNote(ctx, field)
			case "rulemakingRequired":
				return ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequired(ctx, field)
			case "rulemakingRequiredDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequiredDescription(ctx, field)
			case "rulemakingRequiredNote":
				return ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequiredNote(ctx, field)
			case "authorityAllowances":
				return ec.fieldContext_PlanGeneralCharacteristics_authorityAllowances(ctx, field)
			case "authorityAllowancesOther":
				return ec.fieldContext_PlanGeneralCharacteristics_authorityAllowancesOther(ctx, field)
			case "authorityAllowancesNote":
				return ec.fieldContext_PlanGeneralCharacteristics_authorityAllowancesNote(ctx, field)
			case "waiversRequired":
				return ec.fieldContext_PlanGeneralCharacteristics_waiversRequired(ctx, field)
			case "waiversRequiredTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_waiversRequiredTypes(ctx, field)
			case "waiversRequiredNote":
				return ec.fieldContext_PlanGeneralCharacteristics_waiversRequiredNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanGeneralCharacteristics_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanGeneralCharacteristics_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanGeneralCharacteristics_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanGeneralCharacteristics_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanGeneralCharacteristics_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanGeneralCharacteristics_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForReviewBy(ctx, field)
			case "readyForReviewByUserAccount":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForReviewByUserAccount(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForReviewDts(ctx, field)
			case "readyForClearanceBy":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForClearanceBy(ctx, field)
			case "readyForClearanceByUserAccount":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForClearanceByUserAccount(ctx, field)
			case "readyForClearanceDts":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForClearanceDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanGeneralCharacteristics_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanGeneralCharacteristics", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanGeneralCharacteristics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanBeneficiaries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanBeneficiaries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanBeneficiaries(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanBeneficiaries); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanBeneficiaries`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanBeneficiaries)
	fc.Result = res
	return ec.marshalNPlanBeneficiaries2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBeneficiaries(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanBeneficiaries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanBeneficiaries_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanBeneficiaries_modelPlanID(ctx, field)
			case "beneficiaries":
				return ec.fieldContext_PlanBeneficiaries_beneficiaries(ctx, field)
			case "beneficiariesOther":
				return ec.fieldContext_PlanBeneficiaries_beneficiariesOther(ctx, field)
			case "beneficiariesNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiariesNote(ctx, field)
			case "treatDualElligibleDifferent":
				return ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferent(ctx, field)
			case "treatDualElligibleDifferentHow":
				return ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferentHow(ctx, field)
			case "treatDualElligibleDifferentNote":
				return ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferentNote(ctx, field)
			case "excludeCertainCharacteristics":
				return ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristics(ctx, field)
			case "excludeCertainCharacteristicsCriteria":
				return ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsCriteria(ctx, field)
			case "excludeCertainCharacteristicsNote":
				return ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsNote(ctx, field)
			case "numberPeopleImpacted":
				return ec.fieldContext_PlanBeneficiaries_numberPeopleImpacted(ctx, field)
			case "estimateConfidence":
				return ec.fieldContext_PlanBeneficiaries_estimateConfidence(ctx, field)
			case "confidenceNote":
				return ec.fieldContext_PlanBeneficiaries_confidenceNote(ctx, field)
			case "beneficiarySelectionMethod":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionMethod(ctx, field)
			case "beneficiarySelectionOther":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionOther(ctx, field)
			case "beneficiarySelectionNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionNote(ctx, field)
			case "beneficiarySelectionFrequency":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequency(ctx, field)
			case "beneficiarySelectionFrequencyOther":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyOther(ctx, field)
			case "beneficiarySelectionFrequencyNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyNote(ctx, field)
			case "beneficiaryOverlap":
				return ec.fieldContext_PlanBeneficiaries_beneficiaryOverlap(ctx, field)
			case "beneficiaryOverlapNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiaryOverlapNote(ctx, field)
			case "precedenceRules":
				return ec.fieldContext_PlanBeneficiaries_precedenceRules(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanBeneficiaries_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanBeneficiaries_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanBeneficiaries_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanBeneficiaries_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanBeneficiaries_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanBeneficiaries_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanBeneficiaries_readyForReviewBy(ctx, field)
			case "readyForReviewByUserAccount":
				return ec.fieldContext_PlanBeneficiaries_readyForReviewByUserAccount(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanBeneficiaries_readyForReviewDts(ctx, field)
			case "readyForClearanceBy":
				return ec.fieldContext_PlanBeneficiaries_readyForClearanceBy(ctx, field)
			case "readyForClearanceByUserAccount":
				return ec.fieldContext_PlanBeneficiaries_readyForClearanceByUserAccount(ctx, field)
			case "readyForClearanceDts":
				return ec.fieldContext_PlanBeneficiaries_readyForClearanceDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanBeneficiaries_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanBeneficiaries", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanBeneficiaries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanParticipantsAndProviders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanParticipantsAndProviders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanParticipantsAndProviders(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanParticipantsAndProviders); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanParticipantsAndProviders`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanParticipantsAndProviders)
	fc.Result = res
	return ec.marshalNPlanParticipantsAndProviders2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanParticipantsAndProviders(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanParticipantsAndProviders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanParticipantsAndProviders_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanParticipantsAndProviders_modelPlanID(ctx, field)
			case "participants":
				return ec.fieldContext_PlanParticipantsAndProviders_participants(ctx, field)
			case "medicareProviderType":
				return ec.fieldContext_PlanParticipantsAndProviders_medicareProviderType(ctx, field)
			case "statesEngagement":
				return ec.fieldContext_PlanParticipantsAndProviders_statesEngagement(ctx, field)
			case "participantsOther":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsOther(ctx, field)
			case "participantsNote":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsNote(ctx, field)
			case "participantsCurrentlyInModels":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModels(ctx, field)
			case "participantsCurrentlyInModelsNote":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModelsNote(ctx, field)
			case "modelApplicationLevel":
				return ec.fieldContext_PlanParticipantsAndProviders_modelApplicationLevel(ctx, field)
			case "expectedNumberOfParticipants":
				return ec.fieldContext_PlanParticipantsAndProviders_expectedNumberOfParticipants(ctx, field)
			case "estimateConfidence":
				return ec.fieldContext_PlanParticipantsAndProviders_estimateConfidence(ctx, field)
			case "confidenceNote":
				return ec.fieldContext_PlanParticipantsAndProviders_confidenceNote(ctx, field)
			case "recruitmentMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_recruitmentMethod(ctx, field)
			case "recruitmentOther":
				return ec.fieldContext_PlanParticipantsAndProviders_recruitmentOther(ctx, field)
			case "recruitmentNote":
				return ec.fieldContext_PlanParticipantsAndProviders_recruitmentNote(ctx, field)
			case "selectionMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_selectionMethod(ctx, field)
			case "selectionOther":
				return ec.fieldContext_PlanParticipantsAndProviders_selectionOther(ctx, field)
			case "selectionNote":
				return ec.fieldContext_PlanParticipantsAndProviders_selectionNote(ctx, field)
			case "communicationMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_communicationMethod(ctx, field)
			case "communicationMethodOther":
				return ec.fieldContext_PlanParticipantsAndProviders_communicationMethodOther(ctx, field)
			case "communicationNote":
				return ec.fieldContext_PlanParticipantsAndProviders_communicationNote(ctx, field)
			case "participantAssumeRisk":
				return ec.fieldContext_PlanParticipantsAndProviders_participantAssumeRisk(ctx, field)
			case "riskType":
				return ec.fieldContext_PlanParticipantsAndProviders_riskType(ctx, field)
			case "riskOther":
				return ec.fieldContext_PlanParticipantsAndProviders_riskOther(ctx, field)
			case "riskNote":
				return ec.fieldContext_PlanParticipantsAndProviders_riskNote(ctx, field)
			case "willRiskChange":
				return ec.fieldContext_PlanParticipantsAndProviders_willRiskChange(ctx, field)
			case "willRiskChangeNote":
				return ec.fieldContext_PlanParticipantsAndProviders_willRiskChangeNote(ctx, field)
			case "coordinateWork":
				return ec.fieldContext_PlanParticipantsAndProviders_coordinateWork(ctx, field)
			case "coordinateWorkNote":
				return ec.fieldContext_PlanParticipantsAndProviders_coordinateWorkNote(ctx, field)
			case "gainsharePayments":
				return ec.fieldContext_PlanParticipantsAndProviders_gainsharePayments(ctx, field)
			case "gainsharePaymentsTrack":
				return ec.fieldContext_PlanParticipantsAndProviders_gainsharePaymentsTrack(ctx, field)
			case "gainsharePaymentsNote":
				return ec.fieldContext_PlanParticipantsAndProviders_gainsharePaymentsNote(ctx, field)
			case "participantsIds":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsIds(ctx, field)
			case "participantsIdsOther":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsIdsOther(ctx, field)
			case "participantsIDSNote":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsIDSNote(ctx, field)
			case "providerAdditionFrequency":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequency(ctx, field)
			case "providerAdditionFrequencyOther":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyOther(ctx, field)
			case "providerAdditionFrequencyNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyNote(ctx, field)
			case "providerAddMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAddMethod(ctx, field)
			case "providerAddMethodOther":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAddMethodOther(ctx, field)
			case "providerAddMethodNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAddMethodNote(ctx, field)
			case "providerLeaveMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethod(ctx, field)
			case "providerLeaveMethodOther":
				return ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethodOther(ctx, field)
			case "providerLeaveMethodNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethodNote(ctx, field)
			case "providerOverlap":
				return ec.fieldContext_PlanParticipantsAndProviders_providerOverlap(ctx, field)
			case "providerOverlapHierarchy":
				return ec.fieldContext_PlanParticipantsAndProviders_providerOverlapHierarchy(ctx, field)
			case "providerOverlapNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerOverlapNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanParticipantsAndProviders_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanParticipantsAndProviders_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanParticipantsAndProviders_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanParticipantsAndProviders_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanParticipantsAndProviders_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanParticipantsAndProviders_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForReviewBy(ctx, field)
			case "readyForReviewByUserAccount":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForReviewByUserAccount(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForReviewDts(ctx, field)
			case "readyForClearanceBy":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForClearanceBy(ctx, field)
			case "readyForClearanceByUserAccount":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForClearanceByUserAccount(ctx, field)
			case "readyForClearanceDts":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForClearanceDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanParticipantsAndProviders_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanParticipantsAndProviders", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanParticipantsAndProviders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanOpsEvalAndLearning(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanOpsEvalAndLearning(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanOpsEvalAndLearning(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanOpsEvalAndLearning); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanOpsEvalAndLearning`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanOpsEvalAndLearning)
	fc.Result = res
	return ec.marshalNPlanOpsEvalAndLearning2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanOpsEvalAndLearning(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanOpsEvalAndLearning(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanOpsEvalAndLearning_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelPlanID(ctx, field)
			case "agencyOrStateHelp":
				return ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelp(ctx, field)
			case "agencyOrStateHelpOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpOther(ctx, field)
			case "agencyOrStateHelpNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpNote(ctx, field)
			case "stakeholders":
				return ec.fieldContext_PlanOpsEvalAndLearning_stakeholders(ctx, field)
			case "stakeholdersOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_stakeholdersOther(ctx, field)
			case "stakeholdersNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_stakeholdersNote(ctx, field)
			case "helpdeskUse":
				return ec.fieldContext_PlanOpsEvalAndLearning_helpdeskUse(ctx, field)
			case "helpdeskUseNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_helpdeskUseNote(ctx, field)
			case "contractorSupport":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupport(ctx, field)
			case "contractorSupportOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportOther(ctx, field)
			case "contractorSupportHow":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportHow(ctx, field)
			case "contractorSupportNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportNote(ctx, field)
			case "iddocSupport":
				return ec.fieldContext_PlanOpsEvalAndLearning_iddocSupport(ctx, field)
			case "iddocSupportNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_iddocSupportNote(ctx, field)
			case "technicalContactsIdentified":
				return ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentified(ctx, field)
			case "technicalContactsIdentifiedDetail":
				return ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedDetail(ctx, field)
			case "technicalContactsIdentifiedNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedNote(ctx, field)
			case "captureParticipantInfo":
				return ec.fieldContext_PlanOpsEvalAndLearning_captureParticipantInfo(ctx, field)
			case "captureParticipantInfoNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_captureParticipantInfoNote(ctx, field)
			case "icdOwner":
				return ec.fieldContext_PlanOpsEvalAndLearning_icdOwner(ctx, field)
			case "draftIcdDueDate":
				return ec.fieldContext_PlanOpsEvalAndLearning_draftIcdDueDate(ctx, field)
			case "icdNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_icdNote(ctx, field)
			case "uatNeeds":
				return ec.fieldContext_PlanOpsEvalAndLearning_uatNeeds(ctx, field)
			case "stcNeeds":
				return ec.fieldContext_PlanOpsEvalAndLearning_stcNeeds(ctx, field)
			case "testingTimelines":
				return ec.fieldContext_PlanOpsEvalAndLearning_testingTimelines(ctx, field)
			case "testingNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_testingNote(ctx, field)
			case "dataMonitoringFileTypes":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileTypes(ctx, field)
			case "dataMonitoringFileOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileOther(ctx, field)
			case "dataResponseType":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataResponseType(ctx, field)
			case "dataResponseFileFrequency":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataResponseFileFrequency(ctx, field)
			case "dataFullTimeOrIncremental":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataFullTimeOrIncremental(ctx, field)
			case "eftSetUp":
				return ec.fieldContext_PlanOpsEvalAndLearning_eftSetUp(ctx, field)
			case "unsolicitedAdjustmentsIncluded":
				return ec.fieldContext_PlanOpsEvalAndLearning_unsolicitedAdjustmentsIncluded(ctx, field)
			case "dataFlowDiagramsNeeded":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataFlowDiagramsNeeded(ctx, field)
			case "produceBenefitEnhancementFiles":
				return ec.fieldContext_PlanOpsEvalAndLearning_produceBenefitEnhancementFiles(ctx, field)
			case "fileNamingConventions":
				return ec.fieldContext_PlanOpsEvalAndLearning_fileNamingConventions(ctx, field)
			case "dataMonitoringNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringNote(ctx, field)
			case "benchmarkForPerformance":
				return ec.fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformance(ctx, field)
			case "benchmarkForPerformanceNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformanceNote(ctx, field)
			case "computePerformanceScores":
				return ec.fieldContext_PlanOpsEvalAndLearning_computePerformanceScores(ctx, field)
			case "computePerformanceScoresNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_computePerformanceScoresNote(ctx, field)
			case "riskAdjustPerformance":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustPerformance(ctx, field)
			case "riskAdjustFeedback":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustFeedback(ctx, field)
			case "riskAdjustPayments":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustPayments(ctx, field)
			case "riskAdjustOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustOther(ctx, field)
			case "riskAdjustNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustNote(ctx, field)
			case "appealPerformance":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealPerformance(ctx, field)
			case "appealFeedback":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealFeedback(ctx, field)
			case "appealPayments":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealPayments(ctx, field)
			case "appealOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealOther(ctx, field)
			case "appealNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealNote(ctx, field)
			case "evaluationApproaches":
				return ec.fieldContext_PlanOpsEvalAndLearning_evaluationApproaches(ctx, field)
			case "evaluationApproachOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_evaluationApproachOther(ctx, field)
			case "evalutaionApproachNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_evalutaionApproachNote(ctx, field)
			case "ccmInvolvment":
				return ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvment(ctx, field)
			case "ccmInvolvmentOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentOther(ctx, field)
			case "ccmInvolvmentNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentNote(ctx, field)
			case "dataNeededForMonitoring":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoring(ctx, field)
			case "dataNeededForMonitoringOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringOther(ctx, field)
			case "dataNeededForMonitoringNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringNote(ctx, field)
			case "dataToSendParticicipants":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipants(ctx, field)
			case "dataToSendParticicipantsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsOther(ctx, field)
			case "dataToSendParticicipantsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsNote(ctx, field)
			case "shareCclfData":
				return ec.fieldContext_PlanOpsEvalAndLearning_shareCclfData(ctx, field)
			case "shareCclfDataNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_shareCclfDataNote(ctx, field)
			case "sendFilesBetweenCcw":
				return ec.fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcw(ctx, field)
			case "sendFilesBetweenCcwNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcwNote(ctx, field)
			case "appToSendFilesToKnown":
				return ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToKnown(ctx, field)
			case "appToSendFilesToWhich":
				return ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToWhich(ctx, field)
			case "appToSendFilesToNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToNote(ctx, field)
			case "useCcwForFileDistribiutionToParticipants":
				return ec.fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipants(ctx, field)
			case "useCcwForFileDistribiutionToParticipantsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipantsNote(ctx, field)
			case "developNewQualityMeasures":
				return ec.fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasures(ctx, field)
			case "developNewQualityMeasuresNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasuresNote(ctx, field)
			case "qualityPerformanceImpactsPayment":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPayment(ctx, field)
			case "qualityPerformanceImpactsPaymentNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPaymentNote(ctx, field)
			case "dataSharingStarts":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStarts(ctx, field)
			case "dataSharingStartsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStartsOther(ctx, field)
			case "dataSharingFrequency":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingFrequency(ctx, field)
			case "dataSharingFrequencyOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingFrequencyOther(ctx, field)
			case "dataSharingStartsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStartsNote(ctx, field)
			case "dataCollectionStarts":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionStarts(ctx, field)
			case "dataCollectionStartsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionStartsOther(ctx, field)
			case "dataCollectionFrequency":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequency(ctx, field)
			case "dataCollectionFrequencyOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyOther(ctx, field)
			case "dataCollectionFrequencyNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyNote(ctx, field)
			case "qualityReportingStarts":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStarts(ctx, field)
			case "qualityReportingStartsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsOther(ctx, field)
			case "qualityReportingStartsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsNote(ctx, field)
			case "modelLearningSystems":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystems(ctx, field)
			case "modelLearningSystemsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsOther(ctx, field)
			case "modelLearningSystemsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsNote(ctx, field)
			case "anticipatedChallenges":
				return ec.fieldContext_PlanOpsEvalAndLearning_anticipatedChallenges(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanOpsEvalAndLearning_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanOpsEvalAndLearning_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanOpsEvalAndLearning_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanOpsEvalAndLearning_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanOpsEvalAndLearning_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanOpsEvalAndLearning_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewBy(ctx, field)
			case "readyForReviewByUserAccount":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewByUserAccount(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewDts(ctx, field)
			case "readyForClearanceBy":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForClearanceBy(ctx, field)
			case "readyForClearanceByUserAccount":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForClearanceByUserAccount(ctx, field)
			case "readyForClearanceDts":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForClearanceDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanOpsEvalAndLearning_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanOpsEvalAndLearning", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanOpsEvalAndLearning_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_uploadNewPlanDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_uploadNewPlanDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UploadNewPlanDocument(rctx, fc.Args["input"].(model.PlanDocumentInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanDocument); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanDocument`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanDocument)
	fc.Result = res
	return ec.marshalNPlanDocument2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_uploadNewPlanDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDocument_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDocument_modelPlanID(ctx, field)
			case "fileType":
				return ec.fieldContext_PlanDocument_fileType(ctx, field)
			case "bucket":
				return ec.fieldContext_PlanDocument_bucket(ctx, field)
			case "fileKey":
				return ec.fieldContext_PlanDocument_fileKey(ctx, field)
			case "virusScanned":
				return ec.fieldContext_PlanDocument_virusScanned(ctx, field)
			case "virusClean":
				return ec.fieldContext_PlanDocument_virusClean(ctx, field)
			case "restricted":
				return ec.fieldContext_PlanDocument_restricted(ctx, field)
			case "fileName":
				return ec.fieldContext_PlanDocument_fileName(ctx, field)
			case "fileSize":
				return ec.fieldContext_PlanDocument_fileSize(ctx, field)
			case "documentType":
				return ec.fieldContext_PlanDocument_documentType(ctx, field)
			case "otherType":
				return ec.fieldContext_PlanDocument_otherType(ctx, field)
			case "optionalNotes":
				return ec.fieldContext_PlanDocument_optionalNotes(ctx, field)
			case "downloadUrl":
				return ec.fieldContext_PlanDocument_downloadUrl(ctx, field)
			case "deletedAt":
				return ec.fieldContext_PlanDocument_deletedAt(ctx, field)
			case "numLinkedSolutions":
				return ec.fieldContext_PlanDocument_numLinkedSolutions(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDocument_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanDocument_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDocument_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDocument_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanDocument_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDocument_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDocument", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_uploadNewPlanDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePlanDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePlanDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePlanDocument(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(int); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePlanDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePlanDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPlanDiscussion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPlanDiscussion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreatePlanDiscussion(rctx, fc.Args["input"].(model.PlanDiscussionCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanDiscussion); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanDiscussion`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanDiscussion)
	fc.Result = res
	return ec.marshalNPlanDiscussion2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussion(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPlanDiscussion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDiscussion_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDiscussion_modelPlanID(ctx, field)
			case "content":
				return ec.fieldContext_PlanDiscussion_content(ctx, field)
			case "status":
				return ec.fieldContext_PlanDiscussion_status(ctx, field)
			case "replies":
				return ec.fieldContext_PlanDiscussion_replies(ctx, field)
			case "isAssessment":
				return ec.fieldContext_PlanDiscussion_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDiscussion_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanDiscussion_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDiscussion_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDiscussion_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanDiscussion_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDiscussion_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDiscussion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPlanDiscussion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanDiscussion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanDiscussion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanDiscussion(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanDiscussion); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanDiscussion`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanDiscussion)
	fc.Result = res
	return ec.marshalNPlanDiscussion2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussion(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanDiscussion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDiscussion_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDiscussion_modelPlanID(ctx, field)
			case "content":
				return ec.fieldContext_PlanDiscussion_content(ctx, field)
			case "status":
				return ec.fieldContext_PlanDiscussion_status(ctx, field)
			case "replies":
				return ec.fieldContext_PlanDiscussion_replies(ctx, field)
			case "isAssessment":
				return ec.fieldContext_PlanDiscussion_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDiscussion_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanDiscussion_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDiscussion_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDiscussion_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanDiscussion_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDiscussion_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDiscussion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanDiscussion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePlanDiscussion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePlanDiscussion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePlanDiscussion(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanDiscussion); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanDiscussion`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanDiscussion)
	fc.Result = res
	return ec.marshalNPlanDiscussion2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussion(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePlanDiscussion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDiscussion_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDiscussion_modelPlanID(ctx, field)
			case "content":
				return ec.fieldContext_PlanDiscussion_content(ctx, field)
			case "status":
				return ec.fieldContext_PlanDiscussion_status(ctx, field)
			case "replies":
				return ec.fieldContext_PlanDiscussion_replies(ctx, field)
			case "isAssessment":
				return ec.fieldContext_PlanDiscussion_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDiscussion_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanDiscussion_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDiscussion_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDiscussion_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanDiscussion_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDiscussion_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDiscussion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePlanDiscussion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createDiscussionReply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createDiscussionReply(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateDiscussionReply(rctx, fc.Args["input"].(model.DiscussionReplyCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.DiscussionReply); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.DiscussionReply`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.DiscussionReply)
	fc.Result = res
	return ec.marshalNDiscussionReply2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReply(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createDiscussionReply(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DiscussionReply_id(ctx, field)
			case "discussionID":
				return ec.fieldContext_DiscussionReply_discussionID(ctx, field)
			case "content":
				return ec.fieldContext_DiscussionReply_content(ctx, field)
			case "resolution":
				return ec.fieldContext_DiscussionReply_resolution(ctx, field)
			case "isAssessment":
				return ec.fieldContext_DiscussionReply_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_DiscussionReply_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_DiscussionReply_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_DiscussionReply_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_DiscussionReply_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_DiscussionReply_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_DiscussionReply_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscussionReply", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createDiscussionReply_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDiscussionReply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDiscussionReply(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateDiscussionReply(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.DiscussionReply); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.DiscussionReply`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.DiscussionReply)
	fc.Result = res
	return ec.marshalNDiscussionReply2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReply(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDiscussionReply(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DiscussionReply_id(ctx, field)
			case "discussionID":
				return ec.fieldContext_DiscussionReply_discussionID(ctx, field)
			case "content":
				return ec.fieldContext_DiscussionReply_content(ctx, field)
			case "resolution":
				return ec.fieldContext_DiscussionReply_resolution(ctx, field)
			case "isAssessment":
				return ec.fieldContext_DiscussionReply_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_DiscussionReply_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_DiscussionReply_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_DiscussionReply_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_DiscussionReply_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_DiscussionReply_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_DiscussionReply_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscussionReply", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDiscussionReply_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDiscussionReply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDiscussionReply(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteDiscussionReply(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.DiscussionReply); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.DiscussionReply`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.DiscussionReply)
	fc.Result = res
	return ec.marshalNDiscussionReply2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReply(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDiscussionReply(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DiscussionReply_id(ctx, field)
			case "discussionID":
				return ec.fieldContext_DiscussionReply_discussionID(ctx, field)
			case "content":
				return ec.fieldContext_DiscussionReply_content(ctx, field)
			case "resolution":
				return ec.fieldContext_DiscussionReply_resolution(ctx, field)
			case "isAssessment":
				return ec.fieldContext_DiscussionReply_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_DiscussionReply_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_DiscussionReply_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_DiscussionReply_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_DiscussionReply_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_DiscussionReply_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_DiscussionReply_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscussionReply", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDiscussionReply_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_lockTaskListSection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_lockTaskListSection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().LockTaskListSection(rctx, fc.Args["modelPlanID"].(uuid.UUID), fc.Args["section"].(models.TaskListSection))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_lockTaskListSection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_lockTaskListSection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unlockTaskListSection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unlockTaskListSection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UnlockTaskListSection(rctx, fc.Args["modelPlanID"].(uuid.UUID), fc.Args["section"].(models.TaskListSection))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unlockTaskListSection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unlockTaskListSection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unlockAllTaskListSections(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unlockAllTaskListSections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UnlockAllTaskListSections(rctx, fc.Args["modelPlanID"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_ASSESSMENT")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.TaskListSectionLockStatus); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/graph/model.TaskListSectionLockStatus`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TaskListSectionLockStatus)
	fc.Result = res
	return ec.marshalNTaskListSectionLockStatus2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatusᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unlockAllTaskListSections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modelPlanID":
				return ec.fieldContext_TaskListSectionLockStatus_modelPlanID(ctx, field)
			case "section":
				return ec.fieldContext_TaskListSectionLockStatus_section(ctx, field)
			case "lockedByUserAccount":
				return ec.fieldContext_TaskListSectionLockStatus_lockedByUserAccount(ctx, field)
			case "isAssessment":
				return ec.fieldContext_TaskListSectionLockStatus_isAssessment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskListSectionLockStatus", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unlockAllTaskListSections_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanPayments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanPayments(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanPayments); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanPayments`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanPayments)
	fc.Result = res
	return ec.marshalNPlanPayments2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanPayments(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanPayments_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanPayments_modelPlanID(ctx, field)
			case "fundingSource":
				return ec.fieldContext_PlanPayments_fundingSource(ctx, field)
			case "fundingSourceTrustFund":
				return ec.fieldContext_PlanPayments_fundingSourceTrustFund(ctx, field)
			case "fundingSourceOther":
				return ec.fieldContext_PlanPayments_fundingSourceOther(ctx, field)
			case "fundingSourceNote":
				return ec.fieldContext_PlanPayments_fundingSourceNote(ctx, field)
			case "fundingSourceR":
				return ec.fieldContext_PlanPayments_fundingSourceR(ctx, field)
			case "fundingSourceRTrustFund":
				return ec.fieldContext_PlanPayments_fundingSourceRTrustFund(ctx, field)
			case "fundingSourceROther":
				return ec.fieldContext_PlanPayments_fundingSourceROther(ctx, field)
			case "fundingSourceRNote":
				return ec.fieldContext_PlanPayments_fundingSourceRNote(ctx, field)
			case "payRecipients":
				return ec.fieldContext_PlanPayments_payRecipients(ctx, field)
			case "payRecipientsOtherSpecification":
				return ec.fieldContext_PlanPayments_payRecipientsOtherSpecification(ctx, field)
			case "payRecipientsNote":
				return ec.fieldContext_PlanPayments_payRecipientsNote(ctx, field)
			case "payType":
				return ec.fieldContext_PlanPayments_payType(ctx, field)
			case "payTypeNote":
				return ec.fieldContext_PlanPayments_payTypeNote(ctx, field)
			case "payClaims":
				return ec.fieldContext_PlanPayments_payClaims(ctx, field)
			case "payClaimsOther":
				return ec.fieldContext_PlanPayments_payClaimsOther(ctx, field)
			case "payClaimsNote":
				return ec.fieldContext_PlanPayments_payClaimsNote(ctx, field)
			case "shouldAnyProvidersExcludedFFSSystems":
				return ec.fieldContext_PlanPayments_shouldAnyProvidersExcludedFFSSystems(ctx, field)
			case "shouldAnyProviderExcludedFFSSystemsNote":
				return ec.fieldContext_PlanPayments_shouldAnyProviderExcludedFFSSystemsNote(ctx, field)
			case "changesMedicarePhysicianFeeSchedule":
				return ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeSchedule(ctx, field)
			case "changesMedicarePhysicianFeeScheduleNote":
				return ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeScheduleNote(ctx, field)
			case "affectsMedicareSecondaryPayerClaims":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaims(ctx, field)
			case "affectsMedicareSecondaryPayerClaimsHow":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsHow(ctx, field)
			case "affectsMedicareSecondaryPayerClaimsNote":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsNote(ctx, field)
			case "payModelDifferentiation":
				return ec.fieldContext_PlanPayments_payModelDifferentiation(ctx, field)
			case "creatingDependenciesBetweenServices":
				return ec.fieldContext_PlanPayments_creatingDependenciesBetweenServices(ctx, field)
			case "creatingDependenciesBetweenServicesNote":
				return ec.fieldContext_PlanPayments_creatingDependenciesBetweenServicesNote(ctx, field)
			case "needsClaimsDataCollection":
				return ec.fieldContext_PlanPayments_needsClaimsDataCollection(ctx, field)
			case "needsClaimsDataCollectionNote":
				return ec.fieldContext_PlanPayments_needsClaimsDataCollectionNote(ctx, field)
			case "providingThirdPartyFile":
				return ec.fieldContext_PlanPayments_providingThirdPartyFile(ctx, field)
			case "isContractorAwareTestDataRequirements":
				return ec.fieldContext_PlanPayments_isContractorAwareTestDataRequirements(ctx, field)
			case "beneficiaryCostSharingLevelAndHandling":
				return ec.fieldContext_PlanPayments_beneficiaryCostSharingLevelAndHandling(ctx, field)
			case "waiveBeneficiaryCostSharingForAnyServices":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingForAnyServices(ctx, field)
			case "waiveBeneficiaryCostSharingServiceSpecification":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingServiceSpecification(ctx, field)
			case "waiverOnlyAppliesPartOfPayment":
				return ec.fieldContext_PlanPayments_waiverOnlyAppliesPartOfPayment(ctx, field)
			case "waiveBeneficiaryCostSharingNote":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingNote(ctx, field)
			case "nonClaimsPayments":
				return ec.fieldContext_PlanPayments_nonClaimsPayments(ctx, field)
			case "nonClaimsPaymentOther":
				return ec.fieldContext_PlanPayments_nonClaimsPaymentOther(ctx, field)
			case "nonClaimsPaymentsNote":
				return ec.fieldContext_PlanPayments_nonClaimsPaymentsNote(ctx, field)
			case "paymentCalculationOwner":
				return ec.fieldContext_PlanPayments_paymentCalculationOwner(ctx, field)
			case "numberPaymentsPerPayCycle":
				return ec.fieldContext_PlanPayments_numberPaymentsPerPayCycle(ctx, field)
			case "numberPaymentsPerPayCycleNote":
				return ec.fieldContext_PlanPayments_numberPaymentsPerPayCycleNote(ctx, field)
			case "sharedSystemsInvolvedAdditionalClaimPayment":
				return ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPayment(ctx, field)
			case "sharedSystemsInvolvedAdditionalClaimPaymentNote":
				return ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPaymentNote(ctx, field)
			case "planningToUseInnovationPaymentContractor":
				return ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractor(ctx, field)
			case "planningToUseInnovationPaymentContractorNote":
				return ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractorNote(ctx, field)
			case "fundingStructure":
				return ec.fieldContext_PlanPayments_fundingStructure(ctx, field)
			case "expectedCalculationComplexityLevel":
				return ec.fieldContext_PlanPayments_expectedCalculationComplexityLevel(ctx, field)
			case "expectedCalculationComplexityLevelNote":
				return ec.fieldContext_PlanPayments_expectedCalculationComplexityLevelNote(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanisms":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanisms(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanismsHow":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsHow(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanismsNote":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsNote(ctx, field)
			case "anticipatedPaymentFrequency":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequency(ctx, field)
			case "anticipatedPaymentFrequencyOther":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyOther(ctx, field)
			case "anticipatedPaymentFrequencyNote":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyNote(ctx, field)
			case "willRecoverPayments":
				return ec.fieldContext_PlanPayments_willRecoverPayments(ctx, field)
			case "willRecoverPaymentsNote":
				return ec.fieldContext_PlanPayments_willRecoverPaymentsNote(ctx, field)
			case "anticipateReconcilingPaymentsRetrospectively":
				return ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectively(ctx, field)
			case "anticipateReconcilingPaymentsRetrospectivelyNote":
				return ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectivelyNote(ctx, field)
			case "paymentStartDate":
				return ec.fieldContext_PlanPayments_paymentStartDate(ctx, field)
			case "paymentStartDateNote":
				return ec.fieldContext_PlanPayments_paymentStartDateNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanPayments_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanPayments_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanPayments_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanPayments_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanPayments_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanPayments_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanPayments_readyForReviewBy(ctx, field)
			case "readyForReviewByUserAccount":
				return ec.fieldContext_PlanPayments_readyForReviewByUserAccount(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanPayments_readyForReviewDts(ctx, field)
			case "readyForClearanceBy":
				return ec.fieldContext_PlanPayments_readyForClearanceBy(ctx, field)
			case "readyForClearanceByUserAccount":
				return ec.fieldContext_PlanPayments_readyForClearanceByUserAccount(ctx, field)
			case "readyForClearanceDts":
				return ec.fieldContext_PlanPayments_readyForClearanceDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanPayments_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanPayments", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanPayments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_agreeToNDA(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_agreeToNDA(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AgreeToNda(rctx, fc.Args["agree"].(bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.NDAInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/graph/model.NDAInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NDAInfo)
	fc.Result = res
	return ec.marshalNNDAInfo2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNDAInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_agreeToNDA(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "agreed":
				return ec.fieldContext_NDAInfo_agreed(ctx, field)
			case "agreedDts":
				return ec.fieldContext_NDAInfo_agreedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NDAInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_agreeToNDA_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addPlanFavorite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addPlanFavorite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddPlanFavorite(rctx, fc.Args["modelPlanID"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanFavorite); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanFavorite`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanFavorite)
	fc.Result = res
	return ec.marshalNPlanFavorite2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanFavorite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addPlanFavorite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanFavorite_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanFavorite_modelPlanID(ctx, field)
			case "userID":
				return ec.fieldContext_PlanFavorite_userID(ctx, field)
			case "userAccount":
				return ec.fieldContext_PlanFavorite_userAccount(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanFavorite_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanFavorite_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanFavorite_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanFavorite_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanFavorite_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanFavorite_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanFavorite", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addPlanFavorite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePlanFavorite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePlanFavorite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePlanFavorite(rctx, fc.Args["modelPlanID"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanFavorite); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanFavorite`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanFavorite)
	fc.Result = res
	return ec.marshalNPlanFavorite2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanFavorite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePlanFavorite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanFavorite_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanFavorite_modelPlanID(ctx, field)
			case "userID":
				return ec.fieldContext_PlanFavorite_userID(ctx, field)
			case "userAccount":
				return ec.fieldContext_PlanFavorite_userAccount(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanFavorite_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanFavorite_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanFavorite_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanFavorite_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanFavorite_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanFavorite_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanFavorite", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePlanFavorite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPlanCrTdl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPlanCrTdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreatePlanCrTdl(rctx, fc.Args["input"].(model.PlanCrTdlCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanCrTdl); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanCrTdl`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCrTdl)
	fc.Result = res
	return ec.marshalNPlanCrTdl2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdl(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPlanCrTdl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCrTdl_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCrTdl_modelPlanID(ctx, field)
			case "idNumber":
				return ec.fieldContext_PlanCrTdl_idNumber(ctx, field)
			case "dateInitiated":
				return ec.fieldContext_PlanCrTdl_dateInitiated(ctx, field)
			case "title":
				return ec.fieldContext_PlanCrTdl_title(ctx, field)
			case "note":
				return ec.fieldContext_PlanCrTdl_note(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCrTdl_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanCrTdl_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCrTdl_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCrTdl_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanCrTdl_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCrTdl_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCrTdl", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPlanCrTdl_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanCrTdl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanCrTdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanCrTdl(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanCrTdl); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanCrTdl`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCrTdl)
	fc.Result = res
	return ec.marshalNPlanCrTdl2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdl(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanCrTdl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCrTdl_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCrTdl_modelPlanID(ctx, field)
			case "idNumber":
				return ec.fieldContext_PlanCrTdl_idNumber(ctx, field)
			case "dateInitiated":
				return ec.fieldContext_PlanCrTdl_dateInitiated(ctx, field)
			case "title":
				return ec.fieldContext_PlanCrTdl_title(ctx, field)
			case "note":
				return ec.fieldContext_PlanCrTdl_note(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCrTdl_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanCrTdl_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCrTdl_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCrTdl_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanCrTdl_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCrTdl_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCrTdl", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanCrTdl_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePlanCrTdl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePlanCrTdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePlanCrTdl(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanCrTdl); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanCrTdl`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCrTdl)
	fc.Result = res
	return ec.marshalNPlanCrTdl2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdl(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePlanCrTdl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCrTdl_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCrTdl_modelPlanID(ctx, field)
			case "idNumber":
				return ec.fieldContext_PlanCrTdl_idNumber(ctx, field)
			case "dateInitiated":
				return ec.fieldContext_PlanCrTdl_dateInitiated(ctx, field)
			case "title":
				return ec.fieldContext_PlanCrTdl_title(ctx, field)
			case "note":
				return ec.fieldContext_PlanCrTdl_note(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCrTdl_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanCrTdl_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCrTdl_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCrTdl_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanCrTdl_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCrTdl_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCrTdl", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePlanCrTdl_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addOrUpdateCustomOperationalNeed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addOrUpdateCustomOperationalNeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddOrUpdateCustomOperationalNeed(rctx, fc.Args["modelPlanID"].(uuid.UUID), fc.Args["customNeedType"].(string), fc.Args["needed"].(bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.OperationalNeed); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.OperationalNeed`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OperationalNeed)
	fc.Result = res
	return ec.marshalNOperationalNeed2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalNeed(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addOrUpdateCustomOperationalNeed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OperationalNeed_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_OperationalNeed_modelPlanID(ctx, field)
			case "needed":
				return ec.fieldContext_OperationalNeed_needed(ctx, field)
			case "solutions":
				return ec.fieldContext_OperationalNeed_solutions(ctx, field)
			case "key":
				return ec.fieldContext_OperationalNeed_key(ctx, field)
			case "name":
				return ec.fieldContext_OperationalNeed_name(ctx, field)
			case "nameOther":
				return ec.fieldContext_OperationalNeed_nameOther(ctx, field)
			case "section":
				return ec.fieldContext_OperationalNeed_section(ctx, field)
			case "createdBy":
				return ec.fieldContext_OperationalNeed_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_OperationalNeed_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_OperationalNeed_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_OperationalNeed_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_OperationalNeed_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_OperationalNeed_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationalNeed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addOrUpdateCustomOperationalNeed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCustomOperationalNeedByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCustomOperationalNeedByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateCustomOperationalNeedByID(rctx, fc.Args["id"].(uuid.UUID), fc.Args["customNeedType"].(*string), fc.Args["needed"].(bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.OperationalNeed); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.OperationalNeed`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OperationalNeed)
	fc.Result = res
	return ec.marshalNOperationalNeed2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalNeed(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCustomOperationalNeedByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OperationalNeed_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_OperationalNeed_modelPlanID(ctx, field)
			case "needed":
				return ec.fieldContext_OperationalNeed_needed(ctx, field)
			case "solutions":
				return ec.fieldContext_OperationalNeed_solutions(ctx, field)
			case "key":
				return ec.fieldContext_OperationalNeed_key(ctx, field)
			case "name":
				return ec.fieldContext_OperationalNeed_name(ctx, field)
			case "nameOther":
				return ec.fieldContext_OperationalNeed_nameOther(ctx, field)
			case "section":
				return ec.fieldContext_OperationalNeed_section(ctx, field)
			case "createdBy":
				return ec.fieldContext_OperationalNeed_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_OperationalNeed_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_OperationalNeed_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_OperationalNeed_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_OperationalNeed_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_OperationalNeed_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationalNeed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCustomOperationalNeedByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createOperationalSolution(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createOperationalSolution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateOperationalSolution(rctx, fc.Args["operationalNeedID"].(uuid.UUID), fc.Args["solutionType"].(*models.OperationalSolutionKey), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.OperationalSolution); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.OperationalSolution`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OperationalSolution)
	fc.Result = res
	return ec.marshalNOperationalSolution2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createOperationalSolution(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OperationalSolution_id(ctx, field)
			case "operationalNeedID":
				return ec.fieldContext_OperationalSolution_operationalNeedID(ctx, field)
			case "solutionType":
				return ec.fieldContext_OperationalSolution_solutionType(ctx, field)
			case "needed":
				return ec.fieldContext_OperationalSolution_needed(ctx, field)
			case "name":
				return ec.fieldContext_OperationalSolution_name(ctx, field)
			case "key":
				return ec.fieldContext_OperationalSolution_key(ctx, field)
			case "nameOther":
				return ec.fieldContext_OperationalSolution_nameOther(ctx, field)
			case "pocName":
				return ec.fieldContext_OperationalSolution_pocName(ctx, field)
			case "pocEmail":
				return ec.fieldContext_OperationalSolution_pocEmail(ctx, field)
			case "mustStartDts":
				return ec.fieldContext_OperationalSolution_mustStartDts(ctx, field)
			case "mustFinishDts":
				return ec.fieldContext_OperationalSolution_mustFinishDts(ctx, field)
			case "isOther":
				return ec.fieldContext_OperationalSolution_isOther(ctx, field)
			case "isCommonSolution":
				return ec.fieldContext_OperationalSolution_isCommonSolution(ctx, field)
			case "otherHeader":
				return ec.fieldContext_OperationalSolution_otherHeader(ctx, field)
			case "status":
				return ec.fieldContext_OperationalSolution_status(ctx, field)
			case "documents":
				return ec.fieldContext_OperationalSolution_documents(ctx, field)
			case "operationalSolutionSubtasks":
				return ec.fieldContext_OperationalSolution_operationalSolutionSubtasks(ctx, field)
			case "createdBy":
				return ec.fieldContext_OperationalSolution_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_OperationalSolution_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_OperationalSolution_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_OperationalSolution_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_OperationalSolution_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_OperationalSolution_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationalSolution", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createOperationalSolution_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateOperationalSolution(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateOperationalSolution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateOperationalSolution(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.OperationalSolution); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.OperationalSolution`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OperationalSolution)
	fc.Result = res
	return ec.marshalNOperationalSolution2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateOperationalSolution(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OperationalSolution_id(ctx, field)
			case "operationalNeedID":
				return ec.fieldContext_OperationalSolution_operationalNeedID(ctx, field)
			case "solutionType":
				return ec.fieldContext_OperationalSolution_solutionType(ctx, field)
			case "needed":
				return ec.fieldContext_OperationalSolution_needed(ctx, field)
			case "name":
				return ec.fieldContext_OperationalSolution_name(ctx, field)
			case "key":
				return ec.fieldContext_OperationalSolution_key(ctx, field)
			case "nameOther":
				return ec.fieldContext_OperationalSolution_nameOther(ctx, field)
			case "pocName":
				return ec.fieldContext_OperationalSolution_pocName(ctx, field)
			case "pocEmail":
				return ec.fieldContext_OperationalSolution_pocEmail(ctx, field)
			case "mustStartDts":
				return ec.fieldContext_OperationalSolution_mustStartDts(ctx, field)
			case "mustFinishDts":
				return ec.fieldContext_OperationalSolution_mustFinishDts(ctx, field)
			case "isOther":
				return ec.fieldContext_OperationalSolution_isOther(ctx, field)
			case "isCommonSolution":
				return ec.fieldContext_OperationalSolution_isCommonSolution(ctx, field)
			case "otherHeader":
				return ec.fieldContext_OperationalSolution_otherHeader(ctx, field)
			case "status":
				return ec.fieldContext_OperationalSolution_status(ctx, field)
			case "documents":
				return ec.fieldContext_OperationalSolution_documents(ctx, field)
			case "operationalSolutionSubtasks":
				return ec.fieldContext_OperationalSolution_operationalSolutionSubtasks(ctx, field)
			case "createdBy":
				return ec.fieldContext_OperationalSolution_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_OperationalSolution_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_OperationalSolution_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_OperationalSolution_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_OperationalSolution_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_OperationalSolution_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationalSolution", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateOperationalSolution_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPlanDocumentSolutionLinks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPlanDocumentSolutionLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreatePlanDocumentSolutionLinks(rctx, fc.Args["solutionID"].(uuid.UUID), fc.Args["documentIDs"].([]uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.PlanDocumentSolutionLink); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.PlanDocumentSolutionLink`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PlanDocumentSolutionLink)
	fc.Result = res
	return ec.marshalOPlanDocumentSolutionLink2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocumentSolutionLinkᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPlanDocumentSolutionLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDocumentSolutionLink_id(ctx, field)
			case "solutionID":
				return ec.fieldContext_PlanDocumentSolutionLink_solutionID(ctx, field)
			case "documentID":
				return ec.fieldContext_PlanDocumentSolutionLink_documentID(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDocumentSolutionLink_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanDocumentSolutionLink_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDocumentSolutionLink_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDocumentSolutionLink_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanDocumentSolutionLink_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDocumentSolutionLink_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDocumentSolutionLink", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPlanDocumentSolutionLinks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removePlanDocumentSolutionLinks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removePlanDocumentSolutionLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RemovePlanDocumentSolutionLinks(rctx, fc.Args["solutionID"].(uuid.UUID), fc.Args["documentIDs"].([]uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removePlanDocumentSolutionLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removePlanDocumentSolutionLinks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createOperationalSolutionSubtasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createOperationalSolutionSubtasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateOperationalSolutionSubtasks(rctx, fc.Args["solutionID"].(uuid.UUID), fc.Args["inputs"].([]*model.CreateOperationalSolutionSubtaskInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.OperationalSolutionSubtask); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.OperationalSolutionSubtask`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.OperationalSolutionSubtask)
	fc.Result = res
	return ec.marshalOOperationalSolutionSubtask2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionSubtaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createOperationalSolutionSubtasks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OperationalSolutionSubtask_id(ctx, field)
			case "solutionID":
				return ec.fieldContext_OperationalSolutionSubtask_solutionID(ctx, field)
			case "name":
				return ec.fieldContext_OperationalSolutionSubtask_name(ctx, field)
			case "status":
				return ec.fieldContext_OperationalSolutionSubtask_status(ctx, field)
			case "createdBy":
				return ec.fieldContext_OperationalSolutionSubtask_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_OperationalSolutionSubtask_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_OperationalSolutionSubtask_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_OperationalSolutionSubtask_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_OperationalSolutionSubtask_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_OperationalSolutionSubtask_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationalSolutionSubtask", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createOperationalSolutionSubtasks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateOperationalSolutionSubtasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateOperationalSolutionSubtasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateOperationalSolutionSubtasks(rctx, fc.Args["inputs"].([]*model.UpdateOperationalSolutionSubtaskInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.OperationalSolutionSubtask); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.OperationalSolutionSubtask`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.OperationalSolutionSubtask)
	fc.Result = res
	return ec.marshalOOperationalSolutionSubtask2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionSubtaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateOperationalSolutionSubtasks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OperationalSolutionSubtask_id(ctx, field)
			case "solutionID":
				return ec.fieldContext_OperationalSolutionSubtask_solutionID(ctx, field)
			case "name":
				return ec.fieldContext_OperationalSolutionSubtask_name(ctx, field)
			case "status":
				return ec.fieldContext_OperationalSolutionSubtask_status(ctx, field)
			case "createdBy":
				return ec.fieldContext_OperationalSolutionSubtask_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_OperationalSolutionSubtask_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_OperationalSolutionSubtask_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_OperationalSolutionSubtask_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_OperationalSolutionSubtask_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_OperationalSolutionSubtask_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationalSolutionSubtask", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateOperationalSolutionSubtasks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteOperationalSolutionSubtask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteOperationalSolutionSubtask(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteOperationalSolutionSubtask(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(int); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteOperationalSolutionSubtask(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteOperationalSolutionSubtask_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateExistingModelLinks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateExistingModelLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateExistingModelLinks(rctx, fc.Args["modelPlanID"].(uuid.UUID), fc.Args["existingModelIDs"].([]int), fc.Args["currentModelPlanIDs"].([]uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ExistingModelLink); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.ExistingModelLink`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ExistingModelLink)
	fc.Result = res
	return ec.marshalNExistingModelLink2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModelLinkᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateExistingModelLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExistingModelLink_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_ExistingModelLink_modelPlanID(ctx, field)
			case "existingModelID":
				return ec.fieldContext_ExistingModelLink_existingModelID(ctx, field)
			case "existingModel":
				return ec.fieldContext_ExistingModelLink_existingModel(ctx, field)
			case "currentModelPlanID":
				return ec.fieldContext_ExistingModelLink_currentModelPlanID(ctx, field)
			case "currentModelPlan":
				return ec.fieldContext_ExistingModelLink_currentModelPlan(ctx, field)
			case "createdBy":
				return ec.fieldContext_ExistingModelLink_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_ExistingModelLink_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_ExistingModelLink_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ExistingModelLink_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_ExistingModelLink_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ExistingModelLink_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExistingModelLink", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateExistingModelLinks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _NDAInfo_agreed(ctx context.Context, field graphql.CollectedField, obj *model.NDAInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NDAInfo_agreed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agreed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NDAInfo_agreed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NDAInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NDAInfo_agreedDts(ctx context.Context, field graphql.CollectedField, obj *model.NDAInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NDAInfo_agreedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgreedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NDAInfo_agreedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NDAInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalNeed_id(ctx context.Context, field graphql.CollectedField, obj *models.OperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalNeed_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalNeed_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalNeed_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.OperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalNeed_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalNeed_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalNeed_needed(ctx context.Context, field graphql.CollectedField, obj *models.OperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalNeed_needed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Needed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalNeed_needed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalNeed_solutions(ctx context.Context, field graphql.CollectedField, obj *models.OperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalNeed_solutions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OperationalNeed().Solutions(rctx, obj, fc.Args["includeNotNeeded"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OperationalSolution)
	fc.Result = res
	return ec.marshalNOperationalSolution2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalNeed_solutions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalNeed",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OperationalSolution_id(ctx, field)
			case "operationalNeedID":
				return ec.fieldContext_OperationalSolution_operationalNeedID(ctx, field)
			case "solutionType":
				return ec.fieldContext_OperationalSolution_solutionType(ctx, field)
			case "needed":
				return ec.fieldContext_OperationalSolution_needed(ctx, field)
			case "name":
				return ec.fieldContext_OperationalSolution_name(ctx, field)
			case "key":
				return ec.fieldContext_OperationalSolution_key(ctx, field)
			case "nameOther":
				return ec.fieldContext_OperationalSolution_nameOther(ctx, field)
			case "pocName":
				return ec.fieldContext_OperationalSolution_pocName(ctx, field)
			case "pocEmail":
				return ec.fieldContext_OperationalSolution_pocEmail(ctx, field)
			case "mustStartDts":
				return ec.fieldContext_OperationalSolution_mustStartDts(ctx, field)
			case "mustFinishDts":
				return ec.fieldContext_OperationalSolution_mustFinishDts(ctx, field)
			case "isOther":
				return ec.fieldContext_OperationalSolution_isOther(ctx, field)
			case "isCommonSolution":
				return ec.fieldContext_OperationalSolution_isCommonSolution(ctx, field)
			case "otherHeader":
				return ec.fieldContext_OperationalSolution_otherHeader(ctx, field)
			case "status":
				return ec.fieldContext_OperationalSolution_status(ctx, field)
			case "documents":
				return ec.fieldContext_OperationalSolution_documents(ctx, field)
			case "operationalSolutionSubtasks":
				return ec.fieldContext_OperationalSolution_operationalSolutionSubtasks(ctx, field)
			case "createdBy":
				return ec.fieldContext_OperationalSolution_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_OperationalSolution_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_OperationalSolution_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_OperationalSolution_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_OperationalSolution_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_OperationalSolution_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationalSolution", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OperationalNeed_solutions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _OperationalNeed_key(ctx context.Context, field graphql.CollectedField, obj *models.OperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalNeed_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OperationalNeedKey)
	fc.Result = res
	return ec.marshalOOperationalNeedKey2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalNeedKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalNeed_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OperationalNeedKey does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalNeed_name(ctx context.Context, field graphql.CollectedField, obj *models.OperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalNeed_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalNeed_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalNeed_nameOther(ctx context.Context, field graphql.CollectedField, obj *models.OperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalNeed_nameOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalNeed_nameOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalNeed_section(ctx context.Context, field graphql.CollectedField, obj *models.OperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalNeed_section(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Section, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TaskListSection)
	fc.Result = res
	return ec.marshalOTaskListSection2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskListSection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalNeed_section(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskListSection does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalNeed_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.OperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalNeed_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalNeed_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalNeed_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.OperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalNeed_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalNeed_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalNeed",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalNeed_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.OperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalNeed_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalNeed_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalNeed_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.OperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalNeed_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalNeed_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalNeed_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.OperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalNeed_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalNeed_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalNeed",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalNeed_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.OperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalNeed_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalNeed_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_id(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_operationalNeedID(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_operationalNeedID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationalNeedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_operationalNeedID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_solutionType(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_solutionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SolutionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_solutionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_needed(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_needed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Needed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_needed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_name(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_key(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OperationalSolutionKey)
	fc.Result = res
	return ec.marshalOOperationalSolutionKey2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OperationalSolutionKey does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_nameOther(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_nameOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NameOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_nameOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_pocName(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_pocName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PocName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_pocName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_pocEmail(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_pocEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PocEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_pocEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_mustStartDts(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_mustStartDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MustStartDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_mustStartDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_mustFinishDts(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_mustFinishDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MustFinishDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_mustFinishDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_isOther(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_isOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalNBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_isOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_isCommonSolution(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_isCommonSolution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCommonSolution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalNBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_isCommonSolution(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_otherHeader(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_otherHeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherHeader, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_otherHeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_status(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.OpSolutionStatus)
	fc.Result = res
	return ec.marshalNOpSolutionStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOpSolutionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OpSolutionStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_documents(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OperationalSolution().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PlanDocument)
	fc.Result = res
	return ec.marshalNPlanDocument2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_documents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDocument_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDocument_modelPlanID(ctx, field)
			case "fileType":
				return ec.fieldContext_PlanDocument_fileType(ctx, field)
			case "bucket":
				return ec.fieldContext_PlanDocument_bucket(ctx, field)
			case "fileKey":
				return ec.fieldContext_PlanDocument_fileKey(ctx, field)
			case "virusScanned":
				return ec.fieldContext_PlanDocument_virusScanned(ctx, field)
			case "virusClean":
				return ec.fieldContext_PlanDocument_virusClean(ctx, field)
			case "restricted":
				return ec.fieldContext_PlanDocument_restricted(ctx, field)
			case "fileName":
				return ec.fieldContext_PlanDocument_fileName(ctx, field)
			case "fileSize":
				return ec.fieldContext_PlanDocument_fileSize(ctx, field)
			case "documentType":
				return ec.fieldContext_PlanDocument_documentType(ctx, field)
			case "otherType":
				return ec.fieldContext_PlanDocument_otherType(ctx, field)
			case "optionalNotes":
				return ec.fieldContext_PlanDocument_optionalNotes(ctx, field)
			case "downloadUrl":
				return ec.fieldContext_PlanDocument_downloadUrl(ctx, field)
			case "deletedAt":
				return ec.fieldContext_PlanDocument_deletedAt(ctx, field)
			case "numLinkedSolutions":
				return ec.fieldContext_PlanDocument_numLinkedSolutions(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDocument_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanDocument_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDocument_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDocument_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanDocument_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDocument_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_operationalSolutionSubtasks(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_operationalSolutionSubtasks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OperationalSolution().OperationalSolutionSubtasks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OperationalSolutionSubtask)
	fc.Result = res
	return ec.marshalNOperationalSolutionSubtask2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionSubtaskᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_operationalSolutionSubtasks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OperationalSolutionSubtask_id(ctx, field)
			case "solutionID":
				return ec.fieldContext_OperationalSolutionSubtask_solutionID(ctx, field)
			case "name":
				return ec.fieldContext_OperationalSolutionSubtask_name(ctx, field)
			case "status":
				return ec.fieldContext_OperationalSolutionSubtask_status(ctx, field)
			case "createdBy":
				return ec.fieldContext_OperationalSolutionSubtask_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_OperationalSolutionSubtask_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_OperationalSolutionSubtask_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_OperationalSolutionSubtask_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_OperationalSolutionSubtask_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_OperationalSolutionSubtask_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationalSolutionSubtask", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolution_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolution_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolution_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolutionSubtask_id(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolutionSubtask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolutionSubtask_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolutionSubtask_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolutionSubtask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolutionSubtask_solutionID(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolutionSubtask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolutionSubtask_solutionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SolutionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolutionSubtask_solutionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolutionSubtask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolutionSubtask_name(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolutionSubtask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolutionSubtask_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolutionSubtask_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolutionSubtask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolutionSubtask_status(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolutionSubtask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolutionSubtask_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.OperationalSolutionSubtaskStatus)
	fc.Result = res
	return ec.marshalNOperationalSolutionSubtaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionSubtaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolutionSubtask_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolutionSubtask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OperationalSolutionSubtaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolutionSubtask_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolutionSubtask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolutionSubtask_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolutionSubtask_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolutionSubtask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolutionSubtask_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolutionSubtask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolutionSubtask_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolutionSubtask_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolutionSubtask",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolutionSubtask_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolutionSubtask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolutionSubtask_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolutionSubtask_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolutionSubtask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolutionSubtask_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolutionSubtask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolutionSubtask_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolutionSubtask_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolutionSubtask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolutionSubtask_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolutionSubtask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolutionSubtask_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolutionSubtask_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolutionSubtask",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OperationalSolutionSubtask_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.OperationalSolutionSubtask) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OperationalSolutionSubtask_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OperationalSolutionSubtask_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OperationalSolutionSubtask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_modelCategory(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_modelCategory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ModelCategory)
	fc.Result = res
	return ec.marshalOModelCategory2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_modelCategory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ModelCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_cmsCenters(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_cmsCenters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanBasics().CmsCenters(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.CMSCenter)
	fc.Result = res
	return ec.marshalNCMSCenter2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_cmsCenters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CMSCenter does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_cmsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_cmsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CMSOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_cmsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_cmmiGroups(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_cmmiGroups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanBasics().CmmiGroups(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.CMMIGroup)
	fc.Result = res
	return ec.marshalNCMMIGroup2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_cmmiGroups(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CMMIGroup does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_modelType(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_modelType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ModelType)
	fc.Result = res
	return ec.marshalOModelType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_modelType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ModelType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_problem(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_problem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Problem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_problem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_goal(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_goal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Goal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_goal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_testInterventions(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_testInterventions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestInterventions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_testInterventions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_note(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_note(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_completeICIP(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_completeICIP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompleteICIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_completeICIP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_clearanceStarts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_clearanceStarts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClearanceStarts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_clearanceStarts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_clearanceEnds(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_clearanceEnds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClearanceEnds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_clearanceEnds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_announced(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_announced(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Announced, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_announced(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_applicationsStart(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_applicationsStart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationsStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_applicationsStart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_applicationsEnd(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_applicationsEnd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationsEnd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_applicationsEnd(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_performancePeriodStarts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_performancePeriodStarts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerformancePeriodStarts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_performancePeriodStarts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_performancePeriodEnds(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_performancePeriodEnds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerformancePeriodEnds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_performancePeriodEnds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_wrapUpEnds(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_wrapUpEnds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WrapUpEnds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_wrapUpEnds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_highLevelNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_highLevelNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HighLevelNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_highLevelNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_phasedIn(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_phasedIn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhasedIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_phasedIn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_phasedInNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_phasedInNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhasedInNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_phasedInNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_readyForReviewBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_readyForReviewBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_readyForReviewBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_readyForReviewByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_readyForReviewByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_readyForReviewByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_readyForReviewDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_readyForReviewDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_readyForReviewDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_readyForClearanceBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_readyForClearanceBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_readyForClearanceBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_readyForClearanceByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_readyForClearanceByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_readyForClearanceByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_readyForClearanceDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_readyForClearanceDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_readyForClearanceDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TaskStatus)
	fc.Result = res
	return ec.marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiaries(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiaries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanBeneficiaries().Beneficiaries(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.BeneficiariesType)
	fc.Result = res
	return ec.marshalNBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiaries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BeneficiariesType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiariesOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiariesOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiariesOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiariesOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiariesNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiariesNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiariesNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiariesNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_treatDualElligibleDifferent(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatDualElligibleDifferent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TriStateAnswer)
	fc.Result = res
	return ec.marshalOTriStateAnswer2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTriStateAnswer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_treatDualElligibleDifferent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TriStateAnswer does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_treatDualElligibleDifferentHow(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferentHow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatDualElligibleDifferentHow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_treatDualElligibleDifferentHow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_treatDualElligibleDifferentNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferentNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatDualElligibleDifferentNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_treatDualElligibleDifferentNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_excludeCertainCharacteristics(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExcludeCertainCharacteristics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TriStateAnswer)
	fc.Result = res
	return ec.marshalOTriStateAnswer2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTriStateAnswer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_excludeCertainCharacteristics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TriStateAnswer does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_excludeCertainCharacteristicsCriteria(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsCriteria(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExcludeCertainCharacteristicsCriteria, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsCriteria(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_excludeCertainCharacteristicsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExcludeCertainCharacteristicsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_numberPeopleImpacted(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_numberPeopleImpacted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberPeopleImpacted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_numberPeopleImpacted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_estimateConfidence(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_estimateConfidence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimateConfidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ConfidenceType)
	fc.Result = res
	return ec.marshalOConfidenceType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐConfidenceType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_estimateConfidence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfidenceType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_confidenceNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_confidenceNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfidenceNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_confidenceNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiarySelectionMethod(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiarySelectionMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanBeneficiaries().BeneficiarySelectionMethod(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.SelectionMethodType)
	fc.Result = res
	return ec.marshalNSelectionMethodType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiarySelectionMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SelectionMethodType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiarySelectionOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiarySelectionOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiarySelectionOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiarySelectionOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiarySelectionNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiarySelectionNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiarySelectionNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiarySelectionNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiarySelectionFrequency(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiarySelectionFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.FrequencyType)
	fc.Result = res
	return ec.marshalOFrequencyType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFrequencyType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiarySelectionFrequency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FrequencyType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiarySelectionFrequencyOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiarySelectionFrequencyOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiarySelectionFrequencyNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiarySelectionFrequencyNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiaryOverlap(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiaryOverlap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryOverlap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OverlapType)
	fc.Result = res
	return ec.marshalOOverlapType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOverlapType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiaryOverlap(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OverlapType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiaryOverlapNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiaryOverlapNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryOverlapNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiaryOverlapNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_precedenceRules(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_precedenceRules(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrecedenceRules, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_precedenceRules(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_readyForReviewBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_readyForReviewBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_readyForReviewBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_readyForReviewByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_readyForReviewByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_readyForReviewByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_readyForReviewDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_readyForReviewDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_readyForReviewDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_readyForClearanceBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_readyForClearanceBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_readyForClearanceBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_readyForClearanceByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_readyForClearanceByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_readyForClearanceByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_readyForClearanceDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_readyForClearanceDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_readyForClearanceDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TaskStatus)
	fc.Result = res
	return ec.marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_userID(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_userAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_userAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_userAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_teamRole(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_teamRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TeamRole)
	fc.Result = res
	return ec.marshalNTeamRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTeamRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_teamRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TeamRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_idNumber(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_idNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_idNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_dateInitiated(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_dateInitiated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateInitiated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_dateInitiated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_title(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_note(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_note(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_content(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.DiscussionStatus)
	fc.Result = res
	return ec.marshalNDiscussionStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscussionStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_replies(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_replies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanDiscussion().Replies(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.DiscussionReply)
	fc.Result = res
	return ec.marshalNDiscussionReply2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReplyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_replies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DiscussionReply_id(ctx, field)
			case "discussionID":
				return ec.fieldContext_DiscussionReply_discussionID(ctx, field)
			case "content":
				return ec.fieldContext_DiscussionReply_content(ctx, field)
			case "resolution":
				return ec.fieldContext_DiscussionReply_resolution(ctx, field)
			case "isAssessment":
				return ec.fieldContext_DiscussionReply_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_DiscussionReply_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_DiscussionReply_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_DiscussionReply_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_DiscussionReply_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_DiscussionReply_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_DiscussionReply_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscussionReply", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_isAssessment(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_isAssessment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAssessment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_isAssessment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_fileType(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_fileType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_fileType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_bucket(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_bucket(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bucket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_bucket(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_fileKey(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_fileKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_fileKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_virusScanned(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_virusScanned(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VirusScanned, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_virusScanned(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_virusClean(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_virusClean(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VirusClean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_virusClean(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_restricted(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_restricted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Restricted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_restricted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_fileName(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_fileName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_fileSize(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_fileSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_fileSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_documentType(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_documentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.DocumentType)
	fc.Result = res
	return ec.marshalNDocumentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDocumentType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_documentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DocumentType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_otherType(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_otherType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanDocument().OtherType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_otherType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_optionalNotes(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_optionalNotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanDocument().OptionalNotes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_optionalNotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_downloadUrl(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_downloadUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanDocument().DownloadURL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_downloadUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_numLinkedSolutions(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_numLinkedSolutions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanDocument().NumLinkedSolutions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_numLinkedSolutions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocumentSolutionLink_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocumentSolutionLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocumentSolutionLink_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocumentSolutionLink_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocumentSolutionLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocumentSolutionLink_solutionID(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocumentSolutionLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocumentSolutionLink_solutionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SolutionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocumentSolutionLink_solutionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocumentSolutionLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocumentSolutionLink_documentID(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocumentSolutionLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocumentSolutionLink_documentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocumentSolutionLink_documentID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocumentSolutionLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocumentSolutionLink_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocumentSolutionLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocumentSolutionLink_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocumentSolutionLink_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocumentSolutionLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocumentSolutionLink_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocumentSolutionLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocumentSolutionLink_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocumentSolutionLink_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocumentSolutionLink",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocumentSolutionLink_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocumentSolutionLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocumentSolutionLink_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocumentSolutionLink_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocumentSolutionLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocumentSolutionLink_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocumentSolutionLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocumentSolutionLink_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocumentSolutionLink_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocumentSolutionLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocumentSolutionLink_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocumentSolutionLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocumentSolutionLink_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocumentSolutionLink_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocumentSolutionLink",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocumentSolutionLink_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocumentSolutionLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocumentSolutionLink_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocumentSolutionLink_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocumentSolutionLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_userID(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_userAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_userAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_userAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_isNewModel(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_isNewModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNewModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_isNewModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_existingModel(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_existingModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExistingModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_existingModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_resemblesExistingModel(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResemblesExistingModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_resemblesExistingModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_resemblesExistingModelHow(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelHow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResemblesExistingModelHow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_resemblesExistingModelHow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_resemblesExistingModelNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResemblesExistingModelNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_resemblesExistingModelNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_hasComponentsOrTracks(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasComponentsOrTracks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_hasComponentsOrTracksDiffer(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksDiffer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasComponentsOrTracksDiffer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksDiffer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_hasComponentsOrTracksNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasComponentsOrTracksNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_alternativePaymentModelTypes(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModelTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().AlternativePaymentModelTypes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.AlternativePaymentModelType)
	fc.Result = res
	return ec.marshalNAlternativePaymentModelType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_alternativePaymentModelTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AlternativePaymentModelType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_alternativePaymentModelNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModelNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlternativePaymentModelNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_alternativePaymentModelNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_keyCharacteristics(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().KeyCharacteristics(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.KeyCharacteristic)
	fc.Result = res
	return ec.marshalNKeyCharacteristic2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristicᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_keyCharacteristics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type KeyCharacteristic does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_keyCharacteristicsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristicsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeyCharacteristicsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_keyCharacteristicsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_keyCharacteristicsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristicsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeyCharacteristicsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_keyCharacteristicsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_collectPlanBids(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_collectPlanBids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollectPlanBids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_collectPlanBids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_collectPlanBidsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_collectPlanBidsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollectPlanBidsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_collectPlanBidsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_managePartCDEnrollment(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_managePartCDEnrollment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagePartCDEnrollment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_managePartCDEnrollment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_managePartCDEnrollmentNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_managePartCDEnrollmentNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagePartCDEnrollmentNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_managePartCDEnrollmentNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_planContractUpdated(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_planContractUpdated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanContractUpdated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_planContractUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_planContractUpdatedNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_planContractUpdatedNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanContractUpdatedNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_planContractUpdatedNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_careCoordinationInvolved(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CareCoordinationInvolved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_careCoordinationInvolved(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_careCoordinationInvolvedDescription(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CareCoordinationInvolvedDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_careCoordinationInvolvedNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CareCoordinationInvolvedNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_additionalServicesInvolved(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalServicesInvolved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_additionalServicesInvolved(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_additionalServicesInvolvedDescription(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalServicesInvolvedDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_additionalServicesInvolvedNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalServicesInvolvedNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_communityPartnersInvolved(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunityPartnersInvolved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_communityPartnersInvolved(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_communityPartnersInvolvedDescription(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunityPartnersInvolvedDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_communityPartnersInvolvedNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunityPartnersInvolvedNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_geographiesTargeted(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_geographiesTargeted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeographiesTargeted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_geographiesTargeted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_geographiesTargetedTypes(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().GeographiesTargetedTypes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.GeographyType)
	fc.Result = res
	return ec.marshalNGeographyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GeographyType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_geographiesTargetedTypesOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypesOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeographiesTargetedTypesOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypesOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_geographiesTargetedAppliedTo(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedTo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().GeographiesTargetedAppliedTo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.GeographyApplication)
	fc.Result = res
	return ec.marshalNGeographyApplication2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplicationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedTo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GeographyApplication does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_geographiesTargetedAppliedToOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedToOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeographiesTargetedAppliedToOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedToOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_geographiesTargetedNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeographiesTargetedNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_geographiesTargetedNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_participationOptions(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_participationOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipationOptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_participationOptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_participationOptionsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_participationOptionsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipationOptionsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_participationOptionsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_agreementTypes(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_agreementTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().AgreementTypes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.AgreementType)
	fc.Result = res
	return ec.marshalNAgreementType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_agreementTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AgreementType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_agreementTypesOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_agreementTypesOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgreementTypesOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_agreementTypesOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_multiplePatricipationAgreementsNeeded(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeeded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MultiplePatricipationAgreementsNeeded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeeded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_multiplePatricipationAgreementsNeededNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeededNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MultiplePatricipationAgreementsNeededNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeededNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_rulemakingRequired(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RulemakingRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_rulemakingRequired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_rulemakingRequiredDescription(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequiredDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RulemakingRequiredDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_rulemakingRequiredDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_rulemakingRequiredNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequiredNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RulemakingRequiredNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_rulemakingRequiredNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_authorityAllowances(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_authorityAllowances(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().AuthorityAllowances(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.AuthorityAllowance)
	fc.Result = res
	return ec.marshalNAuthorityAllowance2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowanceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_authorityAllowances(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AuthorityAllowance does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_authorityAllowancesOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_authorityAllowancesOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorityAllowancesOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_authorityAllowancesOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_authorityAllowancesNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_authorityAllowancesNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorityAllowancesNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_authorityAllowancesNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_waiversRequired(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_waiversRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WaiversRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_waiversRequired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_waiversRequiredTypes(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_waiversRequiredTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().WaiversRequiredTypes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.WaiverType)
	fc.Result = res
	return ec.marshalNWaiverType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_waiversRequiredTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type WaiverType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_waiversRequiredNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_waiversRequiredNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WaiversRequiredNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_waiversRequiredNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_readyForReviewBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_readyForReviewBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_readyForReviewBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_readyForReviewByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_readyForReviewByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_readyForReviewByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_readyForReviewDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_readyForReviewDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_readyForReviewDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_readyForClearanceBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_readyForClearanceBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_readyForClearanceBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_readyForClearanceByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_readyForClearanceByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_readyForClearanceByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_readyForClearanceDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_readyForClearanceDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_readyForClearanceDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TaskStatus)
	fc.Result = res
	return ec.marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_agencyOrStateHelp(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().AgencyOrStateHelp(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.AgencyOrStateHelpType)
	fc.Result = res
	return ec.marshalNAgencyOrStateHelpType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AgencyOrStateHelpType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_agencyOrStateHelpOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgencyOrStateHelpOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_agencyOrStateHelpNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgencyOrStateHelpNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_stakeholders(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_stakeholders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().Stakeholders(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.StakeholdersType)
	fc.Result = res
	return ec.marshalNStakeholdersType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_stakeholders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type StakeholdersType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_stakeholdersOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_stakeholdersOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StakeholdersOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_stakeholdersOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_stakeholdersNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_stakeholdersNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StakeholdersNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_stakeholdersNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_helpdeskUse(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_helpdeskUse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HelpdeskUse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_helpdeskUse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_helpdeskUseNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_helpdeskUseNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HelpdeskUseNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_helpdeskUseNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_contractorSupport(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_contractorSupport(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().ContractorSupport(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ContractorSupportType)
	fc.Result = res
	return ec.marshalNContractorSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_contractorSupport(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContractorSupportType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_contractorSupportOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorSupportOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_contractorSupportOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_contractorSupportHow(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportHow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorSupportHow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_contractorSupportHow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_contractorSupportNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorSupportNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_contractorSupportNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_iddocSupport(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_iddocSupport(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IddocSupport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_iddocSupport(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_iddocSupportNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_iddocSupportNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IddocSupportNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_iddocSupportNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_technicalContactsIdentified(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentified(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TechnicalContactsIdentified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentified(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_technicalContactsIdentifiedDetail(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedDetail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TechnicalContactsIdentifiedDetail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedDetail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_technicalContactsIdentifiedNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TechnicalContactsIdentifiedNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_captureParticipantInfo(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_captureParticipantInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaptureParticipantInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_captureParticipantInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_captureParticipantInfoNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_captureParticipantInfoNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaptureParticipantInfoNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_captureParticipantInfoNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_icdOwner(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_icdOwner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcdOwner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_icdOwner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_draftIcdDueDate(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_draftIcdDueDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DraftIcdDueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_draftIcdDueDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_icdNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_icdNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcdNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_icdNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_uatNeeds(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_uatNeeds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UatNeeds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_uatNeeds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_stcNeeds(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_stcNeeds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StcNeeds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_stcNeeds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_testingTimelines(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_testingTimelines(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestingTimelines, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_testingTimelines(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_testingNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_testingNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestingNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_testingNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataMonitoringFileTypes(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().DataMonitoringFileTypes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.MonitoringFileType)
	fc.Result = res
	return ec.marshalNMonitoringFileType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MonitoringFileType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataMonitoringFileOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataMonitoringFileOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataResponseType(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataResponseType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataResponseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataResponseType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataResponseFileFrequency(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataResponseFileFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataResponseFileFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataResponseFileFrequency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataFullTimeOrIncremental(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataFullTimeOrIncremental(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataFullTimeOrIncremental, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DataFullTimeOrIncrementalType)
	fc.Result = res
	return ec.marshalODataFullTimeOrIncrementalType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataFullTimeOrIncrementalType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataFullTimeOrIncremental(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataFullTimeOrIncrementalType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_eftSetUp(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_eftSetUp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EftSetUp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_eftSetUp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_unsolicitedAdjustmentsIncluded(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_unsolicitedAdjustmentsIncluded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnsolicitedAdjustmentsIncluded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_unsolicitedAdjustmentsIncluded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataFlowDiagramsNeeded(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataFlowDiagramsNeeded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataFlowDiagramsNeeded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataFlowDiagramsNeeded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_produceBenefitEnhancementFiles(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_produceBenefitEnhancementFiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProduceBenefitEnhancementFiles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_produceBenefitEnhancementFiles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_fileNamingConventions(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_fileNamingConventions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileNamingConventions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_fileNamingConventions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataMonitoringNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataMonitoringNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataMonitoringNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_benchmarkForPerformance(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BenchmarkForPerformance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.BenchmarkForPerformanceType)
	fc.Result = res
	return ec.marshalOBenchmarkForPerformanceType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐBenchmarkForPerformanceType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BenchmarkForPerformanceType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_benchmarkForPerformanceNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformanceNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BenchmarkForPerformanceNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformanceNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_computePerformanceScores(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_computePerformanceScores(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComputePerformanceScores, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_computePerformanceScores(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_computePerformanceScoresNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_computePerformanceScoresNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComputePerformanceScoresNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_computePerformanceScoresNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_riskAdjustPerformance(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustPerformance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskAdjustPerformance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_riskAdjustPerformance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_riskAdjustFeedback(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustFeedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskAdjustFeedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_riskAdjustFeedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_riskAdjustPayments(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskAdjustPayments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_riskAdjustPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_riskAdjustOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskAdjustOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_riskAdjustOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_riskAdjustNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskAdjustNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_riskAdjustNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appealPerformance(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appealPerformance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppealPerformance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appealPerformance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appealFeedback(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appealFeedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppealFeedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appealFeedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appealPayments(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appealPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppealPayments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appealPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appealOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appealOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppealOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appealOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appealNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appealNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppealNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appealNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_evaluationApproaches(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_evaluationApproaches(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().EvaluationApproaches(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.EvaluationApproachType)
	fc.Result = res
	return ec.marshalNEvaluationApproachType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_evaluationApproaches(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EvaluationApproachType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_evaluationApproachOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_evaluationApproachOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvaluationApproachOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_evaluationApproachOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_evalutaionApproachNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_evalutaionApproachNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvalutaionApproachNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_evalutaionApproachNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_ccmInvolvment(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().CcmInvolvment(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.CcmInvolvmentType)
	fc.Result = res
	return ec.marshalNCcmInvolvmentType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_ccmInvolvment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CcmInvolvmentType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_ccmInvolvmentOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcmInvolvmentOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_ccmInvolvmentNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcmInvolvmentNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataNeededForMonitoring(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoring(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().DataNeededForMonitoring(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.DataForMonitoringType)
	fc.Result = res
	return ec.marshalNDataForMonitoringType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoring(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataForMonitoringType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataNeededForMonitoringOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataNeededForMonitoringOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataNeededForMonitoringNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataNeededForMonitoringNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataToSendParticicipants(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().DataToSendParticicipants(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.DataToSendParticipantsType)
	fc.Result = res
	return ec.marshalNDataToSendParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataToSendParticipantsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataToSendParticicipantsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataToSendParticicipantsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataToSendParticicipantsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataToSendParticicipantsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_shareCclfData(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_shareCclfData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShareCclfData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_shareCclfData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_shareCclfDataNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_shareCclfDataNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShareCclfDataNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_shareCclfDataNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_sendFilesBetweenCcw(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcw(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendFilesBetweenCcw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcw(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_sendFilesBetweenCcwNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcwNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendFilesBetweenCcwNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcwNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appToSendFilesToKnown(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToKnown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppToSendFilesToKnown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appToSendFilesToKnown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appToSendFilesToWhich(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToWhich(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppToSendFilesToWhich, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appToSendFilesToWhich(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appToSendFilesToNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppToSendFilesToNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appToSendFilesToNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipants(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseCcwForFileDistribiutionToParticipants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipantsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipantsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseCcwForFileDistribiutionToParticipantsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipantsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_developNewQualityMeasures(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasures(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DevelopNewQualityMeasures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasures(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_developNewQualityMeasuresNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasuresNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DevelopNewQualityMeasuresNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasuresNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_qualityPerformanceImpactsPayment(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPayment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityPerformanceImpactsPayment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPayment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_qualityPerformanceImpactsPaymentNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPaymentNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityPerformanceImpactsPaymentNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPaymentNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataSharingStarts(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStarts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSharingStarts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DataStartsType)
	fc.Result = res
	return ec.marshalODataStartsType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataStartsType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataSharingStarts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataStartsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataSharingStartsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStartsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSharingStartsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataSharingStartsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataSharingFrequency(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataSharingFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().DataSharingFrequency(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.DataFrequencyType)
	fc.Result = res
	return ec.marshalNDataFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataSharingFrequency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataFrequencyType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataSharingFrequencyOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataSharingFrequencyOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSharingFrequencyOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataSharingFrequencyOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataSharingStartsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStartsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSharingStartsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataSharingStartsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataCollectionStarts(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionStarts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataCollectionStarts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DataStartsType)
	fc.Result = res
	return ec.marshalODataStartsType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataStartsType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataCollectionStarts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataStartsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataCollectionStartsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionStartsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataCollectionStartsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataCollectionStartsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataCollectionFrequency(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().DataCollectionFrequency(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.DataFrequencyType)
	fc.Result = res
	return ec.marshalNDataFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataFrequencyType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataCollectionFrequencyOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataCollectionFrequencyOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataCollectionFrequencyNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataCollectionFrequencyNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_qualityReportingStarts(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStarts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityReportingStarts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DataStartsType)
	fc.Result = res
	return ec.marshalODataStartsType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataStartsType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_qualityReportingStarts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataStartsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_qualityReportingStartsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityReportingStartsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_qualityReportingStartsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityReportingStartsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_modelLearningSystems(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().ModelLearningSystems(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ModelLearningSystemType)
	fc.Result = res
	return ec.marshalNModelLearningSystemType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_modelLearningSystems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ModelLearningSystemType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_modelLearningSystemsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelLearningSystemsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_modelLearningSystemsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelLearningSystemsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_anticipatedChallenges(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_anticipatedChallenges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnticipatedChallenges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_anticipatedChallenges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_readyForReviewBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_readyForReviewBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_readyForReviewByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_readyForReviewByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_readyForReviewDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_readyForReviewDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_readyForClearanceBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_readyForClearanceBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_readyForClearanceBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_readyForClearanceByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_readyForClearanceByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_readyForClearanceByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_readyForClearanceDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_readyForClearanceDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_readyForClearanceDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TaskStatus)
	fc.Result = res
	return ec.marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participants(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanParticipantsAndProviders().Participants(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ParticipantsType)
	fc.Result = res
	return ec.marshalNParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ParticipantsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_medicareProviderType(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_medicareProviderType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MedicareProviderType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_medicareProviderType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_statesEngagement(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_statesEngagement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatesEngagement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_statesEngagement(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantsCurrentlyInModels(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsCurrentlyInModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantsCurrentlyInModelsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModelsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsCurrentlyInModelsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModelsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_modelApplicationLevel(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_modelApplicationLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelApplicationLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_modelApplicationLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_expectedNumberOfParticipants(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_expectedNumberOfParticipants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedNumberOfParticipants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_expectedNumberOfParticipants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_estimateConfidence(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_estimateConfidence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimateConfidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ConfidenceType)
	fc.Result = res
	return ec.marshalOConfidenceType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐConfidenceType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_estimateConfidence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfidenceType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_confidenceNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_confidenceNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfidenceNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_confidenceNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_recruitmentMethod(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_recruitmentMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecruitmentMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RecruitmentType)
	fc.Result = res
	return ec.marshalORecruitmentType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐRecruitmentType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_recruitmentMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RecruitmentType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_recruitmentOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_recruitmentOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecruitmentOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_recruitmentOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_recruitmentNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_recruitmentNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecruitmentNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_recruitmentNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_selectionMethod(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_selectionMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanParticipantsAndProviders().SelectionMethod(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ParticipantSelectionType)
	fc.Result = res
	return ec.marshalNParticipantSelectionType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_selectionMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ParticipantSelectionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_selectionOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_selectionOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectionOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_selectionOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_selectionNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_selectionNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectionNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_selectionNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_communicationMethod(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_communicationMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanParticipantsAndProviders().CommunicationMethod(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ParticipantCommunicationType)
	fc.Result = res
	return ec.marshalNParticipantCommunicationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_communicationMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ParticipantCommunicationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_communicationMethodOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_communicationMethodOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationMethodOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_communicationMethodOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_communicationNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_communicationNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_communicationNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantAssumeRisk(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantAssumeRisk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantAssumeRisk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantAssumeRisk(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_riskType(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_riskType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ParticipantRiskType)
	fc.Result = res
	return ec.marshalOParticipantRiskType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐParticipantRiskType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_riskType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ParticipantRiskType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_riskOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_riskOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_riskOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_riskNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_riskNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_riskNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_willRiskChange(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_willRiskChange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WillRiskChange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_willRiskChange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_willRiskChangeNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_willRiskChangeNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WillRiskChangeNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_willRiskChangeNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_coordinateWork(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_coordinateWork(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CoordinateWork, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_coordinateWork(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_coordinateWorkNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_coordinateWorkNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CoordinateWorkNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_coordinateWorkNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_gainsharePayments(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_gainsharePayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GainsharePayments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_gainsharePayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_gainsharePaymentsTrack(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_gainsharePaymentsTrack(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GainsharePaymentsTrack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_gainsharePaymentsTrack(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_gainsharePaymentsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_gainsharePaymentsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GainsharePaymentsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_gainsharePaymentsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantsIds(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantsIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanParticipantsAndProviders().ParticipantsIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ParticipantsIDType)
	fc.Result = res
	return ec.marshalNParticipantsIDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantsIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ParticipantsIDType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantsIdsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantsIdsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsIdsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantsIdsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantsIDSNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantsIDSNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsIDSNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantsIDSNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerAdditionFrequency(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderAdditionFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.FrequencyType)
	fc.Result = res
	return ec.marshalOFrequencyType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFrequencyType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerAdditionFrequency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FrequencyType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerAdditionFrequencyOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderAdditionFrequencyOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerAdditionFrequencyNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderAdditionFrequencyNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerAddMethod(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerAddMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanParticipantsAndProviders().ProviderAddMethod(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ProviderAddType)
	fc.Result = res
	return ec.marshalNProviderAddType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerAddMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ProviderAddType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerAddMethodOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerAddMethodOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderAddMethodOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerAddMethodOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerAddMethodNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerAddMethodNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderAddMethodNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerAddMethodNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerLeaveMethod(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanParticipantsAndProviders().ProviderLeaveMethod(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ProviderLeaveType)
	fc.Result = res
	return ec.marshalNProviderLeaveType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerLeaveMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ProviderLeaveType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerLeaveMethodOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethodOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderLeaveMethodOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerLeaveMethodOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerLeaveMethodNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethodNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderLeaveMethodNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerLeaveMethodNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerOverlap(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerOverlap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderOverlap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OverlapType)
	fc.Result = res
	return ec.marshalOOverlapType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOverlapType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerOverlap(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OverlapType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerOverlapHierarchy(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerOverlapHierarchy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderOverlapHierarchy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerOverlapHierarchy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerOverlapNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerOverlapNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderOverlapNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerOverlapNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_readyForReviewBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_readyForReviewBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_readyForReviewBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_readyForReviewByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_readyForReviewByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_readyForReviewByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_readyForReviewDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_readyForReviewDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_readyForReviewDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_readyForClearanceBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_readyForClearanceBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_readyForClearanceBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_readyForClearanceByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_readyForClearanceByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_readyForClearanceByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_readyForClearanceDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_readyForClearanceDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_readyForClearanceDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TaskStatus)
	fc.Result = res
	return ec.marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSource(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().FundingSource(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.FundingSource)
	fc.Result = res
	return ec.marshalNFundingSource2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FundingSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSourceTrustFund(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSourceTrustFund(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingSourceTrustFund, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSourceTrustFund(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSourceOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSourceOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingSourceOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSourceOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSourceNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSourceNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingSourceNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSourceNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSourceR(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSourceR(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().FundingSourceR(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.FundingSource)
	fc.Result = res
	return ec.marshalNFundingSource2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSourceR(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FundingSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSourceRTrustFund(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSourceRTrustFund(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingSourceRTrustFund, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSourceRTrustFund(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSourceROther(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSourceROther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingSourceROther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSourceROther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSourceRNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSourceRNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingSourceRNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSourceRNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payRecipients(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payRecipients(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().PayRecipients(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.PayRecipient)
	fc.Result = res
	return ec.marshalNPayRecipient2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipientᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payRecipients(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PayRecipient does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payRecipientsOtherSpecification(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payRecipientsOtherSpecification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayRecipientsOtherSpecification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payRecipientsOtherSpecification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payRecipientsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payRecipientsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayRecipientsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payRecipientsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payType(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().PayType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.PayType)
	fc.Result = res
	return ec.marshalNPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PayType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payTypeNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payTypeNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayTypeNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payTypeNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payClaims(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payClaims(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().PayClaims(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.ClaimsBasedPayType)
	fc.Result = res
	return ec.marshalNClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payClaims(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ClaimsBasedPayType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payClaimsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payClaimsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayClaimsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payClaimsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payClaimsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payClaimsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayClaimsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payClaimsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_shouldAnyProvidersExcludedFFSSystems(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_shouldAnyProvidersExcludedFFSSystems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldAnyProvidersExcludedFFSSystems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_shouldAnyProvidersExcludedFFSSystems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_shouldAnyProviderExcludedFFSSystemsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_shouldAnyProviderExcludedFFSSystemsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldAnyProviderExcludedFFSSystemsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_shouldAnyProviderExcludedFFSSystemsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_changesMedicarePhysicianFeeSchedule(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeSchedule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangesMedicarePhysicianFeeSchedule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_changesMedicarePhysicianFeeSchedule(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_changesMedicarePhysicianFeeScheduleNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeScheduleNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangesMedicarePhysicianFeeScheduleNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_changesMedicarePhysicianFeeScheduleNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_affectsMedicareSecondaryPayerClaims(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaims(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectsMedicareSecondaryPayerClaims, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaims(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_affectsMedicareSecondaryPayerClaimsHow(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsHow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectsMedicareSecondaryPayerClaimsHow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsHow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_affectsMedicareSecondaryPayerClaimsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectsMedicareSecondaryPayerClaimsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payModelDifferentiation(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payModelDifferentiation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayModelDifferentiation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payModelDifferentiation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_creatingDependenciesBetweenServices(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_creatingDependenciesBetweenServices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatingDependenciesBetweenServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_creatingDependenciesBetweenServices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_creatingDependenciesBetweenServicesNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_creatingDependenciesBetweenServicesNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatingDependenciesBetweenServicesNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_creatingDependenciesBetweenServicesNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_needsClaimsDataCollection(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_needsClaimsDataCollection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeedsClaimsDataCollection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_needsClaimsDataCollection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_needsClaimsDataCollectionNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_needsClaimsDataCollectionNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeedsClaimsDataCollectionNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_needsClaimsDataCollectionNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_providingThirdPartyFile(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_providingThirdPartyFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvidingThirdPartyFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_providingThirdPartyFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_isContractorAwareTestDataRequirements(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_isContractorAwareTestDataRequirements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsContractorAwareTestDataRequirements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_isContractorAwareTestDataRequirements(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_beneficiaryCostSharingLevelAndHandling(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_beneficiaryCostSharingLevelAndHandling(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryCostSharingLevelAndHandling, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_beneficiaryCostSharingLevelAndHandling(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_waiveBeneficiaryCostSharingForAnyServices(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingForAnyServices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WaiveBeneficiaryCostSharingForAnyServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_waiveBeneficiaryCostSharingForAnyServices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_waiveBeneficiaryCostSharingServiceSpecification(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingServiceSpecification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WaiveBeneficiaryCostSharingServiceSpecification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_waiveBeneficiaryCostSharingServiceSpecification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_waiverOnlyAppliesPartOfPayment(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_waiverOnlyAppliesPartOfPayment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WaiverOnlyAppliesPartOfPayment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_waiverOnlyAppliesPartOfPayment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_waiveBeneficiaryCostSharingNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WaiveBeneficiaryCostSharingNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_waiveBeneficiaryCostSharingNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_nonClaimsPayments(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_nonClaimsPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().NonClaimsPayments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.NonClaimsBasedPayType)
	fc.Result = res
	return ec.marshalNNonClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_nonClaimsPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NonClaimsBasedPayType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_nonClaimsPaymentOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_nonClaimsPaymentOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().NonClaimsPaymentOther(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_nonClaimsPaymentOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_nonClaimsPaymentsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_nonClaimsPaymentsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonClaimsPaymentsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_nonClaimsPaymentsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_paymentCalculationOwner(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_paymentCalculationOwner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentCalculationOwner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_paymentCalculationOwner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_numberPaymentsPerPayCycle(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_numberPaymentsPerPayCycle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberPaymentsPerPayCycle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_numberPaymentsPerPayCycle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_numberPaymentsPerPayCycleNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_numberPaymentsPerPayCycleNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberPaymentsPerPayCycleNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_numberPaymentsPerPayCycleNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_sharedSystemsInvolvedAdditionalClaimPayment(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPayment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharedSystemsInvolvedAdditionalClaimPayment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPayment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_sharedSystemsInvolvedAdditionalClaimPaymentNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPaymentNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharedSystemsInvolvedAdditionalClaimPaymentNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPaymentNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_planningToUseInnovationPaymentContractor(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanningToUseInnovationPaymentContractor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_planningToUseInnovationPaymentContractor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_planningToUseInnovationPaymentContractorNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractorNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanningToUseInnovationPaymentContractorNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_planningToUseInnovationPaymentContractorNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingStructure(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingStructure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingStructure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingStructure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_expectedCalculationComplexityLevel(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_expectedCalculationComplexityLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedCalculationComplexityLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplexityCalculationLevelType)
	fc.Result = res
	return ec.marshalOComplexityCalculationLevelType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐComplexityCalculationLevelType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_expectedCalculationComplexityLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ComplexityCalculationLevelType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_expectedCalculationComplexityLevelNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_expectedCalculationComplexityLevelNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedCalculationComplexityLevelNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_expectedCalculationComplexityLevelNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_canParticipantsSelectBetweenPaymentMechanisms(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanisms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanParticipantsSelectBetweenPaymentMechanisms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanisms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_canParticipantsSelectBetweenPaymentMechanismsHow(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsHow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanParticipantsSelectBetweenPaymentMechanismsHow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsHow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_canParticipantsSelectBetweenPaymentMechanismsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanParticipantsSelectBetweenPaymentMechanismsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_anticipatedPaymentFrequency(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_anticipatedPaymentFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().AnticipatedPaymentFrequency(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.AnticipatedPaymentFrequencyType)
	fc.Result = res
	return ec.marshalNAnticipatedPaymentFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_anticipatedPaymentFrequency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AnticipatedPaymentFrequencyType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_anticipatedPaymentFrequencyOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnticipatedPaymentFrequencyOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_anticipatedPaymentFrequencyOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_anticipatedPaymentFrequencyNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnticipatedPaymentFrequencyNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_anticipatedPaymentFrequencyNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_willRecoverPayments(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_willRecoverPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WillRecoverPayments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_willRecoverPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_willRecoverPaymentsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_willRecoverPaymentsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WillRecoverPaymentsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_willRecoverPaymentsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_anticipateReconcilingPaymentsRetrospectively(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectively(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnticipateReconcilingPaymentsRetrospectively, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectively(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_anticipateReconcilingPaymentsRetrospectivelyNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectivelyNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnticipateReconcilingPaymentsRetrospectivelyNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectivelyNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_paymentStartDate(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_paymentStartDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_paymentStartDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_paymentStartDateNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_paymentStartDateNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentStartDateNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_paymentStartDateNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_readyForReviewBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_readyForReviewBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_readyForReviewBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_readyForReviewByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_readyForReviewByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_readyForReviewByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_readyForReviewDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_readyForReviewDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_readyForReviewDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_readyForClearanceBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_readyForClearanceBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_readyForClearanceBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_readyForClearanceByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_readyForClearanceByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_readyForClearanceByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_readyForClearanceDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_readyForClearanceDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForClearanceDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_readyForClearanceDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TaskStatus)
	fc.Result = res
	return ec.marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalNeed_id(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalNeed_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalNeed_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalNeed_possibleSolutions(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalNeed_possibleSolutions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PossibleOperationalNeed().PossibleSolutions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PossibleOperationalSolution)
	fc.Result = res
	return ec.marshalNPossibleOperationalSolution2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPossibleOperationalSolutionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalNeed_possibleSolutions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalNeed",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PossibleOperationalSolution_id(ctx, field)
			case "name":
				return ec.fieldContext_PossibleOperationalSolution_name(ctx, field)
			case "key":
				return ec.fieldContext_PossibleOperationalSolution_key(ctx, field)
			case "treatAsOther":
				return ec.fieldContext_PossibleOperationalSolution_treatAsOther(ctx, field)
			case "createdBy":
				return ec.fieldContext_PossibleOperationalSolution_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PossibleOperationalSolution_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PossibleOperationalSolution_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PossibleOperationalSolution_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PossibleOperationalSolution_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PossibleOperationalSolution_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PossibleOperationalSolution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalNeed_name(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalNeed_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalNeed_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalNeed_key(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalNeed_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.OperationalNeedKey)
	fc.Result = res
	return ec.marshalNOperationalNeedKey2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalNeedKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalNeed_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OperationalNeedKey does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalNeed_section(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalNeed_section(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Section, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.TaskListSection)
	fc.Result = res
	return ec.marshalOTaskListSection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskListSection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalNeed_section(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskListSection does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalNeed_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalNeed_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalNeed_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalNeed_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalNeed_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalNeed_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalNeed",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalNeed_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalNeed_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalNeed_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalNeed_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalNeed_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalNeed_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalNeed_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalNeed_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalNeed_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalNeed",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalNeed_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalNeed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalNeed_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalNeed_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalNeed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalSolution_id(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalSolution_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalSolution_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalSolution_name(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalSolution_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalSolution_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalSolution_key(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalSolution_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.OperationalSolutionKey)
	fc.Result = res
	return ec.marshalNOperationalSolutionKey2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalSolution_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OperationalSolutionKey does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalSolution_treatAsOther(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalSolution_treatAsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatAsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalSolution_treatAsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalSolution_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalSolution_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalSolution_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalSolution_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalSolution_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalSolution_createdByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalSolution",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalSolution_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalSolution_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalSolution_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalSolution_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalSolution_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalSolution_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalSolution_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalSolution_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalSolution_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalSolution",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PossibleOperationalSolution_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PossibleOperationalSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PossibleOperationalSolution_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PossibleOperationalSolution_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PossibleOperationalSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PrepareForClearance_status(ctx context.Context, field graphql.CollectedField, obj *model.PrepareForClearance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PrepareForClearance_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.PrepareForClearanceStatus)
	fc.Result = res
	return ec.marshalNPrepareForClearanceStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPrepareForClearanceStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PrepareForClearance_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PrepareForClearance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PrepareForClearanceStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PrepareForClearance_latestClearanceDts(ctx context.Context, field graphql.CollectedField, obj *model.PrepareForClearance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PrepareForClearance_latestClearanceDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestClearanceDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PrepareForClearance_latestClearanceDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PrepareForClearance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_currentUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_currentUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CurrentUser(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CurrentUser)
	fc.Result = res
	return ec.marshalNCurrentUser2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCurrentUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_currentUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "launchDarkly":
				return ec.fieldContext_CurrentUser_launchDarkly(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CurrentUser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_modelPlan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_modelPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ModelPlan(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ModelPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.ModelPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModelPlan)
	fc.Result = res
	return ec.marshalNModelPlan2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_modelPlan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModelPlan_id(ctx, field)
			case "modelName":
				return ec.fieldContext_ModelPlan_modelName(ctx, field)
			case "archived":
				return ec.fieldContext_ModelPlan_archived(ctx, field)
			case "createdBy":
				return ec.fieldContext_ModelPlan_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_ModelPlan_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_ModelPlan_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ModelPlan_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_ModelPlan_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ModelPlan_modifiedDts(ctx, field)
			case "basics":
				return ec.fieldContext_ModelPlan_basics(ctx, field)
			case "generalCharacteristics":
				return ec.fieldContext_ModelPlan_generalCharacteristics(ctx, field)
			case "participantsAndProviders":
				return ec.fieldContext_ModelPlan_participantsAndProviders(ctx, field)
			case "beneficiaries":
				return ec.fieldContext_ModelPlan_beneficiaries(ctx, field)
			case "opsEvalAndLearning":
				return ec.fieldContext_ModelPlan_opsEvalAndLearning(ctx, field)
			case "collaborators":
				return ec.fieldContext_ModelPlan_collaborators(ctx, field)
			case "documents":
				return ec.fieldContext_ModelPlan_documents(ctx, field)
			case "discussions":
				return ec.fieldContext_ModelPlan_discussions(ctx, field)
			case "payments":
				return ec.fieldContext_ModelPlan_payments(ctx, field)
			case "status":
				return ec.fieldContext_ModelPlan_status(ctx, field)
			case "isFavorite":
				return ec.fieldContext_ModelPlan_isFavorite(ctx, field)
			case "isCollaborator":
				return ec.fieldContext_ModelPlan_isCollaborator(ctx, field)
			case "crTdls":
				return ec.fieldContext_ModelPlan_crTdls(ctx, field)
			case "prepareForClearance":
				return ec.fieldContext_ModelPlan_prepareForClearance(ctx, field)
			case "nameHistory":
				return ec.fieldContext_ModelPlan_nameHistory(ctx, field)
			case "operationalNeeds":
				return ec.fieldContext_ModelPlan_operationalNeeds(ctx, field)
			case "existingModelLinks":
				return ec.fieldContext_ModelPlan_existingModelLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModelPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_modelPlan_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_planDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_planDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PlanDocument(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanDocument); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanDocument`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanDocument)
	fc.Result = res
	return ec.marshalNPlanDocument2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_planDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDocument_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDocument_modelPlanID(ctx, field)
			case "fileType":
				return ec.fieldContext_PlanDocument_fileType(ctx, field)
			case "bucket":
				return ec.fieldContext_PlanDocument_bucket(ctx, field)
			case "fileKey":
				return ec.fieldContext_PlanDocument_fileKey(ctx, field)
			case "virusScanned":
				return ec.fieldContext_PlanDocument_virusScanned(ctx, field)
			case "virusClean":
				return ec.fieldContext_PlanDocument_virusClean(ctx, field)
			case "restricted":
				return ec.fieldContext_PlanDocument_restricted(ctx, field)
			case "fileName":
				return ec.fieldContext_PlanDocument_fileName(ctx, field)
			case "fileSize":
				return ec.fieldContext_PlanDocument_fileSize(ctx, field)
			case "documentType":
				return ec.fieldContext_PlanDocument_documentType(ctx, field)
			case "otherType":
				return ec.fieldContext_PlanDocument_otherType(ctx, field)
			case "optionalNotes":
				return ec.fieldContext_PlanDocument_optionalNotes(ctx, field)
			case "downloadUrl":
				return ec.fieldContext_PlanDocument_downloadUrl(ctx, field)
			case "deletedAt":
				return ec.fieldContext_PlanDocument_deletedAt(ctx, field)
			case "numLinkedSolutions":
				return ec.fieldContext_PlanDocument_numLinkedSolutions(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDocument_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanDocument_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDocument_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDocument_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanDocument_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDocument_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDocument", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_planDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_modelPlanCollection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_modelPlanCollection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ModelPlanCollection(rctx, fc.Args["filter"].(model.ModelPlanFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ModelPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.ModelPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModelPlan)
	fc.Result = res
	return ec.marshalNModelPlan2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_modelPlanCollection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModelPlan_id(ctx, field)
			case "modelName":
				return ec.fieldContext_ModelPlan_modelName(ctx, field)
			case "archived":
				return ec.fieldContext_ModelPlan_archived(ctx, field)
			case "createdBy":
				return ec.fieldContext_ModelPlan_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_ModelPlan_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_ModelPlan_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ModelPlan_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_ModelPlan_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ModelPlan_modifiedDts(ctx, field)
			case "basics":
				return ec.fieldContext_ModelPlan_basics(ctx, field)
			case "generalCharacteristics":
				return ec.fieldContext_ModelPlan_generalCharacteristics(ctx, field)
			case "participantsAndProviders":
				return ec.fieldContext_ModelPlan_participantsAndProviders(ctx, field)
			case "beneficiaries":
				return ec.fieldContext_ModelPlan_beneficiaries(ctx, field)
			case "opsEvalAndLearning":
				return ec.fieldContext_ModelPlan_opsEvalAndLearning(ctx, field)
			case "collaborators":
				return ec.fieldContext_ModelPlan_collaborators(ctx, field)
			case "documents":
				return ec.fieldContext_ModelPlan_documents(ctx, field)
			case "discussions":
				return ec.fieldContext_ModelPlan_discussions(ctx, field)
			case "payments":
				return ec.fieldContext_ModelPlan_payments(ctx, field)
			case "status":
				return ec.fieldContext_ModelPlan_status(ctx, field)
			case "isFavorite":
				return ec.fieldContext_ModelPlan_isFavorite(ctx, field)
			case "isCollaborator":
				return ec.fieldContext_ModelPlan_isCollaborator(ctx, field)
			case "crTdls":
				return ec.fieldContext_ModelPlan_crTdls(ctx, field)
			case "prepareForClearance":
				return ec.fieldContext_ModelPlan_prepareForClearance(ctx, field)
			case "nameHistory":
				return ec.fieldContext_ModelPlan_nameHistory(ctx, field)
			case "operationalNeeds":
				return ec.fieldContext_ModelPlan_operationalNeeds(ctx, field)
			case "existingModelLinks":
				return ec.fieldContext_ModelPlan_existingModelLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModelPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_modelPlanCollection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_existingModelCollection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_existingModelCollection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ExistingModelCollection(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ExistingModel); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.ExistingModel`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ExistingModel)
	fc.Result = res
	return ec.marshalNExistingModel2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_existingModelCollection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExistingModel_id(ctx, field)
			case "modelName":
				return ec.fieldContext_ExistingModel_modelName(ctx, field)
			case "stage":
				return ec.fieldContext_ExistingModel_stage(ctx, field)
			case "numberOfParticipants":
				return ec.fieldContext_ExistingModel_numberOfParticipants(ctx, field)
			case "category":
				return ec.fieldContext_ExistingModel_category(ctx, field)
			case "authority":
				return ec.fieldContext_ExistingModel_authority(ctx, field)
			case "description":
				return ec.fieldContext_ExistingModel_description(ctx, field)
			case "numberOfBeneficiariesImpacted":
				return ec.fieldContext_ExistingModel_numberOfBeneficiariesImpacted(ctx, field)
			case "numberOfPhysiciansImpacted":
				return ec.fieldContext_ExistingModel_numberOfPhysiciansImpacted(ctx, field)
			case "dateBegan":
				return ec.fieldContext_ExistingModel_dateBegan(ctx, field)
			case "dateEnded":
				return ec.fieldContext_ExistingModel_dateEnded(ctx, field)
			case "states":
				return ec.fieldContext_ExistingModel_states(ctx, field)
			case "keywords":
				return ec.fieldContext_ExistingModel_keywords(ctx, field)
			case "url":
				return ec.fieldContext_ExistingModel_url(ctx, field)
			case "displayModelSummary":
				return ec.fieldContext_ExistingModel_displayModelSummary(ctx, field)
			case "createdBy":
				return ec.fieldContext_ExistingModel_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_ExistingModel_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_ExistingModel_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ExistingModel_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_ExistingModel_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ExistingModel_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExistingModel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchOktaUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchOktaUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SearchOktaUsers(rctx, fc.Args["searchTerm"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.UserInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.UserInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.UserInfo)
	fc.Result = res
	return ec.marshalNUserInfo2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐUserInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchOktaUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_UserInfo_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_UserInfo_lastName(ctx, field)
			case "displayName":
				return ec.fieldContext_UserInfo_displayName(ctx, field)
			case "email":
				return ec.fieldContext_UserInfo_email(ctx, field)
			case "username":
				return ec.fieldContext_UserInfo_username(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchOktaUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_planCollaboratorByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_planCollaboratorByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PlanCollaboratorByID(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanCollaborator); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanCollaborator`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCollaborator)
	fc.Result = res
	return ec.marshalNPlanCollaborator2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaborator(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_planCollaboratorByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCollaborator_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCollaborator_modelPlanID(ctx, field)
			case "userID":
				return ec.fieldContext_PlanCollaborator_userID(ctx, field)
			case "userAccount":
				return ec.fieldContext_PlanCollaborator_userAccount(ctx, field)
			case "teamRole":
				return ec.fieldContext_PlanCollaborator_teamRole(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCollaborator_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanCollaborator_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCollaborator_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCollaborator_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanCollaborator_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCollaborator_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCollaborator", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_planCollaboratorByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_taskListSectionLocks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_taskListSectionLocks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().TaskListSectionLocks(rctx, fc.Args["modelPlanID"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.TaskListSectionLockStatus); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/graph/model.TaskListSectionLockStatus`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TaskListSectionLockStatus)
	fc.Result = res
	return ec.marshalNTaskListSectionLockStatus2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatusᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_taskListSectionLocks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modelPlanID":
				return ec.fieldContext_TaskListSectionLockStatus_modelPlanID(ctx, field)
			case "section":
				return ec.fieldContext_TaskListSectionLockStatus_section(ctx, field)
			case "lockedByUserAccount":
				return ec.fieldContext_TaskListSectionLockStatus_lockedByUserAccount(ctx, field)
			case "isAssessment":
				return ec.fieldContext_TaskListSectionLockStatus_isAssessment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskListSectionLockStatus", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_taskListSectionLocks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_planPayments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_planPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PlanPayments(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanPayments); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanPayments`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanPayments)
	fc.Result = res
	return ec.marshalNPlanPayments2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanPayments(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_planPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanPayments_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanPayments_modelPlanID(ctx, field)
			case "fundingSource":
				return ec.fieldContext_PlanPayments_fundingSource(ctx, field)
			case "fundingSourceTrustFund":
				return ec.fieldContext_PlanPayments_fundingSourceTrustFund(ctx, field)
			case "fundingSourceOther":
				return ec.fieldContext_PlanPayments_fundingSourceOther(ctx, field)
			case "fundingSourceNote":
				return ec.fieldContext_PlanPayments_fundingSourceNote(ctx, field)
			case "fundingSourceR":
				return ec.fieldContext_PlanPayments_fundingSourceR(ctx, field)
			case "fundingSourceRTrustFund":
				return ec.fieldContext_PlanPayments_fundingSourceRTrustFund(ctx, field)
			case "fundingSourceROther":
				return ec.fieldContext_PlanPayments_fundingSourceROther(ctx, field)
			case "fundingSourceRNote":
				return ec.fieldContext_PlanPayments_fundingSourceRNote(ctx, field)
			case "payRecipients":
				return ec.fieldContext_PlanPayments_payRecipients(ctx, field)
			case "payRecipientsOtherSpecification":
				return ec.fieldContext_PlanPayments_payRecipientsOtherSpecification(ctx, field)
			case "payRecipientsNote":
				return ec.fieldContext_PlanPayments_payRecipientsNote(ctx, field)
			case "payType":
				return ec.fieldContext_PlanPayments_payType(ctx, field)
			case "payTypeNote":
				return ec.fieldContext_PlanPayments_payTypeNote(ctx, field)
			case "payClaims":
				return ec.fieldContext_PlanPayments_payClaims(ctx, field)
			case "payClaimsOther":
				return ec.fieldContext_PlanPayments_payClaimsOther(ctx, field)
			case "payClaimsNote":
				return ec.fieldContext_PlanPayments_payClaimsNote(ctx, field)
			case "shouldAnyProvidersExcludedFFSSystems":
				return ec.fieldContext_PlanPayments_shouldAnyProvidersExcludedFFSSystems(ctx, field)
			case "shouldAnyProviderExcludedFFSSystemsNote":
				return ec.fieldContext_PlanPayments_shouldAnyProviderExcludedFFSSystemsNote(ctx, field)
			case "changesMedicarePhysicianFeeSchedule":
				return ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeSchedule(ctx, field)
			case "changesMedicarePhysicianFeeScheduleNote":
				return ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeScheduleNote(ctx, field)
			case "affectsMedicareSecondaryPayerClaims":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaims(ctx, field)
			case "affectsMedicareSecondaryPayerClaimsHow":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsHow(ctx, field)
			case "affectsMedicareSecondaryPayerClaimsNote":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsNote(ctx, field)
			case "payModelDifferentiation":
				return ec.fieldContext_PlanPayments_payModelDifferentiation(ctx, field)
			case "creatingDependenciesBetweenServices":
				return ec.fieldContext_PlanPayments_creatingDependenciesBetweenServices(ctx, field)
			case "creatingDependenciesBetweenServicesNote":
				return ec.fieldContext_PlanPayments_creatingDependenciesBetweenServicesNote(ctx, field)
			case "needsClaimsDataCollection":
				return ec.fieldContext_PlanPayments_needsClaimsDataCollection(ctx, field)
			case "needsClaimsDataCollectionNote":
				return ec.fieldContext_PlanPayments_needsClaimsDataCollectionNote(ctx, field)
			case "providingThirdPartyFile":
				return ec.fieldContext_PlanPayments_providingThirdPartyFile(ctx, field)
			case "isContractorAwareTestDataRequirements":
				return ec.fieldContext_PlanPayments_isContractorAwareTestDataRequirements(ctx, field)
			case "beneficiaryCostSharingLevelAndHandling":
				return ec.fieldContext_PlanPayments_beneficiaryCostSharingLevelAndHandling(ctx, field)
			case "waiveBeneficiaryCostSharingForAnyServices":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingForAnyServices(ctx, field)
			case "waiveBeneficiaryCostSharingServiceSpecification":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingServiceSpecification(ctx, field)
			case "waiverOnlyAppliesPartOfPayment":
				return ec.fieldContext_PlanPayments_waiverOnlyAppliesPartOfPayment(ctx, field)
			case "waiveBeneficiaryCostSharingNote":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingNote(ctx, field)
			case "nonClaimsPayments":
				return ec.fieldContext_PlanPayments_nonClaimsPayments(ctx, field)
			case "nonClaimsPaymentOther":
				return ec.fieldContext_PlanPayments_nonClaimsPaymentOther(ctx, field)
			case "nonClaimsPaymentsNote":
				return ec.fieldContext_PlanPayments_nonClaimsPaymentsNote(ctx, field)
			case "paymentCalculationOwner":
				return ec.fieldContext_PlanPayments_paymentCalculationOwner(ctx, field)
			case "numberPaymentsPerPayCycle":
				return ec.fieldContext_PlanPayments_numberPaymentsPerPayCycle(ctx, field)
			case "numberPaymentsPerPayCycleNote":
				return ec.fieldContext_PlanPayments_numberPaymentsPerPayCycleNote(ctx, field)
			case "sharedSystemsInvolvedAdditionalClaimPayment":
				return ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPayment(ctx, field)
			case "sharedSystemsInvolvedAdditionalClaimPaymentNote":
				return ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPaymentNote(ctx, field)
			case "planningToUseInnovationPaymentContractor":
				return ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractor(ctx, field)
			case "planningToUseInnovationPaymentContractorNote":
				return ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractorNote(ctx, field)
			case "fundingStructure":
				return ec.fieldContext_PlanPayments_fundingStructure(ctx, field)
			case "expectedCalculationComplexityLevel":
				return ec.fieldContext_PlanPayments_expectedCalculationComplexityLevel(ctx, field)
			case "expectedCalculationComplexityLevelNote":
				return ec.fieldContext_PlanPayments_expectedCalculationComplexityLevelNote(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanisms":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanisms(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanismsHow":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsHow(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanismsNote":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsNote(ctx, field)
			case "anticipatedPaymentFrequency":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequency(ctx, field)
			case "anticipatedPaymentFrequencyOther":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyOther(ctx, field)
			case "anticipatedPaymentFrequencyNote":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyNote(ctx, field)
			case "willRecoverPayments":
				return ec.fieldContext_PlanPayments_willRecoverPayments(ctx, field)
			case "willRecoverPaymentsNote":
				return ec.fieldContext_PlanPayments_willRecoverPaymentsNote(ctx, field)
			case "anticipateReconcilingPaymentsRetrospectively":
				return ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectively(ctx, field)
			case "anticipateReconcilingPaymentsRetrospectivelyNote":
				return ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectivelyNote(ctx, field)
			case "paymentStartDate":
				return ec.fieldContext_PlanPayments_paymentStartDate(ctx, field)
			case "paymentStartDateNote":
				return ec.fieldContext_PlanPayments_paymentStartDateNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanPayments_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanPayments_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanPayments_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanPayments_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanPayments_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanPayments_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanPayments_readyForReviewBy(ctx, field)
			case "readyForReviewByUserAccount":
				return ec.fieldContext_PlanPayments_readyForReviewByUserAccount(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanPayments_readyForReviewDts(ctx, field)
			case "readyForClearanceBy":
				return ec.fieldContext_PlanPayments_readyForClearanceBy(ctx, field)
			case "readyForClearanceByUserAccount":
				return ec.fieldContext_PlanPayments_readyForClearanceByUserAccount(ctx, field)
			case "readyForClearanceDts":
				return ec.fieldContext_PlanPayments_readyForClearanceDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanPayments_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanPayments", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_planPayments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_ndaInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_ndaInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().NdaInfo(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.NDAInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/graph/model.NDAInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NDAInfo)
	fc.Result = res
	return ec.marshalNNDAInfo2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNDAInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_ndaInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "agreed":
				return ec.fieldContext_NDAInfo_agreed(ctx, field)
			case "agreedDts":
				return ec.fieldContext_NDAInfo_agreedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NDAInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_crTdl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_crTdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().CrTdl(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanCrTdl); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanCrTdl`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCrTdl)
	fc.Result = res
	return ec.marshalNPlanCrTdl2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdl(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_crTdl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCrTdl_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCrTdl_modelPlanID(ctx, field)
			case "idNumber":
				return ec.fieldContext_PlanCrTdl_idNumber(ctx, field)
			case "dateInitiated":
				return ec.fieldContext_PlanCrTdl_dateInitiated(ctx, field)
			case "title":
				return ec.fieldContext_PlanCrTdl_title(ctx, field)
			case "note":
				return ec.fieldContext_PlanCrTdl_note(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCrTdl_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PlanCrTdl_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCrTdl_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCrTdl_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PlanCrTdl_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCrTdl_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCrTdl", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_crTdl_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_operationalSolutions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_operationalSolutions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().OperationalSolutions(rctx, fc.Args["operationalNeedID"].(uuid.UUID), fc.Args["includeNotNeeded"].(bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.OperationalSolution); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.OperationalSolution`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OperationalSolution)
	fc.Result = res
	return ec.marshalNOperationalSolution2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_operationalSolutions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OperationalSolution_id(ctx, field)
			case "operationalNeedID":
				return ec.fieldContext_OperationalSolution_operationalNeedID(ctx, field)
			case "solutionType":
				return ec.fieldContext_OperationalSolution_solutionType(ctx, field)
			case "needed":
				return ec.fieldContext_OperationalSolution_needed(ctx, field)
			case "name":
				return ec.fieldContext_OperationalSolution_name(ctx, field)
			case "key":
				return ec.fieldContext_OperationalSolution_key(ctx, field)
			case "nameOther":
				return ec.fieldContext_OperationalSolution_nameOther(ctx, field)
			case "pocName":
				return ec.fieldContext_OperationalSolution_pocName(ctx, field)
			case "pocEmail":
				return ec.fieldContext_OperationalSolution_pocEmail(ctx, field)
			case "mustStartDts":
				return ec.fieldContext_OperationalSolution_mustStartDts(ctx, field)
			case "mustFinishDts":
				return ec.fieldContext_OperationalSolution_mustFinishDts(ctx, field)
			case "isOther":
				return ec.fieldContext_OperationalSolution_isOther(ctx, field)
			case "isCommonSolution":
				return ec.fieldContext_OperationalSolution_isCommonSolution(ctx, field)
			case "otherHeader":
				return ec.fieldContext_OperationalSolution_otherHeader(ctx, field)
			case "status":
				return ec.fieldContext_OperationalSolution_status(ctx, field)
			case "documents":
				return ec.fieldContext_OperationalSolution_documents(ctx, field)
			case "operationalSolutionSubtasks":
				return ec.fieldContext_OperationalSolution_operationalSolutionSubtasks(ctx, field)
			case "createdBy":
				return ec.fieldContext_OperationalSolution_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_OperationalSolution_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_OperationalSolution_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_OperationalSolution_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_OperationalSolution_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_OperationalSolution_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationalSolution", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_operationalSolutions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_operationalSolution(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_operationalSolution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().OperationalSolution(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.OperationalSolution); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.OperationalSolution`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OperationalSolution)
	fc.Result = res
	return ec.marshalNOperationalSolution2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_operationalSolution(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OperationalSolution_id(ctx, field)
			case "operationalNeedID":
				return ec.fieldContext_OperationalSolution_operationalNeedID(ctx, field)
			case "solutionType":
				return ec.fieldContext_OperationalSolution_solutionType(ctx, field)
			case "needed":
				return ec.fieldContext_OperationalSolution_needed(ctx, field)
			case "name":
				return ec.fieldContext_OperationalSolution_name(ctx, field)
			case "key":
				return ec.fieldContext_OperationalSolution_key(ctx, field)
			case "nameOther":
				return ec.fieldContext_OperationalSolution_nameOther(ctx, field)
			case "pocName":
				return ec.fieldContext_OperationalSolution_pocName(ctx, field)
			case "pocEmail":
				return ec.fieldContext_OperationalSolution_pocEmail(ctx, field)
			case "mustStartDts":
				return ec.fieldContext_OperationalSolution_mustStartDts(ctx, field)
			case "mustFinishDts":
				return ec.fieldContext_OperationalSolution_mustFinishDts(ctx, field)
			case "isOther":
				return ec.fieldContext_OperationalSolution_isOther(ctx, field)
			case "isCommonSolution":
				return ec.fieldContext_OperationalSolution_isCommonSolution(ctx, field)
			case "otherHeader":
				return ec.fieldContext_OperationalSolution_otherHeader(ctx, field)
			case "status":
				return ec.fieldContext_OperationalSolution_status(ctx, field)
			case "documents":
				return ec.fieldContext_OperationalSolution_documents(ctx, field)
			case "operationalSolutionSubtasks":
				return ec.fieldContext_OperationalSolution_operationalSolutionSubtasks(ctx, field)
			case "createdBy":
				return ec.fieldContext_OperationalSolution_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_OperationalSolution_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_OperationalSolution_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_OperationalSolution_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_OperationalSolution_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_OperationalSolution_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationalSolution", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_operationalSolution_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_operationalNeed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_operationalNeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().OperationalNeed(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.OperationalNeed); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.OperationalNeed`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.OperationalNeed)
	fc.Result = res
	return ec.marshalNOperationalNeed2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalNeed(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_operationalNeed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OperationalNeed_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_OperationalNeed_modelPlanID(ctx, field)
			case "needed":
				return ec.fieldContext_OperationalNeed_needed(ctx, field)
			case "solutions":
				return ec.fieldContext_OperationalNeed_solutions(ctx, field)
			case "key":
				return ec.fieldContext_OperationalNeed_key(ctx, field)
			case "name":
				return ec.fieldContext_OperationalNeed_name(ctx, field)
			case "nameOther":
				return ec.fieldContext_OperationalNeed_nameOther(ctx, field)
			case "section":
				return ec.fieldContext_OperationalNeed_section(ctx, field)
			case "createdBy":
				return ec.fieldContext_OperationalNeed_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_OperationalNeed_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_OperationalNeed_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_OperationalNeed_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_OperationalNeed_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_OperationalNeed_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OperationalNeed", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_operationalNeed_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_auditChanges(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_auditChanges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuditChanges(rctx, fc.Args["tableName"].(string), fc.Args["primaryKey"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.AuditChange); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.AuditChange`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.AuditChange)
	fc.Result = res
	return ec.marshalNAuditChange2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAuditChangeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_auditChanges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AuditChange_id(ctx, field)
			case "primaryKey":
				return ec.fieldContext_AuditChange_primaryKey(ctx, field)
			case "foreignKey":
				return ec.fieldContext_AuditChange_foreignKey(ctx, field)
			case "tableName":
				return ec.fieldContext_AuditChange_tableName(ctx, field)
			case "action":
				return ec.fieldContext_AuditChange_action(ctx, field)
			case "fields":
				return ec.fieldContext_AuditChange_fields(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_AuditChange_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_AuditChange_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_AuditChange_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuditChange", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_auditChanges_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_possibleOperationalNeeds(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_possibleOperationalNeeds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PossibleOperationalNeeds(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.PossibleOperationalNeed); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.PossibleOperationalNeed`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PossibleOperationalNeed)
	fc.Result = res
	return ec.marshalNPossibleOperationalNeed2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPossibleOperationalNeedᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_possibleOperationalNeeds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PossibleOperationalNeed_id(ctx, field)
			case "possibleSolutions":
				return ec.fieldContext_PossibleOperationalNeed_possibleSolutions(ctx, field)
			case "name":
				return ec.fieldContext_PossibleOperationalNeed_name(ctx, field)
			case "key":
				return ec.fieldContext_PossibleOperationalNeed_key(ctx, field)
			case "section":
				return ec.fieldContext_PossibleOperationalNeed_section(ctx, field)
			case "createdBy":
				return ec.fieldContext_PossibleOperationalNeed_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PossibleOperationalNeed_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PossibleOperationalNeed_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PossibleOperationalNeed_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PossibleOperationalNeed_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PossibleOperationalNeed_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PossibleOperationalNeed", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_possibleOperationalSolutions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_possibleOperationalSolutions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PossibleOperationalSolutions(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.PossibleOperationalSolution); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.PossibleOperationalSolution`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PossibleOperationalSolution)
	fc.Result = res
	return ec.marshalNPossibleOperationalSolution2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPossibleOperationalSolutionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_possibleOperationalSolutions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PossibleOperationalSolution_id(ctx, field)
			case "name":
				return ec.fieldContext_PossibleOperationalSolution_name(ctx, field)
			case "key":
				return ec.fieldContext_PossibleOperationalSolution_key(ctx, field)
			case "treatAsOther":
				return ec.fieldContext_PossibleOperationalSolution_treatAsOther(ctx, field)
			case "createdBy":
				return ec.fieldContext_PossibleOperationalSolution_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_PossibleOperationalSolution_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_PossibleOperationalSolution_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PossibleOperationalSolution_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_PossibleOperationalSolution_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PossibleOperationalSolution_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PossibleOperationalSolution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_userAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_userAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().UserAccount(rctx, fc.Args["username"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*authentication.UserAccount); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/authentication.UserAccount`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_userAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_userAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_existingModelLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_existingModelLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ExistingModelLink(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ExistingModelLink); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.ExistingModelLink`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ExistingModelLink)
	fc.Result = res
	return ec.marshalNExistingModelLink2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModelLink(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_existingModelLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExistingModelLink_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_ExistingModelLink_modelPlanID(ctx, field)
			case "existingModelID":
				return ec.fieldContext_ExistingModelLink_existingModelID(ctx, field)
			case "existingModel":
				return ec.fieldContext_ExistingModelLink_existingModel(ctx, field)
			case "currentModelPlanID":
				return ec.fieldContext_ExistingModelLink_currentModelPlanID(ctx, field)
			case "currentModelPlan":
				return ec.fieldContext_ExistingModelLink_currentModelPlan(ctx, field)
			case "createdBy":
				return ec.fieldContext_ExistingModelLink_createdBy(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_ExistingModelLink_createdByUserAccount(ctx, field)
			case "createdDts":
				return ec.fieldContext_ExistingModelLink_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ExistingModelLink_modifiedBy(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_ExistingModelLink_modifiedByUserAccount(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ExistingModelLink_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExistingModelLink", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_existingModelLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchChanges(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchChanges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SearchChanges(rctx, fc.Args["filters"].([]*model.SearchFilter), fc.Args["limit"].(int), fc.Args["offset"].(int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ChangeTableRecord); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.ChangeTableRecord`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ChangeTableRecord)
	fc.Result = res
	return ec.marshalNChangeTableRecord2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐChangeTableRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchChanges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "guid":
				return ec.fieldContext_ChangeTableRecord_guid(ctx, field)
			case "tableID":
				return ec.fieldContext_ChangeTableRecord_tableID(ctx, field)
			case "tableName":
				return ec.fieldContext_ChangeTableRecord_tableName(ctx, field)
			case "primaryKey":
				return ec.fieldContext_ChangeTableRecord_primaryKey(ctx, field)
			case "foreignKey":
				return ec.fieldContext_ChangeTableRecord_foreignKey(ctx, field)
			case "action":
				return ec.fieldContext_ChangeTableRecord_action(ctx, field)
			case "fields":
				return ec.fieldContext_ChangeTableRecord_fields(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ChangeTableRecord_modifiedDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ChangeTableRecord_modifiedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChangeTableRecord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchChanges_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchChangeTable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchChangeTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SearchChangeTable(rctx, fc.Args["request"].(models.SearchRequest), fc.Args["limit"].(int), fc.Args["offset"].(int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ChangeTableRecord); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.ChangeTableRecord`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ChangeTableRecord)
	fc.Result = res
	return ec.marshalNChangeTableRecord2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐChangeTableRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchChangeTable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "guid":
				return ec.fieldContext_ChangeTableRecord_guid(ctx, field)
			case "tableID":
				return ec.fieldContext_ChangeTableRecord_tableID(ctx, field)
			case "tableName":
				return ec.fieldContext_ChangeTableRecord_tableName(ctx, field)
			case "primaryKey":
				return ec.fieldContext_ChangeTableRecord_primaryKey(ctx, field)
			case "foreignKey":
				return ec.fieldContext_ChangeTableRecord_foreignKey(ctx, field)
			case "action":
				return ec.fieldContext_ChangeTableRecord_action(ctx, field)
			case "fields":
				return ec.fieldContext_ChangeTableRecord_fields(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ChangeTableRecord_modifiedDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ChangeTableRecord_modifiedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChangeTableRecord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchChangeTable_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchChangeTableWithFreeText(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchChangeTableWithFreeText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SearchChangeTableWithFreeText(rctx, fc.Args["searchText"].(string), fc.Args["limit"].(int), fc.Args["offset"].(int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ChangeTableRecord); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.ChangeTableRecord`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ChangeTableRecord)
	fc.Result = res
	return ec.marshalNChangeTableRecord2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐChangeTableRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchChangeTableWithFreeText(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "guid":
				return ec.fieldContext_ChangeTableRecord_guid(ctx, field)
			case "tableID":
				return ec.fieldContext_ChangeTableRecord_tableID(ctx, field)
			case "tableName":
				return ec.fieldContext_ChangeTableRecord_tableName(ctx, field)
			case "primaryKey":
				return ec.fieldContext_ChangeTableRecord_primaryKey(ctx, field)
			case "foreignKey":
				return ec.fieldContext_ChangeTableRecord_foreignKey(ctx, field)
			case "action":
				return ec.fieldContext_ChangeTableRecord_action(ctx, field)
			case "fields":
				return ec.fieldContext_ChangeTableRecord_fields(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ChangeTableRecord_modifiedDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ChangeTableRecord_modifiedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChangeTableRecord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchChangeTableWithFreeText_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchChangeTableByModelPlanID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchChangeTableByModelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SearchChangeTableByModelPlanID(rctx, fc.Args["modelPlanID"].(uuid.UUID), fc.Args["limit"].(int), fc.Args["offset"].(int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ChangeTableRecord); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.ChangeTableRecord`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ChangeTableRecord)
	fc.Result = res
	return ec.marshalNChangeTableRecord2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐChangeTableRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchChangeTableByModelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "guid":
				return ec.fieldContext_ChangeTableRecord_guid(ctx, field)
			case "tableID":
				return ec.fieldContext_ChangeTableRecord_tableID(ctx, field)
			case "tableName":
				return ec.fieldContext_ChangeTableRecord_tableName(ctx, field)
			case "primaryKey":
				return ec.fieldContext_ChangeTableRecord_primaryKey(ctx, field)
			case "foreignKey":
				return ec.fieldContext_ChangeTableRecord_foreignKey(ctx, field)
			case "action":
				return ec.fieldContext_ChangeTableRecord_action(ctx, field)
			case "fields":
				return ec.fieldContext_ChangeTableRecord_fields(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ChangeTableRecord_modifiedDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ChangeTableRecord_modifiedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChangeTableRecord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchChangeTableByModelPlanID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchChangeTableByDateRange(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchChangeTableByDateRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SearchChangeTableByDateRange(rctx, fc.Args["startDate"].(time.Time), fc.Args["endDate"].(time.Time), fc.Args["limit"].(int), fc.Args["offset"].(int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ChangeTableRecord); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.ChangeTableRecord`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ChangeTableRecord)
	fc.Result = res
	return ec.marshalNChangeTableRecord2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐChangeTableRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchChangeTableByDateRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "guid":
				return ec.fieldContext_ChangeTableRecord_guid(ctx, field)
			case "tableID":
				return ec.fieldContext_ChangeTableRecord_tableID(ctx, field)
			case "tableName":
				return ec.fieldContext_ChangeTableRecord_tableName(ctx, field)
			case "primaryKey":
				return ec.fieldContext_ChangeTableRecord_primaryKey(ctx, field)
			case "foreignKey":
				return ec.fieldContext_ChangeTableRecord_foreignKey(ctx, field)
			case "action":
				return ec.fieldContext_ChangeTableRecord_action(ctx, field)
			case "fields":
				return ec.fieldContext_ChangeTableRecord_fields(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ChangeTableRecord_modifiedDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ChangeTableRecord_modifiedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChangeTableRecord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchChangeTableByDateRange_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchModelPlanChangesByDateRange(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchModelPlanChangesByDateRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SearchModelPlanChangesByDateRange(rctx, fc.Args["modelPlanID"].(uuid.UUID), fc.Args["startDate"].(time.Time), fc.Args["endDate"].(time.Time), fc.Args["limit"].(int), fc.Args["offset"].(int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ChangeTableRecord); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.ChangeTableRecord`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ChangeTableRecord)
	fc.Result = res
	return ec.marshalNChangeTableRecord2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐChangeTableRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchModelPlanChangesByDateRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "guid":
				return ec.fieldContext_ChangeTableRecord_guid(ctx, field)
			case "tableID":
				return ec.fieldContext_ChangeTableRecord_tableID(ctx, field)
			case "tableName":
				return ec.fieldContext_ChangeTableRecord_tableName(ctx, field)
			case "primaryKey":
				return ec.fieldContext_ChangeTableRecord_primaryKey(ctx, field)
			case "foreignKey":
				return ec.fieldContext_ChangeTableRecord_foreignKey(ctx, field)
			case "action":
				return ec.fieldContext_ChangeTableRecord_action(ctx, field)
			case "fields":
				return ec.fieldContext_ChangeTableRecord_fields(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ChangeTableRecord_modifiedDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ChangeTableRecord_modifiedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChangeTableRecord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchModelPlanChangesByDateRange_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchChangeTableByActor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchChangeTableByActor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SearchChangeTableByActor(rctx, fc.Args["actor"].(string), fc.Args["limit"].(int), fc.Args["offset"].(int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ChangeTableRecord); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.ChangeTableRecord`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ChangeTableRecord)
	fc.Result = res
	return ec.marshalNChangeTableRecord2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐChangeTableRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchChangeTableByActor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "guid":
				return ec.fieldContext_ChangeTableRecord_guid(ctx, field)
			case "tableID":
				return ec.fieldContext_ChangeTableRecord_tableID(ctx, field)
			case "tableName":
				return ec.fieldContext_ChangeTableRecord_tableName(ctx, field)
			case "primaryKey":
				return ec.fieldContext_ChangeTableRecord_primaryKey(ctx, field)
			case "foreignKey":
				return ec.fieldContext_ChangeTableRecord_foreignKey(ctx, field)
			case "action":
				return ec.fieldContext_ChangeTableRecord_action(ctx, field)
			case "fields":
				return ec.fieldContext_ChangeTableRecord_fields(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ChangeTableRecord_modifiedDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ChangeTableRecord_modifiedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChangeTableRecord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchChangeTableByActor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchChangeTableByModelStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchChangeTableByModelStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SearchChangeTableByModelStatus(rctx, fc.Args["modelStatus"].(models.ModelStatus), fc.Args["limit"].(int), fc.Args["offset"].(int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.ChangeTableRecord); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.ChangeTableRecord`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ChangeTableRecord)
	fc.Result = res
	return ec.marshalNChangeTableRecord2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐChangeTableRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchChangeTableByModelStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "guid":
				return ec.fieldContext_ChangeTableRecord_guid(ctx, field)
			case "tableID":
				return ec.fieldContext_ChangeTableRecord_tableID(ctx, field)
			case "tableName":
				return ec.fieldContext_ChangeTableRecord_tableName(ctx, field)
			case "primaryKey":
				return ec.fieldContext_ChangeTableRecord_primaryKey(ctx, field)
			case "foreignKey":
				return ec.fieldContext_ChangeTableRecord_foreignKey(ctx, field)
			case "action":
				return ec.fieldContext_ChangeTableRecord_action(ctx, field)
			case "fields":
				return ec.fieldContext_ChangeTableRecord_fields(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ChangeTableRecord_modifiedDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ChangeTableRecord_modifiedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChangeTableRecord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchChangeTableByModelStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchChangeTableDateHistogramConsolidatedAggregations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchChangeTableDateHistogramConsolidatedAggregations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SearchChangeTableDateHistogramConsolidatedAggregations(rctx, fc.Args["interval"].(string), fc.Args["limit"].(int), fc.Args["offset"].(int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"MINT_USER", "MINT_MAC"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAnyRole == nil {
				return nil, errors.New("directive hasAnyRole is not implemented")
			}
			return ec.directives.HasAnyRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.DateHistogramAggregationBucket); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/models.DateHistogramAggregationBucket`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.DateHistogramAggregationBucket)
	fc.Result = res
	return ec.marshalNDateHistogramAggregationBucket2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDateHistogramAggregationBucketᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchChangeTableDateHistogramConsolidatedAggregations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_DateHistogramAggregationBucket_key(ctx, field)
			case "docCount":
				return ec.fieldContext_DateHistogramAggregationBucket_docCount(ctx, field)
			case "maxModifiedDts":
				return ec.fieldContext_DateHistogramAggregationBucket_maxModifiedDts(ctx, field)
			case "minModifiedDts":
				return ec.fieldContext_DateHistogramAggregationBucket_minModifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DateHistogramAggregationBucket", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchChangeTableDateHistogramConsolidatedAggregations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_onTaskListSectionLocksChanged(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_onTaskListSectionLocksChanged(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().OnTaskListSectionLocksChanged(rctx, fc.Args["modelPlanID"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.TaskListSectionLockStatusChanged); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/cmsgov/mint-app/pkg/graph/model.TaskListSectionLockStatusChanged`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.TaskListSectionLockStatusChanged):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNTaskListSectionLockStatusChanged2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatusChanged(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_onTaskListSectionLocksChanged(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "changeType":
				return ec.fieldContext_TaskListSectionLockStatusChanged_changeType(ctx, field)
			case "lockStatus":
				return ec.fieldContext_TaskListSectionLockStatusChanged_lockStatus(ctx, field)
			case "actionType":
				return ec.fieldContext_TaskListSectionLockStatusChanged_actionType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskListSectionLockStatusChanged", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_onTaskListSectionLocksChanged_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_onLockTaskListSectionContext(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_onLockTaskListSectionContext(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().OnLockTaskListSectionContext(rctx, fc.Args["modelPlanID"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.TaskListSectionLockStatusChanged); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/cmsgov/mint-app/pkg/graph/model.TaskListSectionLockStatusChanged`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.TaskListSectionLockStatusChanged):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNTaskListSectionLockStatusChanged2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatusChanged(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_onLockTaskListSectionContext(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "changeType":
				return ec.fieldContext_TaskListSectionLockStatusChanged_changeType(ctx, field)
			case "lockStatus":
				return ec.fieldContext_TaskListSectionLockStatusChanged_lockStatus(ctx, field)
			case "actionType":
				return ec.fieldContext_TaskListSectionLockStatusChanged_actionType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskListSectionLockStatusChanged", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_onLockTaskListSectionContext_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _TaskListSectionLockStatus_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *model.TaskListSectionLockStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskListSectionLockStatus_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskListSectionLockStatus_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskListSectionLockStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskListSectionLockStatus_section(ctx context.Context, field graphql.CollectedField, obj *model.TaskListSectionLockStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskListSectionLockStatus_section(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Section, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TaskListSection)
	fc.Result = res
	return ec.marshalNTaskListSection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskListSection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskListSectionLockStatus_section(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskListSectionLockStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskListSection does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskListSectionLockStatus_lockedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *model.TaskListSectionLockStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskListSectionLockStatus_lockedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LockedByUserAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskListSectionLockStatus_lockedByUserAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskListSectionLockStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "isEUAID":
				return ec.fieldContext_UserAccount_isEUAID(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskListSectionLockStatus_isAssessment(ctx context.Context, field graphql.CollectedField, obj *model.TaskListSectionLockStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskListSectionLockStatus_isAssessment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAssessment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskListSectionLockStatus_isAssessment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskListSectionLockStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskListSectionLockStatusChanged_changeType(ctx context.Context, field graphql.CollectedField, obj *model.TaskListSectionLockStatusChanged) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskListSectionLockStatusChanged_changeType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ChangeType)
	fc.Result = res
	return ec.marshalNChangeType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐChangeType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskListSectionLockStatusChanged_changeType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskListSectionLockStatusChanged",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ChangeType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskListSectionLockStatusChanged_lockStatus(ctx context.Context, field graphql.CollectedField, obj *model.TaskListSectionLockStatusChanged) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskListSectionLockStatusChanged_lockStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LockStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TaskListSectionLockStatus)
	fc.Result = res
	return ec.marshalNTaskListSectionLockStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskListSectionLockStatusChanged_lockStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskListSectionLockStatusChanged",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modelPlanID":
				return ec.fieldContext_TaskListSectionLockStatus_modelPlanID(ctx, field)
			case "section":
				return ec.fieldContext_TaskListSectionLockStatus_section(ctx, field)
			case "lockedByUserAccount":
				return ec.fieldContext_TaskListSectionLockStatus_lockedByUserAccount(ctx, field)
			case "isAssessment":
				return ec.fieldContext_TaskListSectionLockStatus_isAssessment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskListSectionLockStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskListSectionLockStatusChanged_actionType(ctx context.Context, field graphql.CollectedField, obj *model.TaskListSectionLockStatusChanged) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskListSectionLockStatusChanged_actionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActionType)
	fc.Result = res
	return ec.marshalNActionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐActionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskListSectionLockStatusChanged_actionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskListSectionLockStatusChanged",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_id(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_username(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_isEUAID(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_isEUAID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEUAID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_isEUAID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_commonName(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_commonName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommonName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_commonName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_locale(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_locale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_locale(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_email(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_givenName(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_givenName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GivenName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_givenName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_familyName(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_familyName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FamilyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_familyName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_zoneInfo(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_zoneInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZoneInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_zoneInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_hasLoggedIn(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasLoggedIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_hasLoggedIn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_firstName(ctx context.Context, field graphql.CollectedField, obj *models.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_firstName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_lastName(ctx context.Context, field graphql.CollectedField, obj *models.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_lastName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_displayName(ctx context.Context, field graphql.CollectedField, obj *models.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_email(ctx context.Context, field graphql.CollectedField, obj *models.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_username(ctx context.Context, field graphql.CollectedField, obj *models.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateOperationalSolutionSubtaskInput(ctx context.Context, obj interface{}) (model.CreateOperationalSolutionSubtaskInput, error) {
	var it model.CreateOperationalSolutionSubtaskInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNOperationalSolutionSubtaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionSubtaskStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDiscussionReplyCreateInput(ctx context.Context, obj interface{}) (model.DiscussionReplyCreateInput, error) {
	var it model.DiscussionReplyCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["resolution"]; !present {
		asMap["resolution"] = false
	}

	fieldsInOrder := [...]string{"discussionID", "content", "resolution"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "discussionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discussionID"))
			it.DiscussionID, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "resolution":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resolution"))
			it.Resolution, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlanCollaboratorCreateInput(ctx context.Context, obj interface{}) (model.PlanCollaboratorCreateInput, error) {
	var it model.PlanCollaboratorCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"modelPlanID", "userName", "teamRole"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "modelPlanID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
			it.ModelPlanID, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "userName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userName"))
			it.UserName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamRole":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamRole"))
			it.TeamRole, err = ec.unmarshalNTeamRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTeamRole(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlanCrTdlCreateInput(ctx context.Context, obj interface{}) (model.PlanCrTdlCreateInput, error) {
	var it model.PlanCrTdlCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"modelPlanID", "idNumber", "dateInitiated", "title", "note"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "modelPlanID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
			it.ModelPlanID, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNumber"))
			it.IDNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateInitiated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateInitiated"))
			it.DateInitiated, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlanDiscussionCreateInput(ctx context.Context, obj interface{}) (model.PlanDiscussionCreateInput, error) {
	var it model.PlanDiscussionCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"modelPlanID", "content"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "modelPlanID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
			it.ModelPlanID, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlanDocumentInput(ctx context.Context, obj interface{}) (model.PlanDocumentInput, error) {
	var it model.PlanDocumentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"modelPlanID", "fileData", "documentType", "restricted", "otherTypeDescription", "optionalNotes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "modelPlanID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
			it.ModelPlanID, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileData":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileData"))
			it.FileData, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentType"))
			it.DocumentType, err = ec.unmarshalNDocumentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDocumentType(ctx, v)
			if err != nil {
				return it, err
			}
		case "restricted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("restricted"))
			it.Restricted, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "otherTypeDescription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherTypeDescription"))
			it.OtherTypeDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "optionalNotes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optionalNotes"))
			it.OptionalNotes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchFilter(ctx context.Context, obj interface{}) (model.SearchFilter, error) {
	var it model.SearchFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNSearchFilterType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSearchFilterType(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchRequest(ctx context.Context, obj interface{}) (models.SearchRequest, error) {
	var it models.SearchRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"query"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "query":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
			it.Query, err = ec.unmarshalNMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateOperationalSolutionSubtaskInput(ctx context.Context, obj interface{}) (model.UpdateOperationalSolutionSubtaskInput, error) {
	var it model.UpdateOperationalSolutionSubtaskInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "changes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "changes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
			it.Changes, err = ec.unmarshalNUpdateOperationalSolutionSubtaskChangesInput2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var auditChangeImplementors = []string{"AuditChange"}

func (ec *executionContext) _AuditChange(ctx context.Context, sel ast.SelectionSet, obj *models.AuditChange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, auditChangeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuditChange")
		case "id":

			out.Values[i] = ec._AuditChange_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "primaryKey":

			out.Values[i] = ec._AuditChange_primaryKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "foreignKey":

			out.Values[i] = ec._AuditChange_foreignKey(ctx, field, obj)

		case "tableName":

			out.Values[i] = ec._AuditChange_tableName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "action":

			out.Values[i] = ec._AuditChange_action(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fields":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuditChange_fields(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedBy":

			out.Values[i] = ec._AuditChange_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuditChange_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._AuditChange_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var changeTableRecordImplementors = []string{"ChangeTableRecord"}

func (ec *executionContext) _ChangeTableRecord(ctx context.Context, sel ast.SelectionSet, obj *models.ChangeTableRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, changeTableRecordImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChangeTableRecord")
		case "guid":

			out.Values[i] = ec._ChangeTableRecord_guid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tableID":

			out.Values[i] = ec._ChangeTableRecord_tableID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tableName":

			out.Values[i] = ec._ChangeTableRecord_tableName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "primaryKey":

			out.Values[i] = ec._ChangeTableRecord_primaryKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "foreignKey":

			out.Values[i] = ec._ChangeTableRecord_foreignKey(ctx, field, obj)

		case "action":

			out.Values[i] = ec._ChangeTableRecord_action(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fields":

			out.Values[i] = ec._ChangeTableRecord_fields(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modifiedDts":

			out.Values[i] = ec._ChangeTableRecord_modifiedDts(ctx, field, obj)

		case "modifiedBy":

			out.Values[i] = ec._ChangeTableRecord_modifiedBy(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var changedFieldsImplementors = []string{"ChangedFields"}

func (ec *executionContext) _ChangedFields(ctx context.Context, sel ast.SelectionSet, obj *models.ChangedFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, changedFieldsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChangedFields")
		case "changes":

			out.Values[i] = ec._ChangedFields_changes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var currentUserImplementors = []string{"CurrentUser"}

func (ec *executionContext) _CurrentUser(ctx context.Context, sel ast.SelectionSet, obj *model.CurrentUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, currentUserImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CurrentUser")
		case "launchDarkly":

			out.Values[i] = ec._CurrentUser_launchDarkly(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dateHistogramAggregationBucketImplementors = []string{"DateHistogramAggregationBucket"}

func (ec *executionContext) _DateHistogramAggregationBucket(ctx context.Context, sel ast.SelectionSet, obj *models.DateHistogramAggregationBucket) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dateHistogramAggregationBucketImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DateHistogramAggregationBucket")
		case "key":

			out.Values[i] = ec._DateHistogramAggregationBucket_key(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "docCount":

			out.Values[i] = ec._DateHistogramAggregationBucket_docCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maxModifiedDts":

			out.Values[i] = ec._DateHistogramAggregationBucket_maxModifiedDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "minModifiedDts":

			out.Values[i] = ec._DateHistogramAggregationBucket_minModifiedDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var discussionReplyImplementors = []string{"DiscussionReply"}

func (ec *executionContext) _DiscussionReply(ctx context.Context, sel ast.SelectionSet, obj *models.DiscussionReply) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, discussionReplyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DiscussionReply")
		case "id":

			out.Values[i] = ec._DiscussionReply_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "discussionID":

			out.Values[i] = ec._DiscussionReply_discussionID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "content":

			out.Values[i] = ec._DiscussionReply_content(ctx, field, obj)

		case "resolution":

			out.Values[i] = ec._DiscussionReply_resolution(ctx, field, obj)

		case "isAssessment":

			out.Values[i] = ec._DiscussionReply_isAssessment(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":

			out.Values[i] = ec._DiscussionReply_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DiscussionReply_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._DiscussionReply_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._DiscussionReply_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DiscussionReply_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._DiscussionReply_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var existingModelImplementors = []string{"ExistingModel"}

func (ec *executionContext) _ExistingModel(ctx context.Context, sel ast.SelectionSet, obj *models.ExistingModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, existingModelImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExistingModel")
		case "id":

			out.Values[i] = ec._ExistingModel_id(ctx, field, obj)

		case "modelName":

			out.Values[i] = ec._ExistingModel_modelName(ctx, field, obj)

		case "stage":

			out.Values[i] = ec._ExistingModel_stage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "numberOfParticipants":

			out.Values[i] = ec._ExistingModel_numberOfParticipants(ctx, field, obj)

		case "category":

			out.Values[i] = ec._ExistingModel_category(ctx, field, obj)

		case "authority":

			out.Values[i] = ec._ExistingModel_authority(ctx, field, obj)

		case "description":

			out.Values[i] = ec._ExistingModel_description(ctx, field, obj)

		case "numberOfBeneficiariesImpacted":

			out.Values[i] = ec._ExistingModel_numberOfBeneficiariesImpacted(ctx, field, obj)

		case "numberOfPhysiciansImpacted":

			out.Values[i] = ec._ExistingModel_numberOfPhysiciansImpacted(ctx, field, obj)

		case "dateBegan":

			out.Values[i] = ec._ExistingModel_dateBegan(ctx, field, obj)

		case "dateEnded":

			out.Values[i] = ec._ExistingModel_dateEnded(ctx, field, obj)

		case "states":

			out.Values[i] = ec._ExistingModel_states(ctx, field, obj)

		case "keywords":

			out.Values[i] = ec._ExistingModel_keywords(ctx, field, obj)

		case "url":

			out.Values[i] = ec._ExistingModel_url(ctx, field, obj)

		case "displayModelSummary":

			out.Values[i] = ec._ExistingModel_displayModelSummary(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._ExistingModel_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ExistingModel_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._ExistingModel_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._ExistingModel_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ExistingModel_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._ExistingModel_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var existingModelLinkImplementors = []string{"ExistingModelLink"}

func (ec *executionContext) _ExistingModelLink(ctx context.Context, sel ast.SelectionSet, obj *models.ExistingModelLink) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, existingModelLinkImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExistingModelLink")
		case "id":

			out.Values[i] = ec._ExistingModelLink_id(ctx, field, obj)

		case "modelPlanID":

			out.Values[i] = ec._ExistingModelLink_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "existingModelID":

			out.Values[i] = ec._ExistingModelLink_existingModelID(ctx, field, obj)

		case "existingModel":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ExistingModelLink_existingModel(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "currentModelPlanID":

			out.Values[i] = ec._ExistingModelLink_currentModelPlanID(ctx, field, obj)

		case "currentModelPlan":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ExistingModelLink_currentModelPlan(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdBy":

			out.Values[i] = ec._ExistingModelLink_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ExistingModelLink_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._ExistingModelLink_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._ExistingModelLink_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ExistingModelLink_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._ExistingModelLink_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fieldImplementors = []string{"Field"}

func (ec *executionContext) _Field(ctx context.Context, sel ast.SelectionSet, obj *models.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Field")
		case "name":

			out.Values[i] = ec._Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":

			out.Values[i] = ec._Field_value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fieldValueImplementors = []string{"FieldValue"}

func (ec *executionContext) _FieldValue(ctx context.Context, sel ast.SelectionSet, obj *models.FieldValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fieldValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FieldValue")
		case "new":

			out.Values[i] = ec._FieldValue_new(ctx, field, obj)

		case "old":

			out.Values[i] = ec._FieldValue_old(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var launchDarklySettingsImplementors = []string{"LaunchDarklySettings"}

func (ec *executionContext) _LaunchDarklySettings(ctx context.Context, sel ast.SelectionSet, obj *model.LaunchDarklySettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, launchDarklySettingsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LaunchDarklySettings")
		case "userKey":

			out.Values[i] = ec._LaunchDarklySettings_userKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "signedHash":

			out.Values[i] = ec._LaunchDarklySettings_signedHash(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var modelPlanImplementors = []string{"ModelPlan"}

func (ec *executionContext) _ModelPlan(ctx context.Context, sel ast.SelectionSet, obj *models.ModelPlan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modelPlanImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModelPlan")
		case "id":

			out.Values[i] = ec._ModelPlan_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelName":

			out.Values[i] = ec._ModelPlan_modelName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "archived":

			out.Values[i] = ec._ModelPlan_archived(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":

			out.Values[i] = ec._ModelPlan_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._ModelPlan_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._ModelPlan_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._ModelPlan_modifiedDts(ctx, field, obj)

		case "basics":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_basics(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "generalCharacteristics":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_generalCharacteristics(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "participantsAndProviders":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_participantsAndProviders(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "beneficiaries":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_beneficiaries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "opsEvalAndLearning":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_opsEvalAndLearning(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "collaborators":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_collaborators(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "documents":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_documents(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "discussions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_discussions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "payments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_payments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "status":

			out.Values[i] = ec._ModelPlan_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isFavorite":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_isFavorite(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "isCollaborator":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_isCollaborator(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "crTdls":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_crTdls(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "prepareForClearance":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_prepareForClearance(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "nameHistory":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_nameHistory(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "operationalNeeds":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_operationalNeeds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "existingModelLinks":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_existingModelLinks(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createModelPlan":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createModelPlan(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateModelPlan":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateModelPlan(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPlanCollaborator":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPlanCollaborator(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanCollaborator":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanCollaborator(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePlanCollaborator":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlanCollaborator(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanBasics":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanBasics(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanGeneralCharacteristics":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanGeneralCharacteristics(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanBeneficiaries":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanBeneficiaries(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanParticipantsAndProviders":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanParticipantsAndProviders(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanOpsEvalAndLearning":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanOpsEvalAndLearning(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "uploadNewPlanDocument":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_uploadNewPlanDocument(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePlanDocument":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlanDocument(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPlanDiscussion":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPlanDiscussion(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanDiscussion":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanDiscussion(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePlanDiscussion":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlanDiscussion(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createDiscussionReply":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createDiscussionReply(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDiscussionReply":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDiscussionReply(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteDiscussionReply":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDiscussionReply(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lockTaskListSection":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_lockTaskListSection(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unlockTaskListSection":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unlockTaskListSection(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unlockAllTaskListSections":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unlockAllTaskListSections(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanPayments":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanPayments(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "agreeToNDA":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_agreeToNDA(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addPlanFavorite":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addPlanFavorite(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePlanFavorite":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlanFavorite(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPlanCrTdl":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPlanCrTdl(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanCrTdl":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanCrTdl(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePlanCrTdl":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlanCrTdl(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addOrUpdateCustomOperationalNeed":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addOrUpdateCustomOperationalNeed(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateCustomOperationalNeedByID":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCustomOperationalNeedByID(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createOperationalSolution":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createOperationalSolution(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOperationalSolution":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateOperationalSolution(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPlanDocumentSolutionLinks":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPlanDocumentSolutionLinks(ctx, field)
			})

		case "removePlanDocumentSolutionLinks":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removePlanDocumentSolutionLinks(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createOperationalSolutionSubtasks":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createOperationalSolutionSubtasks(ctx, field)
			})

		case "updateOperationalSolutionSubtasks":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateOperationalSolutionSubtasks(ctx, field)
			})

		case "deleteOperationalSolutionSubtask":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteOperationalSolutionSubtask(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateExistingModelLinks":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateExistingModelLinks(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nDAInfoImplementors = []string{"NDAInfo"}

func (ec *executionContext) _NDAInfo(ctx context.Context, sel ast.SelectionSet, obj *model.NDAInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nDAInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NDAInfo")
		case "agreed":

			out.Values[i] = ec._NDAInfo_agreed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "agreedDts":

			out.Values[i] = ec._NDAInfo_agreedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operationalNeedImplementors = []string{"OperationalNeed"}

func (ec *executionContext) _OperationalNeed(ctx context.Context, sel ast.SelectionSet, obj *models.OperationalNeed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operationalNeedImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperationalNeed")
		case "id":

			out.Values[i] = ec._OperationalNeed_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._OperationalNeed_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "needed":

			out.Values[i] = ec._OperationalNeed_needed(ctx, field, obj)

		case "solutions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OperationalNeed_solutions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "key":

			out.Values[i] = ec._OperationalNeed_key(ctx, field, obj)

		case "name":

			out.Values[i] = ec._OperationalNeed_name(ctx, field, obj)

		case "nameOther":

			out.Values[i] = ec._OperationalNeed_nameOther(ctx, field, obj)

		case "section":

			out.Values[i] = ec._OperationalNeed_section(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._OperationalNeed_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OperationalNeed_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._OperationalNeed_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._OperationalNeed_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OperationalNeed_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._OperationalNeed_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operationalSolutionImplementors = []string{"OperationalSolution"}

func (ec *executionContext) _OperationalSolution(ctx context.Context, sel ast.SelectionSet, obj *models.OperationalSolution) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operationalSolutionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperationalSolution")
		case "id":

			out.Values[i] = ec._OperationalSolution_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "operationalNeedID":

			out.Values[i] = ec._OperationalSolution_operationalNeedID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "solutionType":

			out.Values[i] = ec._OperationalSolution_solutionType(ctx, field, obj)

		case "needed":

			out.Values[i] = ec._OperationalSolution_needed(ctx, field, obj)

		case "name":

			out.Values[i] = ec._OperationalSolution_name(ctx, field, obj)

		case "key":

			out.Values[i] = ec._OperationalSolution_key(ctx, field, obj)

		case "nameOther":

			out.Values[i] = ec._OperationalSolution_nameOther(ctx, field, obj)

		case "pocName":

			out.Values[i] = ec._OperationalSolution_pocName(ctx, field, obj)

		case "pocEmail":

			out.Values[i] = ec._OperationalSolution_pocEmail(ctx, field, obj)

		case "mustStartDts":

			out.Values[i] = ec._OperationalSolution_mustStartDts(ctx, field, obj)

		case "mustFinishDts":

			out.Values[i] = ec._OperationalSolution_mustFinishDts(ctx, field, obj)

		case "isOther":

			out.Values[i] = ec._OperationalSolution_isOther(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isCommonSolution":

			out.Values[i] = ec._OperationalSolution_isCommonSolution(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "otherHeader":

			out.Values[i] = ec._OperationalSolution_otherHeader(ctx, field, obj)

		case "status":

			out.Values[i] = ec._OperationalSolution_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "documents":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OperationalSolution_documents(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "operationalSolutionSubtasks":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OperationalSolution_operationalSolutionSubtasks(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdBy":

			out.Values[i] = ec._OperationalSolution_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OperationalSolution_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._OperationalSolution_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._OperationalSolution_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OperationalSolution_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._OperationalSolution_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var operationalSolutionSubtaskImplementors = []string{"OperationalSolutionSubtask"}

func (ec *executionContext) _OperationalSolutionSubtask(ctx context.Context, sel ast.SelectionSet, obj *models.OperationalSolutionSubtask) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, operationalSolutionSubtaskImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OperationalSolutionSubtask")
		case "id":

			out.Values[i] = ec._OperationalSolutionSubtask_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "solutionID":

			out.Values[i] = ec._OperationalSolutionSubtask_solutionID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._OperationalSolutionSubtask_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "status":

			out.Values[i] = ec._OperationalSolutionSubtask_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":

			out.Values[i] = ec._OperationalSolutionSubtask_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OperationalSolutionSubtask_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._OperationalSolutionSubtask_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._OperationalSolutionSubtask_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OperationalSolutionSubtask_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._OperationalSolutionSubtask_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planBasicsImplementors = []string{"PlanBasics"}

func (ec *executionContext) _PlanBasics(ctx context.Context, sel ast.SelectionSet, obj *models.PlanBasics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planBasicsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanBasics")
		case "id":

			out.Values[i] = ec._PlanBasics_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanBasics_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelCategory":

			out.Values[i] = ec._PlanBasics_modelCategory(ctx, field, obj)

		case "cmsCenters":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBasics_cmsCenters(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "cmsOther":

			out.Values[i] = ec._PlanBasics_cmsOther(ctx, field, obj)

		case "cmmiGroups":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBasics_cmmiGroups(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modelType":

			out.Values[i] = ec._PlanBasics_modelType(ctx, field, obj)

		case "problem":

			out.Values[i] = ec._PlanBasics_problem(ctx, field, obj)

		case "goal":

			out.Values[i] = ec._PlanBasics_goal(ctx, field, obj)

		case "testInterventions":

			out.Values[i] = ec._PlanBasics_testInterventions(ctx, field, obj)

		case "note":

			out.Values[i] = ec._PlanBasics_note(ctx, field, obj)

		case "completeICIP":

			out.Values[i] = ec._PlanBasics_completeICIP(ctx, field, obj)

		case "clearanceStarts":

			out.Values[i] = ec._PlanBasics_clearanceStarts(ctx, field, obj)

		case "clearanceEnds":

			out.Values[i] = ec._PlanBasics_clearanceEnds(ctx, field, obj)

		case "announced":

			out.Values[i] = ec._PlanBasics_announced(ctx, field, obj)

		case "applicationsStart":

			out.Values[i] = ec._PlanBasics_applicationsStart(ctx, field, obj)

		case "applicationsEnd":

			out.Values[i] = ec._PlanBasics_applicationsEnd(ctx, field, obj)

		case "performancePeriodStarts":

			out.Values[i] = ec._PlanBasics_performancePeriodStarts(ctx, field, obj)

		case "performancePeriodEnds":

			out.Values[i] = ec._PlanBasics_performancePeriodEnds(ctx, field, obj)

		case "wrapUpEnds":

			out.Values[i] = ec._PlanBasics_wrapUpEnds(ctx, field, obj)

		case "highLevelNote":

			out.Values[i] = ec._PlanBasics_highLevelNote(ctx, field, obj)

		case "phasedIn":

			out.Values[i] = ec._PlanBasics_phasedIn(ctx, field, obj)

		case "phasedInNote":

			out.Values[i] = ec._PlanBasics_phasedInNote(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanBasics_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBasics_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._PlanBasics_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanBasics_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBasics_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._PlanBasics_modifiedDts(ctx, field, obj)

		case "readyForReviewBy":

			out.Values[i] = ec._PlanBasics_readyForReviewBy(ctx, field, obj)

		case "readyForReviewByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBasics_readyForReviewByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "readyForReviewDts":

			out.Values[i] = ec._PlanBasics_readyForReviewDts(ctx, field, obj)

		case "readyForClearanceBy":

			out.Values[i] = ec._PlanBasics_readyForClearanceBy(ctx, field, obj)

		case "readyForClearanceByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBasics_readyForClearanceByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "readyForClearanceDts":

			out.Values[i] = ec._PlanBasics_readyForClearanceDts(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanBasics_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planBeneficiariesImplementors = []string{"PlanBeneficiaries"}

func (ec *executionContext) _PlanBeneficiaries(ctx context.Context, sel ast.SelectionSet, obj *models.PlanBeneficiaries) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planBeneficiariesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanBeneficiaries")
		case "id":

			out.Values[i] = ec._PlanBeneficiaries_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanBeneficiaries_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "beneficiaries":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBeneficiaries_beneficiaries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "beneficiariesOther":

			out.Values[i] = ec._PlanBeneficiaries_beneficiariesOther(ctx, field, obj)

		case "beneficiariesNote":

			out.Values[i] = ec._PlanBeneficiaries_beneficiariesNote(ctx, field, obj)

		case "treatDualElligibleDifferent":

			out.Values[i] = ec._PlanBeneficiaries_treatDualElligibleDifferent(ctx, field, obj)

		case "treatDualElligibleDifferentHow":

			out.Values[i] = ec._PlanBeneficiaries_treatDualElligibleDifferentHow(ctx, field, obj)

		case "treatDualElligibleDifferentNote":

			out.Values[i] = ec._PlanBeneficiaries_treatDualElligibleDifferentNote(ctx, field, obj)

		case "excludeCertainCharacteristics":

			out.Values[i] = ec._PlanBeneficiaries_excludeCertainCharacteristics(ctx, field, obj)

		case "excludeCertainCharacteristicsCriteria":

			out.Values[i] = ec._PlanBeneficiaries_excludeCertainCharacteristicsCriteria(ctx, field, obj)

		case "excludeCertainCharacteristicsNote":

			out.Values[i] = ec._PlanBeneficiaries_excludeCertainCharacteristicsNote(ctx, field, obj)

		case "numberPeopleImpacted":

			out.Values[i] = ec._PlanBeneficiaries_numberPeopleImpacted(ctx, field, obj)

		case "estimateConfidence":

			out.Values[i] = ec._PlanBeneficiaries_estimateConfidence(ctx, field, obj)

		case "confidenceNote":

			out.Values[i] = ec._PlanBeneficiaries_confidenceNote(ctx, field, obj)

		case "beneficiarySelectionMethod":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBeneficiaries_beneficiarySelectionMethod(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "beneficiarySelectionOther":

			out.Values[i] = ec._PlanBeneficiaries_beneficiarySelectionOther(ctx, field, obj)

		case "beneficiarySelectionNote":

			out.Values[i] = ec._PlanBeneficiaries_beneficiarySelectionNote(ctx, field, obj)

		case "beneficiarySelectionFrequency":

			out.Values[i] = ec._PlanBeneficiaries_beneficiarySelectionFrequency(ctx, field, obj)

		case "beneficiarySelectionFrequencyOther":

			out.Values[i] = ec._PlanBeneficiaries_beneficiarySelectionFrequencyOther(ctx, field, obj)

		case "beneficiarySelectionFrequencyNote":

			out.Values[i] = ec._PlanBeneficiaries_beneficiarySelectionFrequencyNote(ctx, field, obj)

		case "beneficiaryOverlap":

			out.Values[i] = ec._PlanBeneficiaries_beneficiaryOverlap(ctx, field, obj)

		case "beneficiaryOverlapNote":

			out.Values[i] = ec._PlanBeneficiaries_beneficiaryOverlapNote(ctx, field, obj)

		case "precedenceRules":

			out.Values[i] = ec._PlanBeneficiaries_precedenceRules(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanBeneficiaries_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBeneficiaries_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._PlanBeneficiaries_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanBeneficiaries_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBeneficiaries_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._PlanBeneficiaries_modifiedDts(ctx, field, obj)

		case "readyForReviewBy":

			out.Values[i] = ec._PlanBeneficiaries_readyForReviewBy(ctx, field, obj)

		case "readyForReviewByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBeneficiaries_readyForReviewByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "readyForReviewDts":

			out.Values[i] = ec._PlanBeneficiaries_readyForReviewDts(ctx, field, obj)

		case "readyForClearanceBy":

			out.Values[i] = ec._PlanBeneficiaries_readyForClearanceBy(ctx, field, obj)

		case "readyForClearanceByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBeneficiaries_readyForClearanceByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "readyForClearanceDts":

			out.Values[i] = ec._PlanBeneficiaries_readyForClearanceDts(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanBeneficiaries_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planCollaboratorImplementors = []string{"PlanCollaborator"}

func (ec *executionContext) _PlanCollaborator(ctx context.Context, sel ast.SelectionSet, obj *models.PlanCollaborator) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planCollaboratorImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanCollaborator")
		case "id":

			out.Values[i] = ec._PlanCollaborator_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanCollaborator_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "userID":

			out.Values[i] = ec._PlanCollaborator_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "userAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanCollaborator_userAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "teamRole":

			out.Values[i] = ec._PlanCollaborator_teamRole(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":

			out.Values[i] = ec._PlanCollaborator_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanCollaborator_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._PlanCollaborator_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanCollaborator_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanCollaborator_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._PlanCollaborator_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planCrTdlImplementors = []string{"PlanCrTdl"}

func (ec *executionContext) _PlanCrTdl(ctx context.Context, sel ast.SelectionSet, obj *models.PlanCrTdl) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planCrTdlImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanCrTdl")
		case "id":

			out.Values[i] = ec._PlanCrTdl_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanCrTdl_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "idNumber":

			out.Values[i] = ec._PlanCrTdl_idNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "dateInitiated":

			out.Values[i] = ec._PlanCrTdl_dateInitiated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "title":

			out.Values[i] = ec._PlanCrTdl_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "note":

			out.Values[i] = ec._PlanCrTdl_note(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanCrTdl_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanCrTdl_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._PlanCrTdl_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanCrTdl_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanCrTdl_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._PlanCrTdl_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planDiscussionImplementors = []string{"PlanDiscussion"}

func (ec *executionContext) _PlanDiscussion(ctx context.Context, sel ast.SelectionSet, obj *models.PlanDiscussion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planDiscussionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanDiscussion")
		case "id":

			out.Values[i] = ec._PlanDiscussion_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanDiscussion_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "content":

			out.Values[i] = ec._PlanDiscussion_content(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanDiscussion_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "replies":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDiscussion_replies(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "isAssessment":

			out.Values[i] = ec._PlanDiscussion_isAssessment(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":

			out.Values[i] = ec._PlanDiscussion_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDiscussion_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._PlanDiscussion_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanDiscussion_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDiscussion_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._PlanDiscussion_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planDocumentImplementors = []string{"PlanDocument"}

func (ec *executionContext) _PlanDocument(ctx context.Context, sel ast.SelectionSet, obj *models.PlanDocument) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planDocumentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanDocument")
		case "id":

			out.Values[i] = ec._PlanDocument_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanDocument_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fileType":

			out.Values[i] = ec._PlanDocument_fileType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "bucket":

			out.Values[i] = ec._PlanDocument_bucket(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fileKey":

			out.Values[i] = ec._PlanDocument_fileKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "virusScanned":

			out.Values[i] = ec._PlanDocument_virusScanned(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "virusClean":

			out.Values[i] = ec._PlanDocument_virusClean(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "restricted":

			out.Values[i] = ec._PlanDocument_restricted(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fileName":

			out.Values[i] = ec._PlanDocument_fileName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fileSize":

			out.Values[i] = ec._PlanDocument_fileSize(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "documentType":

			out.Values[i] = ec._PlanDocument_documentType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "otherType":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDocument_otherType(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "optionalNotes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDocument_optionalNotes(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "downloadUrl":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDocument_downloadUrl(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "deletedAt":

			out.Values[i] = ec._PlanDocument_deletedAt(ctx, field, obj)

		case "numLinkedSolutions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDocument_numLinkedSolutions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdBy":

			out.Values[i] = ec._PlanDocument_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDocument_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._PlanDocument_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanDocument_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDocument_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._PlanDocument_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planDocumentSolutionLinkImplementors = []string{"PlanDocumentSolutionLink"}

func (ec *executionContext) _PlanDocumentSolutionLink(ctx context.Context, sel ast.SelectionSet, obj *models.PlanDocumentSolutionLink) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planDocumentSolutionLinkImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanDocumentSolutionLink")
		case "id":

			out.Values[i] = ec._PlanDocumentSolutionLink_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "solutionID":

			out.Values[i] = ec._PlanDocumentSolutionLink_solutionID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "documentID":

			out.Values[i] = ec._PlanDocumentSolutionLink_documentID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":

			out.Values[i] = ec._PlanDocumentSolutionLink_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDocumentSolutionLink_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._PlanDocumentSolutionLink_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanDocumentSolutionLink_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDocumentSolutionLink_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._PlanDocumentSolutionLink_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planFavoriteImplementors = []string{"PlanFavorite"}

func (ec *executionContext) _PlanFavorite(ctx context.Context, sel ast.SelectionSet, obj *models.PlanFavorite) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planFavoriteImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanFavorite")
		case "id":

			out.Values[i] = ec._PlanFavorite_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanFavorite_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "userID":

			out.Values[i] = ec._PlanFavorite_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "userAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanFavorite_userAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdBy":

			out.Values[i] = ec._PlanFavorite_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanFavorite_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._PlanFavorite_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanFavorite_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanFavorite_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._PlanFavorite_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planGeneralCharacteristicsImplementors = []string{"PlanGeneralCharacteristics"}

func (ec *executionContext) _PlanGeneralCharacteristics(ctx context.Context, sel ast.SelectionSet, obj *models.PlanGeneralCharacteristics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planGeneralCharacteristicsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanGeneralCharacteristics")
		case "id":

			out.Values[i] = ec._PlanGeneralCharacteristics_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanGeneralCharacteristics_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isNewModel":

			out.Values[i] = ec._PlanGeneralCharacteristics_isNewModel(ctx, field, obj)

		case "existingModel":

			out.Values[i] = ec._PlanGeneralCharacteristics_existingModel(ctx, field, obj)

		case "resemblesExistingModel":

			out.Values[i] = ec._PlanGeneralCharacteristics_resemblesExistingModel(ctx, field, obj)

		case "resemblesExistingModelHow":

			out.Values[i] = ec._PlanGeneralCharacteristics_resemblesExistingModelHow(ctx, field, obj)

		case "resemblesExistingModelNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_resemblesExistingModelNote(ctx, field, obj)

		case "hasComponentsOrTracks":

			out.Values[i] = ec._PlanGeneralCharacteristics_hasComponentsOrTracks(ctx, field, obj)

		case "hasComponentsOrTracksDiffer":

			out.Values[i] = ec._PlanGeneralCharacteristics_hasComponentsOrTracksDiffer(ctx, field, obj)

		case "hasComponentsOrTracksNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_hasComponentsOrTracksNote(ctx, field, obj)

		case "alternativePaymentModelTypes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_alternativePaymentModelTypes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "alternativePaymentModelNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_alternativePaymentModelNote(ctx, field, obj)

		case "keyCharacteristics":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_keyCharacteristics(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "keyCharacteristicsOther":

			out.Values[i] = ec._PlanGeneralCharacteristics_keyCharacteristicsOther(ctx, field, obj)

		case "keyCharacteristicsNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_keyCharacteristicsNote(ctx, field, obj)

		case "collectPlanBids":

			out.Values[i] = ec._PlanGeneralCharacteristics_collectPlanBids(ctx, field, obj)

		case "collectPlanBidsNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_collectPlanBidsNote(ctx, field, obj)

		case "managePartCDEnrollment":

			out.Values[i] = ec._PlanGeneralCharacteristics_managePartCDEnrollment(ctx, field, obj)

		case "managePartCDEnrollmentNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_managePartCDEnrollmentNote(ctx, field, obj)

		case "planContractUpdated":

			out.Values[i] = ec._PlanGeneralCharacteristics_planContractUpdated(ctx, field, obj)

		case "planContractUpdatedNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_planContractUpdatedNote(ctx, field, obj)

		case "careCoordinationInvolved":

			out.Values[i] = ec._PlanGeneralCharacteristics_careCoordinationInvolved(ctx, field, obj)

		case "careCoordinationInvolvedDescription":

			out.Values[i] = ec._PlanGeneralCharacteristics_careCoordinationInvolvedDescription(ctx, field, obj)

		case "careCoordinationInvolvedNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_careCoordinationInvolvedNote(ctx, field, obj)

		case "additionalServicesInvolved":

			out.Values[i] = ec._PlanGeneralCharacteristics_additionalServicesInvolved(ctx, field, obj)

		case "additionalServicesInvolvedDescription":

			out.Values[i] = ec._PlanGeneralCharacteristics_additionalServicesInvolvedDescription(ctx, field, obj)

		case "additionalServicesInvolvedNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_additionalServicesInvolvedNote(ctx, field, obj)

		case "communityPartnersInvolved":

			out.Values[i] = ec._PlanGeneralCharacteristics_communityPartnersInvolved(ctx, field, obj)

		case "communityPartnersInvolvedDescription":

			out.Values[i] = ec._PlanGeneralCharacteristics_communityPartnersInvolvedDescription(ctx, field, obj)

		case "communityPartnersInvolvedNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_communityPartnersInvolvedNote(ctx, field, obj)

		case "geographiesTargeted":

			out.Values[i] = ec._PlanGeneralCharacteristics_geographiesTargeted(ctx, field, obj)

		case "geographiesTargetedTypes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_geographiesTargetedTypes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "geographiesTargetedTypesOther":

			out.Values[i] = ec._PlanGeneralCharacteristics_geographiesTargetedTypesOther(ctx, field, obj)

		case "geographiesTargetedAppliedTo":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_geographiesTargetedAppliedTo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "geographiesTargetedAppliedToOther":

			out.Values[i] = ec._PlanGeneralCharacteristics_geographiesTargetedAppliedToOther(ctx, field, obj)

		case "geographiesTargetedNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_geographiesTargetedNote(ctx, field, obj)

		case "participationOptions":

			out.Values[i] = ec._PlanGeneralCharacteristics_participationOptions(ctx, field, obj)

		case "participationOptionsNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_participationOptionsNote(ctx, field, obj)

		case "agreementTypes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_agreementTypes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "agreementTypesOther":

			out.Values[i] = ec._PlanGeneralCharacteristics_agreementTypesOther(ctx, field, obj)

		case "multiplePatricipationAgreementsNeeded":

			out.Values[i] = ec._PlanGeneralCharacteristics_multiplePatricipationAgreementsNeeded(ctx, field, obj)

		case "multiplePatricipationAgreementsNeededNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_multiplePatricipationAgreementsNeededNote(ctx, field, obj)

		case "rulemakingRequired":

			out.Values[i] = ec._PlanGeneralCharacteristics_rulemakingRequired(ctx, field, obj)

		case "rulemakingRequiredDescription":

			out.Values[i] = ec._PlanGeneralCharacteristics_rulemakingRequiredDescription(ctx, field, obj)

		case "rulemakingRequiredNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_rulemakingRequiredNote(ctx, field, obj)

		case "authorityAllowances":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_authorityAllowances(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "authorityAllowancesOther":

			out.Values[i] = ec._PlanGeneralCharacteristics_authorityAllowancesOther(ctx, field, obj)

		case "authorityAllowancesNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_authorityAllowancesNote(ctx, field, obj)

		case "waiversRequired":

			out.Values[i] = ec._PlanGeneralCharacteristics_waiversRequired(ctx, field, obj)

		case "waiversRequiredTypes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_waiversRequiredTypes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "waiversRequiredNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_waiversRequiredNote(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanGeneralCharacteristics_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._PlanGeneralCharacteristics_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanGeneralCharacteristics_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._PlanGeneralCharacteristics_modifiedDts(ctx, field, obj)

		case "readyForReviewBy":

			out.Values[i] = ec._PlanGeneralCharacteristics_readyForReviewBy(ctx, field, obj)

		case "readyForReviewByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_readyForReviewByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "readyForReviewDts":

			out.Values[i] = ec._PlanGeneralCharacteristics_readyForReviewDts(ctx, field, obj)

		case "readyForClearanceBy":

			out.Values[i] = ec._PlanGeneralCharacteristics_readyForClearanceBy(ctx, field, obj)

		case "readyForClearanceByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_readyForClearanceByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "readyForClearanceDts":

			out.Values[i] = ec._PlanGeneralCharacteristics_readyForClearanceDts(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanGeneralCharacteristics_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planOpsEvalAndLearningImplementors = []string{"PlanOpsEvalAndLearning"}

func (ec *executionContext) _PlanOpsEvalAndLearning(ctx context.Context, sel ast.SelectionSet, obj *models.PlanOpsEvalAndLearning) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planOpsEvalAndLearningImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanOpsEvalAndLearning")
		case "id":

			out.Values[i] = ec._PlanOpsEvalAndLearning_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanOpsEvalAndLearning_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "agencyOrStateHelp":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_agencyOrStateHelp(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "agencyOrStateHelpOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_agencyOrStateHelpOther(ctx, field, obj)

		case "agencyOrStateHelpNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_agencyOrStateHelpNote(ctx, field, obj)

		case "stakeholders":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_stakeholders(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "stakeholdersOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_stakeholdersOther(ctx, field, obj)

		case "stakeholdersNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_stakeholdersNote(ctx, field, obj)

		case "helpdeskUse":

			out.Values[i] = ec._PlanOpsEvalAndLearning_helpdeskUse(ctx, field, obj)

		case "helpdeskUseNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_helpdeskUseNote(ctx, field, obj)

		case "contractorSupport":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_contractorSupport(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "contractorSupportOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_contractorSupportOther(ctx, field, obj)

		case "contractorSupportHow":

			out.Values[i] = ec._PlanOpsEvalAndLearning_contractorSupportHow(ctx, field, obj)

		case "contractorSupportNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_contractorSupportNote(ctx, field, obj)

		case "iddocSupport":

			out.Values[i] = ec._PlanOpsEvalAndLearning_iddocSupport(ctx, field, obj)

		case "iddocSupportNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_iddocSupportNote(ctx, field, obj)

		case "technicalContactsIdentified":

			out.Values[i] = ec._PlanOpsEvalAndLearning_technicalContactsIdentified(ctx, field, obj)

		case "technicalContactsIdentifiedDetail":

			out.Values[i] = ec._PlanOpsEvalAndLearning_technicalContactsIdentifiedDetail(ctx, field, obj)

		case "technicalContactsIdentifiedNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_technicalContactsIdentifiedNote(ctx, field, obj)

		case "captureParticipantInfo":

			out.Values[i] = ec._PlanOpsEvalAndLearning_captureParticipantInfo(ctx, field, obj)

		case "captureParticipantInfoNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_captureParticipantInfoNote(ctx, field, obj)

		case "icdOwner":

			out.Values[i] = ec._PlanOpsEvalAndLearning_icdOwner(ctx, field, obj)

		case "draftIcdDueDate":

			out.Values[i] = ec._PlanOpsEvalAndLearning_draftIcdDueDate(ctx, field, obj)

		case "icdNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_icdNote(ctx, field, obj)

		case "uatNeeds":

			out.Values[i] = ec._PlanOpsEvalAndLearning_uatNeeds(ctx, field, obj)

		case "stcNeeds":

			out.Values[i] = ec._PlanOpsEvalAndLearning_stcNeeds(ctx, field, obj)

		case "testingTimelines":

			out.Values[i] = ec._PlanOpsEvalAndLearning_testingTimelines(ctx, field, obj)

		case "testingNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_testingNote(ctx, field, obj)

		case "dataMonitoringFileTypes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_dataMonitoringFileTypes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "dataMonitoringFileOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataMonitoringFileOther(ctx, field, obj)

		case "dataResponseType":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataResponseType(ctx, field, obj)

		case "dataResponseFileFrequency":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataResponseFileFrequency(ctx, field, obj)

		case "dataFullTimeOrIncremental":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataFullTimeOrIncremental(ctx, field, obj)

		case "eftSetUp":

			out.Values[i] = ec._PlanOpsEvalAndLearning_eftSetUp(ctx, field, obj)

		case "unsolicitedAdjustmentsIncluded":

			out.Values[i] = ec._PlanOpsEvalAndLearning_unsolicitedAdjustmentsIncluded(ctx, field, obj)

		case "dataFlowDiagramsNeeded":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataFlowDiagramsNeeded(ctx, field, obj)

		case "produceBenefitEnhancementFiles":

			out.Values[i] = ec._PlanOpsEvalAndLearning_produceBenefitEnhancementFiles(ctx, field, obj)

		case "fileNamingConventions":

			out.Values[i] = ec._PlanOpsEvalAndLearning_fileNamingConventions(ctx, field, obj)

		case "dataMonitoringNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataMonitoringNote(ctx, field, obj)

		case "benchmarkForPerformance":

			out.Values[i] = ec._PlanOpsEvalAndLearning_benchmarkForPerformance(ctx, field, obj)

		case "benchmarkForPerformanceNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_benchmarkForPerformanceNote(ctx, field, obj)

		case "computePerformanceScores":

			out.Values[i] = ec._PlanOpsEvalAndLearning_computePerformanceScores(ctx, field, obj)

		case "computePerformanceScoresNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_computePerformanceScoresNote(ctx, field, obj)

		case "riskAdjustPerformance":

			out.Values[i] = ec._PlanOpsEvalAndLearning_riskAdjustPerformance(ctx, field, obj)

		case "riskAdjustFeedback":

			out.Values[i] = ec._PlanOpsEvalAndLearning_riskAdjustFeedback(ctx, field, obj)

		case "riskAdjustPayments":

			out.Values[i] = ec._PlanOpsEvalAndLearning_riskAdjustPayments(ctx, field, obj)

		case "riskAdjustOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_riskAdjustOther(ctx, field, obj)

		case "riskAdjustNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_riskAdjustNote(ctx, field, obj)

		case "appealPerformance":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appealPerformance(ctx, field, obj)

		case "appealFeedback":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appealFeedback(ctx, field, obj)

		case "appealPayments":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appealPayments(ctx, field, obj)

		case "appealOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appealOther(ctx, field, obj)

		case "appealNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appealNote(ctx, field, obj)

		case "evaluationApproaches":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_evaluationApproaches(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "evaluationApproachOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_evaluationApproachOther(ctx, field, obj)

		case "evalutaionApproachNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_evalutaionApproachNote(ctx, field, obj)

		case "ccmInvolvment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_ccmInvolvment(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ccmInvolvmentOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_ccmInvolvmentOther(ctx, field, obj)

		case "ccmInvolvmentNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_ccmInvolvmentNote(ctx, field, obj)

		case "dataNeededForMonitoring":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_dataNeededForMonitoring(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "dataNeededForMonitoringOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataNeededForMonitoringOther(ctx, field, obj)

		case "dataNeededForMonitoringNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataNeededForMonitoringNote(ctx, field, obj)

		case "dataToSendParticicipants":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_dataToSendParticicipants(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "dataToSendParticicipantsOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataToSendParticicipantsOther(ctx, field, obj)

		case "dataToSendParticicipantsNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataToSendParticicipantsNote(ctx, field, obj)

		case "shareCclfData":

			out.Values[i] = ec._PlanOpsEvalAndLearning_shareCclfData(ctx, field, obj)

		case "shareCclfDataNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_shareCclfDataNote(ctx, field, obj)

		case "sendFilesBetweenCcw":

			out.Values[i] = ec._PlanOpsEvalAndLearning_sendFilesBetweenCcw(ctx, field, obj)

		case "sendFilesBetweenCcwNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_sendFilesBetweenCcwNote(ctx, field, obj)

		case "appToSendFilesToKnown":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appToSendFilesToKnown(ctx, field, obj)

		case "appToSendFilesToWhich":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appToSendFilesToWhich(ctx, field, obj)

		case "appToSendFilesToNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appToSendFilesToNote(ctx, field, obj)

		case "useCcwForFileDistribiutionToParticipants":

			out.Values[i] = ec._PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipants(ctx, field, obj)

		case "useCcwForFileDistribiutionToParticipantsNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipantsNote(ctx, field, obj)

		case "developNewQualityMeasures":

			out.Values[i] = ec._PlanOpsEvalAndLearning_developNewQualityMeasures(ctx, field, obj)

		case "developNewQualityMeasuresNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_developNewQualityMeasuresNote(ctx, field, obj)

		case "qualityPerformanceImpactsPayment":

			out.Values[i] = ec._PlanOpsEvalAndLearning_qualityPerformanceImpactsPayment(ctx, field, obj)

		case "qualityPerformanceImpactsPaymentNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_qualityPerformanceImpactsPaymentNote(ctx, field, obj)

		case "dataSharingStarts":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataSharingStarts(ctx, field, obj)

		case "dataSharingStartsOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataSharingStartsOther(ctx, field, obj)

		case "dataSharingFrequency":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_dataSharingFrequency(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "dataSharingFrequencyOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataSharingFrequencyOther(ctx, field, obj)

		case "dataSharingStartsNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataSharingStartsNote(ctx, field, obj)

		case "dataCollectionStarts":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataCollectionStarts(ctx, field, obj)

		case "dataCollectionStartsOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataCollectionStartsOther(ctx, field, obj)

		case "dataCollectionFrequency":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_dataCollectionFrequency(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "dataCollectionFrequencyOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataCollectionFrequencyOther(ctx, field, obj)

		case "dataCollectionFrequencyNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataCollectionFrequencyNote(ctx, field, obj)

		case "qualityReportingStarts":

			out.Values[i] = ec._PlanOpsEvalAndLearning_qualityReportingStarts(ctx, field, obj)

		case "qualityReportingStartsOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_qualityReportingStartsOther(ctx, field, obj)

		case "qualityReportingStartsNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_qualityReportingStartsNote(ctx, field, obj)

		case "modelLearningSystems":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_modelLearningSystems(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modelLearningSystemsOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_modelLearningSystemsOther(ctx, field, obj)

		case "modelLearningSystemsNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_modelLearningSystemsNote(ctx, field, obj)

		case "anticipatedChallenges":

			out.Values[i] = ec._PlanOpsEvalAndLearning_anticipatedChallenges(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanOpsEvalAndLearning_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._PlanOpsEvalAndLearning_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanOpsEvalAndLearning_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._PlanOpsEvalAndLearning_modifiedDts(ctx, field, obj)

		case "readyForReviewBy":

			out.Values[i] = ec._PlanOpsEvalAndLearning_readyForReviewBy(ctx, field, obj)

		case "readyForReviewByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_readyForReviewByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "readyForReviewDts":

			out.Values[i] = ec._PlanOpsEvalAndLearning_readyForReviewDts(ctx, field, obj)

		case "readyForClearanceBy":

			out.Values[i] = ec._PlanOpsEvalAndLearning_readyForClearanceBy(ctx, field, obj)

		case "readyForClearanceByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_readyForClearanceByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "readyForClearanceDts":

			out.Values[i] = ec._PlanOpsEvalAndLearning_readyForClearanceDts(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanOpsEvalAndLearning_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planParticipantsAndProvidersImplementors = []string{"PlanParticipantsAndProviders"}

func (ec *executionContext) _PlanParticipantsAndProviders(ctx context.Context, sel ast.SelectionSet, obj *models.PlanParticipantsAndProviders) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planParticipantsAndProvidersImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanParticipantsAndProviders")
		case "id":

			out.Values[i] = ec._PlanParticipantsAndProviders_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanParticipantsAndProviders_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "participants":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_participants(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "medicareProviderType":

			out.Values[i] = ec._PlanParticipantsAndProviders_medicareProviderType(ctx, field, obj)

		case "statesEngagement":

			out.Values[i] = ec._PlanParticipantsAndProviders_statesEngagement(ctx, field, obj)

		case "participantsOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_participantsOther(ctx, field, obj)

		case "participantsNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_participantsNote(ctx, field, obj)

		case "participantsCurrentlyInModels":

			out.Values[i] = ec._PlanParticipantsAndProviders_participantsCurrentlyInModels(ctx, field, obj)

		case "participantsCurrentlyInModelsNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_participantsCurrentlyInModelsNote(ctx, field, obj)

		case "modelApplicationLevel":

			out.Values[i] = ec._PlanParticipantsAndProviders_modelApplicationLevel(ctx, field, obj)

		case "expectedNumberOfParticipants":

			out.Values[i] = ec._PlanParticipantsAndProviders_expectedNumberOfParticipants(ctx, field, obj)

		case "estimateConfidence":

			out.Values[i] = ec._PlanParticipantsAndProviders_estimateConfidence(ctx, field, obj)

		case "confidenceNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_confidenceNote(ctx, field, obj)

		case "recruitmentMethod":

			out.Values[i] = ec._PlanParticipantsAndProviders_recruitmentMethod(ctx, field, obj)

		case "recruitmentOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_recruitmentOther(ctx, field, obj)

		case "recruitmentNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_recruitmentNote(ctx, field, obj)

		case "selectionMethod":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_selectionMethod(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "selectionOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_selectionOther(ctx, field, obj)

		case "selectionNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_selectionNote(ctx, field, obj)

		case "communicationMethod":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_communicationMethod(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "communicationMethodOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_communicationMethodOther(ctx, field, obj)

		case "communicationNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_communicationNote(ctx, field, obj)

		case "participantAssumeRisk":

			out.Values[i] = ec._PlanParticipantsAndProviders_participantAssumeRisk(ctx, field, obj)

		case "riskType":

			out.Values[i] = ec._PlanParticipantsAndProviders_riskType(ctx, field, obj)

		case "riskOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_riskOther(ctx, field, obj)

		case "riskNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_riskNote(ctx, field, obj)

		case "willRiskChange":

			out.Values[i] = ec._PlanParticipantsAndProviders_willRiskChange(ctx, field, obj)

		case "willRiskChangeNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_willRiskChangeNote(ctx, field, obj)

		case "coordinateWork":

			out.Values[i] = ec._PlanParticipantsAndProviders_coordinateWork(ctx, field, obj)

		case "coordinateWorkNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_coordinateWorkNote(ctx, field, obj)

		case "gainsharePayments":

			out.Values[i] = ec._PlanParticipantsAndProviders_gainsharePayments(ctx, field, obj)

		case "gainsharePaymentsTrack":

			out.Values[i] = ec._PlanParticipantsAndProviders_gainsharePaymentsTrack(ctx, field, obj)

		case "gainsharePaymentsNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_gainsharePaymentsNote(ctx, field, obj)

		case "participantsIds":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_participantsIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "participantsIdsOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_participantsIdsOther(ctx, field, obj)

		case "participantsIDSNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_participantsIDSNote(ctx, field, obj)

		case "providerAdditionFrequency":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerAdditionFrequency(ctx, field, obj)

		case "providerAdditionFrequencyOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerAdditionFrequencyOther(ctx, field, obj)

		case "providerAdditionFrequencyNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerAdditionFrequencyNote(ctx, field, obj)

		case "providerAddMethod":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_providerAddMethod(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "providerAddMethodOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerAddMethodOther(ctx, field, obj)

		case "providerAddMethodNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerAddMethodNote(ctx, field, obj)

		case "providerLeaveMethod":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_providerLeaveMethod(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "providerLeaveMethodOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerLeaveMethodOther(ctx, field, obj)

		case "providerLeaveMethodNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerLeaveMethodNote(ctx, field, obj)

		case "providerOverlap":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerOverlap(ctx, field, obj)

		case "providerOverlapHierarchy":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerOverlapHierarchy(ctx, field, obj)

		case "providerOverlapNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerOverlapNote(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanParticipantsAndProviders_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._PlanParticipantsAndProviders_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanParticipantsAndProviders_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._PlanParticipantsAndProviders_modifiedDts(ctx, field, obj)

		case "readyForReviewBy":

			out.Values[i] = ec._PlanParticipantsAndProviders_readyForReviewBy(ctx, field, obj)

		case "readyForReviewByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_readyForReviewByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "readyForReviewDts":

			out.Values[i] = ec._PlanParticipantsAndProviders_readyForReviewDts(ctx, field, obj)

		case "readyForClearanceBy":

			out.Values[i] = ec._PlanParticipantsAndProviders_readyForClearanceBy(ctx, field, obj)

		case "readyForClearanceByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_readyForClearanceByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "readyForClearanceDts":

			out.Values[i] = ec._PlanParticipantsAndProviders_readyForClearanceDts(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanParticipantsAndProviders_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planPaymentsImplementors = []string{"PlanPayments"}

func (ec *executionContext) _PlanPayments(ctx context.Context, sel ast.SelectionSet, obj *models.PlanPayments) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planPaymentsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanPayments")
		case "id":

			out.Values[i] = ec._PlanPayments_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanPayments_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fundingSource":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_fundingSource(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "fundingSourceTrustFund":

			out.Values[i] = ec._PlanPayments_fundingSourceTrustFund(ctx, field, obj)

		case "fundingSourceOther":

			out.Values[i] = ec._PlanPayments_fundingSourceOther(ctx, field, obj)

		case "fundingSourceNote":

			out.Values[i] = ec._PlanPayments_fundingSourceNote(ctx, field, obj)

		case "fundingSourceR":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_fundingSourceR(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "fundingSourceRTrustFund":

			out.Values[i] = ec._PlanPayments_fundingSourceRTrustFund(ctx, field, obj)

		case "fundingSourceROther":

			out.Values[i] = ec._PlanPayments_fundingSourceROther(ctx, field, obj)

		case "fundingSourceRNote":

			out.Values[i] = ec._PlanPayments_fundingSourceRNote(ctx, field, obj)

		case "payRecipients":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_payRecipients(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "payRecipientsOtherSpecification":

			out.Values[i] = ec._PlanPayments_payRecipientsOtherSpecification(ctx, field, obj)

		case "payRecipientsNote":

			out.Values[i] = ec._PlanPayments_payRecipientsNote(ctx, field, obj)

		case "payType":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_payType(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "payTypeNote":

			out.Values[i] = ec._PlanPayments_payTypeNote(ctx, field, obj)

		case "payClaims":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_payClaims(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "payClaimsOther":

			out.Values[i] = ec._PlanPayments_payClaimsOther(ctx, field, obj)

		case "payClaimsNote":

			out.Values[i] = ec._PlanPayments_payClaimsNote(ctx, field, obj)

		case "shouldAnyProvidersExcludedFFSSystems":

			out.Values[i] = ec._PlanPayments_shouldAnyProvidersExcludedFFSSystems(ctx, field, obj)

		case "shouldAnyProviderExcludedFFSSystemsNote":

			out.Values[i] = ec._PlanPayments_shouldAnyProviderExcludedFFSSystemsNote(ctx, field, obj)

		case "changesMedicarePhysicianFeeSchedule":

			out.Values[i] = ec._PlanPayments_changesMedicarePhysicianFeeSchedule(ctx, field, obj)

		case "changesMedicarePhysicianFeeScheduleNote":

			out.Values[i] = ec._PlanPayments_changesMedicarePhysicianFeeScheduleNote(ctx, field, obj)

		case "affectsMedicareSecondaryPayerClaims":

			out.Values[i] = ec._PlanPayments_affectsMedicareSecondaryPayerClaims(ctx, field, obj)

		case "affectsMedicareSecondaryPayerClaimsHow":

			out.Values[i] = ec._PlanPayments_affectsMedicareSecondaryPayerClaimsHow(ctx, field, obj)

		case "affectsMedicareSecondaryPayerClaimsNote":

			out.Values[i] = ec._PlanPayments_affectsMedicareSecondaryPayerClaimsNote(ctx, field, obj)

		case "payModelDifferentiation":

			out.Values[i] = ec._PlanPayments_payModelDifferentiation(ctx, field, obj)

		case "creatingDependenciesBetweenServices":

			out.Values[i] = ec._PlanPayments_creatingDependenciesBetweenServices(ctx, field, obj)

		case "creatingDependenciesBetweenServicesNote":

			out.Values[i] = ec._PlanPayments_creatingDependenciesBetweenServicesNote(ctx, field, obj)

		case "needsClaimsDataCollection":

			out.Values[i] = ec._PlanPayments_needsClaimsDataCollection(ctx, field, obj)

		case "needsClaimsDataCollectionNote":

			out.Values[i] = ec._PlanPayments_needsClaimsDataCollectionNote(ctx, field, obj)

		case "providingThirdPartyFile":

			out.Values[i] = ec._PlanPayments_providingThirdPartyFile(ctx, field, obj)

		case "isContractorAwareTestDataRequirements":

			out.Values[i] = ec._PlanPayments_isContractorAwareTestDataRequirements(ctx, field, obj)

		case "beneficiaryCostSharingLevelAndHandling":

			out.Values[i] = ec._PlanPayments_beneficiaryCostSharingLevelAndHandling(ctx, field, obj)

		case "waiveBeneficiaryCostSharingForAnyServices":

			out.Values[i] = ec._PlanPayments_waiveBeneficiaryCostSharingForAnyServices(ctx, field, obj)

		case "waiveBeneficiaryCostSharingServiceSpecification":

			out.Values[i] = ec._PlanPayments_waiveBeneficiaryCostSharingServiceSpecification(ctx, field, obj)

		case "waiverOnlyAppliesPartOfPayment":

			out.Values[i] = ec._PlanPayments_waiverOnlyAppliesPartOfPayment(ctx, field, obj)

		case "waiveBeneficiaryCostSharingNote":

			out.Values[i] = ec._PlanPayments_waiveBeneficiaryCostSharingNote(ctx, field, obj)

		case "nonClaimsPayments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_nonClaimsPayments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "nonClaimsPaymentOther":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_nonClaimsPaymentOther(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "nonClaimsPaymentsNote":

			out.Values[i] = ec._PlanPayments_nonClaimsPaymentsNote(ctx, field, obj)

		case "paymentCalculationOwner":

			out.Values[i] = ec._PlanPayments_paymentCalculationOwner(ctx, field, obj)

		case "numberPaymentsPerPayCycle":

			out.Values[i] = ec._PlanPayments_numberPaymentsPerPayCycle(ctx, field, obj)

		case "numberPaymentsPerPayCycleNote":

			out.Values[i] = ec._PlanPayments_numberPaymentsPerPayCycleNote(ctx, field, obj)

		case "sharedSystemsInvolvedAdditionalClaimPayment":

			out.Values[i] = ec._PlanPayments_sharedSystemsInvolvedAdditionalClaimPayment(ctx, field, obj)

		case "sharedSystemsInvolvedAdditionalClaimPaymentNote":

			out.Values[i] = ec._PlanPayments_sharedSystemsInvolvedAdditionalClaimPaymentNote(ctx, field, obj)

		case "planningToUseInnovationPaymentContractor":

			out.Values[i] = ec._PlanPayments_planningToUseInnovationPaymentContractor(ctx, field, obj)

		case "planningToUseInnovationPaymentContractorNote":

			out.Values[i] = ec._PlanPayments_planningToUseInnovationPaymentContractorNote(ctx, field, obj)

		case "fundingStructure":

			out.Values[i] = ec._PlanPayments_fundingStructure(ctx, field, obj)

		case "expectedCalculationComplexityLevel":

			out.Values[i] = ec._PlanPayments_expectedCalculationComplexityLevel(ctx, field, obj)

		case "expectedCalculationComplexityLevelNote":

			out.Values[i] = ec._PlanPayments_expectedCalculationComplexityLevelNote(ctx, field, obj)

		case "canParticipantsSelectBetweenPaymentMechanisms":

			out.Values[i] = ec._PlanPayments_canParticipantsSelectBetweenPaymentMechanisms(ctx, field, obj)

		case "canParticipantsSelectBetweenPaymentMechanismsHow":

			out.Values[i] = ec._PlanPayments_canParticipantsSelectBetweenPaymentMechanismsHow(ctx, field, obj)

		case "canParticipantsSelectBetweenPaymentMechanismsNote":

			out.Values[i] = ec._PlanPayments_canParticipantsSelectBetweenPaymentMechanismsNote(ctx, field, obj)

		case "anticipatedPaymentFrequency":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_anticipatedPaymentFrequency(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "anticipatedPaymentFrequencyOther":

			out.Values[i] = ec._PlanPayments_anticipatedPaymentFrequencyOther(ctx, field, obj)

		case "anticipatedPaymentFrequencyNote":

			out.Values[i] = ec._PlanPayments_anticipatedPaymentFrequencyNote(ctx, field, obj)

		case "willRecoverPayments":

			out.Values[i] = ec._PlanPayments_willRecoverPayments(ctx, field, obj)

		case "willRecoverPaymentsNote":

			out.Values[i] = ec._PlanPayments_willRecoverPaymentsNote(ctx, field, obj)

		case "anticipateReconcilingPaymentsRetrospectively":

			out.Values[i] = ec._PlanPayments_anticipateReconcilingPaymentsRetrospectively(ctx, field, obj)

		case "anticipateReconcilingPaymentsRetrospectivelyNote":

			out.Values[i] = ec._PlanPayments_anticipateReconcilingPaymentsRetrospectivelyNote(ctx, field, obj)

		case "paymentStartDate":

			out.Values[i] = ec._PlanPayments_paymentStartDate(ctx, field, obj)

		case "paymentStartDateNote":

			out.Values[i] = ec._PlanPayments_paymentStartDateNote(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanPayments_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._PlanPayments_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanPayments_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._PlanPayments_modifiedDts(ctx, field, obj)

		case "readyForReviewBy":

			out.Values[i] = ec._PlanPayments_readyForReviewBy(ctx, field, obj)

		case "readyForReviewByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_readyForReviewByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "readyForReviewDts":

			out.Values[i] = ec._PlanPayments_readyForReviewDts(ctx, field, obj)

		case "readyForClearanceBy":

			out.Values[i] = ec._PlanPayments_readyForClearanceBy(ctx, field, obj)

		case "readyForClearanceByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_readyForClearanceByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "readyForClearanceDts":

			out.Values[i] = ec._PlanPayments_readyForClearanceDts(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanPayments_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var possibleOperationalNeedImplementors = []string{"PossibleOperationalNeed"}

func (ec *executionContext) _PossibleOperationalNeed(ctx context.Context, sel ast.SelectionSet, obj *models.PossibleOperationalNeed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, possibleOperationalNeedImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PossibleOperationalNeed")
		case "id":

			out.Values[i] = ec._PossibleOperationalNeed_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "possibleSolutions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PossibleOperationalNeed_possibleSolutions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "name":

			out.Values[i] = ec._PossibleOperationalNeed_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "key":

			out.Values[i] = ec._PossibleOperationalNeed_key(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "section":

			out.Values[i] = ec._PossibleOperationalNeed_section(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PossibleOperationalNeed_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PossibleOperationalNeed_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._PossibleOperationalNeed_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PossibleOperationalNeed_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PossibleOperationalNeed_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._PossibleOperationalNeed_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var possibleOperationalSolutionImplementors = []string{"PossibleOperationalSolution"}

func (ec *executionContext) _PossibleOperationalSolution(ctx context.Context, sel ast.SelectionSet, obj *models.PossibleOperationalSolution) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, possibleOperationalSolutionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PossibleOperationalSolution")
		case "id":

			out.Values[i] = ec._PossibleOperationalSolution_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._PossibleOperationalSolution_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "key":

			out.Values[i] = ec._PossibleOperationalSolution_key(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "treatAsOther":

			out.Values[i] = ec._PossibleOperationalSolution_treatAsOther(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":

			out.Values[i] = ec._PossibleOperationalSolution_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PossibleOperationalSolution_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "createdDts":

			out.Values[i] = ec._PossibleOperationalSolution_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PossibleOperationalSolution_modifiedBy(ctx, field, obj)

		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PossibleOperationalSolution_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedDts":

			out.Values[i] = ec._PossibleOperationalSolution_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var prepareForClearanceImplementors = []string{"PrepareForClearance"}

func (ec *executionContext) _PrepareForClearance(ctx context.Context, sel ast.SelectionSet, obj *model.PrepareForClearance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, prepareForClearanceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PrepareForClearance")
		case "status":

			out.Values[i] = ec._PrepareForClearance_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "latestClearanceDts":

			out.Values[i] = ec._PrepareForClearance_latestClearanceDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "currentUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currentUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "modelPlan":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_modelPlan(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "planDocument":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_planDocument(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "modelPlanCollection":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_modelPlanCollection(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "existingModelCollection":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_existingModelCollection(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchOktaUsers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchOktaUsers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "planCollaboratorByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_planCollaboratorByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "taskListSectionLocks":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_taskListSectionLocks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "planPayments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_planPayments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "ndaInfo":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ndaInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "crTdl":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_crTdl(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "operationalSolutions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_operationalSolutions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "operationalSolution":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_operationalSolution(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "operationalNeed":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_operationalNeed(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "auditChanges":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_auditChanges(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "possibleOperationalNeeds":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_possibleOperationalNeeds(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "possibleOperationalSolutions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_possibleOperationalSolutions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "userAccount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userAccount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "existingModelLink":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_existingModelLink(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchChanges":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchChanges(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchChangeTable":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchChangeTable(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchChangeTableWithFreeText":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchChangeTableWithFreeText(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchChangeTableByModelPlanID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchChangeTableByModelPlanID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchChangeTableByDateRange":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchChangeTableByDateRange(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchModelPlanChangesByDateRange":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchModelPlanChangesByDateRange(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchChangeTableByActor":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchChangeTableByActor(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchChangeTableByModelStatus":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchChangeTableByModelStatus(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchChangeTableDateHistogramConsolidatedAggregations":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchChangeTableDateHistogramConsolidatedAggregations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "onTaskListSectionLocksChanged":
		return ec._Subscription_onTaskListSectionLocksChanged(ctx, fields[0])
	case "onLockTaskListSectionContext":
		return ec._Subscription_onLockTaskListSectionContext(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var taskListSectionLockStatusImplementors = []string{"TaskListSectionLockStatus"}

func (ec *executionContext) _TaskListSectionLockStatus(ctx context.Context, sel ast.SelectionSet, obj *model.TaskListSectionLockStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskListSectionLockStatusImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskListSectionLockStatus")
		case "modelPlanID":

			out.Values[i] = ec._TaskListSectionLockStatus_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "section":

			out.Values[i] = ec._TaskListSectionLockStatus_section(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lockedByUserAccount":

			out.Values[i] = ec._TaskListSectionLockStatus_lockedByUserAccount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isAssessment":

			out.Values[i] = ec._TaskListSectionLockStatus_isAssessment(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskListSectionLockStatusChangedImplementors = []string{"TaskListSectionLockStatusChanged"}

func (ec *executionContext) _TaskListSectionLockStatusChanged(ctx context.Context, sel ast.SelectionSet, obj *model.TaskListSectionLockStatusChanged) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskListSectionLockStatusChangedImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskListSectionLockStatusChanged")
		case "changeType":

			out.Values[i] = ec._TaskListSectionLockStatusChanged_changeType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lockStatus":

			out.Values[i] = ec._TaskListSectionLockStatusChanged_lockStatus(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "actionType":

			out.Values[i] = ec._TaskListSectionLockStatusChanged_actionType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userAccountImplementors = []string{"UserAccount"}

func (ec *executionContext) _UserAccount(ctx context.Context, sel ast.SelectionSet, obj *authentication.UserAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userAccountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserAccount")
		case "id":

			out.Values[i] = ec._UserAccount_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "username":

			out.Values[i] = ec._UserAccount_username(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isEUAID":

			out.Values[i] = ec._UserAccount_isEUAID(ctx, field, obj)

		case "commonName":

			out.Values[i] = ec._UserAccount_commonName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "locale":

			out.Values[i] = ec._UserAccount_locale(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":

			out.Values[i] = ec._UserAccount_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "givenName":

			out.Values[i] = ec._UserAccount_givenName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "familyName":

			out.Values[i] = ec._UserAccount_familyName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "zoneInfo":

			out.Values[i] = ec._UserAccount_zoneInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasLoggedIn":

			out.Values[i] = ec._UserAccount_hasLoggedIn(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userInfoImplementors = []string{"UserInfo"}

func (ec *executionContext) _UserInfo(ctx context.Context, sel ast.SelectionSet, obj *models.UserInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserInfo")
		case "firstName":

			out.Values[i] = ec._UserInfo_firstName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastName":

			out.Values[i] = ec._UserInfo_lastName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":

			out.Values[i] = ec._UserInfo_displayName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":

			out.Values[i] = ec._UserInfo_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "username":

			out.Values[i] = ec._UserInfo_username(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNActionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐActionType(ctx context.Context, v interface{}) (model.ActionType, error) {
	var res model.ActionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNActionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐActionType(ctx context.Context, sel ast.SelectionSet, v model.ActionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAgencyOrStateHelpType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpType(ctx context.Context, v interface{}) (model.AgencyOrStateHelpType, error) {
	var res model.AgencyOrStateHelpType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAgencyOrStateHelpType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpType(ctx context.Context, sel ast.SelectionSet, v model.AgencyOrStateHelpType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAgencyOrStateHelpType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpTypeᚄ(ctx context.Context, v interface{}) ([]model.AgencyOrStateHelpType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AgencyOrStateHelpType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAgencyOrStateHelpType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAgencyOrStateHelpType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AgencyOrStateHelpType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAgencyOrStateHelpType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNAgreementType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementType(ctx context.Context, v interface{}) (model.AgreementType, error) {
	var res model.AgreementType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAgreementType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementType(ctx context.Context, sel ast.SelectionSet, v model.AgreementType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAgreementType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementTypeᚄ(ctx context.Context, v interface{}) ([]model.AgreementType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AgreementType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAgreementType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAgreementType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AgreementType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAgreementType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNAlternativePaymentModelType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelType(ctx context.Context, v interface{}) (model.AlternativePaymentModelType, error) {
	var res model.AlternativePaymentModelType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAlternativePaymentModelType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelType(ctx context.Context, sel ast.SelectionSet, v model.AlternativePaymentModelType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAlternativePaymentModelType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelTypeᚄ(ctx context.Context, v interface{}) ([]model.AlternativePaymentModelType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AlternativePaymentModelType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAlternativePaymentModelType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAlternativePaymentModelType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AlternativePaymentModelType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlternativePaymentModelType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNAnticipatedPaymentFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyType(ctx context.Context, v interface{}) (models.AnticipatedPaymentFrequencyType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.AnticipatedPaymentFrequencyType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAnticipatedPaymentFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyType(ctx context.Context, sel ast.SelectionSet, v models.AnticipatedPaymentFrequencyType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNAnticipatedPaymentFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyTypeᚄ(ctx context.Context, v interface{}) ([]models.AnticipatedPaymentFrequencyType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.AnticipatedPaymentFrequencyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAnticipatedPaymentFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAnticipatedPaymentFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.AnticipatedPaymentFrequencyType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAnticipatedPaymentFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNAuditChange2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAuditChangeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.AuditChange) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuditChange2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAuditChange(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAuditChange2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAuditChange(ctx context.Context, sel ast.SelectionSet, v *models.AuditChange) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuditChange(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthorityAllowance2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowance(ctx context.Context, v interface{}) (model.AuthorityAllowance, error) {
	var res model.AuthorityAllowance
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuthorityAllowance2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowance(ctx context.Context, sel ast.SelectionSet, v model.AuthorityAllowance) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAuthorityAllowance2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowanceᚄ(ctx context.Context, v interface{}) ([]model.AuthorityAllowance, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AuthorityAllowance, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAuthorityAllowance2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowance(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAuthorityAllowance2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowanceᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AuthorityAllowance) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuthorityAllowance2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesType(ctx context.Context, v interface{}) (model.BeneficiariesType, error) {
	var res model.BeneficiariesType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesType(ctx context.Context, sel ast.SelectionSet, v model.BeneficiariesType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesTypeᚄ(ctx context.Context, v interface{}) ([]model.BeneficiariesType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.BeneficiariesType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BeneficiariesType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCMMIGroup2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroup(ctx context.Context, v interface{}) (model.CMMIGroup, error) {
	var res model.CMMIGroup
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCMMIGroup2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroup(ctx context.Context, sel ast.SelectionSet, v model.CMMIGroup) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCMMIGroup2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroupᚄ(ctx context.Context, v interface{}) ([]model.CMMIGroup, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CMMIGroup, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCMMIGroup2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroup(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNCMMIGroup2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroupᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CMMIGroup) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCMMIGroup2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNCMSCenter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenter(ctx context.Context, v interface{}) (model.CMSCenter, error) {
	var res model.CMSCenter
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCMSCenter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenter(ctx context.Context, sel ast.SelectionSet, v model.CMSCenter) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCMSCenter2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenterᚄ(ctx context.Context, v interface{}) ([]model.CMSCenter, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CMSCenter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCMSCenter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNCMSCenter2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenterᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CMSCenter) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCMSCenter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNCcmInvolvmentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentType(ctx context.Context, v interface{}) (model.CcmInvolvmentType, error) {
	var res model.CcmInvolvmentType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCcmInvolvmentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentType(ctx context.Context, sel ast.SelectionSet, v model.CcmInvolvmentType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCcmInvolvmentType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentTypeᚄ(ctx context.Context, v interface{}) ([]model.CcmInvolvmentType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CcmInvolvmentType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCcmInvolvmentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNCcmInvolvmentType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CcmInvolvmentType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCcmInvolvmentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChangeTableRecord2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐChangeTableRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ChangeTableRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChangeTableRecord2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐChangeTableRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChangeTableRecord2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐChangeTableRecord(ctx context.Context, sel ast.SelectionSet, v *models.ChangeTableRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChangeTableRecord(ctx, sel, v)
}

func (ec *executionContext) unmarshalNChangeType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐChangeType(ctx context.Context, v interface{}) (model.ChangeType, error) {
	var res model.ChangeType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNChangeType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐChangeType(ctx context.Context, sel ast.SelectionSet, v model.ChangeType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNChangedFields2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐChangedFields(ctx context.Context, sel ast.SelectionSet, v models.ChangedFields) graphql.Marshaler {
	return ec._ChangedFields(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayType(ctx context.Context, v interface{}) (models.ClaimsBasedPayType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ClaimsBasedPayType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayType(ctx context.Context, sel ast.SelectionSet, v models.ClaimsBasedPayType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayTypeᚄ(ctx context.Context, v interface{}) ([]models.ClaimsBasedPayType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.ClaimsBasedPayType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.ClaimsBasedPayType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNContractorSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportType(ctx context.Context, v interface{}) (model.ContractorSupportType, error) {
	var res model.ContractorSupportType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContractorSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportType(ctx context.Context, sel ast.SelectionSet, v model.ContractorSupportType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNContractorSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportTypeᚄ(ctx context.Context, v interface{}) ([]model.ContractorSupportType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ContractorSupportType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNContractorSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNContractorSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ContractorSupportType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContractorSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNCreateOperationalSolutionSubtaskInput2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCreateOperationalSolutionSubtaskInputᚄ(ctx context.Context, v interface{}) ([]*model.CreateOperationalSolutionSubtaskInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CreateOperationalSolutionSubtaskInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCreateOperationalSolutionSubtaskInput2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCreateOperationalSolutionSubtaskInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCreateOperationalSolutionSubtaskInput2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCreateOperationalSolutionSubtaskInput(ctx context.Context, v interface{}) (*model.CreateOperationalSolutionSubtaskInput, error) {
	res, err := ec.unmarshalInputCreateOperationalSolutionSubtaskInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCurrentUser2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCurrentUser(ctx context.Context, sel ast.SelectionSet, v model.CurrentUser) graphql.Marshaler {
	return ec._CurrentUser(ctx, sel, &v)
}

func (ec *executionContext) marshalNCurrentUser2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCurrentUser(ctx context.Context, sel ast.SelectionSet, v *model.CurrentUser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CurrentUser(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDataForMonitoringType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringType(ctx context.Context, v interface{}) (model.DataForMonitoringType, error) {
	var res model.DataForMonitoringType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDataForMonitoringType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringType(ctx context.Context, sel ast.SelectionSet, v model.DataForMonitoringType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDataForMonitoringType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringTypeᚄ(ctx context.Context, v interface{}) ([]model.DataForMonitoringType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.DataForMonitoringType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataForMonitoringType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNDataForMonitoringType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataForMonitoringType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataForMonitoringType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNDataFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyType(ctx context.Context, v interface{}) (model.DataFrequencyType, error) {
	var res model.DataFrequencyType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDataFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyType(ctx context.Context, sel ast.SelectionSet, v model.DataFrequencyType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDataFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyTypeᚄ(ctx context.Context, v interface{}) ([]model.DataFrequencyType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.DataFrequencyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNDataFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataFrequencyType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNDataToSendParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsType(ctx context.Context, v interface{}) (model.DataToSendParticipantsType, error) {
	var res model.DataToSendParticipantsType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDataToSendParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsType(ctx context.Context, sel ast.SelectionSet, v model.DataToSendParticipantsType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDataToSendParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsTypeᚄ(ctx context.Context, v interface{}) ([]model.DataToSendParticipantsType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.DataToSendParticipantsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataToSendParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNDataToSendParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataToSendParticipantsType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataToSendParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDateHistogramAggregationBucket2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDateHistogramAggregationBucketᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.DateHistogramAggregationBucket) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDateHistogramAggregationBucket2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDateHistogramAggregationBucket(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDateHistogramAggregationBucket2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDateHistogramAggregationBucket(ctx context.Context, sel ast.SelectionSet, v *models.DateHistogramAggregationBucket) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DateHistogramAggregationBucket(ctx, sel, v)
}

func (ec *executionContext) marshalNDiscussionReply2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReply(ctx context.Context, sel ast.SelectionSet, v models.DiscussionReply) graphql.Marshaler {
	return ec._DiscussionReply(ctx, sel, &v)
}

func (ec *executionContext) marshalNDiscussionReply2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReplyᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.DiscussionReply) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDiscussionReply2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReply(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDiscussionReply2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReply(ctx context.Context, sel ast.SelectionSet, v *models.DiscussionReply) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DiscussionReply(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDiscussionReplyChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNDiscussionReplyCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDiscussionReplyCreateInput(ctx context.Context, v interface{}) (model.DiscussionReplyCreateInput, error) {
	res, err := ec.unmarshalInputDiscussionReplyCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDiscussionStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionStatus(ctx context.Context, v interface{}) (models.DiscussionStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.DiscussionStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDiscussionStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionStatus(ctx context.Context, sel ast.SelectionSet, v models.DiscussionStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDocumentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDocumentType(ctx context.Context, v interface{}) (models.DocumentType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.DocumentType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDocumentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDocumentType(ctx context.Context, sel ast.SelectionSet, v models.DocumentType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNEvaluationApproachType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachType(ctx context.Context, v interface{}) (model.EvaluationApproachType, error) {
	var res model.EvaluationApproachType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEvaluationApproachType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachType(ctx context.Context, sel ast.SelectionSet, v model.EvaluationApproachType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEvaluationApproachType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachTypeᚄ(ctx context.Context, v interface{}) ([]model.EvaluationApproachType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.EvaluationApproachType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEvaluationApproachType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNEvaluationApproachType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EvaluationApproachType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEvaluationApproachType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNExistingModel2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModelᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ExistingModel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNExistingModel2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNExistingModel2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModel(ctx context.Context, sel ast.SelectionSet, v *models.ExistingModel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ExistingModel(ctx, sel, v)
}

func (ec *executionContext) marshalNExistingModelLink2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModelLink(ctx context.Context, sel ast.SelectionSet, v models.ExistingModelLink) graphql.Marshaler {
	return ec._ExistingModelLink(ctx, sel, &v)
}

func (ec *executionContext) marshalNExistingModelLink2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModelLinkᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ExistingModelLink) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNExistingModelLink2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModelLink(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNExistingModelLink2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModelLink(ctx context.Context, sel ast.SelectionSet, v *models.ExistingModelLink) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ExistingModelLink(ctx, sel, v)
}

func (ec *executionContext) marshalNField2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Field) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNField2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNField2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐField(ctx context.Context, sel ast.SelectionSet, v *models.Field) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Field(ctx, sel, v)
}

func (ec *executionContext) marshalNFieldValue2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFieldValue(ctx context.Context, sel ast.SelectionSet, v models.FieldValue) graphql.Marshaler {
	return ec._FieldValue(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNFundingSource2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSource(ctx context.Context, v interface{}) (models.FundingSource, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.FundingSource(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFundingSource2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSource(ctx context.Context, sel ast.SelectionSet, v models.FundingSource) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFundingSource2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSourceᚄ(ctx context.Context, v interface{}) ([]models.FundingSource, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.FundingSource, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFundingSource2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSource(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNFundingSource2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSourceᚄ(ctx context.Context, sel ast.SelectionSet, v []models.FundingSource) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFundingSource2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNGeographyApplication2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplication(ctx context.Context, v interface{}) (model.GeographyApplication, error) {
	var res model.GeographyApplication
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGeographyApplication2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplication(ctx context.Context, sel ast.SelectionSet, v model.GeographyApplication) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNGeographyApplication2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplicationᚄ(ctx context.Context, v interface{}) ([]model.GeographyApplication, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.GeographyApplication, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGeographyApplication2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplication(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNGeographyApplication2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplicationᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GeographyApplication) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGeographyApplication2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplication(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNGeographyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyType(ctx context.Context, v interface{}) (model.GeographyType, error) {
	var res model.GeographyType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGeographyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyType(ctx context.Context, sel ast.SelectionSet, v model.GeographyType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNGeographyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyTypeᚄ(ctx context.Context, v interface{}) ([]model.GeographyType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.GeographyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGeographyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNGeographyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GeographyType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGeographyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNKeyCharacteristic2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristic(ctx context.Context, v interface{}) (model.KeyCharacteristic, error) {
	var res model.KeyCharacteristic
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNKeyCharacteristic2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristic(ctx context.Context, sel ast.SelectionSet, v model.KeyCharacteristic) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNKeyCharacteristic2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristicᚄ(ctx context.Context, v interface{}) ([]model.KeyCharacteristic, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.KeyCharacteristic, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNKeyCharacteristic2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristic(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNKeyCharacteristic2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristicᚄ(ctx context.Context, sel ast.SelectionSet, v []model.KeyCharacteristic) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKeyCharacteristic2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLaunchDarklySettings2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐLaunchDarklySettings(ctx context.Context, sel ast.SelectionSet, v *model.LaunchDarklySettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LaunchDarklySettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNModelLearningSystemType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemType(ctx context.Context, v interface{}) (model.ModelLearningSystemType, error) {
	var res model.ModelLearningSystemType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNModelLearningSystemType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemType(ctx context.Context, sel ast.SelectionSet, v model.ModelLearningSystemType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNModelLearningSystemType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemTypeᚄ(ctx context.Context, v interface{}) ([]model.ModelLearningSystemType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ModelLearningSystemType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNModelLearningSystemType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNModelLearningSystemType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ModelLearningSystemType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNModelLearningSystemType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNModelPlan2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlan(ctx context.Context, sel ast.SelectionSet, v models.ModelPlan) graphql.Marshaler {
	return ec._ModelPlan(ctx, sel, &v)
}

func (ec *executionContext) marshalNModelPlan2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlanᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ModelPlan) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNModelPlan2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNModelPlan2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlan(ctx context.Context, sel ast.SelectionSet, v *models.ModelPlan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ModelPlan(ctx, sel, v)
}

func (ec *executionContext) unmarshalNModelPlanChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNModelPlanFilter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelPlanFilter(ctx context.Context, v interface{}) (model.ModelPlanFilter, error) {
	var res model.ModelPlanFilter
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNModelPlanFilter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelPlanFilter(ctx context.Context, sel ast.SelectionSet, v model.ModelPlanFilter) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNModelStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelStatus(ctx context.Context, v interface{}) (models.ModelStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ModelStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNModelStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelStatus(ctx context.Context, sel ast.SelectionSet, v models.ModelStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNMonitoringFileType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileType(ctx context.Context, v interface{}) (model.MonitoringFileType, error) {
	var res model.MonitoringFileType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMonitoringFileType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileType(ctx context.Context, sel ast.SelectionSet, v model.MonitoringFileType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMonitoringFileType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileTypeᚄ(ctx context.Context, v interface{}) ([]model.MonitoringFileType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.MonitoringFileType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMonitoringFileType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNMonitoringFileType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MonitoringFileType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMonitoringFileType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNDAInfo2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNDAInfo(ctx context.Context, sel ast.SelectionSet, v model.NDAInfo) graphql.Marshaler {
	return ec._NDAInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNNDAInfo2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNDAInfo(ctx context.Context, sel ast.SelectionSet, v *model.NDAInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NDAInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNonClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayType(ctx context.Context, v interface{}) (model.NonClaimsBasedPayType, error) {
	var res model.NonClaimsBasedPayType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNonClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayType(ctx context.Context, sel ast.SelectionSet, v model.NonClaimsBasedPayType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNNonClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayTypeᚄ(ctx context.Context, v interface{}) ([]model.NonClaimsBasedPayType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.NonClaimsBasedPayType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNonClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNNonClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.NonClaimsBasedPayType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNonClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOpSolutionStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOpSolutionStatus(ctx context.Context, v interface{}) (models.OpSolutionStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.OpSolutionStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOpSolutionStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOpSolutionStatus(ctx context.Context, sel ast.SelectionSet, v models.OpSolutionStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNOperationalNeed2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalNeed(ctx context.Context, sel ast.SelectionSet, v models.OperationalNeed) graphql.Marshaler {
	return ec._OperationalNeed(ctx, sel, &v)
}

func (ec *executionContext) marshalNOperationalNeed2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalNeedᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.OperationalNeed) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOperationalNeed2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalNeed(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOperationalNeed2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalNeed(ctx context.Context, sel ast.SelectionSet, v *models.OperationalNeed) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OperationalNeed(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOperationalNeedKey2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalNeedKey(ctx context.Context, v interface{}) (models.OperationalNeedKey, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.OperationalNeedKey(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOperationalNeedKey2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalNeedKey(ctx context.Context, sel ast.SelectionSet, v models.OperationalNeedKey) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNOperationalSolution2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolution(ctx context.Context, sel ast.SelectionSet, v models.OperationalSolution) graphql.Marshaler {
	return ec._OperationalSolution(ctx, sel, &v)
}

func (ec *executionContext) marshalNOperationalSolution2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.OperationalSolution) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOperationalSolution2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolution(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOperationalSolution2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolution(ctx context.Context, sel ast.SelectionSet, v *models.OperationalSolution) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OperationalSolution(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOperationalSolutionChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNOperationalSolutionKey2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionKey(ctx context.Context, v interface{}) (models.OperationalSolutionKey, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.OperationalSolutionKey(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOperationalSolutionKey2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionKey(ctx context.Context, sel ast.SelectionSet, v models.OperationalSolutionKey) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNOperationalSolutionSubtask2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionSubtaskᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.OperationalSolutionSubtask) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOperationalSolutionSubtask2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionSubtask(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOperationalSolutionSubtask2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionSubtask(ctx context.Context, sel ast.SelectionSet, v *models.OperationalSolutionSubtask) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OperationalSolutionSubtask(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOperationalSolutionSubtaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionSubtaskStatus(ctx context.Context, v interface{}) (models.OperationalSolutionSubtaskStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.OperationalSolutionSubtaskStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOperationalSolutionSubtaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionSubtaskStatus(ctx context.Context, sel ast.SelectionSet, v models.OperationalSolutionSubtaskStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNParticipantCommunicationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationType(ctx context.Context, v interface{}) (model.ParticipantCommunicationType, error) {
	var res model.ParticipantCommunicationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNParticipantCommunicationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationType(ctx context.Context, sel ast.SelectionSet, v model.ParticipantCommunicationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNParticipantCommunicationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantCommunicationType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantCommunicationType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantCommunicationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNParticipantCommunicationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantCommunicationType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantCommunicationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNParticipantSelectionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionType(ctx context.Context, v interface{}) (model.ParticipantSelectionType, error) {
	var res model.ParticipantSelectionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNParticipantSelectionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionType(ctx context.Context, sel ast.SelectionSet, v model.ParticipantSelectionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNParticipantSelectionType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantSelectionType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantSelectionType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantSelectionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNParticipantSelectionType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantSelectionType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantSelectionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNParticipantsIDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDType(ctx context.Context, v interface{}) (model.ParticipantsIDType, error) {
	var res model.ParticipantsIDType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNParticipantsIDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDType(ctx context.Context, sel ast.SelectionSet, v model.ParticipantsIDType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNParticipantsIDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantsIDType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantsIDType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantsIDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNParticipantsIDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantsIDType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantsIDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsType(ctx context.Context, v interface{}) (model.ParticipantsType, error) {
	var res model.ParticipantsType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsType(ctx context.Context, sel ast.SelectionSet, v model.ParticipantsType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantsType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantsType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPayRecipient2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipient(ctx context.Context, v interface{}) (models.PayRecipient, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.PayRecipient(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPayRecipient2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipient(ctx context.Context, sel ast.SelectionSet, v models.PayRecipient) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPayRecipient2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipientᚄ(ctx context.Context, v interface{}) ([]models.PayRecipient, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.PayRecipient, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPayRecipient2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipient(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPayRecipient2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipientᚄ(ctx context.Context, sel ast.SelectionSet, v []models.PayRecipient) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayRecipient2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayType(ctx context.Context, v interface{}) (models.PayType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.PayType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayType(ctx context.Context, sel ast.SelectionSet, v models.PayType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayTypeᚄ(ctx context.Context, v interface{}) ([]models.PayType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.PayType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.PayType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlanBasics2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBasics(ctx context.Context, sel ast.SelectionSet, v models.PlanBasics) graphql.Marshaler {
	return ec._PlanBasics(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanBasics2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBasics(ctx context.Context, sel ast.SelectionSet, v *models.PlanBasics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanBasics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanBasicsChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNPlanBeneficiaries2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBeneficiaries(ctx context.Context, sel ast.SelectionSet, v models.PlanBeneficiaries) graphql.Marshaler {
	return ec._PlanBeneficiaries(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanBeneficiaries2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBeneficiaries(ctx context.Context, sel ast.SelectionSet, v *models.PlanBeneficiaries) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanBeneficiaries(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanBeneficiariesChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNPlanCollaborator2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaborator(ctx context.Context, sel ast.SelectionSet, v models.PlanCollaborator) graphql.Marshaler {
	return ec._PlanCollaborator(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanCollaborator2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaboratorᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PlanCollaborator) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlanCollaborator2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaborator(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlanCollaborator2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaborator(ctx context.Context, sel ast.SelectionSet, v *models.PlanCollaborator) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanCollaborator(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanCollaboratorCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanCollaboratorCreateInput(ctx context.Context, v interface{}) (model.PlanCollaboratorCreateInput, error) {
	res, err := ec.unmarshalInputPlanCollaboratorCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlanCrTdl2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdl(ctx context.Context, sel ast.SelectionSet, v models.PlanCrTdl) graphql.Marshaler {
	return ec._PlanCrTdl(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanCrTdl2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdlᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PlanCrTdl) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlanCrTdl2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdl(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlanCrTdl2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdl(ctx context.Context, sel ast.SelectionSet, v *models.PlanCrTdl) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanCrTdl(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanCrTdlChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNPlanCrTdlCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanCrTdlCreateInput(ctx context.Context, v interface{}) (model.PlanCrTdlCreateInput, error) {
	res, err := ec.unmarshalInputPlanCrTdlCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlanDiscussion2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussion(ctx context.Context, sel ast.SelectionSet, v models.PlanDiscussion) graphql.Marshaler {
	return ec._PlanDiscussion(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanDiscussion2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussionᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PlanDiscussion) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlanDiscussion2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlanDiscussion2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussion(ctx context.Context, sel ast.SelectionSet, v *models.PlanDiscussion) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanDiscussion(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanDiscussionChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNPlanDiscussionCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanDiscussionCreateInput(ctx context.Context, v interface{}) (model.PlanDiscussionCreateInput, error) {
	res, err := ec.unmarshalInputPlanDiscussionCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlanDocument2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocument(ctx context.Context, sel ast.SelectionSet, v models.PlanDocument) graphql.Marshaler {
	return ec._PlanDocument(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanDocument2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocumentᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PlanDocument) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlanDocument2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocument(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlanDocument2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocument(ctx context.Context, sel ast.SelectionSet, v *models.PlanDocument) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanDocument(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanDocumentInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanDocumentInput(ctx context.Context, v interface{}) (model.PlanDocumentInput, error) {
	res, err := ec.unmarshalInputPlanDocumentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlanDocumentSolutionLink2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocumentSolutionLink(ctx context.Context, sel ast.SelectionSet, v *models.PlanDocumentSolutionLink) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanDocumentSolutionLink(ctx, sel, v)
}

func (ec *executionContext) marshalNPlanFavorite2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanFavorite(ctx context.Context, sel ast.SelectionSet, v models.PlanFavorite) graphql.Marshaler {
	return ec._PlanFavorite(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanFavorite2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanFavorite(ctx context.Context, sel ast.SelectionSet, v *models.PlanFavorite) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanFavorite(ctx, sel, v)
}

func (ec *executionContext) marshalNPlanGeneralCharacteristics2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanGeneralCharacteristics(ctx context.Context, sel ast.SelectionSet, v models.PlanGeneralCharacteristics) graphql.Marshaler {
	return ec._PlanGeneralCharacteristics(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanGeneralCharacteristics2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanGeneralCharacteristics(ctx context.Context, sel ast.SelectionSet, v *models.PlanGeneralCharacteristics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanGeneralCharacteristics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanGeneralCharacteristicsChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNPlanOpsEvalAndLearning2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanOpsEvalAndLearning(ctx context.Context, sel ast.SelectionSet, v models.PlanOpsEvalAndLearning) graphql.Marshaler {
	return ec._PlanOpsEvalAndLearning(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanOpsEvalAndLearning2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanOpsEvalAndLearning(ctx context.Context, sel ast.SelectionSet, v *models.PlanOpsEvalAndLearning) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanOpsEvalAndLearning(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanOpsEvalAndLearningChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNPlanParticipantsAndProviders2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanParticipantsAndProviders(ctx context.Context, sel ast.SelectionSet, v models.PlanParticipantsAndProviders) graphql.Marshaler {
	return ec._PlanParticipantsAndProviders(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanParticipantsAndProviders2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanParticipantsAndProviders(ctx context.Context, sel ast.SelectionSet, v *models.PlanParticipantsAndProviders) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanParticipantsAndProviders(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanParticipantsAndProvidersChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNPlanPayments2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanPayments(ctx context.Context, sel ast.SelectionSet, v models.PlanPayments) graphql.Marshaler {
	return ec._PlanPayments(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanPayments2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanPayments(ctx context.Context, sel ast.SelectionSet, v *models.PlanPayments) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanPayments(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanPaymentsChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNPossibleOperationalNeed2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPossibleOperationalNeedᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PossibleOperationalNeed) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPossibleOperationalNeed2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPossibleOperationalNeed(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPossibleOperationalNeed2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPossibleOperationalNeed(ctx context.Context, sel ast.SelectionSet, v *models.PossibleOperationalNeed) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PossibleOperationalNeed(ctx, sel, v)
}

func (ec *executionContext) marshalNPossibleOperationalSolution2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPossibleOperationalSolutionᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PossibleOperationalSolution) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPossibleOperationalSolution2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPossibleOperationalSolution(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPossibleOperationalSolution2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPossibleOperationalSolution(ctx context.Context, sel ast.SelectionSet, v *models.PossibleOperationalSolution) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PossibleOperationalSolution(ctx, sel, v)
}

func (ec *executionContext) marshalNPrepareForClearance2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPrepareForClearance(ctx context.Context, sel ast.SelectionSet, v model.PrepareForClearance) graphql.Marshaler {
	return ec._PrepareForClearance(ctx, sel, &v)
}

func (ec *executionContext) marshalNPrepareForClearance2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPrepareForClearance(ctx context.Context, sel ast.SelectionSet, v *model.PrepareForClearance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PrepareForClearance(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPrepareForClearanceStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPrepareForClearanceStatus(ctx context.Context, v interface{}) (model.PrepareForClearanceStatus, error) {
	var res model.PrepareForClearanceStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPrepareForClearanceStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPrepareForClearanceStatus(ctx context.Context, sel ast.SelectionSet, v model.PrepareForClearanceStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNProviderAddType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddType(ctx context.Context, v interface{}) (model.ProviderAddType, error) {
	var res model.ProviderAddType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProviderAddType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddType(ctx context.Context, sel ast.SelectionSet, v model.ProviderAddType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNProviderAddType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddTypeᚄ(ctx context.Context, v interface{}) ([]model.ProviderAddType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ProviderAddType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProviderAddType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNProviderAddType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ProviderAddType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProviderAddType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNProviderLeaveType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveType(ctx context.Context, v interface{}) (model.ProviderLeaveType, error) {
	var res model.ProviderLeaveType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProviderLeaveType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveType(ctx context.Context, sel ast.SelectionSet, v model.ProviderLeaveType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNProviderLeaveType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveTypeᚄ(ctx context.Context, v interface{}) ([]model.ProviderLeaveType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ProviderLeaveType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProviderLeaveType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNProviderLeaveType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ProviderLeaveType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProviderLeaveType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx context.Context, v interface{}) (model.Role, error) {
	var res model.Role
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx context.Context, sel ast.SelectionSet, v model.Role) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx context.Context, v interface{}) ([]model.Role, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.Role, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNRole2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Role) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNSearchFilter2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSearchFilter(ctx context.Context, v interface{}) (*model.SearchFilter, error) {
	res, err := ec.unmarshalInputSearchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSearchFilterType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSearchFilterType(ctx context.Context, v interface{}) (model.SearchFilterType, error) {
	var res model.SearchFilterType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSearchFilterType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSearchFilterType(ctx context.Context, sel ast.SelectionSet, v model.SearchFilterType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSearchRequest2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐSearchRequest(ctx context.Context, v interface{}) (models.SearchRequest, error) {
	res, err := ec.unmarshalInputSearchRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSelectionMethodType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodType(ctx context.Context, v interface{}) (model.SelectionMethodType, error) {
	var res model.SelectionMethodType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSelectionMethodType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodType(ctx context.Context, sel ast.SelectionSet, v model.SelectionMethodType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSelectionMethodType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodTypeᚄ(ctx context.Context, v interface{}) ([]model.SelectionMethodType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.SelectionMethodType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSelectionMethodType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNSelectionMethodType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SelectionMethodType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSelectionMethodType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNSortDirection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐSortDirection(ctx context.Context, v interface{}) (models.SortDirection, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SortDirection(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSortDirection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐSortDirection(ctx context.Context, sel ast.SelectionSet, v models.SortDirection) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNStakeholdersType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersType(ctx context.Context, v interface{}) (model.StakeholdersType, error) {
	var res model.StakeholdersType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStakeholdersType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersType(ctx context.Context, sel ast.SelectionSet, v model.StakeholdersType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNStakeholdersType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersTypeᚄ(ctx context.Context, v interface{}) ([]model.StakeholdersType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.StakeholdersType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNStakeholdersType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNStakeholdersType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.StakeholdersType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStakeholdersType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTaskListSection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskListSection(ctx context.Context, v interface{}) (models.TaskListSection, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TaskListSection(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTaskListSection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskListSection(ctx context.Context, sel ast.SelectionSet, v models.TaskListSection) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTaskListSectionLockStatus2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TaskListSectionLockStatus) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTaskListSectionLockStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTaskListSectionLockStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatus(ctx context.Context, sel ast.SelectionSet, v *model.TaskListSectionLockStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaskListSectionLockStatus(ctx, sel, v)
}

func (ec *executionContext) marshalNTaskListSectionLockStatusChanged2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatusChanged(ctx context.Context, sel ast.SelectionSet, v model.TaskListSectionLockStatusChanged) graphql.Marshaler {
	return ec._TaskListSectionLockStatusChanged(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaskListSectionLockStatusChanged2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatusChanged(ctx context.Context, sel ast.SelectionSet, v *model.TaskListSectionLockStatusChanged) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaskListSectionLockStatusChanged(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx context.Context, v interface{}) (models.TaskStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TaskStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx context.Context, sel ast.SelectionSet, v models.TaskStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTeamRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTeamRole(ctx context.Context, v interface{}) (models.TeamRole, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TeamRole(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTeamRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTeamRole(ctx context.Context, sel ast.SelectionSet, v models.TeamRole) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v interface{}) (uuid.UUID, error) {
	res, err := models.UnmarshalUUID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v uuid.UUID) graphql.Marshaler {
	res := models.MarshalUUID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, v interface{}) ([]uuid.UUID, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]uuid.UUID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, sel ast.SelectionSet, v []uuid.UUID) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNUpdateOperationalSolutionSubtaskChangesInput2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNUpdateOperationalSolutionSubtaskInput2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐUpdateOperationalSolutionSubtaskInputᚄ(ctx context.Context, v interface{}) ([]*model.UpdateOperationalSolutionSubtaskInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.UpdateOperationalSolutionSubtaskInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUpdateOperationalSolutionSubtaskInput2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐUpdateOperationalSolutionSubtaskInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUpdateOperationalSolutionSubtaskInput2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐUpdateOperationalSolutionSubtaskInput(ctx context.Context, v interface{}) (*model.UpdateOperationalSolutionSubtaskInput, error) {
	res, err := ec.unmarshalInputUpdateOperationalSolutionSubtaskInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNUserAccount2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx context.Context, sel ast.SelectionSet, v authentication.UserAccount) graphql.Marshaler {
	return ec._UserAccount(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx context.Context, sel ast.SelectionSet, v *authentication.UserAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserAccount(ctx, sel, v)
}

func (ec *executionContext) marshalNUserInfo2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐUserInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.UserInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserInfo2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐUserInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserInfo2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐUserInfo(ctx context.Context, sel ast.SelectionSet, v *models.UserInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWaiverType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverType(ctx context.Context, v interface{}) (model.WaiverType, error) {
	var res model.WaiverType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWaiverType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverType(ctx context.Context, sel ast.SelectionSet, v model.WaiverType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNWaiverType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverTypeᚄ(ctx context.Context, v interface{}) ([]model.WaiverType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.WaiverType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWaiverType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNWaiverType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.WaiverType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWaiverType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAgencyOrStateHelpType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpTypeᚄ(ctx context.Context, v interface{}) ([]model.AgencyOrStateHelpType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AgencyOrStateHelpType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAgencyOrStateHelpType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAgencyOrStateHelpType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AgencyOrStateHelpType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAgencyOrStateHelpType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAgreementType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementTypeᚄ(ctx context.Context, v interface{}) ([]model.AgreementType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AgreementType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAgreementType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAgreementType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AgreementType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAgreementType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAlternativePaymentModelType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelTypeᚄ(ctx context.Context, v interface{}) ([]model.AlternativePaymentModelType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AlternativePaymentModelType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAlternativePaymentModelType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAlternativePaymentModelType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AlternativePaymentModelType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlternativePaymentModelType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAnticipatedPaymentFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyTypeᚄ(ctx context.Context, v interface{}) ([]models.AnticipatedPaymentFrequencyType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.AnticipatedPaymentFrequencyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAnticipatedPaymentFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAnticipatedPaymentFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.AnticipatedPaymentFrequencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAnticipatedPaymentFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	return res
}

func (ec *executionContext) unmarshalOAuthorityAllowance2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowanceᚄ(ctx context.Context, v interface{}) ([]model.AuthorityAllowance, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AuthorityAllowance, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAuthorityAllowance2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowance(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAuthorityAllowance2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowanceᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AuthorityAllowance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuthorityAllowance2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBenchmarkForPerformanceType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐBenchmarkForPerformanceType(ctx context.Context, v interface{}) (*models.BenchmarkForPerformanceType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.BenchmarkForPerformanceType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBenchmarkForPerformanceType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐBenchmarkForPerformanceType(ctx context.Context, sel ast.SelectionSet, v *models.BenchmarkForPerformanceType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesTypeᚄ(ctx context.Context, v interface{}) ([]model.BeneficiariesType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.BeneficiariesType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BeneficiariesType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOCMMIGroup2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroupᚄ(ctx context.Context, v interface{}) ([]model.CMMIGroup, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CMMIGroup, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCMMIGroup2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroup(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCMMIGroup2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroupᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CMMIGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCMMIGroup2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCMSCenter2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenterᚄ(ctx context.Context, v interface{}) ([]model.CMSCenter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CMSCenter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCMSCenter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCMSCenter2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenterᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CMSCenter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCMSCenter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCcmInvolvmentType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentTypeᚄ(ctx context.Context, v interface{}) ([]model.CcmInvolvmentType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CcmInvolvmentType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCcmInvolvmentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCcmInvolvmentType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CcmInvolvmentType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCcmInvolvmentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayTypeᚄ(ctx context.Context, v interface{}) ([]models.ClaimsBasedPayType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.ClaimsBasedPayType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.ClaimsBasedPayType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOComplexityCalculationLevelType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐComplexityCalculationLevelType(ctx context.Context, v interface{}) (*models.ComplexityCalculationLevelType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ComplexityCalculationLevelType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOComplexityCalculationLevelType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐComplexityCalculationLevelType(ctx context.Context, sel ast.SelectionSet, v *models.ComplexityCalculationLevelType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOConfidenceType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐConfidenceType(ctx context.Context, v interface{}) (*models.ConfidenceType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ConfidenceType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfidenceType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐConfidenceType(ctx context.Context, sel ast.SelectionSet, v *models.ConfidenceType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOContractorSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportTypeᚄ(ctx context.Context, v interface{}) ([]model.ContractorSupportType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ContractorSupportType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNContractorSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOContractorSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ContractorSupportType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContractorSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalODataForMonitoringType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringTypeᚄ(ctx context.Context, v interface{}) ([]model.DataForMonitoringType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.DataForMonitoringType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataForMonitoringType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODataForMonitoringType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataForMonitoringType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataForMonitoringType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalODataFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyTypeᚄ(ctx context.Context, v interface{}) ([]model.DataFrequencyType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.DataFrequencyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODataFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataFrequencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalODataFullTimeOrIncrementalType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataFullTimeOrIncrementalType(ctx context.Context, v interface{}) (*models.DataFullTimeOrIncrementalType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.DataFullTimeOrIncrementalType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODataFullTimeOrIncrementalType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataFullTimeOrIncrementalType(ctx context.Context, sel ast.SelectionSet, v *models.DataFullTimeOrIncrementalType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalODataStartsType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataStartsType(ctx context.Context, v interface{}) (*models.DataStartsType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.DataStartsType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODataStartsType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataStartsType(ctx context.Context, sel ast.SelectionSet, v *models.DataStartsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalODataToSendParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsTypeᚄ(ctx context.Context, v interface{}) ([]model.DataToSendParticipantsType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.DataToSendParticipantsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataToSendParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODataToSendParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataToSendParticipantsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataToSendParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalODiscussionStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionStatus(ctx context.Context, v interface{}) (*models.DiscussionStatus, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.DiscussionStatus(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODiscussionStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionStatus(ctx context.Context, sel ast.SelectionSet, v *models.DiscussionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOEvaluationApproachType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachTypeᚄ(ctx context.Context, v interface{}) ([]model.EvaluationApproachType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.EvaluationApproachType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEvaluationApproachType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEvaluationApproachType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EvaluationApproachType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEvaluationApproachType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOExistingModel2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModel(ctx context.Context, sel ast.SelectionSet, v *models.ExistingModel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ExistingModel(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFrequencyType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFrequencyType(ctx context.Context, v interface{}) (*models.FrequencyType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.FrequencyType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFrequencyType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFrequencyType(ctx context.Context, sel ast.SelectionSet, v *models.FrequencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOFundingSource2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSourceᚄ(ctx context.Context, v interface{}) ([]models.FundingSource, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.FundingSource, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFundingSource2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSource(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFundingSource2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSourceᚄ(ctx context.Context, sel ast.SelectionSet, v []models.FundingSource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFundingSource2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOGeographyApplication2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplicationᚄ(ctx context.Context, v interface{}) ([]model.GeographyApplication, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.GeographyApplication, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGeographyApplication2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplication(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOGeographyApplication2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplicationᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GeographyApplication) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGeographyApplication2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplication(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOGeographyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyTypeᚄ(ctx context.Context, v interface{}) ([]model.GeographyType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.GeographyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGeographyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOGeographyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GeographyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGeographyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOKeyCharacteristic2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristicᚄ(ctx context.Context, v interface{}) ([]model.KeyCharacteristic, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.KeyCharacteristic, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNKeyCharacteristic2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristic(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOKeyCharacteristic2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristicᚄ(ctx context.Context, sel ast.SelectionSet, v []model.KeyCharacteristic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKeyCharacteristic2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOModelCategory2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelCategory(ctx context.Context, v interface{}) (*models.ModelCategory, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ModelCategory(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOModelCategory2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelCategory(ctx context.Context, sel ast.SelectionSet, v *models.ModelCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOModelLearningSystemType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemTypeᚄ(ctx context.Context, v interface{}) ([]model.ModelLearningSystemType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ModelLearningSystemType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNModelLearningSystemType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOModelLearningSystemType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ModelLearningSystemType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNModelLearningSystemType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOModelPlan2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlan(ctx context.Context, sel ast.SelectionSet, v *models.ModelPlan) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModelPlan(ctx, sel, v)
}

func (ec *executionContext) unmarshalOModelStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelStatus(ctx context.Context, v interface{}) (*models.ModelStatus, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ModelStatus(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOModelStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelStatus(ctx context.Context, sel ast.SelectionSet, v *models.ModelStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOModelType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelType(ctx context.Context, v interface{}) (*models.ModelType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ModelType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOModelType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelType(ctx context.Context, sel ast.SelectionSet, v *models.ModelType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOMonitoringFileType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileTypeᚄ(ctx context.Context, v interface{}) ([]model.MonitoringFileType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.MonitoringFileType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMonitoringFileType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMonitoringFileType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MonitoringFileType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMonitoringFileType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalONonClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayTypeᚄ(ctx context.Context, v interface{}) ([]model.NonClaimsBasedPayType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.NonClaimsBasedPayType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNonClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONonClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.NonClaimsBasedPayType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNonClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOpSolutionStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOpSolutionStatus(ctx context.Context, v interface{}) (*models.OpSolutionStatus, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.OpSolutionStatus(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOpSolutionStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOpSolutionStatus(ctx context.Context, sel ast.SelectionSet, v *models.OpSolutionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOOperationalNeedKey2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalNeedKey(ctx context.Context, v interface{}) (*models.OperationalNeedKey, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.OperationalNeedKey(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOperationalNeedKey2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalNeedKey(ctx context.Context, sel ast.SelectionSet, v *models.OperationalNeedKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOOperationalSolutionKey2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionKey(ctx context.Context, v interface{}) (*models.OperationalSolutionKey, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.OperationalSolutionKey(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOperationalSolutionKey2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionKey(ctx context.Context, sel ast.SelectionSet, v *models.OperationalSolutionKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) marshalOOperationalSolutionSubtask2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionSubtaskᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.OperationalSolutionSubtask) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOperationalSolutionSubtask2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOperationalSolutionSubtask(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOverlapType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOverlapType(ctx context.Context, v interface{}) (*models.OverlapType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.OverlapType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOverlapType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOverlapType(ctx context.Context, sel ast.SelectionSet, v *models.OverlapType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOParticipantCommunicationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantCommunicationType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantCommunicationType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantCommunicationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOParticipantCommunicationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantCommunicationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantCommunicationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOParticipantRiskType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐParticipantRiskType(ctx context.Context, v interface{}) (*models.ParticipantRiskType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ParticipantRiskType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOParticipantRiskType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐParticipantRiskType(ctx context.Context, sel ast.SelectionSet, v *models.ParticipantRiskType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOParticipantSelectionType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantSelectionType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantSelectionType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantSelectionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOParticipantSelectionType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantSelectionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantSelectionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOParticipantsIDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantsIDType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantsIDType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantsIDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOParticipantsIDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantsIDType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantsIDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantsType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPayRecipient2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipientᚄ(ctx context.Context, v interface{}) ([]models.PayRecipient, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.PayRecipient, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPayRecipient2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipient(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPayRecipient2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipientᚄ(ctx context.Context, sel ast.SelectionSet, v []models.PayRecipient) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayRecipient2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayTypeᚄ(ctx context.Context, v interface{}) ([]models.PayType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.PayType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.PayType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPlanDocumentSolutionLink2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocumentSolutionLinkᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PlanDocumentSolutionLink) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlanDocumentSolutionLink2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocumentSolutionLink(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOProviderAddType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddTypeᚄ(ctx context.Context, v interface{}) ([]model.ProviderAddType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ProviderAddType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProviderAddType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOProviderAddType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ProviderAddType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProviderAddType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOProviderLeaveType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveTypeᚄ(ctx context.Context, v interface{}) ([]model.ProviderLeaveType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ProviderLeaveType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProviderLeaveType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOProviderLeaveType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ProviderLeaveType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProviderLeaveType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalORecruitmentType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐRecruitmentType(ctx context.Context, v interface{}) (*models.RecruitmentType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.RecruitmentType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORecruitmentType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐRecruitmentType(ctx context.Context, sel ast.SelectionSet, v *models.RecruitmentType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOSearchFilter2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSearchFilterᚄ(ctx context.Context, v interface{}) ([]*model.SearchFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SearchFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSearchFilter2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSearchFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSelectionMethodType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodTypeᚄ(ctx context.Context, v interface{}) ([]model.SelectionMethodType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.SelectionMethodType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSelectionMethodType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSelectionMethodType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SelectionMethodType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSelectionMethodType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOStakeholdersType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersTypeᚄ(ctx context.Context, v interface{}) ([]model.StakeholdersType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.StakeholdersType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNStakeholdersType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOStakeholdersType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.StakeholdersType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStakeholdersType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTaskListSection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskListSection(ctx context.Context, v interface{}) (models.TaskListSection, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TaskListSection(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTaskListSection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskListSection(ctx context.Context, sel ast.SelectionSet, v models.TaskListSection) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalOTaskListSection2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskListSection(ctx context.Context, v interface{}) (*models.TaskListSection, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.TaskListSection(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTaskListSection2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskListSection(ctx context.Context, sel ast.SelectionSet, v *models.TaskListSection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOTaskStatusInput2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskStatusInput(ctx context.Context, v interface{}) (*model.TaskStatusInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.TaskStatusInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTaskStatusInput2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskStatusInput(ctx context.Context, sel ast.SelectionSet, v *model.TaskStatusInput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) unmarshalOTriStateAnswer2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTriStateAnswer(ctx context.Context, v interface{}) (*models.TriStateAnswer, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.TriStateAnswer(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTriStateAnswer2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTriStateAnswer(ctx context.Context, sel ast.SelectionSet, v *models.TriStateAnswer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v interface{}) (uuid.UUID, error) {
	res, err := models.UnmarshalUUID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v uuid.UUID) graphql.Marshaler {
	res := models.MarshalUUID(v)
	return res
}

func (ec *executionContext) unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, v interface{}) ([]uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]uuid.UUID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, sel ast.SelectionSet, v []uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v interface{}) (*uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := models.UnmarshalUUID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v *uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := models.MarshalUUID(*v)
	return res
}

func (ec *executionContext) marshalOUserAccount2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx context.Context, sel ast.SelectionSet, v *authentication.UserAccount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserAccount(ctx, sel, v)
}

func (ec *executionContext) unmarshalOWaiverType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverTypeᚄ(ctx context.Context, v interface{}) ([]model.WaiverType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.WaiverType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWaiverType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOWaiverType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.WaiverType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWaiverType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
