// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/cmsgov/mint-app/pkg/graph/model"
	"github.com/cmsgov/mint-app/pkg/models"
	"github.com/google/uuid"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	AuditChange() AuditChangeResolver
	ModelPlan() ModelPlanResolver
	Mutation() MutationResolver
	PlanBasics() PlanBasicsResolver
	PlanBeneficiaries() PlanBeneficiariesResolver
	PlanDiscussion() PlanDiscussionResolver
	PlanDocument() PlanDocumentResolver
	PlanGeneralCharacteristics() PlanGeneralCharacteristicsResolver
	PlanITTools() PlanITToolsResolver
	PlanOpsEvalAndLearning() PlanOpsEvalAndLearningResolver
	PlanParticipantsAndProviders() PlanParticipantsAndProvidersResolver
	PlanPayments() PlanPaymentsResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
	UserInfo() UserInfoResolver
}

type DirectiveRoot struct {
	HasRole func(ctx context.Context, obj interface{}, next graphql.Resolver, role model.Role) (res interface{}, err error)
}

type ComplexityRoot struct {
	AuditChange struct {
		Action      func(childComplexity int) int
		Fields      func(childComplexity int) int
		ForeignKey  func(childComplexity int) int
		ID          func(childComplexity int) int
		ModifiedBy  func(childComplexity int) int
		ModifiedDts func(childComplexity int) int
		PrimaryKey  func(childComplexity int) int
		TableName   func(childComplexity int) int
	}

	CurrentUser struct {
		LaunchDarkly func(childComplexity int) int
	}

	DiscussionReply struct {
		Content      func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		CreatedDts   func(childComplexity int) int
		DiscussionID func(childComplexity int) int
		ID           func(childComplexity int) int
		IsAssessment func(childComplexity int) int
		ModifiedBy   func(childComplexity int) int
		ModifiedDts  func(childComplexity int) int
		Resolution   func(childComplexity int) int
	}

	ExistingModel struct {
		Authority                     func(childComplexity int) int
		Category                      func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		CreatedDts                    func(childComplexity int) int
		DateBegan                     func(childComplexity int) int
		DateEnded                     func(childComplexity int) int
		Description                   func(childComplexity int) int
		DisplayModelSummary           func(childComplexity int) int
		ID                            func(childComplexity int) int
		Keywords                      func(childComplexity int) int
		ModelName                     func(childComplexity int) int
		ModifiedBy                    func(childComplexity int) int
		ModifiedDts                   func(childComplexity int) int
		NumberOfBeneficiariesImpacted func(childComplexity int) int
		NumberOfParticipants          func(childComplexity int) int
		NumberOfPhysiciansImpacted    func(childComplexity int) int
		Stage                         func(childComplexity int) int
		States                        func(childComplexity int) int
		URL                           func(childComplexity int) int
	}

	LaunchDarklySettings struct {
		SignedHash func(childComplexity int) int
		UserKey    func(childComplexity int) int
	}

	ModelPlan struct {
		Archived                 func(childComplexity int) int
		Basics                   func(childComplexity int) int
		Beneficiaries            func(childComplexity int) int
		Collaborators            func(childComplexity int) int
		CrTdls                   func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		CreatedDts               func(childComplexity int) int
		Discussions              func(childComplexity int) int
		Documents                func(childComplexity int) int
		GeneralCharacteristics   func(childComplexity int) int
		ID                       func(childComplexity int) int
		IsCollaborator           func(childComplexity int) int
		IsFavorite               func(childComplexity int) int
		ItTools                  func(childComplexity int) int
		ModelName                func(childComplexity int) int
		ModifiedBy               func(childComplexity int) int
		ModifiedDts              func(childComplexity int) int
		NameHistory              func(childComplexity int, sort models.SortDirection) int
		OpsEvalAndLearning       func(childComplexity int) int
		ParticipantsAndProviders func(childComplexity int) int
		Payments                 func(childComplexity int) int
		Status                   func(childComplexity int) int
	}

	Mutation struct {
		AddPlanFavorite                    func(childComplexity int, modelPlanID uuid.UUID) int
		AgreeToNda                         func(childComplexity int, agree bool) int
		CreateDiscussionReply              func(childComplexity int, input model.DiscussionReplyCreateInput) int
		CreateModelPlan                    func(childComplexity int, modelName string) int
		CreatePlanCollaborator             func(childComplexity int, input model.PlanCollaboratorCreateInput) int
		CreatePlanCrTdl                    func(childComplexity int, input model.PlanCrTdlCreateInput) int
		CreatePlanDiscussion               func(childComplexity int, input model.PlanDiscussionCreateInput) int
		DeleteDiscussionReply              func(childComplexity int, id uuid.UUID) int
		DeletePlanCollaborator             func(childComplexity int, id uuid.UUID) int
		DeletePlanCrTdl                    func(childComplexity int, id uuid.UUID) int
		DeletePlanDiscussion               func(childComplexity int, id uuid.UUID) int
		DeletePlanDocument                 func(childComplexity int, id uuid.UUID) int
		DeletePlanFavorite                 func(childComplexity int, modelPlanID uuid.UUID) int
		LockTaskListSection                func(childComplexity int, modelPlanID uuid.UUID, section model.TaskListSection) int
		UnlockAllTaskListSections          func(childComplexity int, modelPlanID uuid.UUID) int
		UnlockTaskListSection              func(childComplexity int, modelPlanID uuid.UUID, section model.TaskListSection) int
		UpdateDiscussionReply              func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdateModelPlan                    func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanBasics                   func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanBeneficiaries            func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanCollaborator             func(childComplexity int, id uuid.UUID, newRole models.TeamRole) int
		UpdatePlanCrTdl                    func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanDiscussion               func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanGeneralCharacteristics   func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanItTools                  func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanOpsEvalAndLearning       func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanParticipantsAndProviders func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdatePlanPayments                 func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UploadNewPlanDocument              func(childComplexity int, input model.PlanDocumentInput) int
	}

	NDAInfo struct {
		Agreed    func(childComplexity int) int
		AgreedDts func(childComplexity int) int
	}

	PlanBasics struct {
		Announced               func(childComplexity int) int
		ApplicationsEnd         func(childComplexity int) int
		ApplicationsStart       func(childComplexity int) int
		CMSOther                func(childComplexity int) int
		ClearanceEnds           func(childComplexity int) int
		ClearanceStarts         func(childComplexity int) int
		CmmiGroups              func(childComplexity int) int
		CmsCenters              func(childComplexity int) int
		CompleteICIP            func(childComplexity int) int
		CreatedBy               func(childComplexity int) int
		CreatedDts              func(childComplexity int) int
		Goal                    func(childComplexity int) int
		HighLevelNote           func(childComplexity int) int
		ID                      func(childComplexity int) int
		ModelCategory           func(childComplexity int) int
		ModelPlanID             func(childComplexity int) int
		ModelType               func(childComplexity int) int
		ModifiedBy              func(childComplexity int) int
		ModifiedDts             func(childComplexity int) int
		Note                    func(childComplexity int) int
		PerformancePeriodEnds   func(childComplexity int) int
		PerformancePeriodStarts func(childComplexity int) int
		PhasedIn                func(childComplexity int) int
		PhasedInNote            func(childComplexity int) int
		Problem                 func(childComplexity int) int
		ReadyForReviewBy        func(childComplexity int) int
		ReadyForReviewDts       func(childComplexity int) int
		Status                  func(childComplexity int) int
		TestInterventions       func(childComplexity int) int
		WrapUpEnds              func(childComplexity int) int
	}

	PlanBeneficiaries struct {
		Beneficiaries                         func(childComplexity int) int
		BeneficiariesNote                     func(childComplexity int) int
		BeneficiariesOther                    func(childComplexity int) int
		BeneficiaryOverlap                    func(childComplexity int) int
		BeneficiaryOverlapNote                func(childComplexity int) int
		BeneficiarySelectionFrequency         func(childComplexity int) int
		BeneficiarySelectionFrequencyNote     func(childComplexity int) int
		BeneficiarySelectionFrequencyOther    func(childComplexity int) int
		BeneficiarySelectionMethod            func(childComplexity int) int
		BeneficiarySelectionNote              func(childComplexity int) int
		BeneficiarySelectionOther             func(childComplexity int) int
		ConfidenceNote                        func(childComplexity int) int
		CreatedBy                             func(childComplexity int) int
		CreatedDts                            func(childComplexity int) int
		EstimateConfidence                    func(childComplexity int) int
		ExcludeCertainCharacteristics         func(childComplexity int) int
		ExcludeCertainCharacteristicsCriteria func(childComplexity int) int
		ExcludeCertainCharacteristicsNote     func(childComplexity int) int
		ID                                    func(childComplexity int) int
		ModelPlanID                           func(childComplexity int) int
		ModifiedBy                            func(childComplexity int) int
		ModifiedDts                           func(childComplexity int) int
		NumberPeopleImpacted                  func(childComplexity int) int
		PrecedenceRules                       func(childComplexity int) int
		ReadyForReviewBy                      func(childComplexity int) int
		ReadyForReviewDts                     func(childComplexity int) int
		Status                                func(childComplexity int) int
		TreatDualElligibleDifferent           func(childComplexity int) int
		TreatDualElligibleDifferentHow        func(childComplexity int) int
		TreatDualElligibleDifferentNote       func(childComplexity int) int
	}

	PlanCollaborator struct {
		CreatedBy   func(childComplexity int) int
		CreatedDts  func(childComplexity int) int
		EUAUserID   func(childComplexity int) int
		Email       func(childComplexity int) int
		FullName    func(childComplexity int) int
		ID          func(childComplexity int) int
		ModelPlanID func(childComplexity int) int
		ModifiedBy  func(childComplexity int) int
		ModifiedDts func(childComplexity int) int
		TeamRole    func(childComplexity int) int
	}

	PlanCrTdl struct {
		CreatedBy     func(childComplexity int) int
		CreatedDts    func(childComplexity int) int
		DateInitiated func(childComplexity int) int
		ID            func(childComplexity int) int
		IDNumber      func(childComplexity int) int
		ModelPlanID   func(childComplexity int) int
		ModifiedBy    func(childComplexity int) int
		ModifiedDts   func(childComplexity int) int
		Note          func(childComplexity int) int
		Title         func(childComplexity int) int
	}

	PlanDiscussion struct {
		Content      func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		CreatedDts   func(childComplexity int) int
		ID           func(childComplexity int) int
		IsAssessment func(childComplexity int) int
		ModelPlanID  func(childComplexity int) int
		ModifiedBy   func(childComplexity int) int
		ModifiedDts  func(childComplexity int) int
		Replies      func(childComplexity int) int
		Status       func(childComplexity int) int
	}

	PlanDocument struct {
		Bucket        func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		CreatedDts    func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DocumentType  func(childComplexity int) int
		DownloadURL   func(childComplexity int) int
		FileKey       func(childComplexity int) int
		FileName      func(childComplexity int) int
		FileSize      func(childComplexity int) int
		FileType      func(childComplexity int) int
		ID            func(childComplexity int) int
		ModelPlanID   func(childComplexity int) int
		ModifiedBy    func(childComplexity int) int
		ModifiedDts   func(childComplexity int) int
		OptionalNotes func(childComplexity int) int
		OtherType     func(childComplexity int) int
		VirusClean    func(childComplexity int) int
		VirusScanned  func(childComplexity int) int
	}

	PlanFavorite struct {
		CreatedBy   func(childComplexity int) int
		CreatedDts  func(childComplexity int) int
		ID          func(childComplexity int) int
		ModelPlanID func(childComplexity int) int
		ModifiedBy  func(childComplexity int) int
		ModifiedDts func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	PlanGeneralCharacteristics struct {
		AdditionalServicesInvolved                func(childComplexity int) int
		AdditionalServicesInvolvedDescription     func(childComplexity int) int
		AdditionalServicesInvolvedNote            func(childComplexity int) int
		AgreementTypes                            func(childComplexity int) int
		AgreementTypesOther                       func(childComplexity int) int
		AlternativePaymentModel                   func(childComplexity int) int
		AlternativePaymentModelNote               func(childComplexity int) int
		AlternativePaymentModelTypes              func(childComplexity int) int
		AuthorityAllowances                       func(childComplexity int) int
		AuthorityAllowancesNote                   func(childComplexity int) int
		AuthorityAllowancesOther                  func(childComplexity int) int
		CareCoordinationInvolved                  func(childComplexity int) int
		CareCoordinationInvolvedDescription       func(childComplexity int) int
		CareCoordinationInvolvedNote              func(childComplexity int) int
		CollectPlanBids                           func(childComplexity int) int
		CollectPlanBidsNote                       func(childComplexity int) int
		CommunityPartnersInvolved                 func(childComplexity int) int
		CommunityPartnersInvolvedDescription      func(childComplexity int) int
		CommunityPartnersInvolvedNote             func(childComplexity int) int
		CreatedBy                                 func(childComplexity int) int
		CreatedDts                                func(childComplexity int) int
		ExistingModel                             func(childComplexity int) int
		GeographiesTargeted                       func(childComplexity int) int
		GeographiesTargetedAppliedTo              func(childComplexity int) int
		GeographiesTargetedAppliedToOther         func(childComplexity int) int
		GeographiesTargetedNote                   func(childComplexity int) int
		GeographiesTargetedTypes                  func(childComplexity int) int
		GeographiesTargetedTypesOther             func(childComplexity int) int
		HasComponentsOrTracks                     func(childComplexity int) int
		HasComponentsOrTracksDiffer               func(childComplexity int) int
		HasComponentsOrTracksNote                 func(childComplexity int) int
		ID                                        func(childComplexity int) int
		IsNewModel                                func(childComplexity int) int
		KeyCharacteristics                        func(childComplexity int) int
		KeyCharacteristicsNote                    func(childComplexity int) int
		KeyCharacteristicsOther                   func(childComplexity int) int
		ManagePartCDEnrollment                    func(childComplexity int) int
		ManagePartCDEnrollmentNote                func(childComplexity int) int
		ModelPlanID                               func(childComplexity int) int
		ModifiedBy                                func(childComplexity int) int
		ModifiedDts                               func(childComplexity int) int
		MultiplePatricipationAgreementsNeeded     func(childComplexity int) int
		MultiplePatricipationAgreementsNeededNote func(childComplexity int) int
		ParticipationOptions                      func(childComplexity int) int
		ParticipationOptionsNote                  func(childComplexity int) int
		PlanContactUpdated                        func(childComplexity int) int
		PlanContactUpdatedNote                    func(childComplexity int) int
		ReadyForReviewBy                          func(childComplexity int) int
		ReadyForReviewDts                         func(childComplexity int) int
		ResemblesExistingModel                    func(childComplexity int) int
		ResemblesExistingModelHow                 func(childComplexity int) int
		ResemblesExistingModelNote                func(childComplexity int) int
		ResemblesExistingModelWhich               func(childComplexity int) int
		RulemakingRequired                        func(childComplexity int) int
		RulemakingRequiredDescription             func(childComplexity int) int
		RulemakingRequiredNote                    func(childComplexity int) int
		Status                                    func(childComplexity int) int
		WaiversRequired                           func(childComplexity int) int
		WaiversRequiredNote                       func(childComplexity int) int
		WaiversRequiredTypes                      func(childComplexity int) int
	}

	PlanITTools struct {
		BManageBeneficiaryOverlap         func(childComplexity int) int
		BManageBeneficiaryOverlapNote     func(childComplexity int) int
		BManageBeneficiaryOverlapOther    func(childComplexity int) int
		CreatedBy                         func(childComplexity int) int
		CreatedDts                        func(childComplexity int) int
		GcCollectBids                     func(childComplexity int) int
		GcCollectBidsNote                 func(childComplexity int) int
		GcCollectBidsOther                func(childComplexity int) int
		GcPartCDNote                      func(childComplexity int) int
		GcPartCDOther                     func(childComplexity int) int
		GcPartCd                          func(childComplexity int) int
		GcUpdateContract                  func(childComplexity int) int
		GcUpdateContractNote              func(childComplexity int) int
		GcUpdateContractOther             func(childComplexity int) int
		ID                                func(childComplexity int) int
		ModelPlanID                       func(childComplexity int) int
		ModifiedBy                        func(childComplexity int) int
		ModifiedDts                       func(childComplexity int) int
		OelClaimsBasedMeasures            func(childComplexity int) int
		OelClaimsBasedMeasuresNote        func(childComplexity int) int
		OelClaimsBasedMeasuresOther       func(childComplexity int) int
		OelCollectData                    func(childComplexity int) int
		OelCollectDataNote                func(childComplexity int) int
		OelCollectDataOther               func(childComplexity int) int
		OelEducateBeneficiaries           func(childComplexity int) int
		OelEducateBeneficiariesNote       func(childComplexity int) int
		OelEducateBeneficiariesOther      func(childComplexity int) int
		OelEvaluationContractor           func(childComplexity int) int
		OelEvaluationContractorNote       func(childComplexity int) int
		OelEvaluationContractorOther      func(childComplexity int) int
		OelHelpdeskSupport                func(childComplexity int) int
		OelHelpdeskSupportNote            func(childComplexity int) int
		OelHelpdeskSupportOther           func(childComplexity int) int
		OelLearningContractor             func(childComplexity int) int
		OelLearningContractorNote         func(childComplexity int) int
		OelLearningContractorOther        func(childComplexity int) int
		OelManageAco                      func(childComplexity int) int
		OelManageAcoNote                  func(childComplexity int) int
		OelManageAcoOther                 func(childComplexity int) int
		OelObtainData                     func(childComplexity int) int
		OelObtainDataNote                 func(childComplexity int) int
		OelObtainDataOther                func(childComplexity int) int
		OelParticipantCollaboration       func(childComplexity int) int
		OelParticipantCollaborationNote   func(childComplexity int) int
		OelParticipantCollaborationOther  func(childComplexity int) int
		OelPerformanceBenchmark           func(childComplexity int) int
		OelPerformanceBenchmarkNote       func(childComplexity int) int
		OelPerformanceBenchmarkOther      func(childComplexity int) int
		OelProcessAppeals                 func(childComplexity int) int
		OelProcessAppealsNote             func(childComplexity int) int
		OelProcessAppealsOther            func(childComplexity int) int
		OelQualityScores                  func(childComplexity int) int
		OelQualityScoresNote              func(childComplexity int) int
		OelQualityScoresOther             func(childComplexity int) int
		OelSendReports                    func(childComplexity int) int
		OelSendReportsNote                func(childComplexity int) int
		OelSendReportsOther               func(childComplexity int) int
		PInformFfs                        func(childComplexity int) int
		PInformFfsNote                    func(childComplexity int) int
		PInformFfsOther                   func(childComplexity int) int
		PMakeClaimsPayments               func(childComplexity int) int
		PMakeClaimsPaymentsNote           func(childComplexity int) int
		PMakeClaimsPaymentsOther          func(childComplexity int) int
		PNonClaimsBasedPayments           func(childComplexity int) int
		PNonClaimsBasedPaymentsNote       func(childComplexity int) int
		PNonClaimsBasedPaymentsOther      func(childComplexity int) int
		PRecoverPayments                  func(childComplexity int) int
		PRecoverPaymentsNote              func(childComplexity int) int
		PRecoverPaymentsOther             func(childComplexity int) int
		PSharedSavingsPlan                func(childComplexity int) int
		PSharedSavingsPlanNote            func(childComplexity int) int
		PSharedSavingsPlanOther           func(childComplexity int) int
		PpAppSupportContractor            func(childComplexity int) int
		PpAppSupportContractorNote        func(childComplexity int) int
		PpAppSupportContractorOther       func(childComplexity int) int
		PpCollectScoreReview              func(childComplexity int) int
		PpCollectScoreReviewNote          func(childComplexity int) int
		PpCollectScoreReviewOther         func(childComplexity int) int
		PpCommunicateWithParticipant      func(childComplexity int) int
		PpCommunicateWithParticipantNote  func(childComplexity int) int
		PpCommunicateWithParticipantOther func(childComplexity int) int
		PpManageProviderOverlap           func(childComplexity int) int
		PpManageProviderOverlapNote       func(childComplexity int) int
		PpManageProviderOverlapOther      func(childComplexity int) int
		PpToAdvertise                     func(childComplexity int) int
		PpToAdvertiseNote                 func(childComplexity int) int
		PpToAdvertiseOther                func(childComplexity int) int
		ReadyForReviewBy                  func(childComplexity int) int
		ReadyForReviewDts                 func(childComplexity int) int
		Status                            func(childComplexity int) int
	}

	PlanOpsEvalAndLearning struct {
		AgencyOrStateHelp                            func(childComplexity int) int
		AgencyOrStateHelpNote                        func(childComplexity int) int
		AgencyOrStateHelpOther                       func(childComplexity int) int
		AnticipatedChallenges                        func(childComplexity int) int
		AppToSendFilesToKnown                        func(childComplexity int) int
		AppToSendFilesToNote                         func(childComplexity int) int
		AppToSendFilesToWhich                        func(childComplexity int) int
		AppealFeedback                               func(childComplexity int) int
		AppealNote                                   func(childComplexity int) int
		AppealOther                                  func(childComplexity int) int
		AppealPayments                               func(childComplexity int) int
		AppealPerformance                            func(childComplexity int) int
		BenchmarkForPerformance                      func(childComplexity int) int
		BenchmarkForPerformanceNote                  func(childComplexity int) int
		CaptureParticipantInfo                       func(childComplexity int) int
		CaptureParticipantInfoNote                   func(childComplexity int) int
		CcmInvolvment                                func(childComplexity int) int
		CcmInvolvmentNote                            func(childComplexity int) int
		CcmInvolvmentOther                           func(childComplexity int) int
		ComputePerformanceScores                     func(childComplexity int) int
		ComputePerformanceScoresNote                 func(childComplexity int) int
		ContractorSupport                            func(childComplexity int) int
		ContractorSupportHow                         func(childComplexity int) int
		ContractorSupportNote                        func(childComplexity int) int
		ContractorSupportOther                       func(childComplexity int) int
		CreatedBy                                    func(childComplexity int) int
		CreatedDts                                   func(childComplexity int) int
		DataCollectionFrequency                      func(childComplexity int) int
		DataCollectionFrequencyNote                  func(childComplexity int) int
		DataCollectionFrequencyOther                 func(childComplexity int) int
		DataCollectionStarts                         func(childComplexity int) int
		DataCollectionStartsOther                    func(childComplexity int) int
		DataFlowDiagramsNeeded                       func(childComplexity int) int
		DataFullTimeOrIncremental                    func(childComplexity int) int
		DataMonitoringFileOther                      func(childComplexity int) int
		DataMonitoringFileTypes                      func(childComplexity int) int
		DataMonitoringNote                           func(childComplexity int) int
		DataNeededForMonitoring                      func(childComplexity int) int
		DataNeededForMonitoringNote                  func(childComplexity int) int
		DataNeededForMonitoringOther                 func(childComplexity int) int
		DataResponseFileFrequency                    func(childComplexity int) int
		DataResponseType                             func(childComplexity int) int
		DataSharingFrequency                         func(childComplexity int) int
		DataSharingFrequencyOther                    func(childComplexity int) int
		DataSharingStarts                            func(childComplexity int) int
		DataSharingStartsNote                        func(childComplexity int) int
		DataSharingStartsOther                       func(childComplexity int) int
		DataToSendParticicipants                     func(childComplexity int) int
		DataToSendParticicipantsNote                 func(childComplexity int) int
		DataToSendParticicipantsOther                func(childComplexity int) int
		DevelopNewQualityMeasures                    func(childComplexity int) int
		DevelopNewQualityMeasuresNote                func(childComplexity int) int
		DraftIcdDueDate                              func(childComplexity int) int
		EftSetUp                                     func(childComplexity int) int
		EvaluationApproachOther                      func(childComplexity int) int
		EvaluationApproaches                         func(childComplexity int) int
		EvalutaionApproachNote                       func(childComplexity int) int
		FileNamingConventions                        func(childComplexity int) int
		HelpdeskUse                                  func(childComplexity int) int
		HelpdeskUseNote                              func(childComplexity int) int
		ID                                           func(childComplexity int) int
		IcdNote                                      func(childComplexity int) int
		IcdOwner                                     func(childComplexity int) int
		IddocSupport                                 func(childComplexity int) int
		IddocSupportNote                             func(childComplexity int) int
		ModelLearningSystems                         func(childComplexity int) int
		ModelLearningSystemsNote                     func(childComplexity int) int
		ModelLearningSystemsOther                    func(childComplexity int) int
		ModelPlanID                                  func(childComplexity int) int
		ModifiedBy                                   func(childComplexity int) int
		ModifiedDts                                  func(childComplexity int) int
		ProduceBenefitEnhancementFiles               func(childComplexity int) int
		QualityPerformanceImpactsPayment             func(childComplexity int) int
		QualityPerformanceImpactsPaymentNote         func(childComplexity int) int
		QualityReportingStarts                       func(childComplexity int) int
		QualityReportingStartsNote                   func(childComplexity int) int
		QualityReportingStartsOther                  func(childComplexity int) int
		ReadyForReviewBy                             func(childComplexity int) int
		ReadyForReviewDts                            func(childComplexity int) int
		RiskAdjustFeedback                           func(childComplexity int) int
		RiskAdjustNote                               func(childComplexity int) int
		RiskAdjustOther                              func(childComplexity int) int
		RiskAdjustPayments                           func(childComplexity int) int
		RiskAdjustPerformance                        func(childComplexity int) int
		SendFilesBetweenCcw                          func(childComplexity int) int
		SendFilesBetweenCcwNote                      func(childComplexity int) int
		ShareCclfData                                func(childComplexity int) int
		ShareCclfDataNote                            func(childComplexity int) int
		Stakeholders                                 func(childComplexity int) int
		StakeholdersNote                             func(childComplexity int) int
		StakeholdersOther                            func(childComplexity int) int
		Status                                       func(childComplexity int) int
		StcNeeds                                     func(childComplexity int) int
		TechnicalContactsIdentified                  func(childComplexity int) int
		TechnicalContactsIdentifiedDetail            func(childComplexity int) int
		TechnicalContactsIdentifiedNote              func(childComplexity int) int
		TestingNote                                  func(childComplexity int) int
		TestingTimelines                             func(childComplexity int) int
		UatNeeds                                     func(childComplexity int) int
		UnsolicitedAdjustmentsIncluded               func(childComplexity int) int
		UseCcwForFileDistribiutionToParticipants     func(childComplexity int) int
		UseCcwForFileDistribiutionToParticipantsNote func(childComplexity int) int
	}

	PlanParticipantsAndProviders struct {
		CommunicationMethod               func(childComplexity int) int
		CommunicationMethodOther          func(childComplexity int) int
		CommunicationNote                 func(childComplexity int) int
		ConfidenceNote                    func(childComplexity int) int
		CoordinateWork                    func(childComplexity int) int
		CoordinateWorkNote                func(childComplexity int) int
		CreatedBy                         func(childComplexity int) int
		CreatedDts                        func(childComplexity int) int
		EstimateConfidence                func(childComplexity int) int
		ExpectedNumberOfParticipants      func(childComplexity int) int
		GainsharePayments                 func(childComplexity int) int
		GainsharePaymentsNote             func(childComplexity int) int
		GainsharePaymentsTrack            func(childComplexity int) int
		ID                                func(childComplexity int) int
		MedicareProviderType              func(childComplexity int) int
		ModelApplicationLevel             func(childComplexity int) int
		ModelPlanID                       func(childComplexity int) int
		ModifiedBy                        func(childComplexity int) int
		ModifiedDts                       func(childComplexity int) int
		ParticipantAssumeRisk             func(childComplexity int) int
		Participants                      func(childComplexity int) int
		ParticipantsCurrentlyInModels     func(childComplexity int) int
		ParticipantsCurrentlyInModelsNote func(childComplexity int) int
		ParticipantsIDSNote               func(childComplexity int) int
		ParticipantsIds                   func(childComplexity int) int
		ParticipantsIdsOther              func(childComplexity int) int
		ParticipantsNote                  func(childComplexity int) int
		ParticipantsOther                 func(childComplexity int) int
		ProviderAddMethod                 func(childComplexity int) int
		ProviderAddMethodNote             func(childComplexity int) int
		ProviderAddMethodOther            func(childComplexity int) int
		ProviderAdditionFrequency         func(childComplexity int) int
		ProviderAdditionFrequencyNote     func(childComplexity int) int
		ProviderAdditionFrequencyOther    func(childComplexity int) int
		ProviderLeaveMethod               func(childComplexity int) int
		ProviderLeaveMethodNote           func(childComplexity int) int
		ProviderLeaveMethodOther          func(childComplexity int) int
		ProviderOverlap                   func(childComplexity int) int
		ProviderOverlapHierarchy          func(childComplexity int) int
		ProviderOverlapNote               func(childComplexity int) int
		ReadyForReviewBy                  func(childComplexity int) int
		ReadyForReviewDts                 func(childComplexity int) int
		RecruitmentMethod                 func(childComplexity int) int
		RecruitmentNote                   func(childComplexity int) int
		RecruitmentOther                  func(childComplexity int) int
		RiskNote                          func(childComplexity int) int
		RiskOther                         func(childComplexity int) int
		RiskType                          func(childComplexity int) int
		SelectionMethod                   func(childComplexity int) int
		SelectionNote                     func(childComplexity int) int
		SelectionOther                    func(childComplexity int) int
		StatesEngagement                  func(childComplexity int) int
		Status                            func(childComplexity int) int
		WillRiskChange                    func(childComplexity int) int
		WillRiskChangeNote                func(childComplexity int) int
	}

	PlanPayments struct {
		AffectsMedicareSecondaryPayerClaims               func(childComplexity int) int
		AffectsMedicareSecondaryPayerClaimsHow            func(childComplexity int) int
		AffectsMedicareSecondaryPayerClaimsNote           func(childComplexity int) int
		AnticipateReconcilingPaymentsRetrospectively      func(childComplexity int) int
		AnticipateReconcilingPaymentsRetrospectivelyNote  func(childComplexity int) int
		AnticipatedPaymentFrequency                       func(childComplexity int) int
		AnticipatedPaymentFrequencyNote                   func(childComplexity int) int
		AnticipatedPaymentFrequencyOther                  func(childComplexity int) int
		BeneficiaryCostSharingLevelAndHandling            func(childComplexity int) int
		CanParticipantsSelectBetweenPaymentMechanisms     func(childComplexity int) int
		CanParticipantsSelectBetweenPaymentMechanismsHow  func(childComplexity int) int
		CanParticipantsSelectBetweenPaymentMechanismsNote func(childComplexity int) int
		ChangesMedicarePhysicianFeeSchedule               func(childComplexity int) int
		ChangesMedicarePhysicianFeeScheduleNote           func(childComplexity int) int
		CreatedBy                                         func(childComplexity int) int
		CreatedDts                                        func(childComplexity int) int
		CreatingDependenciesBetweenServices               func(childComplexity int) int
		CreatingDependenciesBetweenServicesNote           func(childComplexity int) int
		ExpectedCalculationComplexityLevel                func(childComplexity int) int
		ExpectedCalculationComplexityLevelNote            func(childComplexity int) int
		FundingSource                                     func(childComplexity int) int
		FundingSourceNote                                 func(childComplexity int) int
		FundingSourceOther                                func(childComplexity int) int
		FundingSourceR                                    func(childComplexity int) int
		FundingSourceRNote                                func(childComplexity int) int
		FundingSourceROther                               func(childComplexity int) int
		FundingSourceRTrustFund                           func(childComplexity int) int
		FundingSourceTrustFund                            func(childComplexity int) int
		FundingStructure                                  func(childComplexity int) int
		ID                                                func(childComplexity int) int
		IsContractorAwareTestDataRequirements             func(childComplexity int) int
		ModelPlanID                                       func(childComplexity int) int
		ModifiedBy                                        func(childComplexity int) int
		ModifiedDts                                       func(childComplexity int) int
		NeedsClaimsDataCollection                         func(childComplexity int) int
		NeedsClaimsDataCollectionNote                     func(childComplexity int) int
		NonClaimsPaymentOther                             func(childComplexity int) int
		NonClaimsPayments                                 func(childComplexity int) int
		NumberPaymentsPerPayCycle                         func(childComplexity int) int
		NumberPaymentsPerPayCycleNote                     func(childComplexity int) int
		PayClaims                                         func(childComplexity int) int
		PayClaimsNote                                     func(childComplexity int) int
		PayClaimsOther                                    func(childComplexity int) int
		PayModelDifferentiation                           func(childComplexity int) int
		PayRecipients                                     func(childComplexity int) int
		PayRecipientsNote                                 func(childComplexity int) int
		PayRecipientsOtherSpecification                   func(childComplexity int) int
		PayType                                           func(childComplexity int) int
		PayTypeNote                                       func(childComplexity int) int
		PaymentCalculationOwner                           func(childComplexity int) int
		PaymentStartDate                                  func(childComplexity int) int
		PaymentStartDateNote                              func(childComplexity int) int
		PlanningToUseInnovationPaymentContractor          func(childComplexity int) int
		PlanningToUseInnovationPaymentContractorNote      func(childComplexity int) int
		ProvidingThirdPartyFile                           func(childComplexity int) int
		ReadyForReviewBy                                  func(childComplexity int) int
		ReadyForReviewDts                                 func(childComplexity int) int
		SharedSystemsInvolvedAdditionalClaimPayment       func(childComplexity int) int
		SharedSystemsInvolvedAdditionalClaimPaymentNote   func(childComplexity int) int
		ShouldAnyProviderExcludedFFSSystemsNote           func(childComplexity int) int
		ShouldAnyProvidersExcludedFFSSystems              func(childComplexity int) int
		Status                                            func(childComplexity int) int
		WaiveBeneficiaryCostSharingForAnyServices         func(childComplexity int) int
		WaiveBeneficiaryCostSharingNote                   func(childComplexity int) int
		WaiveBeneficiaryCostSharingServiceSpecification   func(childComplexity int) int
		WaiverOnlyAppliesPartOfPayment                    func(childComplexity int) int
		WillRecoverPayments                               func(childComplexity int) int
		WillRecoverPaymentsNote                           func(childComplexity int) int
	}

	Query struct {
		AuditChanges             func(childComplexity int, tableName string, primaryKey uuid.UUID) int
		CedarPersonsByCommonName func(childComplexity int, commonName string) int
		CrTdl                    func(childComplexity int, id uuid.UUID) int
		CurrentUser              func(childComplexity int) int
		ExistingModelCollection  func(childComplexity int) int
		ModelPlan                func(childComplexity int, id uuid.UUID) int
		ModelPlanCollection      func(childComplexity int, includeAll bool) int
		NdaInfo                  func(childComplexity int) int
		PlanCollaboratorByID     func(childComplexity int, id uuid.UUID) int
		PlanDocument             func(childComplexity int, id uuid.UUID) int
		PlanPayments             func(childComplexity int, id uuid.UUID) int
		TaskListSectionLocks     func(childComplexity int, modelPlanID uuid.UUID) int
	}

	Subscription struct {
		OnLockTaskListSectionContext  func(childComplexity int, modelPlanID uuid.UUID) int
		OnTaskListSectionLocksChanged func(childComplexity int, modelPlanID uuid.UUID) int
	}

	TaskListSectionLockStatus struct {
		IsAssessment func(childComplexity int) int
		LockedBy     func(childComplexity int) int
		ModelPlanID  func(childComplexity int) int
		Section      func(childComplexity int) int
	}

	TaskListSectionLockStatusChanged struct {
		ActionType func(childComplexity int) int
		ChangeType func(childComplexity int) int
		LockStatus func(childComplexity int) int
	}

	UserInfo struct {
		CommonName func(childComplexity int) int
		Email      func(childComplexity int) int
		EuaUserID  func(childComplexity int) int
	}
}

type AuditChangeResolver interface {
	Fields(ctx context.Context, obj *models.AuditChange) (map[string]interface{}, error)
}
type ModelPlanResolver interface {
	Basics(ctx context.Context, obj *models.ModelPlan) (*models.PlanBasics, error)
	GeneralCharacteristics(ctx context.Context, obj *models.ModelPlan) (*models.PlanGeneralCharacteristics, error)
	ParticipantsAndProviders(ctx context.Context, obj *models.ModelPlan) (*models.PlanParticipantsAndProviders, error)
	Beneficiaries(ctx context.Context, obj *models.ModelPlan) (*models.PlanBeneficiaries, error)
	OpsEvalAndLearning(ctx context.Context, obj *models.ModelPlan) (*models.PlanOpsEvalAndLearning, error)
	Collaborators(ctx context.Context, obj *models.ModelPlan) ([]*models.PlanCollaborator, error)
	Documents(ctx context.Context, obj *models.ModelPlan) ([]*models.PlanDocument, error)
	Discussions(ctx context.Context, obj *models.ModelPlan) ([]*models.PlanDiscussion, error)
	Payments(ctx context.Context, obj *models.ModelPlan) (*models.PlanPayments, error)
	ItTools(ctx context.Context, obj *models.ModelPlan) (*models.PlanITTools, error)

	IsFavorite(ctx context.Context, obj *models.ModelPlan) (bool, error)
	IsCollaborator(ctx context.Context, obj *models.ModelPlan) (bool, error)
	CrTdls(ctx context.Context, obj *models.ModelPlan) ([]*models.PlanCrTdl, error)
	NameHistory(ctx context.Context, obj *models.ModelPlan, sort models.SortDirection) ([]string, error)
}
type MutationResolver interface {
	CreateModelPlan(ctx context.Context, modelName string) (*models.ModelPlan, error)
	UpdateModelPlan(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.ModelPlan, error)
	CreatePlanCollaborator(ctx context.Context, input model.PlanCollaboratorCreateInput) (*models.PlanCollaborator, error)
	UpdatePlanCollaborator(ctx context.Context, id uuid.UUID, newRole models.TeamRole) (*models.PlanCollaborator, error)
	DeletePlanCollaborator(ctx context.Context, id uuid.UUID) (*models.PlanCollaborator, error)
	UpdatePlanBasics(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanBasics, error)
	UpdatePlanGeneralCharacteristics(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanGeneralCharacteristics, error)
	UpdatePlanBeneficiaries(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanBeneficiaries, error)
	UpdatePlanParticipantsAndProviders(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanParticipantsAndProviders, error)
	UpdatePlanItTools(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanITTools, error)
	UpdatePlanOpsEvalAndLearning(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanOpsEvalAndLearning, error)
	UploadNewPlanDocument(ctx context.Context, input model.PlanDocumentInput) (*models.PlanDocument, error)
	DeletePlanDocument(ctx context.Context, id uuid.UUID) (int, error)
	CreatePlanDiscussion(ctx context.Context, input model.PlanDiscussionCreateInput) (*models.PlanDiscussion, error)
	UpdatePlanDiscussion(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanDiscussion, error)
	DeletePlanDiscussion(ctx context.Context, id uuid.UUID) (*models.PlanDiscussion, error)
	CreateDiscussionReply(ctx context.Context, input model.DiscussionReplyCreateInput) (*models.DiscussionReply, error)
	UpdateDiscussionReply(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.DiscussionReply, error)
	DeleteDiscussionReply(ctx context.Context, id uuid.UUID) (*models.DiscussionReply, error)
	LockTaskListSection(ctx context.Context, modelPlanID uuid.UUID, section model.TaskListSection) (bool, error)
	UnlockTaskListSection(ctx context.Context, modelPlanID uuid.UUID, section model.TaskListSection) (bool, error)
	UnlockAllTaskListSections(ctx context.Context, modelPlanID uuid.UUID) ([]*model.TaskListSectionLockStatus, error)
	UpdatePlanPayments(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanPayments, error)
	AgreeToNda(ctx context.Context, agree bool) (*model.NDAInfo, error)
	AddPlanFavorite(ctx context.Context, modelPlanID uuid.UUID) (*models.PlanFavorite, error)
	DeletePlanFavorite(ctx context.Context, modelPlanID uuid.UUID) (*models.PlanFavorite, error)
	CreatePlanCrTdl(ctx context.Context, input model.PlanCrTdlCreateInput) (*models.PlanCrTdl, error)
	UpdatePlanCrTdl(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.PlanCrTdl, error)
	DeletePlanCrTdl(ctx context.Context, id uuid.UUID) (*models.PlanCrTdl, error)
}
type PlanBasicsResolver interface {
	CmsCenters(ctx context.Context, obj *models.PlanBasics) ([]model.CMSCenter, error)

	CmmiGroups(ctx context.Context, obj *models.PlanBasics) ([]model.CMMIGroup, error)
}
type PlanBeneficiariesResolver interface {
	Beneficiaries(ctx context.Context, obj *models.PlanBeneficiaries) ([]model.BeneficiariesType, error)

	BeneficiarySelectionMethod(ctx context.Context, obj *models.PlanBeneficiaries) ([]model.SelectionMethodType, error)
}
type PlanDiscussionResolver interface {
	Replies(ctx context.Context, obj *models.PlanDiscussion) ([]*models.DiscussionReply, error)
}
type PlanDocumentResolver interface {
	OtherType(ctx context.Context, obj *models.PlanDocument) (*string, error)
	OptionalNotes(ctx context.Context, obj *models.PlanDocument) (*string, error)
	DownloadURL(ctx context.Context, obj *models.PlanDocument) (*string, error)
}
type PlanGeneralCharacteristicsResolver interface {
	ResemblesExistingModelWhich(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]string, error)

	AlternativePaymentModelTypes(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.AlternativePaymentModelType, error)

	KeyCharacteristics(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.KeyCharacteristic, error)

	GeographiesTargetedTypes(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.GeographyType, error)

	GeographiesTargetedAppliedTo(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.GeographyApplication, error)

	AgreementTypes(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.AgreementType, error)

	AuthorityAllowances(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.AuthorityAllowance, error)

	WaiversRequiredTypes(ctx context.Context, obj *models.PlanGeneralCharacteristics) ([]model.WaiverType, error)
}
type PlanITToolsResolver interface {
	GcPartCd(ctx context.Context, obj *models.PlanITTools) ([]model.GcPartCDType, error)

	GcCollectBids(ctx context.Context, obj *models.PlanITTools) ([]model.GcCollectBidsType, error)

	GcUpdateContract(ctx context.Context, obj *models.PlanITTools) ([]model.GcUpdateContractType, error)

	PpToAdvertise(ctx context.Context, obj *models.PlanITTools) ([]model.PpToAdvertiseType, error)

	PpCollectScoreReview(ctx context.Context, obj *models.PlanITTools) ([]model.PpCollectScoreReviewType, error)

	PpAppSupportContractor(ctx context.Context, obj *models.PlanITTools) ([]model.PpAppSupportContractorType, error)

	PpCommunicateWithParticipant(ctx context.Context, obj *models.PlanITTools) ([]model.PpCommunicateWithParticipantType, error)

	PpManageProviderOverlap(ctx context.Context, obj *models.PlanITTools) ([]model.PpManageProviderOverlapType, error)

	BManageBeneficiaryOverlap(ctx context.Context, obj *models.PlanITTools) ([]model.BManageBeneficiaryOverlapType, error)

	OelHelpdeskSupport(ctx context.Context, obj *models.PlanITTools) ([]model.OelHelpdeskSupportType, error)

	OelManageAco(ctx context.Context, obj *models.PlanITTools) ([]model.OelManageAcoType, error)

	OelPerformanceBenchmark(ctx context.Context, obj *models.PlanITTools) ([]model.OelPerformanceBenchmarkType, error)

	OelProcessAppeals(ctx context.Context, obj *models.PlanITTools) ([]model.OelProcessAppealsType, error)

	OelEvaluationContractor(ctx context.Context, obj *models.PlanITTools) ([]model.OelEvaluationContractorType, error)

	OelCollectData(ctx context.Context, obj *models.PlanITTools) ([]model.OelCollectDataType, error)

	OelObtainData(ctx context.Context, obj *models.PlanITTools) ([]model.OelObtainDataType, error)

	OelClaimsBasedMeasures(ctx context.Context, obj *models.PlanITTools) ([]model.OelClaimsBasedMeasuresType, error)

	OelQualityScores(ctx context.Context, obj *models.PlanITTools) ([]model.OelQualityScoresType, error)

	OelSendReports(ctx context.Context, obj *models.PlanITTools) ([]model.OelSendReportsType, error)

	OelLearningContractor(ctx context.Context, obj *models.PlanITTools) ([]model.OelLearningContractorType, error)

	OelParticipantCollaboration(ctx context.Context, obj *models.PlanITTools) ([]model.OelParticipantCollaborationType, error)

	OelEducateBeneficiaries(ctx context.Context, obj *models.PlanITTools) ([]model.OelEducateBeneficiariesType, error)

	PMakeClaimsPayments(ctx context.Context, obj *models.PlanITTools) ([]model.PMakeClaimsPaymentsType, error)

	PInformFfs(ctx context.Context, obj *models.PlanITTools) ([]model.PInformFfsType, error)

	PNonClaimsBasedPayments(ctx context.Context, obj *models.PlanITTools) ([]model.PNonClaimsBasedPaymentsType, error)

	PSharedSavingsPlan(ctx context.Context, obj *models.PlanITTools) ([]model.PSharedSavingsPlanType, error)

	PRecoverPayments(ctx context.Context, obj *models.PlanITTools) ([]model.PRecoverPaymentsType, error)
}
type PlanOpsEvalAndLearningResolver interface {
	AgencyOrStateHelp(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.AgencyOrStateHelpType, error)

	Stakeholders(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.StakeholdersType, error)

	ContractorSupport(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.ContractorSupportType, error)

	DataMonitoringFileTypes(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.MonitoringFileType, error)

	EvaluationApproaches(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.EvaluationApproachType, error)

	CcmInvolvment(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.CcmInvolvmentType, error)

	DataNeededForMonitoring(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.DataForMonitoringType, error)

	DataToSendParticicipants(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.DataToSendParticipantsType, error)

	DataSharingFrequency(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.DataFrequencyType, error)

	DataCollectionFrequency(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.DataFrequencyType, error)

	ModelLearningSystems(ctx context.Context, obj *models.PlanOpsEvalAndLearning) ([]model.ModelLearningSystemType, error)
}
type PlanParticipantsAndProvidersResolver interface {
	Participants(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ParticipantsType, error)

	SelectionMethod(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ParticipantSelectionType, error)

	CommunicationMethod(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ParticipantCommunicationType, error)

	ParticipantsIds(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ParticipantsIDType, error)

	ProviderAddMethod(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ProviderAddType, error)

	ProviderLeaveMethod(ctx context.Context, obj *models.PlanParticipantsAndProviders) ([]model.ProviderLeaveType, error)
}
type PlanPaymentsResolver interface {
	FundingSource(ctx context.Context, obj *models.PlanPayments) ([]models.FundingSource, error)

	FundingSourceR(ctx context.Context, obj *models.PlanPayments) ([]models.FundingSource, error)

	PayRecipients(ctx context.Context, obj *models.PlanPayments) ([]models.PayRecipient, error)

	PayType(ctx context.Context, obj *models.PlanPayments) ([]models.PayType, error)

	PayClaims(ctx context.Context, obj *models.PlanPayments) ([]models.ClaimsBasedPayType, error)

	NonClaimsPayments(ctx context.Context, obj *models.PlanPayments) ([]model.NonClaimsBasedPayType, error)
	NonClaimsPaymentOther(ctx context.Context, obj *models.PlanPayments) (*string, error)

	AnticipatedPaymentFrequency(ctx context.Context, obj *models.PlanPayments) ([]models.AnticipatedPaymentFrequencyType, error)
}
type QueryResolver interface {
	CurrentUser(ctx context.Context) (*model.CurrentUser, error)
	ModelPlan(ctx context.Context, id uuid.UUID) (*models.ModelPlan, error)
	PlanDocument(ctx context.Context, id uuid.UUID) (*models.PlanDocument, error)
	ModelPlanCollection(ctx context.Context, includeAll bool) ([]*models.ModelPlan, error)
	ExistingModelCollection(ctx context.Context) ([]*models.ExistingModel, error)
	CedarPersonsByCommonName(ctx context.Context, commonName string) ([]*models.UserInfo, error)
	PlanCollaboratorByID(ctx context.Context, id uuid.UUID) (*models.PlanCollaborator, error)
	TaskListSectionLocks(ctx context.Context, modelPlanID uuid.UUID) ([]*model.TaskListSectionLockStatus, error)
	PlanPayments(ctx context.Context, id uuid.UUID) (*models.PlanPayments, error)
	NdaInfo(ctx context.Context) (*model.NDAInfo, error)
	CrTdl(ctx context.Context, id uuid.UUID) (*models.PlanCrTdl, error)
	AuditChanges(ctx context.Context, tableName string, primaryKey uuid.UUID) ([]*models.AuditChange, error)
}
type SubscriptionResolver interface {
	OnTaskListSectionLocksChanged(ctx context.Context, modelPlanID uuid.UUID) (<-chan *model.TaskListSectionLockStatusChanged, error)
	OnLockTaskListSectionContext(ctx context.Context, modelPlanID uuid.UUID) (<-chan *model.TaskListSectionLockStatusChanged, error)
}
type UserInfoResolver interface {
	Email(ctx context.Context, obj *models.UserInfo) (string, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AuditChange.action":
		if e.complexity.AuditChange.Action == nil {
			break
		}

		return e.complexity.AuditChange.Action(childComplexity), true

	case "AuditChange.fields":
		if e.complexity.AuditChange.Fields == nil {
			break
		}

		return e.complexity.AuditChange.Fields(childComplexity), true

	case "AuditChange.foreignKey":
		if e.complexity.AuditChange.ForeignKey == nil {
			break
		}

		return e.complexity.AuditChange.ForeignKey(childComplexity), true

	case "AuditChange.id":
		if e.complexity.AuditChange.ID == nil {
			break
		}

		return e.complexity.AuditChange.ID(childComplexity), true

	case "AuditChange.modifiedBy":
		if e.complexity.AuditChange.ModifiedBy == nil {
			break
		}

		return e.complexity.AuditChange.ModifiedBy(childComplexity), true

	case "AuditChange.modifiedDts":
		if e.complexity.AuditChange.ModifiedDts == nil {
			break
		}

		return e.complexity.AuditChange.ModifiedDts(childComplexity), true

	case "AuditChange.primaryKey":
		if e.complexity.AuditChange.PrimaryKey == nil {
			break
		}

		return e.complexity.AuditChange.PrimaryKey(childComplexity), true

	case "AuditChange.tableName":
		if e.complexity.AuditChange.TableName == nil {
			break
		}

		return e.complexity.AuditChange.TableName(childComplexity), true

	case "CurrentUser.launchDarkly":
		if e.complexity.CurrentUser.LaunchDarkly == nil {
			break
		}

		return e.complexity.CurrentUser.LaunchDarkly(childComplexity), true

	case "DiscussionReply.content":
		if e.complexity.DiscussionReply.Content == nil {
			break
		}

		return e.complexity.DiscussionReply.Content(childComplexity), true

	case "DiscussionReply.createdBy":
		if e.complexity.DiscussionReply.CreatedBy == nil {
			break
		}

		return e.complexity.DiscussionReply.CreatedBy(childComplexity), true

	case "DiscussionReply.createdDts":
		if e.complexity.DiscussionReply.CreatedDts == nil {
			break
		}

		return e.complexity.DiscussionReply.CreatedDts(childComplexity), true

	case "DiscussionReply.discussionID":
		if e.complexity.DiscussionReply.DiscussionID == nil {
			break
		}

		return e.complexity.DiscussionReply.DiscussionID(childComplexity), true

	case "DiscussionReply.id":
		if e.complexity.DiscussionReply.ID == nil {
			break
		}

		return e.complexity.DiscussionReply.ID(childComplexity), true

	case "DiscussionReply.isAssessment":
		if e.complexity.DiscussionReply.IsAssessment == nil {
			break
		}

		return e.complexity.DiscussionReply.IsAssessment(childComplexity), true

	case "DiscussionReply.modifiedBy":
		if e.complexity.DiscussionReply.ModifiedBy == nil {
			break
		}

		return e.complexity.DiscussionReply.ModifiedBy(childComplexity), true

	case "DiscussionReply.modifiedDts":
		if e.complexity.DiscussionReply.ModifiedDts == nil {
			break
		}

		return e.complexity.DiscussionReply.ModifiedDts(childComplexity), true

	case "DiscussionReply.resolution":
		if e.complexity.DiscussionReply.Resolution == nil {
			break
		}

		return e.complexity.DiscussionReply.Resolution(childComplexity), true

	case "ExistingModel.authority":
		if e.complexity.ExistingModel.Authority == nil {
			break
		}

		return e.complexity.ExistingModel.Authority(childComplexity), true

	case "ExistingModel.category":
		if e.complexity.ExistingModel.Category == nil {
			break
		}

		return e.complexity.ExistingModel.Category(childComplexity), true

	case "ExistingModel.createdBy":
		if e.complexity.ExistingModel.CreatedBy == nil {
			break
		}

		return e.complexity.ExistingModel.CreatedBy(childComplexity), true

	case "ExistingModel.createdDts":
		if e.complexity.ExistingModel.CreatedDts == nil {
			break
		}

		return e.complexity.ExistingModel.CreatedDts(childComplexity), true

	case "ExistingModel.dateBegan":
		if e.complexity.ExistingModel.DateBegan == nil {
			break
		}

		return e.complexity.ExistingModel.DateBegan(childComplexity), true

	case "ExistingModel.dateEnded":
		if e.complexity.ExistingModel.DateEnded == nil {
			break
		}

		return e.complexity.ExistingModel.DateEnded(childComplexity), true

	case "ExistingModel.description":
		if e.complexity.ExistingModel.Description == nil {
			break
		}

		return e.complexity.ExistingModel.Description(childComplexity), true

	case "ExistingModel.displayModelSummary":
		if e.complexity.ExistingModel.DisplayModelSummary == nil {
			break
		}

		return e.complexity.ExistingModel.DisplayModelSummary(childComplexity), true

	case "ExistingModel.id":
		if e.complexity.ExistingModel.ID == nil {
			break
		}

		return e.complexity.ExistingModel.ID(childComplexity), true

	case "ExistingModel.keywords":
		if e.complexity.ExistingModel.Keywords == nil {
			break
		}

		return e.complexity.ExistingModel.Keywords(childComplexity), true

	case "ExistingModel.modelName":
		if e.complexity.ExistingModel.ModelName == nil {
			break
		}

		return e.complexity.ExistingModel.ModelName(childComplexity), true

	case "ExistingModel.modifiedBy":
		if e.complexity.ExistingModel.ModifiedBy == nil {
			break
		}

		return e.complexity.ExistingModel.ModifiedBy(childComplexity), true

	case "ExistingModel.modifiedDts":
		if e.complexity.ExistingModel.ModifiedDts == nil {
			break
		}

		return e.complexity.ExistingModel.ModifiedDts(childComplexity), true

	case "ExistingModel.numberOfBeneficiariesImpacted":
		if e.complexity.ExistingModel.NumberOfBeneficiariesImpacted == nil {
			break
		}

		return e.complexity.ExistingModel.NumberOfBeneficiariesImpacted(childComplexity), true

	case "ExistingModel.numberOfParticipants":
		if e.complexity.ExistingModel.NumberOfParticipants == nil {
			break
		}

		return e.complexity.ExistingModel.NumberOfParticipants(childComplexity), true

	case "ExistingModel.numberOfPhysiciansImpacted":
		if e.complexity.ExistingModel.NumberOfPhysiciansImpacted == nil {
			break
		}

		return e.complexity.ExistingModel.NumberOfPhysiciansImpacted(childComplexity), true

	case "ExistingModel.stage":
		if e.complexity.ExistingModel.Stage == nil {
			break
		}

		return e.complexity.ExistingModel.Stage(childComplexity), true

	case "ExistingModel.states":
		if e.complexity.ExistingModel.States == nil {
			break
		}

		return e.complexity.ExistingModel.States(childComplexity), true

	case "ExistingModel.url":
		if e.complexity.ExistingModel.URL == nil {
			break
		}

		return e.complexity.ExistingModel.URL(childComplexity), true

	case "LaunchDarklySettings.signedHash":
		if e.complexity.LaunchDarklySettings.SignedHash == nil {
			break
		}

		return e.complexity.LaunchDarklySettings.SignedHash(childComplexity), true

	case "LaunchDarklySettings.userKey":
		if e.complexity.LaunchDarklySettings.UserKey == nil {
			break
		}

		return e.complexity.LaunchDarklySettings.UserKey(childComplexity), true

	case "ModelPlan.archived":
		if e.complexity.ModelPlan.Archived == nil {
			break
		}

		return e.complexity.ModelPlan.Archived(childComplexity), true

	case "ModelPlan.basics":
		if e.complexity.ModelPlan.Basics == nil {
			break
		}

		return e.complexity.ModelPlan.Basics(childComplexity), true

	case "ModelPlan.beneficiaries":
		if e.complexity.ModelPlan.Beneficiaries == nil {
			break
		}

		return e.complexity.ModelPlan.Beneficiaries(childComplexity), true

	case "ModelPlan.collaborators":
		if e.complexity.ModelPlan.Collaborators == nil {
			break
		}

		return e.complexity.ModelPlan.Collaborators(childComplexity), true

	case "ModelPlan.crTdls":
		if e.complexity.ModelPlan.CrTdls == nil {
			break
		}

		return e.complexity.ModelPlan.CrTdls(childComplexity), true

	case "ModelPlan.createdBy":
		if e.complexity.ModelPlan.CreatedBy == nil {
			break
		}

		return e.complexity.ModelPlan.CreatedBy(childComplexity), true

	case "ModelPlan.createdDts":
		if e.complexity.ModelPlan.CreatedDts == nil {
			break
		}

		return e.complexity.ModelPlan.CreatedDts(childComplexity), true

	case "ModelPlan.discussions":
		if e.complexity.ModelPlan.Discussions == nil {
			break
		}

		return e.complexity.ModelPlan.Discussions(childComplexity), true

	case "ModelPlan.documents":
		if e.complexity.ModelPlan.Documents == nil {
			break
		}

		return e.complexity.ModelPlan.Documents(childComplexity), true

	case "ModelPlan.generalCharacteristics":
		if e.complexity.ModelPlan.GeneralCharacteristics == nil {
			break
		}

		return e.complexity.ModelPlan.GeneralCharacteristics(childComplexity), true

	case "ModelPlan.id":
		if e.complexity.ModelPlan.ID == nil {
			break
		}

		return e.complexity.ModelPlan.ID(childComplexity), true

	case "ModelPlan.isCollaborator":
		if e.complexity.ModelPlan.IsCollaborator == nil {
			break
		}

		return e.complexity.ModelPlan.IsCollaborator(childComplexity), true

	case "ModelPlan.isFavorite":
		if e.complexity.ModelPlan.IsFavorite == nil {
			break
		}

		return e.complexity.ModelPlan.IsFavorite(childComplexity), true

	case "ModelPlan.itTools":
		if e.complexity.ModelPlan.ItTools == nil {
			break
		}

		return e.complexity.ModelPlan.ItTools(childComplexity), true

	case "ModelPlan.modelName":
		if e.complexity.ModelPlan.ModelName == nil {
			break
		}

		return e.complexity.ModelPlan.ModelName(childComplexity), true

	case "ModelPlan.modifiedBy":
		if e.complexity.ModelPlan.ModifiedBy == nil {
			break
		}

		return e.complexity.ModelPlan.ModifiedBy(childComplexity), true

	case "ModelPlan.modifiedDts":
		if e.complexity.ModelPlan.ModifiedDts == nil {
			break
		}

		return e.complexity.ModelPlan.ModifiedDts(childComplexity), true

	case "ModelPlan.nameHistory":
		if e.complexity.ModelPlan.NameHistory == nil {
			break
		}

		args, err := ec.field_ModelPlan_nameHistory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.ModelPlan.NameHistory(childComplexity, args["sort"].(models.SortDirection)), true

	case "ModelPlan.opsEvalAndLearning":
		if e.complexity.ModelPlan.OpsEvalAndLearning == nil {
			break
		}

		return e.complexity.ModelPlan.OpsEvalAndLearning(childComplexity), true

	case "ModelPlan.participantsAndProviders":
		if e.complexity.ModelPlan.ParticipantsAndProviders == nil {
			break
		}

		return e.complexity.ModelPlan.ParticipantsAndProviders(childComplexity), true

	case "ModelPlan.payments":
		if e.complexity.ModelPlan.Payments == nil {
			break
		}

		return e.complexity.ModelPlan.Payments(childComplexity), true

	case "ModelPlan.status":
		if e.complexity.ModelPlan.Status == nil {
			break
		}

		return e.complexity.ModelPlan.Status(childComplexity), true

	case "Mutation.addPlanFavorite":
		if e.complexity.Mutation.AddPlanFavorite == nil {
			break
		}

		args, err := ec.field_Mutation_addPlanFavorite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddPlanFavorite(childComplexity, args["modelPlanID"].(uuid.UUID)), true

	case "Mutation.agreeToNDA":
		if e.complexity.Mutation.AgreeToNda == nil {
			break
		}

		args, err := ec.field_Mutation_agreeToNDA_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AgreeToNda(childComplexity, args["agree"].(bool)), true

	case "Mutation.createDiscussionReply":
		if e.complexity.Mutation.CreateDiscussionReply == nil {
			break
		}

		args, err := ec.field_Mutation_createDiscussionReply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDiscussionReply(childComplexity, args["input"].(model.DiscussionReplyCreateInput)), true

	case "Mutation.createModelPlan":
		if e.complexity.Mutation.CreateModelPlan == nil {
			break
		}

		args, err := ec.field_Mutation_createModelPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateModelPlan(childComplexity, args["modelName"].(string)), true

	case "Mutation.createPlanCollaborator":
		if e.complexity.Mutation.CreatePlanCollaborator == nil {
			break
		}

		args, err := ec.field_Mutation_createPlanCollaborator_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlanCollaborator(childComplexity, args["input"].(model.PlanCollaboratorCreateInput)), true

	case "Mutation.createPlanCrTdl":
		if e.complexity.Mutation.CreatePlanCrTdl == nil {
			break
		}

		args, err := ec.field_Mutation_createPlanCrTdl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlanCrTdl(childComplexity, args["input"].(model.PlanCrTdlCreateInput)), true

	case "Mutation.createPlanDiscussion":
		if e.complexity.Mutation.CreatePlanDiscussion == nil {
			break
		}

		args, err := ec.field_Mutation_createPlanDiscussion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlanDiscussion(childComplexity, args["input"].(model.PlanDiscussionCreateInput)), true

	case "Mutation.deleteDiscussionReply":
		if e.complexity.Mutation.DeleteDiscussionReply == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDiscussionReply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDiscussionReply(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deletePlanCollaborator":
		if e.complexity.Mutation.DeletePlanCollaborator == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlanCollaborator_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlanCollaborator(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deletePlanCrTdl":
		if e.complexity.Mutation.DeletePlanCrTdl == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlanCrTdl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlanCrTdl(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deletePlanDiscussion":
		if e.complexity.Mutation.DeletePlanDiscussion == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlanDiscussion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlanDiscussion(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deletePlanDocument":
		if e.complexity.Mutation.DeletePlanDocument == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlanDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlanDocument(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deletePlanFavorite":
		if e.complexity.Mutation.DeletePlanFavorite == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlanFavorite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlanFavorite(childComplexity, args["modelPlanID"].(uuid.UUID)), true

	case "Mutation.lockTaskListSection":
		if e.complexity.Mutation.LockTaskListSection == nil {
			break
		}

		args, err := ec.field_Mutation_lockTaskListSection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LockTaskListSection(childComplexity, args["modelPlanID"].(uuid.UUID), args["section"].(model.TaskListSection)), true

	case "Mutation.unlockAllTaskListSections":
		if e.complexity.Mutation.UnlockAllTaskListSections == nil {
			break
		}

		args, err := ec.field_Mutation_unlockAllTaskListSections_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnlockAllTaskListSections(childComplexity, args["modelPlanID"].(uuid.UUID)), true

	case "Mutation.unlockTaskListSection":
		if e.complexity.Mutation.UnlockTaskListSection == nil {
			break
		}

		args, err := ec.field_Mutation_unlockTaskListSection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnlockTaskListSection(childComplexity, args["modelPlanID"].(uuid.UUID), args["section"].(model.TaskListSection)), true

	case "Mutation.updateDiscussionReply":
		if e.complexity.Mutation.UpdateDiscussionReply == nil {
			break
		}

		args, err := ec.field_Mutation_updateDiscussionReply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDiscussionReply(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updateModelPlan":
		if e.complexity.Mutation.UpdateModelPlan == nil {
			break
		}

		args, err := ec.field_Mutation_updateModelPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateModelPlan(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanBasics":
		if e.complexity.Mutation.UpdatePlanBasics == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanBasics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanBasics(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanBeneficiaries":
		if e.complexity.Mutation.UpdatePlanBeneficiaries == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanBeneficiaries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanBeneficiaries(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanCollaborator":
		if e.complexity.Mutation.UpdatePlanCollaborator == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanCollaborator_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanCollaborator(childComplexity, args["id"].(uuid.UUID), args["newRole"].(models.TeamRole)), true

	case "Mutation.updatePlanCrTdl":
		if e.complexity.Mutation.UpdatePlanCrTdl == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanCrTdl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanCrTdl(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanDiscussion":
		if e.complexity.Mutation.UpdatePlanDiscussion == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanDiscussion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanDiscussion(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanGeneralCharacteristics":
		if e.complexity.Mutation.UpdatePlanGeneralCharacteristics == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanGeneralCharacteristics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanGeneralCharacteristics(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanItTools":
		if e.complexity.Mutation.UpdatePlanItTools == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanItTools_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanItTools(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanOpsEvalAndLearning":
		if e.complexity.Mutation.UpdatePlanOpsEvalAndLearning == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanOpsEvalAndLearning_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanOpsEvalAndLearning(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanParticipantsAndProviders":
		if e.complexity.Mutation.UpdatePlanParticipantsAndProviders == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanParticipantsAndProviders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanParticipantsAndProviders(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updatePlanPayments":
		if e.complexity.Mutation.UpdatePlanPayments == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlanPayments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlanPayments(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.uploadNewPlanDocument":
		if e.complexity.Mutation.UploadNewPlanDocument == nil {
			break
		}

		args, err := ec.field_Mutation_uploadNewPlanDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadNewPlanDocument(childComplexity, args["input"].(model.PlanDocumentInput)), true

	case "NDAInfo.agreed":
		if e.complexity.NDAInfo.Agreed == nil {
			break
		}

		return e.complexity.NDAInfo.Agreed(childComplexity), true

	case "NDAInfo.agreedDts":
		if e.complexity.NDAInfo.AgreedDts == nil {
			break
		}

		return e.complexity.NDAInfo.AgreedDts(childComplexity), true

	case "PlanBasics.announced":
		if e.complexity.PlanBasics.Announced == nil {
			break
		}

		return e.complexity.PlanBasics.Announced(childComplexity), true

	case "PlanBasics.applicationsEnd":
		if e.complexity.PlanBasics.ApplicationsEnd == nil {
			break
		}

		return e.complexity.PlanBasics.ApplicationsEnd(childComplexity), true

	case "PlanBasics.applicationsStart":
		if e.complexity.PlanBasics.ApplicationsStart == nil {
			break
		}

		return e.complexity.PlanBasics.ApplicationsStart(childComplexity), true

	case "PlanBasics.cmsOther":
		if e.complexity.PlanBasics.CMSOther == nil {
			break
		}

		return e.complexity.PlanBasics.CMSOther(childComplexity), true

	case "PlanBasics.clearanceEnds":
		if e.complexity.PlanBasics.ClearanceEnds == nil {
			break
		}

		return e.complexity.PlanBasics.ClearanceEnds(childComplexity), true

	case "PlanBasics.clearanceStarts":
		if e.complexity.PlanBasics.ClearanceStarts == nil {
			break
		}

		return e.complexity.PlanBasics.ClearanceStarts(childComplexity), true

	case "PlanBasics.cmmiGroups":
		if e.complexity.PlanBasics.CmmiGroups == nil {
			break
		}

		return e.complexity.PlanBasics.CmmiGroups(childComplexity), true

	case "PlanBasics.cmsCenters":
		if e.complexity.PlanBasics.CmsCenters == nil {
			break
		}

		return e.complexity.PlanBasics.CmsCenters(childComplexity), true

	case "PlanBasics.completeICIP":
		if e.complexity.PlanBasics.CompleteICIP == nil {
			break
		}

		return e.complexity.PlanBasics.CompleteICIP(childComplexity), true

	case "PlanBasics.createdBy":
		if e.complexity.PlanBasics.CreatedBy == nil {
			break
		}

		return e.complexity.PlanBasics.CreatedBy(childComplexity), true

	case "PlanBasics.createdDts":
		if e.complexity.PlanBasics.CreatedDts == nil {
			break
		}

		return e.complexity.PlanBasics.CreatedDts(childComplexity), true

	case "PlanBasics.goal":
		if e.complexity.PlanBasics.Goal == nil {
			break
		}

		return e.complexity.PlanBasics.Goal(childComplexity), true

	case "PlanBasics.highLevelNote":
		if e.complexity.PlanBasics.HighLevelNote == nil {
			break
		}

		return e.complexity.PlanBasics.HighLevelNote(childComplexity), true

	case "PlanBasics.id":
		if e.complexity.PlanBasics.ID == nil {
			break
		}

		return e.complexity.PlanBasics.ID(childComplexity), true

	case "PlanBasics.modelCategory":
		if e.complexity.PlanBasics.ModelCategory == nil {
			break
		}

		return e.complexity.PlanBasics.ModelCategory(childComplexity), true

	case "PlanBasics.modelPlanID":
		if e.complexity.PlanBasics.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanBasics.ModelPlanID(childComplexity), true

	case "PlanBasics.modelType":
		if e.complexity.PlanBasics.ModelType == nil {
			break
		}

		return e.complexity.PlanBasics.ModelType(childComplexity), true

	case "PlanBasics.modifiedBy":
		if e.complexity.PlanBasics.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanBasics.ModifiedBy(childComplexity), true

	case "PlanBasics.modifiedDts":
		if e.complexity.PlanBasics.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanBasics.ModifiedDts(childComplexity), true

	case "PlanBasics.note":
		if e.complexity.PlanBasics.Note == nil {
			break
		}

		return e.complexity.PlanBasics.Note(childComplexity), true

	case "PlanBasics.performancePeriodEnds":
		if e.complexity.PlanBasics.PerformancePeriodEnds == nil {
			break
		}

		return e.complexity.PlanBasics.PerformancePeriodEnds(childComplexity), true

	case "PlanBasics.performancePeriodStarts":
		if e.complexity.PlanBasics.PerformancePeriodStarts == nil {
			break
		}

		return e.complexity.PlanBasics.PerformancePeriodStarts(childComplexity), true

	case "PlanBasics.phasedIn":
		if e.complexity.PlanBasics.PhasedIn == nil {
			break
		}

		return e.complexity.PlanBasics.PhasedIn(childComplexity), true

	case "PlanBasics.phasedInNote":
		if e.complexity.PlanBasics.PhasedInNote == nil {
			break
		}

		return e.complexity.PlanBasics.PhasedInNote(childComplexity), true

	case "PlanBasics.problem":
		if e.complexity.PlanBasics.Problem == nil {
			break
		}

		return e.complexity.PlanBasics.Problem(childComplexity), true

	case "PlanBasics.readyForReviewBy":
		if e.complexity.PlanBasics.ReadyForReviewBy == nil {
			break
		}

		return e.complexity.PlanBasics.ReadyForReviewBy(childComplexity), true

	case "PlanBasics.readyForReviewDts":
		if e.complexity.PlanBasics.ReadyForReviewDts == nil {
			break
		}

		return e.complexity.PlanBasics.ReadyForReviewDts(childComplexity), true

	case "PlanBasics.status":
		if e.complexity.PlanBasics.Status == nil {
			break
		}

		return e.complexity.PlanBasics.Status(childComplexity), true

	case "PlanBasics.testInterventions":
		if e.complexity.PlanBasics.TestInterventions == nil {
			break
		}

		return e.complexity.PlanBasics.TestInterventions(childComplexity), true

	case "PlanBasics.wrapUpEnds":
		if e.complexity.PlanBasics.WrapUpEnds == nil {
			break
		}

		return e.complexity.PlanBasics.WrapUpEnds(childComplexity), true

	case "PlanBeneficiaries.beneficiaries":
		if e.complexity.PlanBeneficiaries.Beneficiaries == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.Beneficiaries(childComplexity), true

	case "PlanBeneficiaries.beneficiariesNote":
		if e.complexity.PlanBeneficiaries.BeneficiariesNote == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiariesNote(childComplexity), true

	case "PlanBeneficiaries.beneficiariesOther":
		if e.complexity.PlanBeneficiaries.BeneficiariesOther == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiariesOther(childComplexity), true

	case "PlanBeneficiaries.beneficiaryOverlap":
		if e.complexity.PlanBeneficiaries.BeneficiaryOverlap == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiaryOverlap(childComplexity), true

	case "PlanBeneficiaries.beneficiaryOverlapNote":
		if e.complexity.PlanBeneficiaries.BeneficiaryOverlapNote == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiaryOverlapNote(childComplexity), true

	case "PlanBeneficiaries.beneficiarySelectionFrequency":
		if e.complexity.PlanBeneficiaries.BeneficiarySelectionFrequency == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiarySelectionFrequency(childComplexity), true

	case "PlanBeneficiaries.beneficiarySelectionFrequencyNote":
		if e.complexity.PlanBeneficiaries.BeneficiarySelectionFrequencyNote == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiarySelectionFrequencyNote(childComplexity), true

	case "PlanBeneficiaries.beneficiarySelectionFrequencyOther":
		if e.complexity.PlanBeneficiaries.BeneficiarySelectionFrequencyOther == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiarySelectionFrequencyOther(childComplexity), true

	case "PlanBeneficiaries.beneficiarySelectionMethod":
		if e.complexity.PlanBeneficiaries.BeneficiarySelectionMethod == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiarySelectionMethod(childComplexity), true

	case "PlanBeneficiaries.beneficiarySelectionNote":
		if e.complexity.PlanBeneficiaries.BeneficiarySelectionNote == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiarySelectionNote(childComplexity), true

	case "PlanBeneficiaries.beneficiarySelectionOther":
		if e.complexity.PlanBeneficiaries.BeneficiarySelectionOther == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.BeneficiarySelectionOther(childComplexity), true

	case "PlanBeneficiaries.confidenceNote":
		if e.complexity.PlanBeneficiaries.ConfidenceNote == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ConfidenceNote(childComplexity), true

	case "PlanBeneficiaries.createdBy":
		if e.complexity.PlanBeneficiaries.CreatedBy == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.CreatedBy(childComplexity), true

	case "PlanBeneficiaries.createdDts":
		if e.complexity.PlanBeneficiaries.CreatedDts == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.CreatedDts(childComplexity), true

	case "PlanBeneficiaries.estimateConfidence":
		if e.complexity.PlanBeneficiaries.EstimateConfidence == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.EstimateConfidence(childComplexity), true

	case "PlanBeneficiaries.excludeCertainCharacteristics":
		if e.complexity.PlanBeneficiaries.ExcludeCertainCharacteristics == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ExcludeCertainCharacteristics(childComplexity), true

	case "PlanBeneficiaries.excludeCertainCharacteristicsCriteria":
		if e.complexity.PlanBeneficiaries.ExcludeCertainCharacteristicsCriteria == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ExcludeCertainCharacteristicsCriteria(childComplexity), true

	case "PlanBeneficiaries.excludeCertainCharacteristicsNote":
		if e.complexity.PlanBeneficiaries.ExcludeCertainCharacteristicsNote == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ExcludeCertainCharacteristicsNote(childComplexity), true

	case "PlanBeneficiaries.id":
		if e.complexity.PlanBeneficiaries.ID == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ID(childComplexity), true

	case "PlanBeneficiaries.modelPlanID":
		if e.complexity.PlanBeneficiaries.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ModelPlanID(childComplexity), true

	case "PlanBeneficiaries.modifiedBy":
		if e.complexity.PlanBeneficiaries.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ModifiedBy(childComplexity), true

	case "PlanBeneficiaries.modifiedDts":
		if e.complexity.PlanBeneficiaries.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ModifiedDts(childComplexity), true

	case "PlanBeneficiaries.numberPeopleImpacted":
		if e.complexity.PlanBeneficiaries.NumberPeopleImpacted == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.NumberPeopleImpacted(childComplexity), true

	case "PlanBeneficiaries.precedenceRules":
		if e.complexity.PlanBeneficiaries.PrecedenceRules == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.PrecedenceRules(childComplexity), true

	case "PlanBeneficiaries.readyForReviewBy":
		if e.complexity.PlanBeneficiaries.ReadyForReviewBy == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ReadyForReviewBy(childComplexity), true

	case "PlanBeneficiaries.readyForReviewDts":
		if e.complexity.PlanBeneficiaries.ReadyForReviewDts == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.ReadyForReviewDts(childComplexity), true

	case "PlanBeneficiaries.status":
		if e.complexity.PlanBeneficiaries.Status == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.Status(childComplexity), true

	case "PlanBeneficiaries.treatDualElligibleDifferent":
		if e.complexity.PlanBeneficiaries.TreatDualElligibleDifferent == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.TreatDualElligibleDifferent(childComplexity), true

	case "PlanBeneficiaries.treatDualElligibleDifferentHow":
		if e.complexity.PlanBeneficiaries.TreatDualElligibleDifferentHow == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.TreatDualElligibleDifferentHow(childComplexity), true

	case "PlanBeneficiaries.treatDualElligibleDifferentNote":
		if e.complexity.PlanBeneficiaries.TreatDualElligibleDifferentNote == nil {
			break
		}

		return e.complexity.PlanBeneficiaries.TreatDualElligibleDifferentNote(childComplexity), true

	case "PlanCollaborator.createdBy":
		if e.complexity.PlanCollaborator.CreatedBy == nil {
			break
		}

		return e.complexity.PlanCollaborator.CreatedBy(childComplexity), true

	case "PlanCollaborator.createdDts":
		if e.complexity.PlanCollaborator.CreatedDts == nil {
			break
		}

		return e.complexity.PlanCollaborator.CreatedDts(childComplexity), true

	case "PlanCollaborator.euaUserID":
		if e.complexity.PlanCollaborator.EUAUserID == nil {
			break
		}

		return e.complexity.PlanCollaborator.EUAUserID(childComplexity), true

	case "PlanCollaborator.email":
		if e.complexity.PlanCollaborator.Email == nil {
			break
		}

		return e.complexity.PlanCollaborator.Email(childComplexity), true

	case "PlanCollaborator.fullName":
		if e.complexity.PlanCollaborator.FullName == nil {
			break
		}

		return e.complexity.PlanCollaborator.FullName(childComplexity), true

	case "PlanCollaborator.id":
		if e.complexity.PlanCollaborator.ID == nil {
			break
		}

		return e.complexity.PlanCollaborator.ID(childComplexity), true

	case "PlanCollaborator.modelPlanID":
		if e.complexity.PlanCollaborator.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanCollaborator.ModelPlanID(childComplexity), true

	case "PlanCollaborator.modifiedBy":
		if e.complexity.PlanCollaborator.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanCollaborator.ModifiedBy(childComplexity), true

	case "PlanCollaborator.modifiedDts":
		if e.complexity.PlanCollaborator.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanCollaborator.ModifiedDts(childComplexity), true

	case "PlanCollaborator.teamRole":
		if e.complexity.PlanCollaborator.TeamRole == nil {
			break
		}

		return e.complexity.PlanCollaborator.TeamRole(childComplexity), true

	case "PlanCrTdl.createdBy":
		if e.complexity.PlanCrTdl.CreatedBy == nil {
			break
		}

		return e.complexity.PlanCrTdl.CreatedBy(childComplexity), true

	case "PlanCrTdl.createdDts":
		if e.complexity.PlanCrTdl.CreatedDts == nil {
			break
		}

		return e.complexity.PlanCrTdl.CreatedDts(childComplexity), true

	case "PlanCrTdl.dateInitiated":
		if e.complexity.PlanCrTdl.DateInitiated == nil {
			break
		}

		return e.complexity.PlanCrTdl.DateInitiated(childComplexity), true

	case "PlanCrTdl.id":
		if e.complexity.PlanCrTdl.ID == nil {
			break
		}

		return e.complexity.PlanCrTdl.ID(childComplexity), true

	case "PlanCrTdl.idNumber":
		if e.complexity.PlanCrTdl.IDNumber == nil {
			break
		}

		return e.complexity.PlanCrTdl.IDNumber(childComplexity), true

	case "PlanCrTdl.modelPlanID":
		if e.complexity.PlanCrTdl.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanCrTdl.ModelPlanID(childComplexity), true

	case "PlanCrTdl.modifiedBy":
		if e.complexity.PlanCrTdl.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanCrTdl.ModifiedBy(childComplexity), true

	case "PlanCrTdl.modifiedDts":
		if e.complexity.PlanCrTdl.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanCrTdl.ModifiedDts(childComplexity), true

	case "PlanCrTdl.note":
		if e.complexity.PlanCrTdl.Note == nil {
			break
		}

		return e.complexity.PlanCrTdl.Note(childComplexity), true

	case "PlanCrTdl.title":
		if e.complexity.PlanCrTdl.Title == nil {
			break
		}

		return e.complexity.PlanCrTdl.Title(childComplexity), true

	case "PlanDiscussion.content":
		if e.complexity.PlanDiscussion.Content == nil {
			break
		}

		return e.complexity.PlanDiscussion.Content(childComplexity), true

	case "PlanDiscussion.createdBy":
		if e.complexity.PlanDiscussion.CreatedBy == nil {
			break
		}

		return e.complexity.PlanDiscussion.CreatedBy(childComplexity), true

	case "PlanDiscussion.createdDts":
		if e.complexity.PlanDiscussion.CreatedDts == nil {
			break
		}

		return e.complexity.PlanDiscussion.CreatedDts(childComplexity), true

	case "PlanDiscussion.id":
		if e.complexity.PlanDiscussion.ID == nil {
			break
		}

		return e.complexity.PlanDiscussion.ID(childComplexity), true

	case "PlanDiscussion.isAssessment":
		if e.complexity.PlanDiscussion.IsAssessment == nil {
			break
		}

		return e.complexity.PlanDiscussion.IsAssessment(childComplexity), true

	case "PlanDiscussion.modelPlanID":
		if e.complexity.PlanDiscussion.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanDiscussion.ModelPlanID(childComplexity), true

	case "PlanDiscussion.modifiedBy":
		if e.complexity.PlanDiscussion.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanDiscussion.ModifiedBy(childComplexity), true

	case "PlanDiscussion.modifiedDts":
		if e.complexity.PlanDiscussion.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanDiscussion.ModifiedDts(childComplexity), true

	case "PlanDiscussion.replies":
		if e.complexity.PlanDiscussion.Replies == nil {
			break
		}

		return e.complexity.PlanDiscussion.Replies(childComplexity), true

	case "PlanDiscussion.status":
		if e.complexity.PlanDiscussion.Status == nil {
			break
		}

		return e.complexity.PlanDiscussion.Status(childComplexity), true

	case "PlanDocument.bucket":
		if e.complexity.PlanDocument.Bucket == nil {
			break
		}

		return e.complexity.PlanDocument.Bucket(childComplexity), true

	case "PlanDocument.createdBy":
		if e.complexity.PlanDocument.CreatedBy == nil {
			break
		}

		return e.complexity.PlanDocument.CreatedBy(childComplexity), true

	case "PlanDocument.createdDts":
		if e.complexity.PlanDocument.CreatedDts == nil {
			break
		}

		return e.complexity.PlanDocument.CreatedDts(childComplexity), true

	case "PlanDocument.deletedAt":
		if e.complexity.PlanDocument.DeletedAt == nil {
			break
		}

		return e.complexity.PlanDocument.DeletedAt(childComplexity), true

	case "PlanDocument.documentType":
		if e.complexity.PlanDocument.DocumentType == nil {
			break
		}

		return e.complexity.PlanDocument.DocumentType(childComplexity), true

	case "PlanDocument.downloadUrl":
		if e.complexity.PlanDocument.DownloadURL == nil {
			break
		}

		return e.complexity.PlanDocument.DownloadURL(childComplexity), true

	case "PlanDocument.fileKey":
		if e.complexity.PlanDocument.FileKey == nil {
			break
		}

		return e.complexity.PlanDocument.FileKey(childComplexity), true

	case "PlanDocument.fileName":
		if e.complexity.PlanDocument.FileName == nil {
			break
		}

		return e.complexity.PlanDocument.FileName(childComplexity), true

	case "PlanDocument.fileSize":
		if e.complexity.PlanDocument.FileSize == nil {
			break
		}

		return e.complexity.PlanDocument.FileSize(childComplexity), true

	case "PlanDocument.fileType":
		if e.complexity.PlanDocument.FileType == nil {
			break
		}

		return e.complexity.PlanDocument.FileType(childComplexity), true

	case "PlanDocument.id":
		if e.complexity.PlanDocument.ID == nil {
			break
		}

		return e.complexity.PlanDocument.ID(childComplexity), true

	case "PlanDocument.modelPlanID":
		if e.complexity.PlanDocument.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanDocument.ModelPlanID(childComplexity), true

	case "PlanDocument.modifiedBy":
		if e.complexity.PlanDocument.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanDocument.ModifiedBy(childComplexity), true

	case "PlanDocument.modifiedDts":
		if e.complexity.PlanDocument.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanDocument.ModifiedDts(childComplexity), true

	case "PlanDocument.optionalNotes":
		if e.complexity.PlanDocument.OptionalNotes == nil {
			break
		}

		return e.complexity.PlanDocument.OptionalNotes(childComplexity), true

	case "PlanDocument.otherType":
		if e.complexity.PlanDocument.OtherType == nil {
			break
		}

		return e.complexity.PlanDocument.OtherType(childComplexity), true

	case "PlanDocument.virusClean":
		if e.complexity.PlanDocument.VirusClean == nil {
			break
		}

		return e.complexity.PlanDocument.VirusClean(childComplexity), true

	case "PlanDocument.virusScanned":
		if e.complexity.PlanDocument.VirusScanned == nil {
			break
		}

		return e.complexity.PlanDocument.VirusScanned(childComplexity), true

	case "PlanFavorite.createdBy":
		if e.complexity.PlanFavorite.CreatedBy == nil {
			break
		}

		return e.complexity.PlanFavorite.CreatedBy(childComplexity), true

	case "PlanFavorite.createdDts":
		if e.complexity.PlanFavorite.CreatedDts == nil {
			break
		}

		return e.complexity.PlanFavorite.CreatedDts(childComplexity), true

	case "PlanFavorite.id":
		if e.complexity.PlanFavorite.ID == nil {
			break
		}

		return e.complexity.PlanFavorite.ID(childComplexity), true

	case "PlanFavorite.modelPlanID":
		if e.complexity.PlanFavorite.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanFavorite.ModelPlanID(childComplexity), true

	case "PlanFavorite.modifiedBy":
		if e.complexity.PlanFavorite.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanFavorite.ModifiedBy(childComplexity), true

	case "PlanFavorite.modifiedDts":
		if e.complexity.PlanFavorite.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanFavorite.ModifiedDts(childComplexity), true

	case "PlanFavorite.userID":
		if e.complexity.PlanFavorite.UserID == nil {
			break
		}

		return e.complexity.PlanFavorite.UserID(childComplexity), true

	case "PlanGeneralCharacteristics.additionalServicesInvolved":
		if e.complexity.PlanGeneralCharacteristics.AdditionalServicesInvolved == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AdditionalServicesInvolved(childComplexity), true

	case "PlanGeneralCharacteristics.additionalServicesInvolvedDescription":
		if e.complexity.PlanGeneralCharacteristics.AdditionalServicesInvolvedDescription == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AdditionalServicesInvolvedDescription(childComplexity), true

	case "PlanGeneralCharacteristics.additionalServicesInvolvedNote":
		if e.complexity.PlanGeneralCharacteristics.AdditionalServicesInvolvedNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AdditionalServicesInvolvedNote(childComplexity), true

	case "PlanGeneralCharacteristics.agreementTypes":
		if e.complexity.PlanGeneralCharacteristics.AgreementTypes == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AgreementTypes(childComplexity), true

	case "PlanGeneralCharacteristics.agreementTypesOther":
		if e.complexity.PlanGeneralCharacteristics.AgreementTypesOther == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AgreementTypesOther(childComplexity), true

	case "PlanGeneralCharacteristics.alternativePaymentModel":
		if e.complexity.PlanGeneralCharacteristics.AlternativePaymentModel == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AlternativePaymentModel(childComplexity), true

	case "PlanGeneralCharacteristics.alternativePaymentModelNote":
		if e.complexity.PlanGeneralCharacteristics.AlternativePaymentModelNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AlternativePaymentModelNote(childComplexity), true

	case "PlanGeneralCharacteristics.alternativePaymentModelTypes":
		if e.complexity.PlanGeneralCharacteristics.AlternativePaymentModelTypes == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AlternativePaymentModelTypes(childComplexity), true

	case "PlanGeneralCharacteristics.authorityAllowances":
		if e.complexity.PlanGeneralCharacteristics.AuthorityAllowances == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AuthorityAllowances(childComplexity), true

	case "PlanGeneralCharacteristics.authorityAllowancesNote":
		if e.complexity.PlanGeneralCharacteristics.AuthorityAllowancesNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AuthorityAllowancesNote(childComplexity), true

	case "PlanGeneralCharacteristics.authorityAllowancesOther":
		if e.complexity.PlanGeneralCharacteristics.AuthorityAllowancesOther == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.AuthorityAllowancesOther(childComplexity), true

	case "PlanGeneralCharacteristics.careCoordinationInvolved":
		if e.complexity.PlanGeneralCharacteristics.CareCoordinationInvolved == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CareCoordinationInvolved(childComplexity), true

	case "PlanGeneralCharacteristics.careCoordinationInvolvedDescription":
		if e.complexity.PlanGeneralCharacteristics.CareCoordinationInvolvedDescription == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CareCoordinationInvolvedDescription(childComplexity), true

	case "PlanGeneralCharacteristics.careCoordinationInvolvedNote":
		if e.complexity.PlanGeneralCharacteristics.CareCoordinationInvolvedNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CareCoordinationInvolvedNote(childComplexity), true

	case "PlanGeneralCharacteristics.collectPlanBids":
		if e.complexity.PlanGeneralCharacteristics.CollectPlanBids == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CollectPlanBids(childComplexity), true

	case "PlanGeneralCharacteristics.collectPlanBidsNote":
		if e.complexity.PlanGeneralCharacteristics.CollectPlanBidsNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CollectPlanBidsNote(childComplexity), true

	case "PlanGeneralCharacteristics.communityPartnersInvolved":
		if e.complexity.PlanGeneralCharacteristics.CommunityPartnersInvolved == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CommunityPartnersInvolved(childComplexity), true

	case "PlanGeneralCharacteristics.communityPartnersInvolvedDescription":
		if e.complexity.PlanGeneralCharacteristics.CommunityPartnersInvolvedDescription == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CommunityPartnersInvolvedDescription(childComplexity), true

	case "PlanGeneralCharacteristics.communityPartnersInvolvedNote":
		if e.complexity.PlanGeneralCharacteristics.CommunityPartnersInvolvedNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CommunityPartnersInvolvedNote(childComplexity), true

	case "PlanGeneralCharacteristics.createdBy":
		if e.complexity.PlanGeneralCharacteristics.CreatedBy == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CreatedBy(childComplexity), true

	case "PlanGeneralCharacteristics.createdDts":
		if e.complexity.PlanGeneralCharacteristics.CreatedDts == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.CreatedDts(childComplexity), true

	case "PlanGeneralCharacteristics.existingModel":
		if e.complexity.PlanGeneralCharacteristics.ExistingModel == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ExistingModel(childComplexity), true

	case "PlanGeneralCharacteristics.geographiesTargeted":
		if e.complexity.PlanGeneralCharacteristics.GeographiesTargeted == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.GeographiesTargeted(childComplexity), true

	case "PlanGeneralCharacteristics.geographiesTargetedAppliedTo":
		if e.complexity.PlanGeneralCharacteristics.GeographiesTargetedAppliedTo == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.GeographiesTargetedAppliedTo(childComplexity), true

	case "PlanGeneralCharacteristics.geographiesTargetedAppliedToOther":
		if e.complexity.PlanGeneralCharacteristics.GeographiesTargetedAppliedToOther == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.GeographiesTargetedAppliedToOther(childComplexity), true

	case "PlanGeneralCharacteristics.geographiesTargetedNote":
		if e.complexity.PlanGeneralCharacteristics.GeographiesTargetedNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.GeographiesTargetedNote(childComplexity), true

	case "PlanGeneralCharacteristics.geographiesTargetedTypes":
		if e.complexity.PlanGeneralCharacteristics.GeographiesTargetedTypes == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.GeographiesTargetedTypes(childComplexity), true

	case "PlanGeneralCharacteristics.geographiesTargetedTypesOther":
		if e.complexity.PlanGeneralCharacteristics.GeographiesTargetedTypesOther == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.GeographiesTargetedTypesOther(childComplexity), true

	case "PlanGeneralCharacteristics.hasComponentsOrTracks":
		if e.complexity.PlanGeneralCharacteristics.HasComponentsOrTracks == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.HasComponentsOrTracks(childComplexity), true

	case "PlanGeneralCharacteristics.hasComponentsOrTracksDiffer":
		if e.complexity.PlanGeneralCharacteristics.HasComponentsOrTracksDiffer == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.HasComponentsOrTracksDiffer(childComplexity), true

	case "PlanGeneralCharacteristics.hasComponentsOrTracksNote":
		if e.complexity.PlanGeneralCharacteristics.HasComponentsOrTracksNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.HasComponentsOrTracksNote(childComplexity), true

	case "PlanGeneralCharacteristics.id":
		if e.complexity.PlanGeneralCharacteristics.ID == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ID(childComplexity), true

	case "PlanGeneralCharacteristics.isNewModel":
		if e.complexity.PlanGeneralCharacteristics.IsNewModel == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.IsNewModel(childComplexity), true

	case "PlanGeneralCharacteristics.keyCharacteristics":
		if e.complexity.PlanGeneralCharacteristics.KeyCharacteristics == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.KeyCharacteristics(childComplexity), true

	case "PlanGeneralCharacteristics.keyCharacteristicsNote":
		if e.complexity.PlanGeneralCharacteristics.KeyCharacteristicsNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.KeyCharacteristicsNote(childComplexity), true

	case "PlanGeneralCharacteristics.keyCharacteristicsOther":
		if e.complexity.PlanGeneralCharacteristics.KeyCharacteristicsOther == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.KeyCharacteristicsOther(childComplexity), true

	case "PlanGeneralCharacteristics.managePartCDEnrollment":
		if e.complexity.PlanGeneralCharacteristics.ManagePartCDEnrollment == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ManagePartCDEnrollment(childComplexity), true

	case "PlanGeneralCharacteristics.managePartCDEnrollmentNote":
		if e.complexity.PlanGeneralCharacteristics.ManagePartCDEnrollmentNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ManagePartCDEnrollmentNote(childComplexity), true

	case "PlanGeneralCharacteristics.modelPlanID":
		if e.complexity.PlanGeneralCharacteristics.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ModelPlanID(childComplexity), true

	case "PlanGeneralCharacteristics.modifiedBy":
		if e.complexity.PlanGeneralCharacteristics.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ModifiedBy(childComplexity), true

	case "PlanGeneralCharacteristics.modifiedDts":
		if e.complexity.PlanGeneralCharacteristics.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ModifiedDts(childComplexity), true

	case "PlanGeneralCharacteristics.multiplePatricipationAgreementsNeeded":
		if e.complexity.PlanGeneralCharacteristics.MultiplePatricipationAgreementsNeeded == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.MultiplePatricipationAgreementsNeeded(childComplexity), true

	case "PlanGeneralCharacteristics.multiplePatricipationAgreementsNeededNote":
		if e.complexity.PlanGeneralCharacteristics.MultiplePatricipationAgreementsNeededNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.MultiplePatricipationAgreementsNeededNote(childComplexity), true

	case "PlanGeneralCharacteristics.participationOptions":
		if e.complexity.PlanGeneralCharacteristics.ParticipationOptions == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ParticipationOptions(childComplexity), true

	case "PlanGeneralCharacteristics.participationOptionsNote":
		if e.complexity.PlanGeneralCharacteristics.ParticipationOptionsNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ParticipationOptionsNote(childComplexity), true

	case "PlanGeneralCharacteristics.planContactUpdated":
		if e.complexity.PlanGeneralCharacteristics.PlanContactUpdated == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.PlanContactUpdated(childComplexity), true

	case "PlanGeneralCharacteristics.planContactUpdatedNote":
		if e.complexity.PlanGeneralCharacteristics.PlanContactUpdatedNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.PlanContactUpdatedNote(childComplexity), true

	case "PlanGeneralCharacteristics.readyForReviewBy":
		if e.complexity.PlanGeneralCharacteristics.ReadyForReviewBy == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ReadyForReviewBy(childComplexity), true

	case "PlanGeneralCharacteristics.readyForReviewDts":
		if e.complexity.PlanGeneralCharacteristics.ReadyForReviewDts == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ReadyForReviewDts(childComplexity), true

	case "PlanGeneralCharacteristics.resemblesExistingModel":
		if e.complexity.PlanGeneralCharacteristics.ResemblesExistingModel == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ResemblesExistingModel(childComplexity), true

	case "PlanGeneralCharacteristics.resemblesExistingModelHow":
		if e.complexity.PlanGeneralCharacteristics.ResemblesExistingModelHow == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ResemblesExistingModelHow(childComplexity), true

	case "PlanGeneralCharacteristics.resemblesExistingModelNote":
		if e.complexity.PlanGeneralCharacteristics.ResemblesExistingModelNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ResemblesExistingModelNote(childComplexity), true

	case "PlanGeneralCharacteristics.resemblesExistingModelWhich":
		if e.complexity.PlanGeneralCharacteristics.ResemblesExistingModelWhich == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.ResemblesExistingModelWhich(childComplexity), true

	case "PlanGeneralCharacteristics.rulemakingRequired":
		if e.complexity.PlanGeneralCharacteristics.RulemakingRequired == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.RulemakingRequired(childComplexity), true

	case "PlanGeneralCharacteristics.rulemakingRequiredDescription":
		if e.complexity.PlanGeneralCharacteristics.RulemakingRequiredDescription == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.RulemakingRequiredDescription(childComplexity), true

	case "PlanGeneralCharacteristics.rulemakingRequiredNote":
		if e.complexity.PlanGeneralCharacteristics.RulemakingRequiredNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.RulemakingRequiredNote(childComplexity), true

	case "PlanGeneralCharacteristics.status":
		if e.complexity.PlanGeneralCharacteristics.Status == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.Status(childComplexity), true

	case "PlanGeneralCharacteristics.waiversRequired":
		if e.complexity.PlanGeneralCharacteristics.WaiversRequired == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.WaiversRequired(childComplexity), true

	case "PlanGeneralCharacteristics.waiversRequiredNote":
		if e.complexity.PlanGeneralCharacteristics.WaiversRequiredNote == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.WaiversRequiredNote(childComplexity), true

	case "PlanGeneralCharacteristics.waiversRequiredTypes":
		if e.complexity.PlanGeneralCharacteristics.WaiversRequiredTypes == nil {
			break
		}

		return e.complexity.PlanGeneralCharacteristics.WaiversRequiredTypes(childComplexity), true

	case "PlanITTools.bManageBeneficiaryOverlap":
		if e.complexity.PlanITTools.BManageBeneficiaryOverlap == nil {
			break
		}

		return e.complexity.PlanITTools.BManageBeneficiaryOverlap(childComplexity), true

	case "PlanITTools.bManageBeneficiaryOverlapNote":
		if e.complexity.PlanITTools.BManageBeneficiaryOverlapNote == nil {
			break
		}

		return e.complexity.PlanITTools.BManageBeneficiaryOverlapNote(childComplexity), true

	case "PlanITTools.bManageBeneficiaryOverlapOther":
		if e.complexity.PlanITTools.BManageBeneficiaryOverlapOther == nil {
			break
		}

		return e.complexity.PlanITTools.BManageBeneficiaryOverlapOther(childComplexity), true

	case "PlanITTools.createdBy":
		if e.complexity.PlanITTools.CreatedBy == nil {
			break
		}

		return e.complexity.PlanITTools.CreatedBy(childComplexity), true

	case "PlanITTools.createdDts":
		if e.complexity.PlanITTools.CreatedDts == nil {
			break
		}

		return e.complexity.PlanITTools.CreatedDts(childComplexity), true

	case "PlanITTools.gcCollectBids":
		if e.complexity.PlanITTools.GcCollectBids == nil {
			break
		}

		return e.complexity.PlanITTools.GcCollectBids(childComplexity), true

	case "PlanITTools.gcCollectBidsNote":
		if e.complexity.PlanITTools.GcCollectBidsNote == nil {
			break
		}

		return e.complexity.PlanITTools.GcCollectBidsNote(childComplexity), true

	case "PlanITTools.gcCollectBidsOther":
		if e.complexity.PlanITTools.GcCollectBidsOther == nil {
			break
		}

		return e.complexity.PlanITTools.GcCollectBidsOther(childComplexity), true

	case "PlanITTools.gcPartCDNote":
		if e.complexity.PlanITTools.GcPartCDNote == nil {
			break
		}

		return e.complexity.PlanITTools.GcPartCDNote(childComplexity), true

	case "PlanITTools.gcPartCDOther":
		if e.complexity.PlanITTools.GcPartCDOther == nil {
			break
		}

		return e.complexity.PlanITTools.GcPartCDOther(childComplexity), true

	case "PlanITTools.gcPartCD":
		if e.complexity.PlanITTools.GcPartCd == nil {
			break
		}

		return e.complexity.PlanITTools.GcPartCd(childComplexity), true

	case "PlanITTools.gcUpdateContract":
		if e.complexity.PlanITTools.GcUpdateContract == nil {
			break
		}

		return e.complexity.PlanITTools.GcUpdateContract(childComplexity), true

	case "PlanITTools.gcUpdateContractNote":
		if e.complexity.PlanITTools.GcUpdateContractNote == nil {
			break
		}

		return e.complexity.PlanITTools.GcUpdateContractNote(childComplexity), true

	case "PlanITTools.gcUpdateContractOther":
		if e.complexity.PlanITTools.GcUpdateContractOther == nil {
			break
		}

		return e.complexity.PlanITTools.GcUpdateContractOther(childComplexity), true

	case "PlanITTools.id":
		if e.complexity.PlanITTools.ID == nil {
			break
		}

		return e.complexity.PlanITTools.ID(childComplexity), true

	case "PlanITTools.modelPlanID":
		if e.complexity.PlanITTools.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanITTools.ModelPlanID(childComplexity), true

	case "PlanITTools.modifiedBy":
		if e.complexity.PlanITTools.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanITTools.ModifiedBy(childComplexity), true

	case "PlanITTools.modifiedDts":
		if e.complexity.PlanITTools.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanITTools.ModifiedDts(childComplexity), true

	case "PlanITTools.oelClaimsBasedMeasures":
		if e.complexity.PlanITTools.OelClaimsBasedMeasures == nil {
			break
		}

		return e.complexity.PlanITTools.OelClaimsBasedMeasures(childComplexity), true

	case "PlanITTools.oelClaimsBasedMeasuresNote":
		if e.complexity.PlanITTools.OelClaimsBasedMeasuresNote == nil {
			break
		}

		return e.complexity.PlanITTools.OelClaimsBasedMeasuresNote(childComplexity), true

	case "PlanITTools.oelClaimsBasedMeasuresOther":
		if e.complexity.PlanITTools.OelClaimsBasedMeasuresOther == nil {
			break
		}

		return e.complexity.PlanITTools.OelClaimsBasedMeasuresOther(childComplexity), true

	case "PlanITTools.oelCollectData":
		if e.complexity.PlanITTools.OelCollectData == nil {
			break
		}

		return e.complexity.PlanITTools.OelCollectData(childComplexity), true

	case "PlanITTools.oelCollectDataNote":
		if e.complexity.PlanITTools.OelCollectDataNote == nil {
			break
		}

		return e.complexity.PlanITTools.OelCollectDataNote(childComplexity), true

	case "PlanITTools.oelCollectDataOther":
		if e.complexity.PlanITTools.OelCollectDataOther == nil {
			break
		}

		return e.complexity.PlanITTools.OelCollectDataOther(childComplexity), true

	case "PlanITTools.oelEducateBeneficiaries":
		if e.complexity.PlanITTools.OelEducateBeneficiaries == nil {
			break
		}

		return e.complexity.PlanITTools.OelEducateBeneficiaries(childComplexity), true

	case "PlanITTools.oelEducateBeneficiariesNote":
		if e.complexity.PlanITTools.OelEducateBeneficiariesNote == nil {
			break
		}

		return e.complexity.PlanITTools.OelEducateBeneficiariesNote(childComplexity), true

	case "PlanITTools.oelEducateBeneficiariesOther":
		if e.complexity.PlanITTools.OelEducateBeneficiariesOther == nil {
			break
		}

		return e.complexity.PlanITTools.OelEducateBeneficiariesOther(childComplexity), true

	case "PlanITTools.oelEvaluationContractor":
		if e.complexity.PlanITTools.OelEvaluationContractor == nil {
			break
		}

		return e.complexity.PlanITTools.OelEvaluationContractor(childComplexity), true

	case "PlanITTools.oelEvaluationContractorNote":
		if e.complexity.PlanITTools.OelEvaluationContractorNote == nil {
			break
		}

		return e.complexity.PlanITTools.OelEvaluationContractorNote(childComplexity), true

	case "PlanITTools.oelEvaluationContractorOther":
		if e.complexity.PlanITTools.OelEvaluationContractorOther == nil {
			break
		}

		return e.complexity.PlanITTools.OelEvaluationContractorOther(childComplexity), true

	case "PlanITTools.oelHelpdeskSupport":
		if e.complexity.PlanITTools.OelHelpdeskSupport == nil {
			break
		}

		return e.complexity.PlanITTools.OelHelpdeskSupport(childComplexity), true

	case "PlanITTools.oelHelpdeskSupportNote":
		if e.complexity.PlanITTools.OelHelpdeskSupportNote == nil {
			break
		}

		return e.complexity.PlanITTools.OelHelpdeskSupportNote(childComplexity), true

	case "PlanITTools.oelHelpdeskSupportOther":
		if e.complexity.PlanITTools.OelHelpdeskSupportOther == nil {
			break
		}

		return e.complexity.PlanITTools.OelHelpdeskSupportOther(childComplexity), true

	case "PlanITTools.oelLearningContractor":
		if e.complexity.PlanITTools.OelLearningContractor == nil {
			break
		}

		return e.complexity.PlanITTools.OelLearningContractor(childComplexity), true

	case "PlanITTools.oelLearningContractorNote":
		if e.complexity.PlanITTools.OelLearningContractorNote == nil {
			break
		}

		return e.complexity.PlanITTools.OelLearningContractorNote(childComplexity), true

	case "PlanITTools.oelLearningContractorOther":
		if e.complexity.PlanITTools.OelLearningContractorOther == nil {
			break
		}

		return e.complexity.PlanITTools.OelLearningContractorOther(childComplexity), true

	case "PlanITTools.oelManageAco":
		if e.complexity.PlanITTools.OelManageAco == nil {
			break
		}

		return e.complexity.PlanITTools.OelManageAco(childComplexity), true

	case "PlanITTools.oelManageAcoNote":
		if e.complexity.PlanITTools.OelManageAcoNote == nil {
			break
		}

		return e.complexity.PlanITTools.OelManageAcoNote(childComplexity), true

	case "PlanITTools.oelManageAcoOther":
		if e.complexity.PlanITTools.OelManageAcoOther == nil {
			break
		}

		return e.complexity.PlanITTools.OelManageAcoOther(childComplexity), true

	case "PlanITTools.oelObtainData":
		if e.complexity.PlanITTools.OelObtainData == nil {
			break
		}

		return e.complexity.PlanITTools.OelObtainData(childComplexity), true

	case "PlanITTools.oelObtainDataNote":
		if e.complexity.PlanITTools.OelObtainDataNote == nil {
			break
		}

		return e.complexity.PlanITTools.OelObtainDataNote(childComplexity), true

	case "PlanITTools.oelObtainDataOther":
		if e.complexity.PlanITTools.OelObtainDataOther == nil {
			break
		}

		return e.complexity.PlanITTools.OelObtainDataOther(childComplexity), true

	case "PlanITTools.oelParticipantCollaboration":
		if e.complexity.PlanITTools.OelParticipantCollaboration == nil {
			break
		}

		return e.complexity.PlanITTools.OelParticipantCollaboration(childComplexity), true

	case "PlanITTools.oelParticipantCollaborationNote":
		if e.complexity.PlanITTools.OelParticipantCollaborationNote == nil {
			break
		}

		return e.complexity.PlanITTools.OelParticipantCollaborationNote(childComplexity), true

	case "PlanITTools.oelParticipantCollaborationOther":
		if e.complexity.PlanITTools.OelParticipantCollaborationOther == nil {
			break
		}

		return e.complexity.PlanITTools.OelParticipantCollaborationOther(childComplexity), true

	case "PlanITTools.oelPerformanceBenchmark":
		if e.complexity.PlanITTools.OelPerformanceBenchmark == nil {
			break
		}

		return e.complexity.PlanITTools.OelPerformanceBenchmark(childComplexity), true

	case "PlanITTools.oelPerformanceBenchmarkNote":
		if e.complexity.PlanITTools.OelPerformanceBenchmarkNote == nil {
			break
		}

		return e.complexity.PlanITTools.OelPerformanceBenchmarkNote(childComplexity), true

	case "PlanITTools.oelPerformanceBenchmarkOther":
		if e.complexity.PlanITTools.OelPerformanceBenchmarkOther == nil {
			break
		}

		return e.complexity.PlanITTools.OelPerformanceBenchmarkOther(childComplexity), true

	case "PlanITTools.oelProcessAppeals":
		if e.complexity.PlanITTools.OelProcessAppeals == nil {
			break
		}

		return e.complexity.PlanITTools.OelProcessAppeals(childComplexity), true

	case "PlanITTools.oelProcessAppealsNote":
		if e.complexity.PlanITTools.OelProcessAppealsNote == nil {
			break
		}

		return e.complexity.PlanITTools.OelProcessAppealsNote(childComplexity), true

	case "PlanITTools.oelProcessAppealsOther":
		if e.complexity.PlanITTools.OelProcessAppealsOther == nil {
			break
		}

		return e.complexity.PlanITTools.OelProcessAppealsOther(childComplexity), true

	case "PlanITTools.oelQualityScores":
		if e.complexity.PlanITTools.OelQualityScores == nil {
			break
		}

		return e.complexity.PlanITTools.OelQualityScores(childComplexity), true

	case "PlanITTools.oelQualityScoresNote":
		if e.complexity.PlanITTools.OelQualityScoresNote == nil {
			break
		}

		return e.complexity.PlanITTools.OelQualityScoresNote(childComplexity), true

	case "PlanITTools.oelQualityScoresOther":
		if e.complexity.PlanITTools.OelQualityScoresOther == nil {
			break
		}

		return e.complexity.PlanITTools.OelQualityScoresOther(childComplexity), true

	case "PlanITTools.oelSendReports":
		if e.complexity.PlanITTools.OelSendReports == nil {
			break
		}

		return e.complexity.PlanITTools.OelSendReports(childComplexity), true

	case "PlanITTools.oelSendReportsNote":
		if e.complexity.PlanITTools.OelSendReportsNote == nil {
			break
		}

		return e.complexity.PlanITTools.OelSendReportsNote(childComplexity), true

	case "PlanITTools.oelSendReportsOther":
		if e.complexity.PlanITTools.OelSendReportsOther == nil {
			break
		}

		return e.complexity.PlanITTools.OelSendReportsOther(childComplexity), true

	case "PlanITTools.pInformFfs":
		if e.complexity.PlanITTools.PInformFfs == nil {
			break
		}

		return e.complexity.PlanITTools.PInformFfs(childComplexity), true

	case "PlanITTools.pInformFfsNote":
		if e.complexity.PlanITTools.PInformFfsNote == nil {
			break
		}

		return e.complexity.PlanITTools.PInformFfsNote(childComplexity), true

	case "PlanITTools.pInformFfsOther":
		if e.complexity.PlanITTools.PInformFfsOther == nil {
			break
		}

		return e.complexity.PlanITTools.PInformFfsOther(childComplexity), true

	case "PlanITTools.pMakeClaimsPayments":
		if e.complexity.PlanITTools.PMakeClaimsPayments == nil {
			break
		}

		return e.complexity.PlanITTools.PMakeClaimsPayments(childComplexity), true

	case "PlanITTools.pMakeClaimsPaymentsNote":
		if e.complexity.PlanITTools.PMakeClaimsPaymentsNote == nil {
			break
		}

		return e.complexity.PlanITTools.PMakeClaimsPaymentsNote(childComplexity), true

	case "PlanITTools.pMakeClaimsPaymentsOther":
		if e.complexity.PlanITTools.PMakeClaimsPaymentsOther == nil {
			break
		}

		return e.complexity.PlanITTools.PMakeClaimsPaymentsOther(childComplexity), true

	case "PlanITTools.pNonClaimsBasedPayments":
		if e.complexity.PlanITTools.PNonClaimsBasedPayments == nil {
			break
		}

		return e.complexity.PlanITTools.PNonClaimsBasedPayments(childComplexity), true

	case "PlanITTools.pNonClaimsBasedPaymentsNote":
		if e.complexity.PlanITTools.PNonClaimsBasedPaymentsNote == nil {
			break
		}

		return e.complexity.PlanITTools.PNonClaimsBasedPaymentsNote(childComplexity), true

	case "PlanITTools.pNonClaimsBasedPaymentsOther":
		if e.complexity.PlanITTools.PNonClaimsBasedPaymentsOther == nil {
			break
		}

		return e.complexity.PlanITTools.PNonClaimsBasedPaymentsOther(childComplexity), true

	case "PlanITTools.pRecoverPayments":
		if e.complexity.PlanITTools.PRecoverPayments == nil {
			break
		}

		return e.complexity.PlanITTools.PRecoverPayments(childComplexity), true

	case "PlanITTools.pRecoverPaymentsNote":
		if e.complexity.PlanITTools.PRecoverPaymentsNote == nil {
			break
		}

		return e.complexity.PlanITTools.PRecoverPaymentsNote(childComplexity), true

	case "PlanITTools.pRecoverPaymentsOther":
		if e.complexity.PlanITTools.PRecoverPaymentsOther == nil {
			break
		}

		return e.complexity.PlanITTools.PRecoverPaymentsOther(childComplexity), true

	case "PlanITTools.pSharedSavingsPlan":
		if e.complexity.PlanITTools.PSharedSavingsPlan == nil {
			break
		}

		return e.complexity.PlanITTools.PSharedSavingsPlan(childComplexity), true

	case "PlanITTools.pSharedSavingsPlanNote":
		if e.complexity.PlanITTools.PSharedSavingsPlanNote == nil {
			break
		}

		return e.complexity.PlanITTools.PSharedSavingsPlanNote(childComplexity), true

	case "PlanITTools.pSharedSavingsPlanOther":
		if e.complexity.PlanITTools.PSharedSavingsPlanOther == nil {
			break
		}

		return e.complexity.PlanITTools.PSharedSavingsPlanOther(childComplexity), true

	case "PlanITTools.ppAppSupportContractor":
		if e.complexity.PlanITTools.PpAppSupportContractor == nil {
			break
		}

		return e.complexity.PlanITTools.PpAppSupportContractor(childComplexity), true

	case "PlanITTools.ppAppSupportContractorNote":
		if e.complexity.PlanITTools.PpAppSupportContractorNote == nil {
			break
		}

		return e.complexity.PlanITTools.PpAppSupportContractorNote(childComplexity), true

	case "PlanITTools.ppAppSupportContractorOther":
		if e.complexity.PlanITTools.PpAppSupportContractorOther == nil {
			break
		}

		return e.complexity.PlanITTools.PpAppSupportContractorOther(childComplexity), true

	case "PlanITTools.ppCollectScoreReview":
		if e.complexity.PlanITTools.PpCollectScoreReview == nil {
			break
		}

		return e.complexity.PlanITTools.PpCollectScoreReview(childComplexity), true

	case "PlanITTools.ppCollectScoreReviewNote":
		if e.complexity.PlanITTools.PpCollectScoreReviewNote == nil {
			break
		}

		return e.complexity.PlanITTools.PpCollectScoreReviewNote(childComplexity), true

	case "PlanITTools.ppCollectScoreReviewOther":
		if e.complexity.PlanITTools.PpCollectScoreReviewOther == nil {
			break
		}

		return e.complexity.PlanITTools.PpCollectScoreReviewOther(childComplexity), true

	case "PlanITTools.ppCommunicateWithParticipant":
		if e.complexity.PlanITTools.PpCommunicateWithParticipant == nil {
			break
		}

		return e.complexity.PlanITTools.PpCommunicateWithParticipant(childComplexity), true

	case "PlanITTools.ppCommunicateWithParticipantNote":
		if e.complexity.PlanITTools.PpCommunicateWithParticipantNote == nil {
			break
		}

		return e.complexity.PlanITTools.PpCommunicateWithParticipantNote(childComplexity), true

	case "PlanITTools.ppCommunicateWithParticipantOther":
		if e.complexity.PlanITTools.PpCommunicateWithParticipantOther == nil {
			break
		}

		return e.complexity.PlanITTools.PpCommunicateWithParticipantOther(childComplexity), true

	case "PlanITTools.ppManageProviderOverlap":
		if e.complexity.PlanITTools.PpManageProviderOverlap == nil {
			break
		}

		return e.complexity.PlanITTools.PpManageProviderOverlap(childComplexity), true

	case "PlanITTools.ppManageProviderOverlapNote":
		if e.complexity.PlanITTools.PpManageProviderOverlapNote == nil {
			break
		}

		return e.complexity.PlanITTools.PpManageProviderOverlapNote(childComplexity), true

	case "PlanITTools.ppManageProviderOverlapOther":
		if e.complexity.PlanITTools.PpManageProviderOverlapOther == nil {
			break
		}

		return e.complexity.PlanITTools.PpManageProviderOverlapOther(childComplexity), true

	case "PlanITTools.ppToAdvertise":
		if e.complexity.PlanITTools.PpToAdvertise == nil {
			break
		}

		return e.complexity.PlanITTools.PpToAdvertise(childComplexity), true

	case "PlanITTools.ppToAdvertiseNote":
		if e.complexity.PlanITTools.PpToAdvertiseNote == nil {
			break
		}

		return e.complexity.PlanITTools.PpToAdvertiseNote(childComplexity), true

	case "PlanITTools.ppToAdvertiseOther":
		if e.complexity.PlanITTools.PpToAdvertiseOther == nil {
			break
		}

		return e.complexity.PlanITTools.PpToAdvertiseOther(childComplexity), true

	case "PlanITTools.readyForReviewBy":
		if e.complexity.PlanITTools.ReadyForReviewBy == nil {
			break
		}

		return e.complexity.PlanITTools.ReadyForReviewBy(childComplexity), true

	case "PlanITTools.readyForReviewDts":
		if e.complexity.PlanITTools.ReadyForReviewDts == nil {
			break
		}

		return e.complexity.PlanITTools.ReadyForReviewDts(childComplexity), true

	case "PlanITTools.status":
		if e.complexity.PlanITTools.Status == nil {
			break
		}

		return e.complexity.PlanITTools.Status(childComplexity), true

	case "PlanOpsEvalAndLearning.agencyOrStateHelp":
		if e.complexity.PlanOpsEvalAndLearning.AgencyOrStateHelp == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AgencyOrStateHelp(childComplexity), true

	case "PlanOpsEvalAndLearning.agencyOrStateHelpNote":
		if e.complexity.PlanOpsEvalAndLearning.AgencyOrStateHelpNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AgencyOrStateHelpNote(childComplexity), true

	case "PlanOpsEvalAndLearning.agencyOrStateHelpOther":
		if e.complexity.PlanOpsEvalAndLearning.AgencyOrStateHelpOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AgencyOrStateHelpOther(childComplexity), true

	case "PlanOpsEvalAndLearning.anticipatedChallenges":
		if e.complexity.PlanOpsEvalAndLearning.AnticipatedChallenges == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AnticipatedChallenges(childComplexity), true

	case "PlanOpsEvalAndLearning.appToSendFilesToKnown":
		if e.complexity.PlanOpsEvalAndLearning.AppToSendFilesToKnown == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppToSendFilesToKnown(childComplexity), true

	case "PlanOpsEvalAndLearning.appToSendFilesToNote":
		if e.complexity.PlanOpsEvalAndLearning.AppToSendFilesToNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppToSendFilesToNote(childComplexity), true

	case "PlanOpsEvalAndLearning.appToSendFilesToWhich":
		if e.complexity.PlanOpsEvalAndLearning.AppToSendFilesToWhich == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppToSendFilesToWhich(childComplexity), true

	case "PlanOpsEvalAndLearning.appealFeedback":
		if e.complexity.PlanOpsEvalAndLearning.AppealFeedback == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppealFeedback(childComplexity), true

	case "PlanOpsEvalAndLearning.appealNote":
		if e.complexity.PlanOpsEvalAndLearning.AppealNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppealNote(childComplexity), true

	case "PlanOpsEvalAndLearning.appealOther":
		if e.complexity.PlanOpsEvalAndLearning.AppealOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppealOther(childComplexity), true

	case "PlanOpsEvalAndLearning.appealPayments":
		if e.complexity.PlanOpsEvalAndLearning.AppealPayments == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppealPayments(childComplexity), true

	case "PlanOpsEvalAndLearning.appealPerformance":
		if e.complexity.PlanOpsEvalAndLearning.AppealPerformance == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.AppealPerformance(childComplexity), true

	case "PlanOpsEvalAndLearning.benchmarkForPerformance":
		if e.complexity.PlanOpsEvalAndLearning.BenchmarkForPerformance == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.BenchmarkForPerformance(childComplexity), true

	case "PlanOpsEvalAndLearning.benchmarkForPerformanceNote":
		if e.complexity.PlanOpsEvalAndLearning.BenchmarkForPerformanceNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.BenchmarkForPerformanceNote(childComplexity), true

	case "PlanOpsEvalAndLearning.captureParticipantInfo":
		if e.complexity.PlanOpsEvalAndLearning.CaptureParticipantInfo == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CaptureParticipantInfo(childComplexity), true

	case "PlanOpsEvalAndLearning.captureParticipantInfoNote":
		if e.complexity.PlanOpsEvalAndLearning.CaptureParticipantInfoNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CaptureParticipantInfoNote(childComplexity), true

	case "PlanOpsEvalAndLearning.ccmInvolvment":
		if e.complexity.PlanOpsEvalAndLearning.CcmInvolvment == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CcmInvolvment(childComplexity), true

	case "PlanOpsEvalAndLearning.ccmInvolvmentNote":
		if e.complexity.PlanOpsEvalAndLearning.CcmInvolvmentNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CcmInvolvmentNote(childComplexity), true

	case "PlanOpsEvalAndLearning.ccmInvolvmentOther":
		if e.complexity.PlanOpsEvalAndLearning.CcmInvolvmentOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CcmInvolvmentOther(childComplexity), true

	case "PlanOpsEvalAndLearning.computePerformanceScores":
		if e.complexity.PlanOpsEvalAndLearning.ComputePerformanceScores == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ComputePerformanceScores(childComplexity), true

	case "PlanOpsEvalAndLearning.computePerformanceScoresNote":
		if e.complexity.PlanOpsEvalAndLearning.ComputePerformanceScoresNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ComputePerformanceScoresNote(childComplexity), true

	case "PlanOpsEvalAndLearning.contractorSupport":
		if e.complexity.PlanOpsEvalAndLearning.ContractorSupport == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ContractorSupport(childComplexity), true

	case "PlanOpsEvalAndLearning.contractorSupportHow":
		if e.complexity.PlanOpsEvalAndLearning.ContractorSupportHow == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ContractorSupportHow(childComplexity), true

	case "PlanOpsEvalAndLearning.contractorSupportNote":
		if e.complexity.PlanOpsEvalAndLearning.ContractorSupportNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ContractorSupportNote(childComplexity), true

	case "PlanOpsEvalAndLearning.contractorSupportOther":
		if e.complexity.PlanOpsEvalAndLearning.ContractorSupportOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ContractorSupportOther(childComplexity), true

	case "PlanOpsEvalAndLearning.createdBy":
		if e.complexity.PlanOpsEvalAndLearning.CreatedBy == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CreatedBy(childComplexity), true

	case "PlanOpsEvalAndLearning.createdDts":
		if e.complexity.PlanOpsEvalAndLearning.CreatedDts == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.CreatedDts(childComplexity), true

	case "PlanOpsEvalAndLearning.dataCollectionFrequency":
		if e.complexity.PlanOpsEvalAndLearning.DataCollectionFrequency == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataCollectionFrequency(childComplexity), true

	case "PlanOpsEvalAndLearning.dataCollectionFrequencyNote":
		if e.complexity.PlanOpsEvalAndLearning.DataCollectionFrequencyNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataCollectionFrequencyNote(childComplexity), true

	case "PlanOpsEvalAndLearning.dataCollectionFrequencyOther":
		if e.complexity.PlanOpsEvalAndLearning.DataCollectionFrequencyOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataCollectionFrequencyOther(childComplexity), true

	case "PlanOpsEvalAndLearning.dataCollectionStarts":
		if e.complexity.PlanOpsEvalAndLearning.DataCollectionStarts == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataCollectionStarts(childComplexity), true

	case "PlanOpsEvalAndLearning.dataCollectionStartsOther":
		if e.complexity.PlanOpsEvalAndLearning.DataCollectionStartsOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataCollectionStartsOther(childComplexity), true

	case "PlanOpsEvalAndLearning.dataFlowDiagramsNeeded":
		if e.complexity.PlanOpsEvalAndLearning.DataFlowDiagramsNeeded == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataFlowDiagramsNeeded(childComplexity), true

	case "PlanOpsEvalAndLearning.dataFullTimeOrIncremental":
		if e.complexity.PlanOpsEvalAndLearning.DataFullTimeOrIncremental == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataFullTimeOrIncremental(childComplexity), true

	case "PlanOpsEvalAndLearning.dataMonitoringFileOther":
		if e.complexity.PlanOpsEvalAndLearning.DataMonitoringFileOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataMonitoringFileOther(childComplexity), true

	case "PlanOpsEvalAndLearning.dataMonitoringFileTypes":
		if e.complexity.PlanOpsEvalAndLearning.DataMonitoringFileTypes == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataMonitoringFileTypes(childComplexity), true

	case "PlanOpsEvalAndLearning.dataMonitoringNote":
		if e.complexity.PlanOpsEvalAndLearning.DataMonitoringNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataMonitoringNote(childComplexity), true

	case "PlanOpsEvalAndLearning.dataNeededForMonitoring":
		if e.complexity.PlanOpsEvalAndLearning.DataNeededForMonitoring == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataNeededForMonitoring(childComplexity), true

	case "PlanOpsEvalAndLearning.dataNeededForMonitoringNote":
		if e.complexity.PlanOpsEvalAndLearning.DataNeededForMonitoringNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataNeededForMonitoringNote(childComplexity), true

	case "PlanOpsEvalAndLearning.dataNeededForMonitoringOther":
		if e.complexity.PlanOpsEvalAndLearning.DataNeededForMonitoringOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataNeededForMonitoringOther(childComplexity), true

	case "PlanOpsEvalAndLearning.dataResponseFileFrequency":
		if e.complexity.PlanOpsEvalAndLearning.DataResponseFileFrequency == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataResponseFileFrequency(childComplexity), true

	case "PlanOpsEvalAndLearning.dataResponseType":
		if e.complexity.PlanOpsEvalAndLearning.DataResponseType == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataResponseType(childComplexity), true

	case "PlanOpsEvalAndLearning.dataSharingFrequency":
		if e.complexity.PlanOpsEvalAndLearning.DataSharingFrequency == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataSharingFrequency(childComplexity), true

	case "PlanOpsEvalAndLearning.dataSharingFrequencyOther":
		if e.complexity.PlanOpsEvalAndLearning.DataSharingFrequencyOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataSharingFrequencyOther(childComplexity), true

	case "PlanOpsEvalAndLearning.dataSharingStarts":
		if e.complexity.PlanOpsEvalAndLearning.DataSharingStarts == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataSharingStarts(childComplexity), true

	case "PlanOpsEvalAndLearning.dataSharingStartsNote":
		if e.complexity.PlanOpsEvalAndLearning.DataSharingStartsNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataSharingStartsNote(childComplexity), true

	case "PlanOpsEvalAndLearning.dataSharingStartsOther":
		if e.complexity.PlanOpsEvalAndLearning.DataSharingStartsOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataSharingStartsOther(childComplexity), true

	case "PlanOpsEvalAndLearning.dataToSendParticicipants":
		if e.complexity.PlanOpsEvalAndLearning.DataToSendParticicipants == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataToSendParticicipants(childComplexity), true

	case "PlanOpsEvalAndLearning.dataToSendParticicipantsNote":
		if e.complexity.PlanOpsEvalAndLearning.DataToSendParticicipantsNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataToSendParticicipantsNote(childComplexity), true

	case "PlanOpsEvalAndLearning.dataToSendParticicipantsOther":
		if e.complexity.PlanOpsEvalAndLearning.DataToSendParticicipantsOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DataToSendParticicipantsOther(childComplexity), true

	case "PlanOpsEvalAndLearning.developNewQualityMeasures":
		if e.complexity.PlanOpsEvalAndLearning.DevelopNewQualityMeasures == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DevelopNewQualityMeasures(childComplexity), true

	case "PlanOpsEvalAndLearning.developNewQualityMeasuresNote":
		if e.complexity.PlanOpsEvalAndLearning.DevelopNewQualityMeasuresNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DevelopNewQualityMeasuresNote(childComplexity), true

	case "PlanOpsEvalAndLearning.draftIcdDueDate":
		if e.complexity.PlanOpsEvalAndLearning.DraftIcdDueDate == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.DraftIcdDueDate(childComplexity), true

	case "PlanOpsEvalAndLearning.eftSetUp":
		if e.complexity.PlanOpsEvalAndLearning.EftSetUp == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.EftSetUp(childComplexity), true

	case "PlanOpsEvalAndLearning.evaluationApproachOther":
		if e.complexity.PlanOpsEvalAndLearning.EvaluationApproachOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.EvaluationApproachOther(childComplexity), true

	case "PlanOpsEvalAndLearning.evaluationApproaches":
		if e.complexity.PlanOpsEvalAndLearning.EvaluationApproaches == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.EvaluationApproaches(childComplexity), true

	case "PlanOpsEvalAndLearning.evalutaionApproachNote":
		if e.complexity.PlanOpsEvalAndLearning.EvalutaionApproachNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.EvalutaionApproachNote(childComplexity), true

	case "PlanOpsEvalAndLearning.fileNamingConventions":
		if e.complexity.PlanOpsEvalAndLearning.FileNamingConventions == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.FileNamingConventions(childComplexity), true

	case "PlanOpsEvalAndLearning.helpdeskUse":
		if e.complexity.PlanOpsEvalAndLearning.HelpdeskUse == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.HelpdeskUse(childComplexity), true

	case "PlanOpsEvalAndLearning.helpdeskUseNote":
		if e.complexity.PlanOpsEvalAndLearning.HelpdeskUseNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.HelpdeskUseNote(childComplexity), true

	case "PlanOpsEvalAndLearning.id":
		if e.complexity.PlanOpsEvalAndLearning.ID == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ID(childComplexity), true

	case "PlanOpsEvalAndLearning.icdNote":
		if e.complexity.PlanOpsEvalAndLearning.IcdNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.IcdNote(childComplexity), true

	case "PlanOpsEvalAndLearning.icdOwner":
		if e.complexity.PlanOpsEvalAndLearning.IcdOwner == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.IcdOwner(childComplexity), true

	case "PlanOpsEvalAndLearning.iddocSupport":
		if e.complexity.PlanOpsEvalAndLearning.IddocSupport == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.IddocSupport(childComplexity), true

	case "PlanOpsEvalAndLearning.iddocSupportNote":
		if e.complexity.PlanOpsEvalAndLearning.IddocSupportNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.IddocSupportNote(childComplexity), true

	case "PlanOpsEvalAndLearning.modelLearningSystems":
		if e.complexity.PlanOpsEvalAndLearning.ModelLearningSystems == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ModelLearningSystems(childComplexity), true

	case "PlanOpsEvalAndLearning.modelLearningSystemsNote":
		if e.complexity.PlanOpsEvalAndLearning.ModelLearningSystemsNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ModelLearningSystemsNote(childComplexity), true

	case "PlanOpsEvalAndLearning.modelLearningSystemsOther":
		if e.complexity.PlanOpsEvalAndLearning.ModelLearningSystemsOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ModelLearningSystemsOther(childComplexity), true

	case "PlanOpsEvalAndLearning.modelPlanID":
		if e.complexity.PlanOpsEvalAndLearning.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ModelPlanID(childComplexity), true

	case "PlanOpsEvalAndLearning.modifiedBy":
		if e.complexity.PlanOpsEvalAndLearning.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ModifiedBy(childComplexity), true

	case "PlanOpsEvalAndLearning.modifiedDts":
		if e.complexity.PlanOpsEvalAndLearning.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ModifiedDts(childComplexity), true

	case "PlanOpsEvalAndLearning.produceBenefitEnhancementFiles":
		if e.complexity.PlanOpsEvalAndLearning.ProduceBenefitEnhancementFiles == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ProduceBenefitEnhancementFiles(childComplexity), true

	case "PlanOpsEvalAndLearning.qualityPerformanceImpactsPayment":
		if e.complexity.PlanOpsEvalAndLearning.QualityPerformanceImpactsPayment == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.QualityPerformanceImpactsPayment(childComplexity), true

	case "PlanOpsEvalAndLearning.qualityPerformanceImpactsPaymentNote":
		if e.complexity.PlanOpsEvalAndLearning.QualityPerformanceImpactsPaymentNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.QualityPerformanceImpactsPaymentNote(childComplexity), true

	case "PlanOpsEvalAndLearning.qualityReportingStarts":
		if e.complexity.PlanOpsEvalAndLearning.QualityReportingStarts == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.QualityReportingStarts(childComplexity), true

	case "PlanOpsEvalAndLearning.qualityReportingStartsNote":
		if e.complexity.PlanOpsEvalAndLearning.QualityReportingStartsNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.QualityReportingStartsNote(childComplexity), true

	case "PlanOpsEvalAndLearning.qualityReportingStartsOther":
		if e.complexity.PlanOpsEvalAndLearning.QualityReportingStartsOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.QualityReportingStartsOther(childComplexity), true

	case "PlanOpsEvalAndLearning.readyForReviewBy":
		if e.complexity.PlanOpsEvalAndLearning.ReadyForReviewBy == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ReadyForReviewBy(childComplexity), true

	case "PlanOpsEvalAndLearning.readyForReviewDts":
		if e.complexity.PlanOpsEvalAndLearning.ReadyForReviewDts == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ReadyForReviewDts(childComplexity), true

	case "PlanOpsEvalAndLearning.riskAdjustFeedback":
		if e.complexity.PlanOpsEvalAndLearning.RiskAdjustFeedback == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.RiskAdjustFeedback(childComplexity), true

	case "PlanOpsEvalAndLearning.riskAdjustNote":
		if e.complexity.PlanOpsEvalAndLearning.RiskAdjustNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.RiskAdjustNote(childComplexity), true

	case "PlanOpsEvalAndLearning.riskAdjustOther":
		if e.complexity.PlanOpsEvalAndLearning.RiskAdjustOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.RiskAdjustOther(childComplexity), true

	case "PlanOpsEvalAndLearning.riskAdjustPayments":
		if e.complexity.PlanOpsEvalAndLearning.RiskAdjustPayments == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.RiskAdjustPayments(childComplexity), true

	case "PlanOpsEvalAndLearning.riskAdjustPerformance":
		if e.complexity.PlanOpsEvalAndLearning.RiskAdjustPerformance == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.RiskAdjustPerformance(childComplexity), true

	case "PlanOpsEvalAndLearning.sendFilesBetweenCcw":
		if e.complexity.PlanOpsEvalAndLearning.SendFilesBetweenCcw == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.SendFilesBetweenCcw(childComplexity), true

	case "PlanOpsEvalAndLearning.sendFilesBetweenCcwNote":
		if e.complexity.PlanOpsEvalAndLearning.SendFilesBetweenCcwNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.SendFilesBetweenCcwNote(childComplexity), true

	case "PlanOpsEvalAndLearning.shareCclfData":
		if e.complexity.PlanOpsEvalAndLearning.ShareCclfData == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ShareCclfData(childComplexity), true

	case "PlanOpsEvalAndLearning.shareCclfDataNote":
		if e.complexity.PlanOpsEvalAndLearning.ShareCclfDataNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.ShareCclfDataNote(childComplexity), true

	case "PlanOpsEvalAndLearning.stakeholders":
		if e.complexity.PlanOpsEvalAndLearning.Stakeholders == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.Stakeholders(childComplexity), true

	case "PlanOpsEvalAndLearning.stakeholdersNote":
		if e.complexity.PlanOpsEvalAndLearning.StakeholdersNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.StakeholdersNote(childComplexity), true

	case "PlanOpsEvalAndLearning.stakeholdersOther":
		if e.complexity.PlanOpsEvalAndLearning.StakeholdersOther == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.StakeholdersOther(childComplexity), true

	case "PlanOpsEvalAndLearning.status":
		if e.complexity.PlanOpsEvalAndLearning.Status == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.Status(childComplexity), true

	case "PlanOpsEvalAndLearning.stcNeeds":
		if e.complexity.PlanOpsEvalAndLearning.StcNeeds == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.StcNeeds(childComplexity), true

	case "PlanOpsEvalAndLearning.technicalContactsIdentified":
		if e.complexity.PlanOpsEvalAndLearning.TechnicalContactsIdentified == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.TechnicalContactsIdentified(childComplexity), true

	case "PlanOpsEvalAndLearning.technicalContactsIdentifiedDetail":
		if e.complexity.PlanOpsEvalAndLearning.TechnicalContactsIdentifiedDetail == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.TechnicalContactsIdentifiedDetail(childComplexity), true

	case "PlanOpsEvalAndLearning.technicalContactsIdentifiedNote":
		if e.complexity.PlanOpsEvalAndLearning.TechnicalContactsIdentifiedNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.TechnicalContactsIdentifiedNote(childComplexity), true

	case "PlanOpsEvalAndLearning.testingNote":
		if e.complexity.PlanOpsEvalAndLearning.TestingNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.TestingNote(childComplexity), true

	case "PlanOpsEvalAndLearning.testingTimelines":
		if e.complexity.PlanOpsEvalAndLearning.TestingTimelines == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.TestingTimelines(childComplexity), true

	case "PlanOpsEvalAndLearning.uatNeeds":
		if e.complexity.PlanOpsEvalAndLearning.UatNeeds == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.UatNeeds(childComplexity), true

	case "PlanOpsEvalAndLearning.unsolicitedAdjustmentsIncluded":
		if e.complexity.PlanOpsEvalAndLearning.UnsolicitedAdjustmentsIncluded == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.UnsolicitedAdjustmentsIncluded(childComplexity), true

	case "PlanOpsEvalAndLearning.useCcwForFileDistribiutionToParticipants":
		if e.complexity.PlanOpsEvalAndLearning.UseCcwForFileDistribiutionToParticipants == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.UseCcwForFileDistribiutionToParticipants(childComplexity), true

	case "PlanOpsEvalAndLearning.useCcwForFileDistribiutionToParticipantsNote":
		if e.complexity.PlanOpsEvalAndLearning.UseCcwForFileDistribiutionToParticipantsNote == nil {
			break
		}

		return e.complexity.PlanOpsEvalAndLearning.UseCcwForFileDistribiutionToParticipantsNote(childComplexity), true

	case "PlanParticipantsAndProviders.communicationMethod":
		if e.complexity.PlanParticipantsAndProviders.CommunicationMethod == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CommunicationMethod(childComplexity), true

	case "PlanParticipantsAndProviders.communicationMethodOther":
		if e.complexity.PlanParticipantsAndProviders.CommunicationMethodOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CommunicationMethodOther(childComplexity), true

	case "PlanParticipantsAndProviders.communicationNote":
		if e.complexity.PlanParticipantsAndProviders.CommunicationNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CommunicationNote(childComplexity), true

	case "PlanParticipantsAndProviders.confidenceNote":
		if e.complexity.PlanParticipantsAndProviders.ConfidenceNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ConfidenceNote(childComplexity), true

	case "PlanParticipantsAndProviders.coordinateWork":
		if e.complexity.PlanParticipantsAndProviders.CoordinateWork == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CoordinateWork(childComplexity), true

	case "PlanParticipantsAndProviders.coordinateWorkNote":
		if e.complexity.PlanParticipantsAndProviders.CoordinateWorkNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CoordinateWorkNote(childComplexity), true

	case "PlanParticipantsAndProviders.createdBy":
		if e.complexity.PlanParticipantsAndProviders.CreatedBy == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CreatedBy(childComplexity), true

	case "PlanParticipantsAndProviders.createdDts":
		if e.complexity.PlanParticipantsAndProviders.CreatedDts == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.CreatedDts(childComplexity), true

	case "PlanParticipantsAndProviders.estimateConfidence":
		if e.complexity.PlanParticipantsAndProviders.EstimateConfidence == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.EstimateConfidence(childComplexity), true

	case "PlanParticipantsAndProviders.expectedNumberOfParticipants":
		if e.complexity.PlanParticipantsAndProviders.ExpectedNumberOfParticipants == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ExpectedNumberOfParticipants(childComplexity), true

	case "PlanParticipantsAndProviders.gainsharePayments":
		if e.complexity.PlanParticipantsAndProviders.GainsharePayments == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.GainsharePayments(childComplexity), true

	case "PlanParticipantsAndProviders.gainsharePaymentsNote":
		if e.complexity.PlanParticipantsAndProviders.GainsharePaymentsNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.GainsharePaymentsNote(childComplexity), true

	case "PlanParticipantsAndProviders.gainsharePaymentsTrack":
		if e.complexity.PlanParticipantsAndProviders.GainsharePaymentsTrack == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.GainsharePaymentsTrack(childComplexity), true

	case "PlanParticipantsAndProviders.id":
		if e.complexity.PlanParticipantsAndProviders.ID == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ID(childComplexity), true

	case "PlanParticipantsAndProviders.medicareProviderType":
		if e.complexity.PlanParticipantsAndProviders.MedicareProviderType == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.MedicareProviderType(childComplexity), true

	case "PlanParticipantsAndProviders.modelApplicationLevel":
		if e.complexity.PlanParticipantsAndProviders.ModelApplicationLevel == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ModelApplicationLevel(childComplexity), true

	case "PlanParticipantsAndProviders.modelPlanID":
		if e.complexity.PlanParticipantsAndProviders.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ModelPlanID(childComplexity), true

	case "PlanParticipantsAndProviders.modifiedBy":
		if e.complexity.PlanParticipantsAndProviders.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ModifiedBy(childComplexity), true

	case "PlanParticipantsAndProviders.modifiedDts":
		if e.complexity.PlanParticipantsAndProviders.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ModifiedDts(childComplexity), true

	case "PlanParticipantsAndProviders.participantAssumeRisk":
		if e.complexity.PlanParticipantsAndProviders.ParticipantAssumeRisk == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantAssumeRisk(childComplexity), true

	case "PlanParticipantsAndProviders.participants":
		if e.complexity.PlanParticipantsAndProviders.Participants == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.Participants(childComplexity), true

	case "PlanParticipantsAndProviders.participantsCurrentlyInModels":
		if e.complexity.PlanParticipantsAndProviders.ParticipantsCurrentlyInModels == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantsCurrentlyInModels(childComplexity), true

	case "PlanParticipantsAndProviders.participantsCurrentlyInModelsNote":
		if e.complexity.PlanParticipantsAndProviders.ParticipantsCurrentlyInModelsNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantsCurrentlyInModelsNote(childComplexity), true

	case "PlanParticipantsAndProviders.participantsIDSNote":
		if e.complexity.PlanParticipantsAndProviders.ParticipantsIDSNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantsIDSNote(childComplexity), true

	case "PlanParticipantsAndProviders.participantsIds":
		if e.complexity.PlanParticipantsAndProviders.ParticipantsIds == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantsIds(childComplexity), true

	case "PlanParticipantsAndProviders.participantsIdsOther":
		if e.complexity.PlanParticipantsAndProviders.ParticipantsIdsOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantsIdsOther(childComplexity), true

	case "PlanParticipantsAndProviders.participantsNote":
		if e.complexity.PlanParticipantsAndProviders.ParticipantsNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantsNote(childComplexity), true

	case "PlanParticipantsAndProviders.participantsOther":
		if e.complexity.PlanParticipantsAndProviders.ParticipantsOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ParticipantsOther(childComplexity), true

	case "PlanParticipantsAndProviders.providerAddMethod":
		if e.complexity.PlanParticipantsAndProviders.ProviderAddMethod == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderAddMethod(childComplexity), true

	case "PlanParticipantsAndProviders.providerAddMethodNote":
		if e.complexity.PlanParticipantsAndProviders.ProviderAddMethodNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderAddMethodNote(childComplexity), true

	case "PlanParticipantsAndProviders.providerAddMethodOther":
		if e.complexity.PlanParticipantsAndProviders.ProviderAddMethodOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderAddMethodOther(childComplexity), true

	case "PlanParticipantsAndProviders.providerAdditionFrequency":
		if e.complexity.PlanParticipantsAndProviders.ProviderAdditionFrequency == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderAdditionFrequency(childComplexity), true

	case "PlanParticipantsAndProviders.providerAdditionFrequencyNote":
		if e.complexity.PlanParticipantsAndProviders.ProviderAdditionFrequencyNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderAdditionFrequencyNote(childComplexity), true

	case "PlanParticipantsAndProviders.providerAdditionFrequencyOther":
		if e.complexity.PlanParticipantsAndProviders.ProviderAdditionFrequencyOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderAdditionFrequencyOther(childComplexity), true

	case "PlanParticipantsAndProviders.providerLeaveMethod":
		if e.complexity.PlanParticipantsAndProviders.ProviderLeaveMethod == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderLeaveMethod(childComplexity), true

	case "PlanParticipantsAndProviders.providerLeaveMethodNote":
		if e.complexity.PlanParticipantsAndProviders.ProviderLeaveMethodNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderLeaveMethodNote(childComplexity), true

	case "PlanParticipantsAndProviders.providerLeaveMethodOther":
		if e.complexity.PlanParticipantsAndProviders.ProviderLeaveMethodOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderLeaveMethodOther(childComplexity), true

	case "PlanParticipantsAndProviders.providerOverlap":
		if e.complexity.PlanParticipantsAndProviders.ProviderOverlap == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderOverlap(childComplexity), true

	case "PlanParticipantsAndProviders.providerOverlapHierarchy":
		if e.complexity.PlanParticipantsAndProviders.ProviderOverlapHierarchy == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderOverlapHierarchy(childComplexity), true

	case "PlanParticipantsAndProviders.providerOverlapNote":
		if e.complexity.PlanParticipantsAndProviders.ProviderOverlapNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ProviderOverlapNote(childComplexity), true

	case "PlanParticipantsAndProviders.readyForReviewBy":
		if e.complexity.PlanParticipantsAndProviders.ReadyForReviewBy == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ReadyForReviewBy(childComplexity), true

	case "PlanParticipantsAndProviders.readyForReviewDts":
		if e.complexity.PlanParticipantsAndProviders.ReadyForReviewDts == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.ReadyForReviewDts(childComplexity), true

	case "PlanParticipantsAndProviders.recruitmentMethod":
		if e.complexity.PlanParticipantsAndProviders.RecruitmentMethod == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.RecruitmentMethod(childComplexity), true

	case "PlanParticipantsAndProviders.recruitmentNote":
		if e.complexity.PlanParticipantsAndProviders.RecruitmentNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.RecruitmentNote(childComplexity), true

	case "PlanParticipantsAndProviders.recruitmentOther":
		if e.complexity.PlanParticipantsAndProviders.RecruitmentOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.RecruitmentOther(childComplexity), true

	case "PlanParticipantsAndProviders.riskNote":
		if e.complexity.PlanParticipantsAndProviders.RiskNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.RiskNote(childComplexity), true

	case "PlanParticipantsAndProviders.riskOther":
		if e.complexity.PlanParticipantsAndProviders.RiskOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.RiskOther(childComplexity), true

	case "PlanParticipantsAndProviders.riskType":
		if e.complexity.PlanParticipantsAndProviders.RiskType == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.RiskType(childComplexity), true

	case "PlanParticipantsAndProviders.selectionMethod":
		if e.complexity.PlanParticipantsAndProviders.SelectionMethod == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.SelectionMethod(childComplexity), true

	case "PlanParticipantsAndProviders.selectionNote":
		if e.complexity.PlanParticipantsAndProviders.SelectionNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.SelectionNote(childComplexity), true

	case "PlanParticipantsAndProviders.selectionOther":
		if e.complexity.PlanParticipantsAndProviders.SelectionOther == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.SelectionOther(childComplexity), true

	case "PlanParticipantsAndProviders.statesEngagement":
		if e.complexity.PlanParticipantsAndProviders.StatesEngagement == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.StatesEngagement(childComplexity), true

	case "PlanParticipantsAndProviders.status":
		if e.complexity.PlanParticipantsAndProviders.Status == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.Status(childComplexity), true

	case "PlanParticipantsAndProviders.willRiskChange":
		if e.complexity.PlanParticipantsAndProviders.WillRiskChange == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.WillRiskChange(childComplexity), true

	case "PlanParticipantsAndProviders.willRiskChangeNote":
		if e.complexity.PlanParticipantsAndProviders.WillRiskChangeNote == nil {
			break
		}

		return e.complexity.PlanParticipantsAndProviders.WillRiskChangeNote(childComplexity), true

	case "PlanPayments.affectsMedicareSecondaryPayerClaims":
		if e.complexity.PlanPayments.AffectsMedicareSecondaryPayerClaims == nil {
			break
		}

		return e.complexity.PlanPayments.AffectsMedicareSecondaryPayerClaims(childComplexity), true

	case "PlanPayments.affectsMedicareSecondaryPayerClaimsHow":
		if e.complexity.PlanPayments.AffectsMedicareSecondaryPayerClaimsHow == nil {
			break
		}

		return e.complexity.PlanPayments.AffectsMedicareSecondaryPayerClaimsHow(childComplexity), true

	case "PlanPayments.affectsMedicareSecondaryPayerClaimsNote":
		if e.complexity.PlanPayments.AffectsMedicareSecondaryPayerClaimsNote == nil {
			break
		}

		return e.complexity.PlanPayments.AffectsMedicareSecondaryPayerClaimsNote(childComplexity), true

	case "PlanPayments.anticipateReconcilingPaymentsRetrospectively":
		if e.complexity.PlanPayments.AnticipateReconcilingPaymentsRetrospectively == nil {
			break
		}

		return e.complexity.PlanPayments.AnticipateReconcilingPaymentsRetrospectively(childComplexity), true

	case "PlanPayments.anticipateReconcilingPaymentsRetrospectivelyNote":
		if e.complexity.PlanPayments.AnticipateReconcilingPaymentsRetrospectivelyNote == nil {
			break
		}

		return e.complexity.PlanPayments.AnticipateReconcilingPaymentsRetrospectivelyNote(childComplexity), true

	case "PlanPayments.anticipatedPaymentFrequency":
		if e.complexity.PlanPayments.AnticipatedPaymentFrequency == nil {
			break
		}

		return e.complexity.PlanPayments.AnticipatedPaymentFrequency(childComplexity), true

	case "PlanPayments.anticipatedPaymentFrequencyNote":
		if e.complexity.PlanPayments.AnticipatedPaymentFrequencyNote == nil {
			break
		}

		return e.complexity.PlanPayments.AnticipatedPaymentFrequencyNote(childComplexity), true

	case "PlanPayments.anticipatedPaymentFrequencyOther":
		if e.complexity.PlanPayments.AnticipatedPaymentFrequencyOther == nil {
			break
		}

		return e.complexity.PlanPayments.AnticipatedPaymentFrequencyOther(childComplexity), true

	case "PlanPayments.beneficiaryCostSharingLevelAndHandling":
		if e.complexity.PlanPayments.BeneficiaryCostSharingLevelAndHandling == nil {
			break
		}

		return e.complexity.PlanPayments.BeneficiaryCostSharingLevelAndHandling(childComplexity), true

	case "PlanPayments.canParticipantsSelectBetweenPaymentMechanisms":
		if e.complexity.PlanPayments.CanParticipantsSelectBetweenPaymentMechanisms == nil {
			break
		}

		return e.complexity.PlanPayments.CanParticipantsSelectBetweenPaymentMechanisms(childComplexity), true

	case "PlanPayments.canParticipantsSelectBetweenPaymentMechanismsHow":
		if e.complexity.PlanPayments.CanParticipantsSelectBetweenPaymentMechanismsHow == nil {
			break
		}

		return e.complexity.PlanPayments.CanParticipantsSelectBetweenPaymentMechanismsHow(childComplexity), true

	case "PlanPayments.canParticipantsSelectBetweenPaymentMechanismsNote":
		if e.complexity.PlanPayments.CanParticipantsSelectBetweenPaymentMechanismsNote == nil {
			break
		}

		return e.complexity.PlanPayments.CanParticipantsSelectBetweenPaymentMechanismsNote(childComplexity), true

	case "PlanPayments.changesMedicarePhysicianFeeSchedule":
		if e.complexity.PlanPayments.ChangesMedicarePhysicianFeeSchedule == nil {
			break
		}

		return e.complexity.PlanPayments.ChangesMedicarePhysicianFeeSchedule(childComplexity), true

	case "PlanPayments.changesMedicarePhysicianFeeScheduleNote":
		if e.complexity.PlanPayments.ChangesMedicarePhysicianFeeScheduleNote == nil {
			break
		}

		return e.complexity.PlanPayments.ChangesMedicarePhysicianFeeScheduleNote(childComplexity), true

	case "PlanPayments.createdBy":
		if e.complexity.PlanPayments.CreatedBy == nil {
			break
		}

		return e.complexity.PlanPayments.CreatedBy(childComplexity), true

	case "PlanPayments.createdDts":
		if e.complexity.PlanPayments.CreatedDts == nil {
			break
		}

		return e.complexity.PlanPayments.CreatedDts(childComplexity), true

	case "PlanPayments.creatingDependenciesBetweenServices":
		if e.complexity.PlanPayments.CreatingDependenciesBetweenServices == nil {
			break
		}

		return e.complexity.PlanPayments.CreatingDependenciesBetweenServices(childComplexity), true

	case "PlanPayments.creatingDependenciesBetweenServicesNote":
		if e.complexity.PlanPayments.CreatingDependenciesBetweenServicesNote == nil {
			break
		}

		return e.complexity.PlanPayments.CreatingDependenciesBetweenServicesNote(childComplexity), true

	case "PlanPayments.expectedCalculationComplexityLevel":
		if e.complexity.PlanPayments.ExpectedCalculationComplexityLevel == nil {
			break
		}

		return e.complexity.PlanPayments.ExpectedCalculationComplexityLevel(childComplexity), true

	case "PlanPayments.expectedCalculationComplexityLevelNote":
		if e.complexity.PlanPayments.ExpectedCalculationComplexityLevelNote == nil {
			break
		}

		return e.complexity.PlanPayments.ExpectedCalculationComplexityLevelNote(childComplexity), true

	case "PlanPayments.fundingSource":
		if e.complexity.PlanPayments.FundingSource == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSource(childComplexity), true

	case "PlanPayments.fundingSourceNote":
		if e.complexity.PlanPayments.FundingSourceNote == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSourceNote(childComplexity), true

	case "PlanPayments.fundingSourceOther":
		if e.complexity.PlanPayments.FundingSourceOther == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSourceOther(childComplexity), true

	case "PlanPayments.fundingSourceR":
		if e.complexity.PlanPayments.FundingSourceR == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSourceR(childComplexity), true

	case "PlanPayments.fundingSourceRNote":
		if e.complexity.PlanPayments.FundingSourceRNote == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSourceRNote(childComplexity), true

	case "PlanPayments.fundingSourceROther":
		if e.complexity.PlanPayments.FundingSourceROther == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSourceROther(childComplexity), true

	case "PlanPayments.fundingSourceRTrustFund":
		if e.complexity.PlanPayments.FundingSourceRTrustFund == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSourceRTrustFund(childComplexity), true

	case "PlanPayments.fundingSourceTrustFund":
		if e.complexity.PlanPayments.FundingSourceTrustFund == nil {
			break
		}

		return e.complexity.PlanPayments.FundingSourceTrustFund(childComplexity), true

	case "PlanPayments.fundingStructure":
		if e.complexity.PlanPayments.FundingStructure == nil {
			break
		}

		return e.complexity.PlanPayments.FundingStructure(childComplexity), true

	case "PlanPayments.id":
		if e.complexity.PlanPayments.ID == nil {
			break
		}

		return e.complexity.PlanPayments.ID(childComplexity), true

	case "PlanPayments.isContractorAwareTestDataRequirements":
		if e.complexity.PlanPayments.IsContractorAwareTestDataRequirements == nil {
			break
		}

		return e.complexity.PlanPayments.IsContractorAwareTestDataRequirements(childComplexity), true

	case "PlanPayments.modelPlanID":
		if e.complexity.PlanPayments.ModelPlanID == nil {
			break
		}

		return e.complexity.PlanPayments.ModelPlanID(childComplexity), true

	case "PlanPayments.modifiedBy":
		if e.complexity.PlanPayments.ModifiedBy == nil {
			break
		}

		return e.complexity.PlanPayments.ModifiedBy(childComplexity), true

	case "PlanPayments.modifiedDts":
		if e.complexity.PlanPayments.ModifiedDts == nil {
			break
		}

		return e.complexity.PlanPayments.ModifiedDts(childComplexity), true

	case "PlanPayments.needsClaimsDataCollection":
		if e.complexity.PlanPayments.NeedsClaimsDataCollection == nil {
			break
		}

		return e.complexity.PlanPayments.NeedsClaimsDataCollection(childComplexity), true

	case "PlanPayments.needsClaimsDataCollectionNote":
		if e.complexity.PlanPayments.NeedsClaimsDataCollectionNote == nil {
			break
		}

		return e.complexity.PlanPayments.NeedsClaimsDataCollectionNote(childComplexity), true

	case "PlanPayments.nonClaimsPaymentOther":
		if e.complexity.PlanPayments.NonClaimsPaymentOther == nil {
			break
		}

		return e.complexity.PlanPayments.NonClaimsPaymentOther(childComplexity), true

	case "PlanPayments.nonClaimsPayments":
		if e.complexity.PlanPayments.NonClaimsPayments == nil {
			break
		}

		return e.complexity.PlanPayments.NonClaimsPayments(childComplexity), true

	case "PlanPayments.numberPaymentsPerPayCycle":
		if e.complexity.PlanPayments.NumberPaymentsPerPayCycle == nil {
			break
		}

		return e.complexity.PlanPayments.NumberPaymentsPerPayCycle(childComplexity), true

	case "PlanPayments.numberPaymentsPerPayCycleNote":
		if e.complexity.PlanPayments.NumberPaymentsPerPayCycleNote == nil {
			break
		}

		return e.complexity.PlanPayments.NumberPaymentsPerPayCycleNote(childComplexity), true

	case "PlanPayments.payClaims":
		if e.complexity.PlanPayments.PayClaims == nil {
			break
		}

		return e.complexity.PlanPayments.PayClaims(childComplexity), true

	case "PlanPayments.payClaimsNote":
		if e.complexity.PlanPayments.PayClaimsNote == nil {
			break
		}

		return e.complexity.PlanPayments.PayClaimsNote(childComplexity), true

	case "PlanPayments.payClaimsOther":
		if e.complexity.PlanPayments.PayClaimsOther == nil {
			break
		}

		return e.complexity.PlanPayments.PayClaimsOther(childComplexity), true

	case "PlanPayments.payModelDifferentiation":
		if e.complexity.PlanPayments.PayModelDifferentiation == nil {
			break
		}

		return e.complexity.PlanPayments.PayModelDifferentiation(childComplexity), true

	case "PlanPayments.payRecipients":
		if e.complexity.PlanPayments.PayRecipients == nil {
			break
		}

		return e.complexity.PlanPayments.PayRecipients(childComplexity), true

	case "PlanPayments.payRecipientsNote":
		if e.complexity.PlanPayments.PayRecipientsNote == nil {
			break
		}

		return e.complexity.PlanPayments.PayRecipientsNote(childComplexity), true

	case "PlanPayments.payRecipientsOtherSpecification":
		if e.complexity.PlanPayments.PayRecipientsOtherSpecification == nil {
			break
		}

		return e.complexity.PlanPayments.PayRecipientsOtherSpecification(childComplexity), true

	case "PlanPayments.payType":
		if e.complexity.PlanPayments.PayType == nil {
			break
		}

		return e.complexity.PlanPayments.PayType(childComplexity), true

	case "PlanPayments.payTypeNote":
		if e.complexity.PlanPayments.PayTypeNote == nil {
			break
		}

		return e.complexity.PlanPayments.PayTypeNote(childComplexity), true

	case "PlanPayments.paymentCalculationOwner":
		if e.complexity.PlanPayments.PaymentCalculationOwner == nil {
			break
		}

		return e.complexity.PlanPayments.PaymentCalculationOwner(childComplexity), true

	case "PlanPayments.paymentStartDate":
		if e.complexity.PlanPayments.PaymentStartDate == nil {
			break
		}

		return e.complexity.PlanPayments.PaymentStartDate(childComplexity), true

	case "PlanPayments.paymentStartDateNote":
		if e.complexity.PlanPayments.PaymentStartDateNote == nil {
			break
		}

		return e.complexity.PlanPayments.PaymentStartDateNote(childComplexity), true

	case "PlanPayments.planningToUseInnovationPaymentContractor":
		if e.complexity.PlanPayments.PlanningToUseInnovationPaymentContractor == nil {
			break
		}

		return e.complexity.PlanPayments.PlanningToUseInnovationPaymentContractor(childComplexity), true

	case "PlanPayments.planningToUseInnovationPaymentContractorNote":
		if e.complexity.PlanPayments.PlanningToUseInnovationPaymentContractorNote == nil {
			break
		}

		return e.complexity.PlanPayments.PlanningToUseInnovationPaymentContractorNote(childComplexity), true

	case "PlanPayments.providingThirdPartyFile":
		if e.complexity.PlanPayments.ProvidingThirdPartyFile == nil {
			break
		}

		return e.complexity.PlanPayments.ProvidingThirdPartyFile(childComplexity), true

	case "PlanPayments.readyForReviewBy":
		if e.complexity.PlanPayments.ReadyForReviewBy == nil {
			break
		}

		return e.complexity.PlanPayments.ReadyForReviewBy(childComplexity), true

	case "PlanPayments.readyForReviewDts":
		if e.complexity.PlanPayments.ReadyForReviewDts == nil {
			break
		}

		return e.complexity.PlanPayments.ReadyForReviewDts(childComplexity), true

	case "PlanPayments.sharedSystemsInvolvedAdditionalClaimPayment":
		if e.complexity.PlanPayments.SharedSystemsInvolvedAdditionalClaimPayment == nil {
			break
		}

		return e.complexity.PlanPayments.SharedSystemsInvolvedAdditionalClaimPayment(childComplexity), true

	case "PlanPayments.sharedSystemsInvolvedAdditionalClaimPaymentNote":
		if e.complexity.PlanPayments.SharedSystemsInvolvedAdditionalClaimPaymentNote == nil {
			break
		}

		return e.complexity.PlanPayments.SharedSystemsInvolvedAdditionalClaimPaymentNote(childComplexity), true

	case "PlanPayments.shouldAnyProviderExcludedFFSSystemsNote":
		if e.complexity.PlanPayments.ShouldAnyProviderExcludedFFSSystemsNote == nil {
			break
		}

		return e.complexity.PlanPayments.ShouldAnyProviderExcludedFFSSystemsNote(childComplexity), true

	case "PlanPayments.shouldAnyProvidersExcludedFFSSystems":
		if e.complexity.PlanPayments.ShouldAnyProvidersExcludedFFSSystems == nil {
			break
		}

		return e.complexity.PlanPayments.ShouldAnyProvidersExcludedFFSSystems(childComplexity), true

	case "PlanPayments.status":
		if e.complexity.PlanPayments.Status == nil {
			break
		}

		return e.complexity.PlanPayments.Status(childComplexity), true

	case "PlanPayments.waiveBeneficiaryCostSharingForAnyServices":
		if e.complexity.PlanPayments.WaiveBeneficiaryCostSharingForAnyServices == nil {
			break
		}

		return e.complexity.PlanPayments.WaiveBeneficiaryCostSharingForAnyServices(childComplexity), true

	case "PlanPayments.waiveBeneficiaryCostSharingNote":
		if e.complexity.PlanPayments.WaiveBeneficiaryCostSharingNote == nil {
			break
		}

		return e.complexity.PlanPayments.WaiveBeneficiaryCostSharingNote(childComplexity), true

	case "PlanPayments.waiveBeneficiaryCostSharingServiceSpecification":
		if e.complexity.PlanPayments.WaiveBeneficiaryCostSharingServiceSpecification == nil {
			break
		}

		return e.complexity.PlanPayments.WaiveBeneficiaryCostSharingServiceSpecification(childComplexity), true

	case "PlanPayments.waiverOnlyAppliesPartOfPayment":
		if e.complexity.PlanPayments.WaiverOnlyAppliesPartOfPayment == nil {
			break
		}

		return e.complexity.PlanPayments.WaiverOnlyAppliesPartOfPayment(childComplexity), true

	case "PlanPayments.willRecoverPayments":
		if e.complexity.PlanPayments.WillRecoverPayments == nil {
			break
		}

		return e.complexity.PlanPayments.WillRecoverPayments(childComplexity), true

	case "PlanPayments.willRecoverPaymentsNote":
		if e.complexity.PlanPayments.WillRecoverPaymentsNote == nil {
			break
		}

		return e.complexity.PlanPayments.WillRecoverPaymentsNote(childComplexity), true

	case "Query.auditChanges":
		if e.complexity.Query.AuditChanges == nil {
			break
		}

		args, err := ec.field_Query_auditChanges_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuditChanges(childComplexity, args["tableName"].(string), args["primaryKey"].(uuid.UUID)), true

	case "Query.cedarPersonsByCommonName":
		if e.complexity.Query.CedarPersonsByCommonName == nil {
			break
		}

		args, err := ec.field_Query_cedarPersonsByCommonName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CedarPersonsByCommonName(childComplexity, args["commonName"].(string)), true

	case "Query.crTdl":
		if e.complexity.Query.CrTdl == nil {
			break
		}

		args, err := ec.field_Query_crTdl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CrTdl(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.currentUser":
		if e.complexity.Query.CurrentUser == nil {
			break
		}

		return e.complexity.Query.CurrentUser(childComplexity), true

	case "Query.existingModelCollection":
		if e.complexity.Query.ExistingModelCollection == nil {
			break
		}

		return e.complexity.Query.ExistingModelCollection(childComplexity), true

	case "Query.modelPlan":
		if e.complexity.Query.ModelPlan == nil {
			break
		}

		args, err := ec.field_Query_modelPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModelPlan(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.modelPlanCollection":
		if e.complexity.Query.ModelPlanCollection == nil {
			break
		}

		args, err := ec.field_Query_modelPlanCollection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ModelPlanCollection(childComplexity, args["includeAll"].(bool)), true

	case "Query.ndaInfo":
		if e.complexity.Query.NdaInfo == nil {
			break
		}

		return e.complexity.Query.NdaInfo(childComplexity), true

	case "Query.planCollaboratorByID":
		if e.complexity.Query.PlanCollaboratorByID == nil {
			break
		}

		args, err := ec.field_Query_planCollaboratorByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PlanCollaboratorByID(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.planDocument":
		if e.complexity.Query.PlanDocument == nil {
			break
		}

		args, err := ec.field_Query_planDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PlanDocument(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.planPayments":
		if e.complexity.Query.PlanPayments == nil {
			break
		}

		args, err := ec.field_Query_planPayments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PlanPayments(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.taskListSectionLocks":
		if e.complexity.Query.TaskListSectionLocks == nil {
			break
		}

		args, err := ec.field_Query_taskListSectionLocks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TaskListSectionLocks(childComplexity, args["modelPlanID"].(uuid.UUID)), true

	case "Subscription.onLockTaskListSectionContext":
		if e.complexity.Subscription.OnLockTaskListSectionContext == nil {
			break
		}

		args, err := ec.field_Subscription_onLockTaskListSectionContext_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.OnLockTaskListSectionContext(childComplexity, args["modelPlanID"].(uuid.UUID)), true

	case "Subscription.onTaskListSectionLocksChanged":
		if e.complexity.Subscription.OnTaskListSectionLocksChanged == nil {
			break
		}

		args, err := ec.field_Subscription_onTaskListSectionLocksChanged_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.OnTaskListSectionLocksChanged(childComplexity, args["modelPlanID"].(uuid.UUID)), true

	case "TaskListSectionLockStatus.isAssessment":
		if e.complexity.TaskListSectionLockStatus.IsAssessment == nil {
			break
		}

		return e.complexity.TaskListSectionLockStatus.IsAssessment(childComplexity), true

	case "TaskListSectionLockStatus.lockedBy":
		if e.complexity.TaskListSectionLockStatus.LockedBy == nil {
			break
		}

		return e.complexity.TaskListSectionLockStatus.LockedBy(childComplexity), true

	case "TaskListSectionLockStatus.modelPlanID":
		if e.complexity.TaskListSectionLockStatus.ModelPlanID == nil {
			break
		}

		return e.complexity.TaskListSectionLockStatus.ModelPlanID(childComplexity), true

	case "TaskListSectionLockStatus.section":
		if e.complexity.TaskListSectionLockStatus.Section == nil {
			break
		}

		return e.complexity.TaskListSectionLockStatus.Section(childComplexity), true

	case "TaskListSectionLockStatusChanged.actionType":
		if e.complexity.TaskListSectionLockStatusChanged.ActionType == nil {
			break
		}

		return e.complexity.TaskListSectionLockStatusChanged.ActionType(childComplexity), true

	case "TaskListSectionLockStatusChanged.changeType":
		if e.complexity.TaskListSectionLockStatusChanged.ChangeType == nil {
			break
		}

		return e.complexity.TaskListSectionLockStatusChanged.ChangeType(childComplexity), true

	case "TaskListSectionLockStatusChanged.lockStatus":
		if e.complexity.TaskListSectionLockStatusChanged.LockStatus == nil {
			break
		}

		return e.complexity.TaskListSectionLockStatusChanged.LockStatus(childComplexity), true

	case "UserInfo.commonName":
		if e.complexity.UserInfo.CommonName == nil {
			break
		}

		return e.complexity.UserInfo.CommonName(childComplexity), true

	case "UserInfo.email":
		if e.complexity.UserInfo.Email == nil {
			break
		}

		return e.complexity.UserInfo.Email(childComplexity), true

	case "UserInfo.euaUserId":
		if e.complexity.UserInfo.EuaUserID == nil {
			break
		}

		return e.complexity.UserInfo.EuaUserID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputDiscussionReplyCreateInput,
		ec.unmarshalInputPlanCollaboratorCreateInput,
		ec.unmarshalInputPlanCrTdlCreateInput,
		ec.unmarshalInputPlanDiscussionCreateInput,
		ec.unmarshalInputPlanDocumentInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphql", Input: `

"""
The current user's Launch Darkly key
"""
type LaunchDarklySettings {
  userKey: String!
  signedHash: String!
}

"""
The current user of the application
"""
type CurrentUser {
  launchDarkly: LaunchDarklySettings!
}
"""
UUIDs are represented using 36 ASCII characters, for example B0511859-ADE6-4A67-8969-16EC280C0E1A
"""
scalar UUID
"""
Time values are represented as strings using RFC3339 format, for example 2019-10-12T07:20:50G.52Z
"""
scalar Time


"""
Maps an arbitrary GraphQL value to a map[string]interface{} Go type.
"""
scalar Map

enum SortDirection {
  ASC
  DESC
}
"""
https://gqlgen.com/reference/file-upload/
Represents a multipart file upload
"""
scalar Upload

"""
ModelPlan represent the data point for plans about a model. It is the central data type in the application
"""
type ModelPlan {
  id: UUID!
  modelName: String!
  archived: Boolean!
  createdBy: String!
  createdDts: Time!
  modifiedBy: String
  modifiedDts: Time
  basics: PlanBasics!
  generalCharacteristics: PlanGeneralCharacteristics!
  participantsAndProviders: PlanParticipantsAndProviders!
  beneficiaries: PlanBeneficiaries!
  opsEvalAndLearning: PlanOpsEvalAndLearning!
  collaborators: [PlanCollaborator!]!
  documents: [PlanDocument!]!
  discussions: [PlanDiscussion!]!
  payments: PlanPayments!
  itTools: PlanITTools!
  status: ModelStatus!
  isFavorite: Boolean!
  isCollaborator: Boolean!
  crTdls: [PlanCrTdl!]!
  nameHistory(sort: SortDirection! = DESC): [String!]!
}

"""
ModelPlanChanges represents the possible changes you can make to a model plan when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input ModelPlanChanges @goModel(model: "map[string]interface{}") {
  modelName: String
  someNumbers: [Int!]
  archived: Boolean
  status: ModelStatus
}

"""
PlanCollaborator represents a collaborator on a plan
"""
type PlanCollaborator {
  id: UUID!
  modelPlanID: UUID!
  euaUserID: String!
  fullName: String!
  teamRole: TeamRole!
  email: String!
  createdBy: String!
  createdDts: Time!
  modifiedBy: String
  modifiedDts: Time
}
"""
ExistingModel represents a model that already exists outside of the scope of MINT
"""
type ExistingModel {
  id: String
  modelName: String
  stage: String!
  numberOfParticipants: String
  category: String
  authority: String
  description: String
  numberOfBeneficiariesImpacted: Int
  numberOfPhysiciansImpacted: Int
  dateBegan: Time
  dateEnded: Time
  states: String
  keywords: String
  url: String
  displayModelSummary: Boolean
  createdBy: String!
  createdDts: Time!
  modifiedBy: String
  modifiedDts: Time
}

type TaskListSectionLockStatusChanged {
  changeType: ChangeType!
  lockStatus: TaskListSectionLockStatus!
  actionType: ActionType!
}

type TaskListSectionLockStatus {
  modelPlanID: UUID!
  section: TaskListSection!
  lockedBy: String!
  isAssessment: Boolean!
}

"""
PlanCollaboratorCreateInput represents the data required to create a collaborator on a plan
"""
input PlanCollaboratorCreateInput {
  modelPlanID: UUID!
  euaUserID: String!
  fullName: String!
  teamRole: TeamRole!
  email: String!
}

"""
PlanDocument represents a document on a plan
"""
type PlanDocument {
  id: UUID!
  modelPlanID: UUID!
  fileType: String!
  bucket: String!
  fileKey: String!
  virusScanned: Boolean!
  virusClean: Boolean!
  fileName: String!
  fileSize: Int!
  documentType: DocumentType!
  otherType: String
  optionalNotes: String
  downloadUrl: String
  deletedAt: Time
  createdBy: String!
  createdDts: Time!
  modifiedBy: String
  modifiedDts: Time
}


"""
PlanDocumentInput
"""
input PlanDocumentInput {
  modelPlanID: UUID!
  fileData: Upload!
  documentType: DocumentType!
  otherTypeDescription: String
  optionalNotes: String
}

"""
Represents plan basics
"""
type PlanBasics {
  id: UUID!
  modelPlanID: UUID!

  modelCategory: ModelCategory
  cmsCenters: [CMSCenter!]!
  cmsOther: String
  cmmiGroups: [CMMIGroup!]!
  modelType: ModelType
  problem: String
  goal: String
  testInterventions: String
  note: String

  # Milestones
  completeICIP: Time
  clearanceStarts: Time
  clearanceEnds: Time
  announced: Time
  applicationsStart: Time
  applicationsEnd: Time
  performancePeriodStarts: Time
  performancePeriodEnds: Time
  wrapUpEnds: Time
  highLevelNote: String
  phasedIn: Boolean
  phasedInNote: String

  createdBy: String!
  createdDts: Time!
  modifiedBy: String
  modifiedDts: Time
  readyForReviewBy: String
  readyForReviewDts: Time
  status: TaskStatus!
}

"""
PlanBasicsChanges represents the possible changes you can make to a Plan Basics object when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input PlanBasicsChanges @goModel(model: "map[string]interface{}") {
  modelCategory: ModelCategory
  cmsCenters: [CMSCenter!]
  cmsOther: String
  cmmiGroups: [CMMIGroup!]
  modelType: ModelType
  problem: String
  goal: String
  testInterventions: String
  note: String

  # Milestones
  completeICIP: Time
  clearanceStarts: Time
  clearanceEnds: Time
  announced: Time
  applicationsStart: Time
  applicationsEnd: Time
  performancePeriodStarts: Time
  performancePeriodEnds: Time
  wrapUpEnds: Time
  highLevelNote: String
  phasedIn: Boolean
  phasedInNote: String
  status: TaskStatusInput
}

"""
Represents a person response from CEDAR LDAP
"""
type UserInfo {
  commonName: String!
  email: String!
  euaUserId: String!
}

"""
PlanDiscussion represents plan discussion
"""
type PlanDiscussion  {
	id:          UUID!
	modelPlanID: UUID!
	content: String
	status: DiscussionStatus!
  replies: [DiscussionReply!]!
  isAssessment: Boolean!

  createdBy: String!
  createdDts: Time!
  modifiedBy: String
  modifiedDts: Time
}

"""
PlanDiscussionCreateInput represents the necessary fields to create a plan discussion
"""
input PlanDiscussionCreateInput {
  modelPlanID: UUID!
  content: String!
}

"""
PlanDiscussionChanges represents the possible changes you can make to a plan discussion when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input PlanDiscussionChanges @goModel(model: "map[string]interface{}") {
  content: String
  status: DiscussionStatus
}

"""
DiscussionReply represents a discussion reply
"""
type DiscussionReply  {
	id: UUID!
	discussionID: UUID!
	content: String
	resolution: Boolean
  isAssessment: Boolean!

	createdBy: String!
	createdDts: Time!
	modifiedBy: String
	modifiedDts: Time
}

"""
DiscussionReplyCreateInput represents the necessary fields to create a discussion reply
"""
input DiscussionReplyCreateInput {
  discussionID: UUID!
  content: String!
  resolution: Boolean! = false
}

"""
DiscussionReplyChanges represents the possible changes you can make to a discussion reply when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input DiscussionReplyChanges @goModel(model: "map[string]interface{}") {
  content: String
  resolution: Boolean
}

"""
PlanGeneralCharacteristics represents a plan general characteristics object
"""
type PlanGeneralCharacteristics {
  id: UUID!
  modelPlanID: UUID!

  # Page 1
  isNewModel: Boolean
  existingModel: String
  resemblesExistingModel: Boolean
  resemblesExistingModelWhich: [String!]!
  resemblesExistingModelHow: String
  resemblesExistingModelNote: String
  hasComponentsOrTracks: Boolean
  hasComponentsOrTracksDiffer: String
  hasComponentsOrTracksNote: String

  # Page 2
  alternativePaymentModel: Boolean
  alternativePaymentModelTypes: [AlternativePaymentModelType!]!
  alternativePaymentModelNote: String
  keyCharacteristics: [KeyCharacteristic!]!
  keyCharacteristicsOther: String
  keyCharacteristicsNote: String
  collectPlanBids: Boolean
  collectPlanBidsNote: String
  managePartCDEnrollment: Boolean
  managePartCDEnrollmentNote: String
  planContactUpdated: Boolean
  planContactUpdatedNote: String

  # Page 3
  careCoordinationInvolved: Boolean
  careCoordinationInvolvedDescription: String
  careCoordinationInvolvedNote: String
  additionalServicesInvolved: Boolean
  additionalServicesInvolvedDescription: String
  additionalServicesInvolvedNote: String
  communityPartnersInvolved: Boolean
  communityPartnersInvolvedDescription: String
  communityPartnersInvolvedNote: String

  # Page 4
  geographiesTargeted: Boolean
  geographiesTargetedTypes: [GeographyType!]!
  geographiesTargetedTypesOther: String
  geographiesTargetedAppliedTo: [GeographyApplication!]!
  geographiesTargetedAppliedToOther: String
  geographiesTargetedNote: String
  participationOptions: Boolean
  participationOptionsNote: String
  agreementTypes: [AgreementType!]!
  agreementTypesOther: String
  multiplePatricipationAgreementsNeeded: Boolean
  multiplePatricipationAgreementsNeededNote: String

  # Page 5
  rulemakingRequired: Boolean
  rulemakingRequiredDescription: String
  rulemakingRequiredNote: String
  authorityAllowances: [AuthorityAllowance!]!
  authorityAllowancesOther: String
  authorityAllowancesNote: String
  waiversRequired: Boolean
  waiversRequiredTypes: [WaiverType!]!
  waiversRequiredNote: String

  createdBy: String!
  createdDts: Time!
  modifiedBy: String
  modifiedDts: Time
  readyForReviewBy: String
  readyForReviewDts: Time
  status: TaskStatus!
}

"""
PlanGeneralCharacteristicsChanges represents the possible changes you can make to a
general characteristics object when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input PlanGeneralCharacteristicsChanges @goModel(model: "map[string]interface{}") {
  # Page 1
  isNewModel: Boolean
  existingModel: String
  resemblesExistingModel: Boolean
  resemblesExistingModelWhich: [String!]
  resemblesExistingModelHow: String
  resemblesExistingModelNote: String
  hasComponentsOrTracks: Boolean
  hasComponentsOrTracksDiffer: String
  hasComponentsOrTracksNote: String

  # Page 2
  alternativePaymentModel: Boolean
  alternativePaymentModelTypes: [AlternativePaymentModelType!]
  alternativePaymentModelNote: String
  keyCharacteristics: [KeyCharacteristic!]
  keyCharacteristicsOther: String
  keyCharacteristicsNote: String
  collectPlanBids: Boolean
  collectPlanBidsNote: String
  managePartCDEnrollment: Boolean
  managePartCDEnrollmentNote: String
  planContactUpdated: Boolean
  planContactUpdatedNote: String

  # Page 3
  careCoordinationInvolved: Boolean
  careCoordinationInvolvedDescription: String
  careCoordinationInvolvedNote: String
  additionalServicesInvolved: Boolean
  additionalServicesInvolvedDescription: String
  additionalServicesInvolvedNote: String
  communityPartnersInvolved: Boolean
  communityPartnersInvolvedDescription: String
  communityPartnersInvolvedNote: String

  # Page 4
  geographiesTargeted: Boolean
  geographiesTargetedTypes: [GeographyType!]
  geographiesTargetedTypesOther: String
  geographiesTargetedAppliedTo: [GeographyApplication!]
  geographiesTargetedAppliedToOther: String
  geographiesTargetedNote: String
  participationOptions: Boolean
  participationOptionsNote: String
  agreementTypes: [AgreementType!]
  agreementTypesOther: String
  multiplePatricipationAgreementsNeeded: Boolean
  multiplePatricipationAgreementsNeededNote: String

  # Page 5
  rulemakingRequired: Boolean
  rulemakingRequiredDescription: String
  rulemakingRequiredNote: String
  authorityAllowances: [AuthorityAllowance!]
  authorityAllowancesOther: String
  authorityAllowancesNote: String
  waiversRequired: Boolean
  waiversRequiredTypes: [WaiverType!]
  waiversRequiredNote: String

  status: TaskStatusInput
}

"""
Plan Beneficiaries represents the the beneficiaries section of the task list
"""

type PlanBeneficiaries {
  id: UUID!
  modelPlanID: UUID!
  #Page 1
  beneficiaries: [BeneficiariesType!]!
  beneficiariesOther: String
  beneficiariesNote: String
  treatDualElligibleDifferent: TriStateAnswer
  treatDualElligibleDifferentHow: String
  treatDualElligibleDifferentNote: String
  excludeCertainCharacteristics: TriStateAnswer
  excludeCertainCharacteristicsCriteria: String
  excludeCertainCharacteristicsNote: String
  #Page 2
  numberPeopleImpacted: Int
  estimateConfidence: ConfidenceType
  confidenceNote: String
  beneficiarySelectionMethod: [SelectionMethodType!]!
  beneficiarySelectionOther: String
  beneficiarySelectionNote: String
  #Page 3
  beneficiarySelectionFrequency: FrequencyType
  beneficiarySelectionFrequencyOther: String
  beneficiarySelectionFrequencyNote: String
  beneficiaryOverlap: OverlapType
  beneficiaryOverlapNote: String
  precedenceRules: String

  createdBy: String!
  createdDts: Time!
  modifiedBy: String
  modifiedDts: Time
  readyForReviewBy: String
  readyForReviewDts: Time
  status: TaskStatus!
}

input PlanBeneficiariesChanges @goModel(model: "map[string]interface{}") {
  #Page 1
  beneficiaries: [BeneficiariesType!]
  beneficiariesOther: String
  beneficiariesNote: String
  treatDualElligibleDifferent: TriStateAnswer
  treatDualElligibleDifferentHow: String
  treatDualElligibleDifferentNote: String
  excludeCertainCharacteristics: TriStateAnswer
  excludeCertainCharacteristicsCriteria: String
  excludeCertainCharacteristicsNote: String
  #Page 2
  numberPeopleImpacted: Int
  estimateConfidence: ConfidenceType
  confidenceNote: String
  beneficiarySelectionMethod: [SelectionMethodType!]
  beneficiarySelectionOther: String
  beneficiarySelectionNote: String
  #Page 3
  beneficiarySelectionFrequency: FrequencyType
  beneficiarySelectionFrequencyOther: String
  beneficiarySelectionFrequencyNote: String
  beneficiaryOverlap: OverlapType
  beneficiaryOverlapNote: String
  precedenceRules: String

  status: TaskStatusInput
}

"""
PlanParticipantsAndProviders is the task list section that deals with information regarding all Providers and Participants
"""
type PlanParticipantsAndProviders {
  id: UUID!
  modelPlanID: UUID!

  #Page 1
  participants:                      [ParticipantsType!]!
  medicareProviderType:              String
  statesEngagement:                  String
  participantsOther:                 String
  participantsNote:                  String
  participantsCurrentlyInModels:     Boolean
  participantsCurrentlyInModelsNote: String
  modelApplicationLevel:             String

  #Page 2
  expectedNumberOfParticipants: Int
  estimateConfidence:           ConfidenceType
  confidenceNote:               String
  recruitmentMethod:            RecruitmentType
  recruitmentOther:             String
  recruitmentNote:              String
  selectionMethod:              [ParticipantSelectionType!]!
  selectionOther:               String
  selectionNote:                String

  #Page 3
  communicationMethod:   [ParticipantCommunicationType!]!
  communicationMethodOther:   String
  communicationNote:     String
  participantAssumeRisk: Boolean
  riskType:              ParticipantRiskType
  riskOther:             String
  riskNote:              String
  willRiskChange:        Boolean
  willRiskChangeNote:    String

  #Page 4
  coordinateWork:          Boolean
  coordinateWorkNote:      String
  gainsharePayments:       Boolean
  gainsharePaymentsTrack: Boolean
  gainsharePaymentsNote:   String
  participantsIds:         [ParticipantsIDType!]!
  participantsIdsOther:    String
  participantsIDSNote:     String

  #Page 5
  providerAdditionFrequency:      FrequencyType
  providerAdditionFrequencyOther: String
  providerAdditionFrequencyNote:  String
  providerAddMethod:              [ProviderAddType!]!
  providerAddMethodOther:         String
  providerAddMethodNote:          String
  providerLeaveMethod:            [ProviderLeaveType!]!
  providerLeaveMethodOther:       String
  providerLeaveMethodNote:        String
  providerOverlap:                OverlapType
  providerOverlapHierarchy:       String
  providerOverlapNote:            String


  createdBy: String!
  createdDts: Time!
  modifiedBy: String
  modifiedDts: Time
  readyForReviewBy: String
  readyForReviewDts: Time
  status: TaskStatus!

}

"""
PlanParticipantsAndProvidersChanges represents the possible changes you can make to a
providers and participants object when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input PlanParticipantsAndProvidersChanges @goModel(model: "map[string]interface{}") {
  #Page 1
  participants:                      [ParticipantsType!]
  medicareProviderType:              String
  statesEngagement:                  String
  participantsOther:                 String
  participantsNote:                  String
  participantsCurrentlyInModels:     Boolean
  participantsCurrentlyInModelsNote: String
  modelApplicationLevel:             String

  #Page 2
  expectedNumberOfParticipants: Int
  estimateConfidence:           ConfidenceType
  confidenceNote:               String
  recruitmentMethod:            RecruitmentType
  recruitmentOther:             String
  recruitmentNote:              String
  selectionMethod:              [ParticipantSelectionType!]
  selectionOther:               String
  selectionNote:                String

  #Page 3
  communicationMethod:   [ParticipantCommunicationType!]
  communicationMethodOther:   String
  communicationNote:     String
  participantAssumeRisk: Boolean
  riskType:              ParticipantRiskType
  riskOther:             String
  riskNote:              String
  willRiskChange:        Boolean
  willRiskChangeNote:    String

  #Page 4
  coordinateWork:          Boolean
  coordinateWorkNote:      String
  gainsharePayments:       Boolean
  gainsharePaymentsTrack: Boolean
  gainsharePaymentsNote:   String
  participantsIds:         [ParticipantsIDType!]
  participantsIdsOther:    String
  participantsIDSNote:     String

  #Page 5
  providerAdditionFrequency:      FrequencyType
  providerAdditionFrequencyOther: String
  providerAdditionFrequencyNote:  String
  providerAddMethod:              [ProviderAddType!]
  providerAddMethodOther:         String
  providerAddMethodNote:          String
  providerLeaveMethod:            [ProviderLeaveType!]
  providerLeaveMethodOther:       String
  providerLeaveMethodNote:        String
  providerOverlap:                OverlapType
  providerOverlapHierarchy:       String
  providerOverlapNote:            String

  status: TaskStatusInput
}

"""
PlanPayments is the task list section that deals with information regarding Payments
"""
type PlanPayments {
  id: UUID!
  modelPlanID: UUID!

  # Page 1
  fundingSource:                      [FundingSource!]!
  fundingSourceTrustFund:             String
  fundingSourceOther:                 String
  fundingSourceNote:                  String
  fundingSourceR:                     [FundingSource!]!
  fundingSourceRTrustFund:            String
  fundingSourceROther:                String
  fundingSourceRNote:                 String
  payRecipients:                      [PayRecipient!]!
  payRecipientsOtherSpecification:    String
  payRecipientsNote:                  String
  payType:                            [PayType!]!
  payTypeNote:                        String

  # Page 2
  payClaims:                                      [ClaimsBasedPayType!]!
  payClaimsOther:                                 String
  payClaimsNote:                                  String
  shouldAnyProvidersExcludedFFSSystems:           Boolean
  shouldAnyProviderExcludedFFSSystemsNote:        String
  changesMedicarePhysicianFeeSchedule:            Boolean
  changesMedicarePhysicianFeeScheduleNote:        String
  affectsMedicareSecondaryPayerClaims:            Boolean
  affectsMedicareSecondaryPayerClaimsHow:         String
  affectsMedicareSecondaryPayerClaimsNote:        String
  payModelDifferentiation:                        String

  # Page 3
  creatingDependenciesBetweenServices:     Boolean
  creatingDependenciesBetweenServicesNote: String
  needsClaimsDataCollection:               Boolean
  needsClaimsDataCollectionNote:           String
  providingThirdPartyFile:                 Boolean
  isContractorAwareTestDataRequirements:   Boolean

  # Page 4
  beneficiaryCostSharingLevelAndHandling:          String
  waiveBeneficiaryCostSharingForAnyServices:       Boolean
  waiveBeneficiaryCostSharingServiceSpecification: String
  waiverOnlyAppliesPartOfPayment:                  Boolean
  waiveBeneficiaryCostSharingNote:                 String

  # Page 5
  nonClaimsPayments:                               [NonClaimsBasedPayType!]!
  nonClaimsPaymentOther:                           String
  paymentCalculationOwner:                         String
  numberPaymentsPerPayCycle:                       String
  numberPaymentsPerPayCycleNote:                   String
  sharedSystemsInvolvedAdditionalClaimPayment:     Boolean
  sharedSystemsInvolvedAdditionalClaimPaymentNote: String
  planningToUseInnovationPaymentContractor:        Boolean
  planningToUseInnovationPaymentContractorNote:    String
  fundingStructure:                                String

  # Page 6
  expectedCalculationComplexityLevel:                ComplexityCalculationLevelType
  expectedCalculationComplexityLevelNote:            String
  canParticipantsSelectBetweenPaymentMechanisms:     Boolean
  canParticipantsSelectBetweenPaymentMechanismsHow:  String
  canParticipantsSelectBetweenPaymentMechanismsNote: String
  anticipatedPaymentFrequency:                       [AnticipatedPaymentFrequencyType!]!
  anticipatedPaymentFrequencyOther:                  String
  anticipatedPaymentFrequencyNote:                   String

  # Page 7
  willRecoverPayments:                               Boolean
  willRecoverPaymentsNote:                           String
  anticipateReconcilingPaymentsRetrospectively:      Boolean
  anticipateReconcilingPaymentsRetrospectivelyNote:  String
  paymentStartDate:                                  Time
  paymentStartDateNote:                              String

  # Meta
  createdBy:   String!
  createdDts:  Time!
  modifiedBy:  String
  modifiedDts: Time
  readyForReviewBy: String
  readyForReviewDts: Time
  status:      TaskStatus!
}

input PlanPaymentsChanges @goModel(model: "map[string]interface{}") {
  # Page 1
  fundingSource:                      [FundingSource!]
  fundingSourceTrustFund:             String
  fundingSourceOther:                 String
  fundingSourceNote:                  String
  fundingSourceR:                     [FundingSource!]
  fundingSourceRTrustFund:            String
  fundingSourceROther:                String
  fundingSourceRNote:                 String
  payRecipients:                      [PayRecipient!]
  payRecipientsOtherSpecification:    String
  payRecipientsNote:                  String
  payType:                            [PayType!]
  payTypeNote:                        String

  # Page 2
  payClaims:                                      [ClaimsBasedPayType!]
  payClaimsOther:                                 String
  payClaimsNote:                                  String
  shouldAnyProvidersExcludedFFSSystems:           Boolean
  shouldAnyProviderExcludedFFSSystemsNote:        String
  changesMedicarePhysicianFeeSchedule:            Boolean
  changesMedicarePhysicianFeeScheduleNote:        String
  affectsMedicareSecondaryPayerClaims:            Boolean
  affectsMedicareSecondaryPayerClaimsHow:         String
  affectsMedicareSecondaryPayerClaimsNote:        String
  payModelDifferentiation:                        String

  # Page 3
  creatingDependenciesBetweenServices:     Boolean
  creatingDependenciesBetweenServicesNote: String
  needsClaimsDataCollection:               Boolean
  needsClaimsDataCollectionNote:           String
  providingThirdPartyFile:                 Boolean
  isContractorAwareTestDataRequirements:   Boolean

  # Page 4
  beneficiaryCostSharingLevelAndHandling:          String
  waiveBeneficiaryCostSharingForAnyServices:       Boolean
  waiveBeneficiaryCostSharingServiceSpecification: String
  waiverOnlyAppliesPartOfPayment:                  Boolean
  waiveBeneficiaryCostSharingNote:                 String

  # Page 5
  nonClaimsPayments:                               [NonClaimsBasedPayType!]
  nonClaimsPaymentOther:                           String
  paymentCalculationOwner:                         String
  numberPaymentsPerPayCycle:                       String
  numberPaymentsPerPayCycleNote:                  String
  sharedSystemsInvolvedAdditionalClaimPayment:     Boolean
  sharedSystemsInvolvedAdditionalClaimPaymentNote: String
  planningToUseInnovationPaymentContractor:        Boolean
  planningToUseInnovationPaymentContractorNote:    String
  fundingStructure:                                String

  # Page 6
  expectedCalculationComplexityLevel:                       ComplexityCalculationLevelType
  expectedCalculationComplexityLevelNote:                   String
  canParticipantsSelectBetweenPaymentMechanisms:            Boolean
  canParticipantsSelectBetweenPaymentMechanismsHow:         String
  canParticipantsSelectBetweenPaymentMechanismsNote:        String
  anticipatedPaymentFrequency:                              [AnticipatedPaymentFrequencyType!]
  anticipatedPaymentFrequencyOther:                         String
  anticipatedPaymentFrequencyNote:                         String

  # Page 7
  willRecoverPayments:                               Boolean
  willRecoverPaymentsNote:                          String
  anticipateReconcilingPaymentsRetrospectively:      Boolean
  anticipateReconcilingPaymentsRetrospectivelyNote: String
  paymentStartDate:                                  Time
  paymentStartDateNote:                             String

  status: TaskStatusInput
}

""""
PlanITTools is the task list section that deals with information regarding IT Tools
"""
type PlanITTools {
  id: UUID!
  modelPlanID: UUID!

  #Page 1
  gcPartCD: [GcPartCDType!]!
  gcPartCDOther: String
  gcPartCDNote: String
  gcCollectBids: [GcCollectBidsType!]!
  gcCollectBidsOther: String
  gcCollectBidsNote: String
  gcUpdateContract: [GcUpdateContractType!]!
  gcUpdateContractOther: String
  gcUpdateContractNote: String
  #Page 2
  ppToAdvertise: [PpToAdvertiseType!]!
  ppToAdvertiseOther: String
  ppToAdvertiseNote: String
  ppCollectScoreReview: [PpCollectScoreReviewType!]!
  ppCollectScoreReviewOther: String
  ppCollectScoreReviewNote: String
  ppAppSupportContractor: [PpAppSupportContractorType!]!
  ppAppSupportContractorOther: String
  ppAppSupportContractorNote: String
  #Page 3
  ppCommunicateWithParticipant: [PpCommunicateWithParticipantType!]!
  ppCommunicateWithParticipantOther: String
  ppCommunicateWithParticipantNote: String
  ppManageProviderOverlap: [PpManageProviderOverlapType!]!
  ppManageProviderOverlapOther: String
  ppManageProviderOverlapNote: String
  bManageBeneficiaryOverlap: [BManageBeneficiaryOverlapType!]!
  bManageBeneficiaryOverlapOther: String
  bManageBeneficiaryOverlapNote: String
  #Page 4
  oelHelpdeskSupport: [OelHelpdeskSupportType!]!
  oelHelpdeskSupportOther: String
  oelHelpdeskSupportNote: String
  oelManageAco: [OelManageAcoType!]!
  oelManageAcoOther: String
  oelManageAcoNote: String
  #Page 5
  oelPerformanceBenchmark: [OelPerformanceBenchmarkType!]!
  oelPerformanceBenchmarkOther: String
  oelPerformanceBenchmarkNote: String
  oelProcessAppeals: [OelProcessAppealsType!]!
  oelProcessAppealsOther: String
  oelProcessAppealsNote: String
  oelEvaluationContractor: [OelEvaluationContractorType!]!
  oelEvaluationContractorOther: String
  oelEvaluationContractorNote: String
  #Page 6
  oelCollectData: [OelCollectDataType!]!
  oelCollectDataOther: String
  oelCollectDataNote: String
  oelObtainData: [OelObtainDataType!]!
  oelObtainDataOther: String
  oelObtainDataNote: String
  oelClaimsBasedMeasures: [OelClaimsBasedMeasuresType!]!
  oelClaimsBasedMeasuresOther: String
  oelClaimsBasedMeasuresNote: String
  #Page 7
  oelQualityScores: [OelQualityScoresType!]!
  oelQualityScoresOther: String
  oelQualityScoresNote: String
  oelSendReports: [OelSendReportsType!]!
  oelSendReportsOther: String
  oelSendReportsNote: String
  oelLearningContractor: [OelLearningContractorType!]!
  oelLearningContractorOther: String
  oelLearningContractorNote: String
  #Page 8
  oelParticipantCollaboration: [OelParticipantCollaborationType!]!
  oelParticipantCollaborationOther: String
  oelParticipantCollaborationNote: String
  oelEducateBeneficiaries: [OelEducateBeneficiariesType!]!
  oelEducateBeneficiariesOther: String
  oelEducateBeneficiariesNote: String
  pMakeClaimsPayments: [PMakeClaimsPaymentsType!]!
  pMakeClaimsPaymentsOther: String
  pMakeClaimsPaymentsNote: String
  #Page 9
  pInformFfs: [PInformFfsType!]!
  pInformFfsOther: String
  pInformFfsNote: String
  pNonClaimsBasedPayments: [PNonClaimsBasedPaymentsType!]!
  pNonClaimsBasedPaymentsOther: String
  pNonClaimsBasedPaymentsNote: String
  pSharedSavingsPlan: [PSharedSavingsPlanType!]!
  pSharedSavingsPlanOther: String
  pSharedSavingsPlanNote: String
  #Page 10
  pRecoverPayments: [PRecoverPaymentsType!]!
  pRecoverPaymentsOther: String
  pRecoverPaymentsNote: String

  createdBy: String!
  createdDts: Time!
  modifiedBy: String
  modifiedDts: Time
  readyForReviewBy: String
  readyForReviewDts: Time
  status: TaskStatus!
}


input PlanITToolsChanges @goModel(model: "map[string]interface{}") {

  #Page 1
  gcPartCD: [GcPartCDType!]
  gcPartCDOther: String
  gcPartCDNote: String
  gcCollectBids: [GcCollectBidsType!]
  gcCollectBidsOther: String
  gcCollectBidsNote: String
  gcUpdateContract: [GcUpdateContractType!]
  gcUpdateContractOther: String
  gcUpdateContractNote: String
  #Page 2
  ppToAdvertise: [PpToAdvertiseType!]
  ppToAdvertiseOther: String
  ppToAdvertiseNote: String
  ppCollectScoreReview: [PpCollectScoreReviewType!]
  ppCollectScoreReviewOther: String
  ppCollectScoreReviewNote: String
  ppAppSupportContractor: [PpAppSupportContractorType!]
  ppAppSupportContractorOther: String
  ppAppSupportContractorNote: String
  #Page 3
  ppCommunicateWithParticipant: [PpCommunicateWithParticipantType!]
  ppCommunicateWithParticipantOther: String
  ppCommunicateWithParticipantNote: String
  ppManageProviderOverlap: [PpManageProviderOverlapType!]
  ppManageProviderOverlapOther: String
  ppManageProviderOverlapNote: String
  bManageBeneficiaryOverlap: [BManageBeneficiaryOverlapType!]
  bManageBeneficiaryOverlapOther: String
  bManageBeneficiaryOverlapNote: String
  #Page 4
  oelHelpdeskSupport: [OelHelpdeskSupportType!]
  oelHelpdeskSupportOther: String
  oelHelpdeskSupportNote: String
  oelManageAco: [OelManageAcoType!]
  oelManageAcoOther: String
  oelManageAcoNote: String
  #Page 5
  oelPerformanceBenchmark: [OelPerformanceBenchmarkType!]
  oelPerformanceBenchmarkOther: String
  oelPerformanceBenchmarkNote: String
  oelProcessAppeals: [OelProcessAppealsType!]
  oelProcessAppealsOther: String
  oelProcessAppealsNote: String
  oelEvaluationContractor: [OelEvaluationContractorType!]
  oelEvaluationContractorOther: String
  oelEvaluationContractorNote: String
  #Page 6
  oelCollectData: [OelCollectDataType!]
  oelCollectDataOther: String
  oelCollectDataNote: String
  oelObtainData: [OelObtainDataType!]
  oelObtainDataOther: String
  oelObtainDataNote: String
  oelClaimsBasedMeasures: [OelClaimsBasedMeasuresType!]
  oelClaimsBasedMeasuresOther: String
  oelClaimsBasedMeasuresNote: String
  #Page 7
  oelQualityScores: [OelQualityScoresType!]
  oelQualityScoresOther: String
  oelQualityScoresNote: String
  oelSendReports: [OelSendReportsType!]
  oelSendReportsOther: String
  oelSendReportsNote: String
  oelLearningContractor: [OelLearningContractorType!]
  oelLearningContractorOther: String
  oelLearningContractorNote: String
  #Page 8
  oelParticipantCollaboration: [OelParticipantCollaborationType!]
  oelParticipantCollaborationOther: String
  oelParticipantCollaborationNote: String
  oelEducateBeneficiaries: [OelEducateBeneficiariesType!]
  oelEducateBeneficiariesOther: String
  oelEducateBeneficiariesNote: String
  pMakeClaimsPayments: [PMakeClaimsPaymentsType!]
  pMakeClaimsPaymentsOther: String
  pMakeClaimsPaymentsNote: String
  #Page 9
  pInformFfs: [PInformFfsType!]
  pInformFfsOther: String
  pInformFfsNote: String
  pNonClaimsBasedPayments: [PNonClaimsBasedPaymentsType!]
  pNonClaimsBasedPaymentsOther: String
  pNonClaimsBasedPaymentsNote: String
  pSharedSavingsPlan: [PSharedSavingsPlanType!]
  pSharedSavingsPlanOther: String
  pSharedSavingsPlanNote: String
  #Page 10
  pRecoverPayments: [PRecoverPaymentsType!]
  pRecoverPaymentsOther: String
  pRecoverPaymentsNote: String

  status: TaskStatusInput

}
"""
PlanOpsEvalAndLearning represents the task list section that deals with information regarding the Ops Eval and Learning
"""
type PlanOpsEvalAndLearning {
    id: UUID!
    modelPlanID: UUID!

    #Page 1
    agencyOrStateHelp: [AgencyOrStateHelpType!]!
    agencyOrStateHelpOther: String
    agencyOrStateHelpNote: String
    stakeholders: [StakeholdersType!]!
    stakeholdersOther: String
    stakeholdersNote: String
    helpdeskUse: Boolean
    helpdeskUseNote: String
    contractorSupport: [ContractorSupportType!]!
    contractorSupportOther: String
    contractorSupportHow: String
    contractorSupportNote: String
    iddocSupport: Boolean
    iddocSupportNote: String
    #Page 2
    technicalContactsIdentified: Boolean
    technicalContactsIdentifiedDetail: String
    technicalContactsIdentifiedNote: String
    captureParticipantInfo: Boolean
    captureParticipantInfoNote: String
    icdOwner: String
    draftIcdDueDate: Time
    icdNote: String
    #Page 3
    uatNeeds: String
    stcNeeds: String
    testingTimelines: String
    testingNote: String
    dataMonitoringFileTypes: [MonitoringFileType!]!
    dataMonitoringFileOther: String
    dataResponseType: String
    dataResponseFileFrequency: String
    #Page 4
    dataFullTimeOrIncremental: DataFullTimeOrIncrementalType
    eftSetUp: Boolean
    unsolicitedAdjustmentsIncluded: Boolean
    dataFlowDiagramsNeeded: Boolean
    produceBenefitEnhancementFiles: Boolean
    fileNamingConventions: String
    dataMonitoringNote: String
    #Page 5
    benchmarkForPerformance: BenchmarkForPerformanceType
    benchmarkForPerformanceNote: String
    computePerformanceScores: Boolean
    computePerformanceScoresNote: String
    riskAdjustPerformance: Boolean
    riskAdjustFeedback: Boolean
    riskAdjustPayments: Boolean
    riskAdjustOther: Boolean
    riskAdjustNote: String
    appealPerformance: Boolean
    appealFeedback: Boolean
    appealPayments: Boolean
    appealOther: Boolean
    appealNote: String
    #Page 6
    evaluationApproaches: [EvaluationApproachType!]!
    evaluationApproachOther: String
    evalutaionApproachNote: String
    ccmInvolvment: [CcmInvolvmentType!]!
    ccmInvolvmentOther: String
    ccmInvolvmentNote: String
    dataNeededForMonitoring: [DataForMonitoringType!]!
    dataNeededForMonitoringOther: String
    dataNeededForMonitoringNote: String
    dataToSendParticicipants: [DataToSendParticipantsType!]!
    dataToSendParticicipantsOther: String
    dataToSendParticicipantsNote: String
    shareCclfData: Boolean
    shareCclfDataNote: String
    #Page 7
    sendFilesBetweenCcw: Boolean
    sendFilesBetweenCcwNote: String
    appToSendFilesToKnown: Boolean
    appToSendFilesToWhich: String
    appToSendFilesToNote: String
    useCcwForFileDistribiutionToParticipants: Boolean
    useCcwForFileDistribiutionToParticipantsNote: String
    developNewQualityMeasures: Boolean
    developNewQualityMeasuresNote: String
    qualityPerformanceImpactsPayment: Boolean
    qualityPerformanceImpactsPaymentNote: String
    #Page 8
    dataSharingStarts: DataStartsType
    dataSharingStartsOther: String
    dataSharingFrequency: [DataFrequencyType!]!
    dataSharingFrequencyOther: String
    dataSharingStartsNote: String
    dataCollectionStarts: DataStartsType
    dataCollectionStartsOther: String
    dataCollectionFrequency: [DataFrequencyType!]!
    dataCollectionFrequencyOther: String
    dataCollectionFrequencyNote: String
    qualityReportingStarts: DataStartsType
    qualityReportingStartsOther: String
    qualityReportingStartsNote: String
    #Page 9
    modelLearningSystems: [ModelLearningSystemType!]!
    modelLearningSystemsOther: String
    modelLearningSystemsNote: String
    anticipatedChallenges: String



    createdBy: String!
    createdDts: Time!
    modifiedBy: String
    modifiedDts: Time
    readyForReviewBy: String
    readyForReviewDts: Time
    status: TaskStatus!
}

"""
PlanOpsEvalAndLearningChanges represents the possible changes you can make to a
ops, eval and learning object when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input PlanOpsEvalAndLearningChanges @goModel(model: "map[string]interface{}") {

    #Page 1
    agencyOrStateHelp: [AgencyOrStateHelpType!]
    agencyOrStateHelpOther: String
    agencyOrStateHelpNote: String
    stakeholders: [StakeholdersType!]
    stakeholdersOther: String
    stakeholdersNote: String
    helpdeskUse: Boolean
    helpdeskUseNote: String
    contractorSupport: [ContractorSupportType!]
    contractorSupportOther: String
    contractorSupportHow: String
    contractorSupportNote: String
    iddocSupport: Boolean
    iddocSupportNote: String
    #Page 2
    technicalContactsIdentified: Boolean
    technicalContactsIdentifiedDetail: String
    technicalContactsIdentifiedNote: String
    captureParticipantInfo: Boolean
    captureParticipantInfoNote: String
    icdOwner: String
    draftIcdDueDate: Time
    icdNote: String
    #Page 3
    uatNeeds: String
    stcNeeds: String
    testingTimelines: String
    testingNote: String
    dataMonitoringFileTypes: [MonitoringFileType!]
    dataMonitoringFileOther: String
    dataResponseType: String
    dataResponseFileFrequency: String
    #Page 4
    dataFullTimeOrIncremental: DataFullTimeOrIncrementalType
    eftSetUp: Boolean
    unsolicitedAdjustmentsIncluded: Boolean
    dataFlowDiagramsNeeded: Boolean
    produceBenefitEnhancementFiles: Boolean
    fileNamingConventions: String
    dataMonitoringNote: String
    #Page 5
    benchmarkForPerformance: BenchmarkForPerformanceType
    benchmarkForPerformanceNote: String
    computePerformanceScores: Boolean
    computePerformanceScoresNote: String
    riskAdjustPerformance: Boolean
    riskAdjustFeedback: Boolean
    riskAdjustPayments: Boolean
    riskAdjustOther: Boolean
    riskAdjustNote: String
    appealPerformance: Boolean
    appealFeedback: Boolean
    appealPayments: Boolean
    appealOther: Boolean
    appealNote: String
    #Page 6
    evaluationApproaches: [EvaluationApproachType!]
    evaluationApproachOther: String
    evalutaionApproachNote: String
    ccmInvolvment: [CcmInvolvmentType!]
    ccmInvolvmentOther: String
    ccmInvolvmentNote: String
    dataNeededForMonitoring: [DataForMonitoringType!]
    dataNeededForMonitoringOther: String
    dataNeededForMonitoringNote: String
    dataToSendParticicipants: [DataToSendParticipantsType!]
    dataToSendParticicipantsOther: String
    dataToSendParticicipantsNote: String
    shareCclfData: Boolean
    shareCclfDataNote: String
    #Page 7
    sendFilesBetweenCcw: Boolean
    sendFilesBetweenCcwNote: String
    appToSendFilesToKnown: Boolean
    appToSendFilesToWhich: String
    appToSendFilesToNote: String
    useCcwForFileDistribiutionToParticipants: Boolean
    useCcwForFileDistribiutionToParticipantsNote: String
    developNewQualityMeasures: Boolean
    developNewQualityMeasuresNote: String
    qualityPerformanceImpactsPayment: Boolean
    qualityPerformanceImpactsPaymentNote: String
    #Page 8
    dataSharingStarts: DataStartsType
    dataSharingStartsOther: String
    dataSharingFrequency: [DataFrequencyType!]
    dataSharingFrequencyOther: String
    dataSharingStartsNote: String
    dataCollectionStarts: DataStartsType
    dataCollectionStartsOther: String
    dataCollectionFrequency: [DataFrequencyType!]
    dataCollectionFrequencyOther: String
    dataCollectionFrequencyNote: String
    qualityReportingStarts: DataStartsType
    qualityReportingStartsOther: String
    qualityReportingStartsNote: String
    #Page 9
    modelLearningSystems: [ModelLearningSystemType!]
    modelLearningSystemsOther: String
    modelLearningSystemsNote: String
    anticipatedChallenges: String

    status: TaskStatusInput
}
"""
NDAInfo represents whether a user has agreed to an NDA or not. If agreed to previously, there will be a datestamp visible
"""
type NDAInfo {
  agreed: Boolean!
  agreedDts: Time
}

type PlanFavorite {
    id: UUID!
    modelPlanID: UUID!
    userID: String!

    createdBy: String!
    createdDts: Time!
    modifiedBy: String
    modifiedDts: Time

}

type PlanCrTdl {
    id: UUID!
    modelPlanID: UUID!

    idNumber: String!
    dateInitiated: Time!
    title: String!
    note: String

    createdBy: String!
    createdDts: Time!
    modifiedBy: String
    modifiedDts: Time
}

input PlanCrTdlCreateInput {
    modelPlanID: UUID!

    idNumber: String!
    dateInitiated: Time!
    title: String!
    note: String
}

input PlanCrTdlChanges @goModel(model: "map[string]interface{}") {
    idNumber: String
    dateInitiated: Time
    title: String
    note: String
}


type AuditChange {
  id: Int!
  primaryKey: UUID!
  foreignKey: UUID
  tableName: String!
  action: String!
  fields: Map!
  modifiedBy: String
  modifiedDts: Time
}

"""
Query definition for the schema
"""
type Query {
  currentUser: CurrentUser!
  modelPlan(id: UUID!): ModelPlan!
  planDocument(id: UUID!): PlanDocument!
  modelPlanCollection(includeAll: Boolean!): [ModelPlan!]!
  existingModelCollection: [ExistingModel!]!
  cedarPersonsByCommonName(commonName: String!): [UserInfo!]!
  planCollaboratorByID(id: UUID!): PlanCollaborator!
  taskListSectionLocks(modelPlanID: UUID!): [TaskListSectionLockStatus!]!
  planPayments(id: UUID!): PlanPayments!
  ndaInfo: NDAInfo!
  crTdl(id: UUID!): PlanCrTdl!
  auditChanges(tableName: String!, primaryKey: UUID!): [AuditChange!]!
}

"""
Mutations definition for the schema
"""
type Mutation {
createModelPlan(modelName: String!): ModelPlan!
@hasRole(role: MINT_USER)

updateModelPlan(id: UUID!, changes: ModelPlanChanges!): ModelPlan!
@hasRole(role: MINT_USER)

createPlanCollaborator(input: PlanCollaboratorCreateInput!): PlanCollaborator!
@hasRole(role: MINT_USER)

updatePlanCollaborator(id: UUID!, newRole: TeamRole!): PlanCollaborator!
@hasRole(role: MINT_USER)

deletePlanCollaborator(id: UUID!): PlanCollaborator!
@hasRole(role: MINT_USER)

updatePlanBasics(id: UUID!, changes: PlanBasicsChanges!): PlanBasics!
@hasRole(role: MINT_USER)

updatePlanGeneralCharacteristics(id: UUID!, changes: PlanGeneralCharacteristicsChanges!): PlanGeneralCharacteristics!
@hasRole(role: MINT_USER)

updatePlanBeneficiaries(id: UUID!, changes: PlanBeneficiariesChanges!): PlanBeneficiaries!
@hasRole(role: MINT_USER)

updatePlanParticipantsAndProviders(id: UUID!, changes: PlanParticipantsAndProvidersChanges!): PlanParticipantsAndProviders!
@hasRole(role: MINT_USER)

updatePlanItTools(id: UUID!, changes:PlanITToolsChanges!): PlanITTools!
@hasRole(role: MINT_USER)

updatePlanOpsEvalAndLearning(id: UUID!, changes: PlanOpsEvalAndLearningChanges!): PlanOpsEvalAndLearning!
@hasRole(role: MINT_USER)

uploadNewPlanDocument(input: PlanDocumentInput!): PlanDocument!
@hasRole(role: MINT_USER)

deletePlanDocument(id: UUID!): Int!
@hasRole(role: MINT_USER)

createPlanDiscussion(input: PlanDiscussionCreateInput!): PlanDiscussion!
@hasRole(role: MINT_USER)

updatePlanDiscussion(id: UUID!, changes: PlanDiscussionChanges!): PlanDiscussion!
@hasRole(role: MINT_USER)

deletePlanDiscussion(id: UUID!): PlanDiscussion!
@hasRole(role: MINT_USER)

createDiscussionReply(input: DiscussionReplyCreateInput!): DiscussionReply!
@hasRole(role: MINT_USER)

updateDiscussionReply(id: UUID!, changes: DiscussionReplyChanges!): DiscussionReply!
@hasRole(role: MINT_USER)

deleteDiscussionReply(id: UUID!): DiscussionReply!
@hasRole(role: MINT_USER)

lockTaskListSection(modelPlanID: UUID!, section: TaskListSection!): Boolean!
@hasRole(role: MINT_USER)

unlockTaskListSection(modelPlanID: UUID!, section: TaskListSection!): Boolean!
@hasRole(role: MINT_USER)

unlockAllTaskListSections(modelPlanID: UUID!): [TaskListSectionLockStatus!]!
@hasRole(role: MINT_ASSESSMENT)

updatePlanPayments(id: UUID!, changes: PlanPaymentsChanges!): PlanPayments!
@hasRole(role: MINT_USER)

agreeToNDA(agree: Boolean! = true): NDAInfo!
@hasRole(role: MINT_USER)

addPlanFavorite(modelPlanID: UUID!): PlanFavorite!
@hasRole(role: MINT_USER)

deletePlanFavorite(modelPlanID: UUID!): PlanFavorite!
@hasRole(role: MINT_USER)

createPlanCrTdl(input: PlanCrTdlCreateInput!): PlanCrTdl!
@hasRole(role: MINT_USER)

updatePlanCrTdl(id: UUID!, changes: PlanCrTdlChanges!): PlanCrTdl!
@hasRole(role: MINT_USER)

deletePlanCrTdl(id: UUID!): PlanCrTdl!
@hasRole(role: MINT_USER)
}

type Subscription {
  onTaskListSectionLocksChanged(modelPlanID: UUID!): TaskListSectionLockStatusChanged!
  @hasRole(role: MINT_USER)

  onLockTaskListSectionContext(modelPlanID: UUID!): TaskListSectionLockStatusChanged!
  @hasRole(role: MINT_USER)
}

enum ChangeType {
  ADDED
  UPDATED
  REMOVED
}

enum TaskStatus {
  READY
  IN_PROGRESS
  READY_FOR_REVIEW
}
enum TaskStatusInput {
  IN_PROGRESS
  READY_FOR_REVIEW
}

enum TaskListSection {
  MODEL_BASICS,
  GENERAL_CHARACTERISTICS,
  PARTICIPANTS_AND_PROVIDERS,
  BENEFICIARIES,
  OPERATIONS_EVALUATION_AND_LEARNING,
  PAYMENT,
  IT_TOOLS
}

enum TeamRole {
  MODEL_LEAD
  MODEL_TEAM
  LEADERSHIP
  LEARNING
  EVALUATION
}

enum ModelType
{
  VOLUNTARY
  MANDATORY
  TBD
}

enum ModelCategory {
	ACCOUNTABLE_CARE
	DEMONSTRATION
	EPISODE_BASED_PAYMENT_INITIATIVES
	INIT_MEDICAID_CHIP_POP
	INIT__MEDICARE_MEDICAID_ENROLLEES
	INIT_ACCEL_DEV_AND_TEST
	INIT_SPEED_ADOPT_BEST_PRACTICE
	PRIMARY_CARE_TRANSFORMATION
	UNKNOWN
}

enum ModelStatus {
	PLAN_DRAFT
	PLAN_COMPLETE
	ICIP_COMPLETE
	INTERNAL_CMMI_CLEARANCE
	CMS_CLEARANCE
	HHS_CLEARANCE
	OMB_ASRF_CLEARANCE
	CLEARED
	ANNOUNCED
}

enum CMSCenter {
  CMMI
  CENTER_FOR_MEDICARE
  FEDERAL_COORDINATED_HEALTH_CARE_OFFICE
  CENTER_FOR_CLINICAL_STANDARDS_AND_QUALITY
  CENTER_FOR_PROGRAM_INTEGRITY
  OTHER
}

enum CMMIGroup {
  PATIENT_CARE_MODELS_GROUP
  POLICY_AND_PROGRAMS_GROUP
  PREVENTIVE_AND_POPULATION_HEALTH_CARE_MODELS_GROUP
  SEAMLESS_CARE_MODELS_GROUP
  STATE_INNOVATIONS_GROUP
}

enum DiscussionStatus {
  ANSWERED
  WAITING_FOR_RESPONSE
  UNANSWERED
}

enum DocumentType {
  CONCEPT_PAPER,
  POLICY_PAPER,
  ICIP_DRAFT,
  MARKET_RESEARCH,
  OTHER
}

enum AlternativePaymentModelType {
  REGULAR
  MIPS
  ADVANCED
}

enum KeyCharacteristic {
  EPISODE_BASED
  PART_C
  PART_D
  PAYMENT
  POPULATION_BASED
  PREVENTATIVE
  SERVICE_DELIVERY
  SHARED_SAVINGS
  OTHER
}

enum GeographyType {
  STATE
  REGION
  OTHER
}

enum GeographyApplication {
  PARTICIPANTS
  PROVIDERS
  BENEFICIARIES
  OTHER
}

enum AgreementType {
  PARTICIPATION
  COOPERATIVE
  OTHER
}

enum AuthorityAllowance {
  ACA
  CONGRESSIONALLY_MANDATED
  SSA_PART_B
  OTHER
}

enum WaiverType {
  FRAUD_ABUSE
  PROGRAM_PAYMENT
  MEDICAID
}

enum BeneficiariesType {
  MEDICARE_FFS
  MEDICARE_ADVANTAGE
  MEDICARE_PART_D
  MEDICAID
  DUALLY_ELIGIBLE
  DISEASE_SPECIFIC
  OTHER
  NA
}
enum SelectionMethodType {
  HISTORICAL
  PROSPECTIVE
  RETROSPECTIVE
  VOLUNTARY
  PROVIDER_SIGN_UP
  OTHER
  NA
}
enum OverlapType {
  YES_NEED_POLICIES
  YES_NO_ISSUES
  NO
}
enum ConfidenceType {
  NOT_AT_ALL
  SLIGHTLY
  FAIRLY
  COMPLETELY
}
enum FrequencyType {
  ANNUALLY
  BIANNUALLY
  QUARTERLY
  MONTHLY
  ROLLING
  OTHER
}
enum TriStateAnswer {
  YES
  NO
  TBD
}
enum ParticipantsType {
  MEDICARE_PROVIDERS
  ENTITIES
  CONVENER
  MEDICARE_ADVANTAGE_PLANS
  STANDALONE_PART_D_PLANS
  MEDICARE_ADVANTAGE_PRESCRIPTION_DRUG_PLANS
  STATE_MEDICAID_AGENCIES
  MEDICAID_MANAGED_CARE_ORGANIZATIONS
  MEDICAID_PROVIDERS
  STATES
  COMMUNITY_BASED_ORGANIZATIONS
  NON_PROFIT_ORGANIZATIONS
  COMMERCIAL_PAYERS
  OTHER
}

enum RecruitmentType {
  LOI
  RFA
  NOFO
  OTHER
  NA
}
enum ParticipantSelectionType {
  MODEL_TEAM_REVIEW_APPLICATIONS
  SUPPORT_FROM_CMMI
  CMS_COMPONENT_OR_PROCESS
  APPLICATION_REVIEW_AND_SCORING_TOOL
  APPLICATION_SUPPORT_CONTRACTOR
  BASIC_CRITERIA
  OTHER
  NO_SELECTING_PARTICIPANTS
}
enum ParticipantCommunicationType {
  MASS_EMAIL
  IT_TOOL
  OTHER
  NO_COMMUNICATION
}
enum ParticipantRiskType {
  TWO_SIDED
  ONE_SIDED
  CAPITATION
  OTHER
}

enum ParticipantsIDType{
  TINS
  NPIS
  CCNS
  OTHER
  NO_IDENTIFIERS
}

enum ProviderAddType {
  PROSPECTIVELY
  RETROSPECTIVELY
  VOLUNTARILY
  MANDATORILY
  ONLINE_TOOLS
  OTHER
  NA
}

enum ProviderLeaveType {

VOLUNTARILY_WITHOUT_IMPLICATIONS
AFTER_A_CERTAIN_WITH_IMPLICATIONS
VARIES_BY_TYPE_OF_PROVIDER
NOT_ALLOWED_TO_LEAVE
OTHER
NOT_APPLICABLE
}

#IT TOOLS ENUMS

enum GcPartCDType {
    MARX
    OTHER
}
enum GcCollectBidsType {
    HPMS
    OTHER
}
enum GcUpdateContractType {

    HPMS
    OTHER
}
enum PpToAdvertiseType {
    SALESFORCE
    GRANT_SOLUTIONS
    OTHER
}
enum PpCollectScoreReviewType {
    RFA
    ARS
    GRANT_SOLUTIONS
    OTHER
}
enum PpAppSupportContractorType {
    RMDA
    OTHER
}
enum PpCommunicateWithParticipantType {
    OUTLOOK_MAILBOX
    GOV_DELIVERY
    SALESFORCE_PORTAL
    OTHER
}
enum PpManageProviderOverlapType {
    MDM
    OTHER
    NA
}
enum BManageBeneficiaryOverlapType {
    MDM
    OTHER
    NA
}
enum OelHelpdeskSupportType {
    CBOSC
    CONTRACTOR
    OTHER
}
enum OelManageAcoType {
    ACO_OS
    ACO_UI
    INNOVATION
    OTHER
}
enum OelPerformanceBenchmarkType {
    IDR
    CCW
    OTHER
}
enum OelProcessAppealsType {
    MEDICARE_APPEAL_SYSTEM
    OTHER
}
enum OelEvaluationContractorType {
    RMDA
    OTHER
}
enum OelCollectDataType {
    IDR
    CCW
    IDOS
    ISP
    CONTRACTOR
    OTHER
}
enum OelObtainDataType {
    CCW
    IDOS
    ISP
    OTHER
}
enum OelClaimsBasedMeasuresType {
    IDR
    CCW
    OTHER
}
enum OelQualityScoresType {
    EXISTING_DATA_AND_PROCESS
    NEW_DATA_AND_CMMI_PROCESS
    OTHER
    NONE
}
enum OelSendReportsType {
    IDOS
    RMADA
    INTERNAL_STAFF
    OTHER
}
enum OelLearningContractorType {
    RMADA
    CROSS_MODEL_CONTRACT
    OTHER
}
enum OelParticipantCollaborationType {
    CONNECT
    OTHER
}
enum OelEducateBeneficiariesType {
    OC
    OTHER
}
enum PMakeClaimsPaymentsType {
    SHARED_SYSTEMS
    HIGLAS
    OTHER
}
enum PInformFfsType {
    FFS_COMPETENCY_CENTER
    OTHER
}
enum PNonClaimsBasedPaymentsType {
    APPS
    HIGLAS
    IPC
    MAC
    OTHER
}
enum PSharedSavingsPlanType {
    RMADA
    OTHER
}
enum PRecoverPaymentsType {
    APPS
    IPC
    MAC
    OTHER
}

#end IT TOOLS ENUMS

#Ops Eval and Learning types begin

enum AgencyOrStateHelpType {
    YES_STATE
    YES_AGENCY_IDEAS
    YES_AGENCY_IAA
    NO
    OTHER
}

enum StakeholdersType {
    BENEFICIARIES
    COMMUNITY_ORGANIZATIONS
    PARTICIPANTS
    PROFESSIONAL_ORGANIZATIONS
    PROVIDERS
    STATES
    OTHER
}


enum ContractorSupportType {
    ONE
    MULTIPLE
    NONE
    OTHER
}

enum MonitoringFileType {
    BENEFICIARY
    PROVIDER
    PART_A
    PART_B
    OTHER
}

enum EvaluationApproachType {
    CONTROL_INTERVENTION
    COMPARISON_MATCH
    INTERRUPTED_TIME
    NON_MEDICARE_DATA
    OTHER
}

enum CcmInvolvmentType {
    YES_EVALUATION
    YES__IMPLEMENTATION
    NO
    OTHER
}

enum DataForMonitoringType {
    SITE_VISITS
    MEDICARE_CLAIMS
    MEDICAID_CLAIMS
    ENCOUNTER_DATA
    NO_PAY_CLAIMS
    QUALITY_CLAIMS_BASED_MEASURES
    QUALITY_REPORTED_MEASURES
    CLINICAL_DATA
    NON_CLINICAL_DATA
    NON_MEDICAL_DATA
    OTHER
    NOT_PLANNING_TO_COLLECT_DATA
}

enum DataToSendParticipantsType {
    BASELINE_HISTORICAL_DATA
    CLAIMS_LEVEL_DATA
    BENEFICIARY_LEVEL_DATA
    PARTICIPANT_LEVEL_DATA
    PROVIDER_LEVEL_DATA
    OTHER_MIPS_DATA
    NOT_PLANNING_TO_SEND_DATA
}

enum DataFrequencyType {
    ANNUALLY
    BIANNUALLY
    QUARTERLY
    MONTHLY
    SEMI_MONTHLY
    WEEKLY
    DAILY
    OTHER
    NOT_PLANNING_TO_DO_THIS
}

enum ModelLearningSystemType {
    LEARNING_CONTRACTOR
    IT_PLATFORM_CONNECT
    PARTICIPANT_COLLABORATION
    EDUCATE_BENEFICIARIES
    OTHER
    NO_LEARNING_SYSTEM
}


enum DataFullTimeOrIncrementalType {
    FULL_TIME
    INCREMENTAL
}

enum BenchmarkForPerformanceType {
    YES_RECONCILE
    YES_NO_RECONCILE
    NO
}

enum DataStartsType {
    DURING_APPLICATION_PERIOD
    SHORTLY_BEFORE_THE_START_DATE
    EARLY_IN_THE_FIRST_PERFORMANCE_YEAR
    LATER_IN_THE_FIRST_PERFORMANCE_YEAR
    IN_THE_SUBSEQUENT_PERFORMANCE_YEAR
    AT_SOME_OTHER_POINT_IN_TIME
    NOT_PLANNING_TO_DO_THIS
    OTHER
}
#Ops Eval and Learning types end

enum FundingSource {
  PATIENT_PROTECTION_AFFORDABLE_CARE_ACT
  TRUST_FUND
  OTHER
}

enum PayRecipient {
  PROVIDERS
  BENEFICIARIES
  PARTICIPANTS
  STATES
  OTHER
}

enum PayType {
  CLAIMS_BASED_PAYMENTS
  NON_CLAIMS_BASED_PAYMENTS
  GRANTS
}

enum ClaimsBasedPayType {
  ADJUSTMENTS_TO_FFS_PAYMENTS
  CARE_MANAGEMENT_HOME_VISITS
  REDUCTIONS_TO_BENEFICIARY_COST_SHARING
  SNF_CLAIMS_WITHOUT_3DAY_HOSPITAL_ADMISSIONS
  TELEHEALTH_SERVICES_NOT_TRADITIONAL_MEDICARE
  SERVICES_NOT_COVERED_THROUGH_TRADITIONAL_MEDICARE
  OTHER
}

enum NonClaimsBasedPayType {
  ADVANCED_PAYMENT
  BUNDLED_EPISODE_OF_CARE
  CAPITATION_POPULATION_BASED_FULL
  CAPITATION_POPULATION_BASED_PARTIAL
  CARE_COORDINATION_MANAGEMENT_FEE
  GLOBAL_BUDGET
  GRANTS
  INCENTIVE_PAYMENT
  MAPD_SHARED_SAVINGS
  SHARED_SAVINGS
  OTHER
}

enum ComplexityCalculationLevelType {
  LOW
  MIDDLE
  HIGH
}

enum AnticipatedPaymentFrequencyType {
  ANNUALLY
  BIANNUALLY
  QUARTERLY
  MONTHLY
  SEMIMONTHLY
  WEEKLY
  DAILY
  OTHER
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

# https://gqlgen.com/config/#inline-config-with-directives
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

"""
A user role associated with a job code
"""
enum Role {
  """
  A basic MINT user
  """
  MINT_USER

  """
  A MINT assessment team user
  """
  MINT_ASSESSMENT
}

enum ActionType {
  """
  A normal flow action
  """
  NORMAL

  """
  An administrative action
  """
  ADMIN
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_hasRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.Role
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg0, err = ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg0
	return args, nil
}

func (ec *executionContext) field_ModelPlan_nameHistory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SortDirection
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg0, err = ec.unmarshalNSortDirection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐSortDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addPlanFavorite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_agreeToNDA_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["agree"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agree"))
		arg0, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agree"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createDiscussionReply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DiscussionReplyCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDiscussionReplyCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDiscussionReplyCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createModelPlan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["modelName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelName"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPlanCollaborator_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PlanCollaboratorCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPlanCollaboratorCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanCollaboratorCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPlanCrTdl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PlanCrTdlCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPlanCrTdlCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanCrTdlCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPlanDiscussion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PlanDiscussionCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPlanDiscussionCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanDiscussionCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDiscussionReply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlanCollaborator_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlanCrTdl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlanDiscussion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlanDocument_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlanFavorite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_lockTaskListSection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	var arg1 model.TaskListSection
	if tmp, ok := rawArgs["section"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("section"))
		arg1, err = ec.unmarshalNTaskListSection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["section"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_unlockAllTaskListSections_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_unlockTaskListSection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	var arg1 model.TaskListSection
	if tmp, ok := rawArgs["section"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("section"))
		arg1, err = ec.unmarshalNTaskListSection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["section"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDiscussionReply_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNDiscussionReplyChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateModelPlan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNModelPlanChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanBasics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanBasicsChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanBeneficiaries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanBeneficiariesChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanCollaborator_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.TeamRole
	if tmp, ok := rawArgs["newRole"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newRole"))
		arg1, err = ec.unmarshalNTeamRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTeamRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newRole"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanCrTdl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanCrTdlChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanDiscussion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanDiscussionChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanGeneralCharacteristics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanGeneralCharacteristicsChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanItTools_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanITToolsChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanOpsEvalAndLearning_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanOpsEvalAndLearningChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanParticipantsAndProviders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanParticipantsAndProvidersChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlanPayments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["changes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
		arg1, err = ec.unmarshalNPlanPaymentsChanges2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["changes"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_uploadNewPlanDocument_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PlanDocumentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPlanDocumentInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanDocumentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_auditChanges_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["tableName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tableName"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tableName"] = arg0
	var arg1 uuid.UUID
	if tmp, ok := rawArgs["primaryKey"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primaryKey"))
		arg1, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["primaryKey"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_cedarPersonsByCommonName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["commonName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commonName"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["commonName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_crTdl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_modelPlanCollection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeAll"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeAll"))
		arg0, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeAll"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_modelPlan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_planCollaboratorByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_planDocument_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_planPayments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_taskListSectionLocks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_onLockTaskListSectionContext_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_onTaskListSectionLocksChanged_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["modelPlanID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["modelPlanID"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AuditChange_id(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_primaryKey(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_primaryKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_primaryKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_foreignKey(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_foreignKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ForeignKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_foreignKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_tableName(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_tableName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TableName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_tableName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_action(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_action(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_action(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_fields(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.AuditChange().Fields(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditChange_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.AuditChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditChange_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditChange_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurrentUser_launchDarkly(ctx context.Context, field graphql.CollectedField, obj *model.CurrentUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CurrentUser_launchDarkly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaunchDarkly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LaunchDarklySettings)
	fc.Result = res
	return ec.marshalNLaunchDarklySettings2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐLaunchDarklySettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CurrentUser_launchDarkly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurrentUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userKey":
				return ec.fieldContext_LaunchDarklySettings_userKey(ctx, field)
			case "signedHash":
				return ec.fieldContext_LaunchDarklySettings_signedHash(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LaunchDarklySettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_id(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_discussionID(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_discussionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscussionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_discussionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_content(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_resolution(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_resolution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resolution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_resolution(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_isAssessment(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_isAssessment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAssessment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_isAssessment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiscussionReply_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.DiscussionReply) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiscussionReply_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiscussionReply_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiscussionReply",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_id(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_modelName(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_modelName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_modelName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_stage(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_stage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_stage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_numberOfParticipants(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_numberOfParticipants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfParticipants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_numberOfParticipants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_category(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_authority(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_authority(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_authority(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_description(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_numberOfBeneficiariesImpacted(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_numberOfBeneficiariesImpacted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfBeneficiariesImpacted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_numberOfBeneficiariesImpacted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_numberOfPhysiciansImpacted(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_numberOfPhysiciansImpacted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfPhysiciansImpacted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_numberOfPhysiciansImpacted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_dateBegan(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_dateBegan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateBegan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_dateBegan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_dateEnded(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_dateEnded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateEnded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_dateEnded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_states(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_states(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.States, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_states(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_keywords(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_keywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keywords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_keywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_url(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_displayModelSummary(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_displayModelSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayModelSummary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_displayModelSummary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExistingModel_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.ExistingModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExistingModel_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExistingModel_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExistingModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LaunchDarklySettings_userKey(ctx context.Context, field graphql.CollectedField, obj *model.LaunchDarklySettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LaunchDarklySettings_userKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LaunchDarklySettings_userKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LaunchDarklySettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LaunchDarklySettings_signedHash(ctx context.Context, field graphql.CollectedField, obj *model.LaunchDarklySettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LaunchDarklySettings_signedHash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignedHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LaunchDarklySettings_signedHash(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LaunchDarklySettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_id(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_modelName(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_modelName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_modelName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_archived(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_archived(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Archived, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_archived(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_basics(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_basics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().Basics(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanBasics)
	fc.Result = res
	return ec.marshalNPlanBasics2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBasics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_basics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanBasics_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanBasics_modelPlanID(ctx, field)
			case "modelCategory":
				return ec.fieldContext_PlanBasics_modelCategory(ctx, field)
			case "cmsCenters":
				return ec.fieldContext_PlanBasics_cmsCenters(ctx, field)
			case "cmsOther":
				return ec.fieldContext_PlanBasics_cmsOther(ctx, field)
			case "cmmiGroups":
				return ec.fieldContext_PlanBasics_cmmiGroups(ctx, field)
			case "modelType":
				return ec.fieldContext_PlanBasics_modelType(ctx, field)
			case "problem":
				return ec.fieldContext_PlanBasics_problem(ctx, field)
			case "goal":
				return ec.fieldContext_PlanBasics_goal(ctx, field)
			case "testInterventions":
				return ec.fieldContext_PlanBasics_testInterventions(ctx, field)
			case "note":
				return ec.fieldContext_PlanBasics_note(ctx, field)
			case "completeICIP":
				return ec.fieldContext_PlanBasics_completeICIP(ctx, field)
			case "clearanceStarts":
				return ec.fieldContext_PlanBasics_clearanceStarts(ctx, field)
			case "clearanceEnds":
				return ec.fieldContext_PlanBasics_clearanceEnds(ctx, field)
			case "announced":
				return ec.fieldContext_PlanBasics_announced(ctx, field)
			case "applicationsStart":
				return ec.fieldContext_PlanBasics_applicationsStart(ctx, field)
			case "applicationsEnd":
				return ec.fieldContext_PlanBasics_applicationsEnd(ctx, field)
			case "performancePeriodStarts":
				return ec.fieldContext_PlanBasics_performancePeriodStarts(ctx, field)
			case "performancePeriodEnds":
				return ec.fieldContext_PlanBasics_performancePeriodEnds(ctx, field)
			case "wrapUpEnds":
				return ec.fieldContext_PlanBasics_wrapUpEnds(ctx, field)
			case "highLevelNote":
				return ec.fieldContext_PlanBasics_highLevelNote(ctx, field)
			case "phasedIn":
				return ec.fieldContext_PlanBasics_phasedIn(ctx, field)
			case "phasedInNote":
				return ec.fieldContext_PlanBasics_phasedInNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanBasics_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanBasics_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanBasics_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanBasics_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanBasics_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanBasics_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanBasics_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanBasics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_generalCharacteristics(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_generalCharacteristics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().GeneralCharacteristics(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanGeneralCharacteristics)
	fc.Result = res
	return ec.marshalNPlanGeneralCharacteristics2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanGeneralCharacteristics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_generalCharacteristics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanGeneralCharacteristics_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanGeneralCharacteristics_modelPlanID(ctx, field)
			case "isNewModel":
				return ec.fieldContext_PlanGeneralCharacteristics_isNewModel(ctx, field)
			case "existingModel":
				return ec.fieldContext_PlanGeneralCharacteristics_existingModel(ctx, field)
			case "resemblesExistingModel":
				return ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModel(ctx, field)
			case "resemblesExistingModelWhich":
				return ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelWhich(ctx, field)
			case "resemblesExistingModelHow":
				return ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelHow(ctx, field)
			case "resemblesExistingModelNote":
				return ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelNote(ctx, field)
			case "hasComponentsOrTracks":
				return ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracks(ctx, field)
			case "hasComponentsOrTracksDiffer":
				return ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksDiffer(ctx, field)
			case "hasComponentsOrTracksNote":
				return ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksNote(ctx, field)
			case "alternativePaymentModel":
				return ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModel(ctx, field)
			case "alternativePaymentModelTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModelTypes(ctx, field)
			case "alternativePaymentModelNote":
				return ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModelNote(ctx, field)
			case "keyCharacteristics":
				return ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristics(ctx, field)
			case "keyCharacteristicsOther":
				return ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristicsOther(ctx, field)
			case "keyCharacteristicsNote":
				return ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristicsNote(ctx, field)
			case "collectPlanBids":
				return ec.fieldContext_PlanGeneralCharacteristics_collectPlanBids(ctx, field)
			case "collectPlanBidsNote":
				return ec.fieldContext_PlanGeneralCharacteristics_collectPlanBidsNote(ctx, field)
			case "managePartCDEnrollment":
				return ec.fieldContext_PlanGeneralCharacteristics_managePartCDEnrollment(ctx, field)
			case "managePartCDEnrollmentNote":
				return ec.fieldContext_PlanGeneralCharacteristics_managePartCDEnrollmentNote(ctx, field)
			case "planContactUpdated":
				return ec.fieldContext_PlanGeneralCharacteristics_planContactUpdated(ctx, field)
			case "planContactUpdatedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_planContactUpdatedNote(ctx, field)
			case "careCoordinationInvolved":
				return ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolved(ctx, field)
			case "careCoordinationInvolvedDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedDescription(ctx, field)
			case "careCoordinationInvolvedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedNote(ctx, field)
			case "additionalServicesInvolved":
				return ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolved(ctx, field)
			case "additionalServicesInvolvedDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedDescription(ctx, field)
			case "additionalServicesInvolvedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedNote(ctx, field)
			case "communityPartnersInvolved":
				return ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolved(ctx, field)
			case "communityPartnersInvolvedDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedDescription(ctx, field)
			case "communityPartnersInvolvedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedNote(ctx, field)
			case "geographiesTargeted":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargeted(ctx, field)
			case "geographiesTargetedTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypes(ctx, field)
			case "geographiesTargetedTypesOther":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypesOther(ctx, field)
			case "geographiesTargetedAppliedTo":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedTo(ctx, field)
			case "geographiesTargetedAppliedToOther":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedToOther(ctx, field)
			case "geographiesTargetedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedNote(ctx, field)
			case "participationOptions":
				return ec.fieldContext_PlanGeneralCharacteristics_participationOptions(ctx, field)
			case "participationOptionsNote":
				return ec.fieldContext_PlanGeneralCharacteristics_participationOptionsNote(ctx, field)
			case "agreementTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_agreementTypes(ctx, field)
			case "agreementTypesOther":
				return ec.fieldContext_PlanGeneralCharacteristics_agreementTypesOther(ctx, field)
			case "multiplePatricipationAgreementsNeeded":
				return ec.fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeeded(ctx, field)
			case "multiplePatricipationAgreementsNeededNote":
				return ec.fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeededNote(ctx, field)
			case "rulemakingRequired":
				return ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequired(ctx, field)
			case "rulemakingRequiredDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequiredDescription(ctx, field)
			case "rulemakingRequiredNote":
				return ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequiredNote(ctx, field)
			case "authorityAllowances":
				return ec.fieldContext_PlanGeneralCharacteristics_authorityAllowances(ctx, field)
			case "authorityAllowancesOther":
				return ec.fieldContext_PlanGeneralCharacteristics_authorityAllowancesOther(ctx, field)
			case "authorityAllowancesNote":
				return ec.fieldContext_PlanGeneralCharacteristics_authorityAllowancesNote(ctx, field)
			case "waiversRequired":
				return ec.fieldContext_PlanGeneralCharacteristics_waiversRequired(ctx, field)
			case "waiversRequiredTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_waiversRequiredTypes(ctx, field)
			case "waiversRequiredNote":
				return ec.fieldContext_PlanGeneralCharacteristics_waiversRequiredNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanGeneralCharacteristics_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanGeneralCharacteristics_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanGeneralCharacteristics_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanGeneralCharacteristics_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanGeneralCharacteristics_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanGeneralCharacteristics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_participantsAndProviders(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_participantsAndProviders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().ParticipantsAndProviders(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanParticipantsAndProviders)
	fc.Result = res
	return ec.marshalNPlanParticipantsAndProviders2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanParticipantsAndProviders(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_participantsAndProviders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanParticipantsAndProviders_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanParticipantsAndProviders_modelPlanID(ctx, field)
			case "participants":
				return ec.fieldContext_PlanParticipantsAndProviders_participants(ctx, field)
			case "medicareProviderType":
				return ec.fieldContext_PlanParticipantsAndProviders_medicareProviderType(ctx, field)
			case "statesEngagement":
				return ec.fieldContext_PlanParticipantsAndProviders_statesEngagement(ctx, field)
			case "participantsOther":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsOther(ctx, field)
			case "participantsNote":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsNote(ctx, field)
			case "participantsCurrentlyInModels":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModels(ctx, field)
			case "participantsCurrentlyInModelsNote":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModelsNote(ctx, field)
			case "modelApplicationLevel":
				return ec.fieldContext_PlanParticipantsAndProviders_modelApplicationLevel(ctx, field)
			case "expectedNumberOfParticipants":
				return ec.fieldContext_PlanParticipantsAndProviders_expectedNumberOfParticipants(ctx, field)
			case "estimateConfidence":
				return ec.fieldContext_PlanParticipantsAndProviders_estimateConfidence(ctx, field)
			case "confidenceNote":
				return ec.fieldContext_PlanParticipantsAndProviders_confidenceNote(ctx, field)
			case "recruitmentMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_recruitmentMethod(ctx, field)
			case "recruitmentOther":
				return ec.fieldContext_PlanParticipantsAndProviders_recruitmentOther(ctx, field)
			case "recruitmentNote":
				return ec.fieldContext_PlanParticipantsAndProviders_recruitmentNote(ctx, field)
			case "selectionMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_selectionMethod(ctx, field)
			case "selectionOther":
				return ec.fieldContext_PlanParticipantsAndProviders_selectionOther(ctx, field)
			case "selectionNote":
				return ec.fieldContext_PlanParticipantsAndProviders_selectionNote(ctx, field)
			case "communicationMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_communicationMethod(ctx, field)
			case "communicationMethodOther":
				return ec.fieldContext_PlanParticipantsAndProviders_communicationMethodOther(ctx, field)
			case "communicationNote":
				return ec.fieldContext_PlanParticipantsAndProviders_communicationNote(ctx, field)
			case "participantAssumeRisk":
				return ec.fieldContext_PlanParticipantsAndProviders_participantAssumeRisk(ctx, field)
			case "riskType":
				return ec.fieldContext_PlanParticipantsAndProviders_riskType(ctx, field)
			case "riskOther":
				return ec.fieldContext_PlanParticipantsAndProviders_riskOther(ctx, field)
			case "riskNote":
				return ec.fieldContext_PlanParticipantsAndProviders_riskNote(ctx, field)
			case "willRiskChange":
				return ec.fieldContext_PlanParticipantsAndProviders_willRiskChange(ctx, field)
			case "willRiskChangeNote":
				return ec.fieldContext_PlanParticipantsAndProviders_willRiskChangeNote(ctx, field)
			case "coordinateWork":
				return ec.fieldContext_PlanParticipantsAndProviders_coordinateWork(ctx, field)
			case "coordinateWorkNote":
				return ec.fieldContext_PlanParticipantsAndProviders_coordinateWorkNote(ctx, field)
			case "gainsharePayments":
				return ec.fieldContext_PlanParticipantsAndProviders_gainsharePayments(ctx, field)
			case "gainsharePaymentsTrack":
				return ec.fieldContext_PlanParticipantsAndProviders_gainsharePaymentsTrack(ctx, field)
			case "gainsharePaymentsNote":
				return ec.fieldContext_PlanParticipantsAndProviders_gainsharePaymentsNote(ctx, field)
			case "participantsIds":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsIds(ctx, field)
			case "participantsIdsOther":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsIdsOther(ctx, field)
			case "participantsIDSNote":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsIDSNote(ctx, field)
			case "providerAdditionFrequency":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequency(ctx, field)
			case "providerAdditionFrequencyOther":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyOther(ctx, field)
			case "providerAdditionFrequencyNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyNote(ctx, field)
			case "providerAddMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAddMethod(ctx, field)
			case "providerAddMethodOther":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAddMethodOther(ctx, field)
			case "providerAddMethodNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAddMethodNote(ctx, field)
			case "providerLeaveMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethod(ctx, field)
			case "providerLeaveMethodOther":
				return ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethodOther(ctx, field)
			case "providerLeaveMethodNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethodNote(ctx, field)
			case "providerOverlap":
				return ec.fieldContext_PlanParticipantsAndProviders_providerOverlap(ctx, field)
			case "providerOverlapHierarchy":
				return ec.fieldContext_PlanParticipantsAndProviders_providerOverlapHierarchy(ctx, field)
			case "providerOverlapNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerOverlapNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanParticipantsAndProviders_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanParticipantsAndProviders_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanParticipantsAndProviders_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanParticipantsAndProviders_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanParticipantsAndProviders_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanParticipantsAndProviders", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_beneficiaries(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_beneficiaries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().Beneficiaries(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanBeneficiaries)
	fc.Result = res
	return ec.marshalNPlanBeneficiaries2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBeneficiaries(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_beneficiaries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanBeneficiaries_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanBeneficiaries_modelPlanID(ctx, field)
			case "beneficiaries":
				return ec.fieldContext_PlanBeneficiaries_beneficiaries(ctx, field)
			case "beneficiariesOther":
				return ec.fieldContext_PlanBeneficiaries_beneficiariesOther(ctx, field)
			case "beneficiariesNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiariesNote(ctx, field)
			case "treatDualElligibleDifferent":
				return ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferent(ctx, field)
			case "treatDualElligibleDifferentHow":
				return ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferentHow(ctx, field)
			case "treatDualElligibleDifferentNote":
				return ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferentNote(ctx, field)
			case "excludeCertainCharacteristics":
				return ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristics(ctx, field)
			case "excludeCertainCharacteristicsCriteria":
				return ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsCriteria(ctx, field)
			case "excludeCertainCharacteristicsNote":
				return ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsNote(ctx, field)
			case "numberPeopleImpacted":
				return ec.fieldContext_PlanBeneficiaries_numberPeopleImpacted(ctx, field)
			case "estimateConfidence":
				return ec.fieldContext_PlanBeneficiaries_estimateConfidence(ctx, field)
			case "confidenceNote":
				return ec.fieldContext_PlanBeneficiaries_confidenceNote(ctx, field)
			case "beneficiarySelectionMethod":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionMethod(ctx, field)
			case "beneficiarySelectionOther":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionOther(ctx, field)
			case "beneficiarySelectionNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionNote(ctx, field)
			case "beneficiarySelectionFrequency":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequency(ctx, field)
			case "beneficiarySelectionFrequencyOther":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyOther(ctx, field)
			case "beneficiarySelectionFrequencyNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyNote(ctx, field)
			case "beneficiaryOverlap":
				return ec.fieldContext_PlanBeneficiaries_beneficiaryOverlap(ctx, field)
			case "beneficiaryOverlapNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiaryOverlapNote(ctx, field)
			case "precedenceRules":
				return ec.fieldContext_PlanBeneficiaries_precedenceRules(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanBeneficiaries_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanBeneficiaries_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanBeneficiaries_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanBeneficiaries_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanBeneficiaries_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanBeneficiaries_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanBeneficiaries_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanBeneficiaries", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_opsEvalAndLearning(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_opsEvalAndLearning(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().OpsEvalAndLearning(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanOpsEvalAndLearning)
	fc.Result = res
	return ec.marshalNPlanOpsEvalAndLearning2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanOpsEvalAndLearning(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_opsEvalAndLearning(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanOpsEvalAndLearning_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelPlanID(ctx, field)
			case "agencyOrStateHelp":
				return ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelp(ctx, field)
			case "agencyOrStateHelpOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpOther(ctx, field)
			case "agencyOrStateHelpNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpNote(ctx, field)
			case "stakeholders":
				return ec.fieldContext_PlanOpsEvalAndLearning_stakeholders(ctx, field)
			case "stakeholdersOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_stakeholdersOther(ctx, field)
			case "stakeholdersNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_stakeholdersNote(ctx, field)
			case "helpdeskUse":
				return ec.fieldContext_PlanOpsEvalAndLearning_helpdeskUse(ctx, field)
			case "helpdeskUseNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_helpdeskUseNote(ctx, field)
			case "contractorSupport":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupport(ctx, field)
			case "contractorSupportOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportOther(ctx, field)
			case "contractorSupportHow":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportHow(ctx, field)
			case "contractorSupportNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportNote(ctx, field)
			case "iddocSupport":
				return ec.fieldContext_PlanOpsEvalAndLearning_iddocSupport(ctx, field)
			case "iddocSupportNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_iddocSupportNote(ctx, field)
			case "technicalContactsIdentified":
				return ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentified(ctx, field)
			case "technicalContactsIdentifiedDetail":
				return ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedDetail(ctx, field)
			case "technicalContactsIdentifiedNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedNote(ctx, field)
			case "captureParticipantInfo":
				return ec.fieldContext_PlanOpsEvalAndLearning_captureParticipantInfo(ctx, field)
			case "captureParticipantInfoNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_captureParticipantInfoNote(ctx, field)
			case "icdOwner":
				return ec.fieldContext_PlanOpsEvalAndLearning_icdOwner(ctx, field)
			case "draftIcdDueDate":
				return ec.fieldContext_PlanOpsEvalAndLearning_draftIcdDueDate(ctx, field)
			case "icdNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_icdNote(ctx, field)
			case "uatNeeds":
				return ec.fieldContext_PlanOpsEvalAndLearning_uatNeeds(ctx, field)
			case "stcNeeds":
				return ec.fieldContext_PlanOpsEvalAndLearning_stcNeeds(ctx, field)
			case "testingTimelines":
				return ec.fieldContext_PlanOpsEvalAndLearning_testingTimelines(ctx, field)
			case "testingNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_testingNote(ctx, field)
			case "dataMonitoringFileTypes":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileTypes(ctx, field)
			case "dataMonitoringFileOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileOther(ctx, field)
			case "dataResponseType":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataResponseType(ctx, field)
			case "dataResponseFileFrequency":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataResponseFileFrequency(ctx, field)
			case "dataFullTimeOrIncremental":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataFullTimeOrIncremental(ctx, field)
			case "eftSetUp":
				return ec.fieldContext_PlanOpsEvalAndLearning_eftSetUp(ctx, field)
			case "unsolicitedAdjustmentsIncluded":
				return ec.fieldContext_PlanOpsEvalAndLearning_unsolicitedAdjustmentsIncluded(ctx, field)
			case "dataFlowDiagramsNeeded":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataFlowDiagramsNeeded(ctx, field)
			case "produceBenefitEnhancementFiles":
				return ec.fieldContext_PlanOpsEvalAndLearning_produceBenefitEnhancementFiles(ctx, field)
			case "fileNamingConventions":
				return ec.fieldContext_PlanOpsEvalAndLearning_fileNamingConventions(ctx, field)
			case "dataMonitoringNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringNote(ctx, field)
			case "benchmarkForPerformance":
				return ec.fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformance(ctx, field)
			case "benchmarkForPerformanceNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformanceNote(ctx, field)
			case "computePerformanceScores":
				return ec.fieldContext_PlanOpsEvalAndLearning_computePerformanceScores(ctx, field)
			case "computePerformanceScoresNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_computePerformanceScoresNote(ctx, field)
			case "riskAdjustPerformance":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustPerformance(ctx, field)
			case "riskAdjustFeedback":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustFeedback(ctx, field)
			case "riskAdjustPayments":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustPayments(ctx, field)
			case "riskAdjustOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustOther(ctx, field)
			case "riskAdjustNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustNote(ctx, field)
			case "appealPerformance":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealPerformance(ctx, field)
			case "appealFeedback":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealFeedback(ctx, field)
			case "appealPayments":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealPayments(ctx, field)
			case "appealOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealOther(ctx, field)
			case "appealNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealNote(ctx, field)
			case "evaluationApproaches":
				return ec.fieldContext_PlanOpsEvalAndLearning_evaluationApproaches(ctx, field)
			case "evaluationApproachOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_evaluationApproachOther(ctx, field)
			case "evalutaionApproachNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_evalutaionApproachNote(ctx, field)
			case "ccmInvolvment":
				return ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvment(ctx, field)
			case "ccmInvolvmentOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentOther(ctx, field)
			case "ccmInvolvmentNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentNote(ctx, field)
			case "dataNeededForMonitoring":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoring(ctx, field)
			case "dataNeededForMonitoringOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringOther(ctx, field)
			case "dataNeededForMonitoringNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringNote(ctx, field)
			case "dataToSendParticicipants":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipants(ctx, field)
			case "dataToSendParticicipantsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsOther(ctx, field)
			case "dataToSendParticicipantsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsNote(ctx, field)
			case "shareCclfData":
				return ec.fieldContext_PlanOpsEvalAndLearning_shareCclfData(ctx, field)
			case "shareCclfDataNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_shareCclfDataNote(ctx, field)
			case "sendFilesBetweenCcw":
				return ec.fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcw(ctx, field)
			case "sendFilesBetweenCcwNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcwNote(ctx, field)
			case "appToSendFilesToKnown":
				return ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToKnown(ctx, field)
			case "appToSendFilesToWhich":
				return ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToWhich(ctx, field)
			case "appToSendFilesToNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToNote(ctx, field)
			case "useCcwForFileDistribiutionToParticipants":
				return ec.fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipants(ctx, field)
			case "useCcwForFileDistribiutionToParticipantsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipantsNote(ctx, field)
			case "developNewQualityMeasures":
				return ec.fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasures(ctx, field)
			case "developNewQualityMeasuresNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasuresNote(ctx, field)
			case "qualityPerformanceImpactsPayment":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPayment(ctx, field)
			case "qualityPerformanceImpactsPaymentNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPaymentNote(ctx, field)
			case "dataSharingStarts":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStarts(ctx, field)
			case "dataSharingStartsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStartsOther(ctx, field)
			case "dataSharingFrequency":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingFrequency(ctx, field)
			case "dataSharingFrequencyOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingFrequencyOther(ctx, field)
			case "dataSharingStartsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStartsNote(ctx, field)
			case "dataCollectionStarts":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionStarts(ctx, field)
			case "dataCollectionStartsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionStartsOther(ctx, field)
			case "dataCollectionFrequency":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequency(ctx, field)
			case "dataCollectionFrequencyOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyOther(ctx, field)
			case "dataCollectionFrequencyNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyNote(ctx, field)
			case "qualityReportingStarts":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStarts(ctx, field)
			case "qualityReportingStartsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsOther(ctx, field)
			case "qualityReportingStartsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsNote(ctx, field)
			case "modelLearningSystems":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystems(ctx, field)
			case "modelLearningSystemsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsOther(ctx, field)
			case "modelLearningSystemsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsNote(ctx, field)
			case "anticipatedChallenges":
				return ec.fieldContext_PlanOpsEvalAndLearning_anticipatedChallenges(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanOpsEvalAndLearning_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanOpsEvalAndLearning_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanOpsEvalAndLearning_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanOpsEvalAndLearning_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanOpsEvalAndLearning_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanOpsEvalAndLearning", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_collaborators(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_collaborators(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().Collaborators(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PlanCollaborator)
	fc.Result = res
	return ec.marshalNPlanCollaborator2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaboratorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_collaborators(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCollaborator_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCollaborator_modelPlanID(ctx, field)
			case "euaUserID":
				return ec.fieldContext_PlanCollaborator_euaUserID(ctx, field)
			case "fullName":
				return ec.fieldContext_PlanCollaborator_fullName(ctx, field)
			case "teamRole":
				return ec.fieldContext_PlanCollaborator_teamRole(ctx, field)
			case "email":
				return ec.fieldContext_PlanCollaborator_email(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCollaborator_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCollaborator_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCollaborator_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCollaborator_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCollaborator", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_documents(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PlanDocument)
	fc.Result = res
	return ec.marshalNPlanDocument2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_documents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDocument_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDocument_modelPlanID(ctx, field)
			case "fileType":
				return ec.fieldContext_PlanDocument_fileType(ctx, field)
			case "bucket":
				return ec.fieldContext_PlanDocument_bucket(ctx, field)
			case "fileKey":
				return ec.fieldContext_PlanDocument_fileKey(ctx, field)
			case "virusScanned":
				return ec.fieldContext_PlanDocument_virusScanned(ctx, field)
			case "virusClean":
				return ec.fieldContext_PlanDocument_virusClean(ctx, field)
			case "fileName":
				return ec.fieldContext_PlanDocument_fileName(ctx, field)
			case "fileSize":
				return ec.fieldContext_PlanDocument_fileSize(ctx, field)
			case "documentType":
				return ec.fieldContext_PlanDocument_documentType(ctx, field)
			case "otherType":
				return ec.fieldContext_PlanDocument_otherType(ctx, field)
			case "optionalNotes":
				return ec.fieldContext_PlanDocument_optionalNotes(ctx, field)
			case "downloadUrl":
				return ec.fieldContext_PlanDocument_downloadUrl(ctx, field)
			case "deletedAt":
				return ec.fieldContext_PlanDocument_deletedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDocument_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDocument_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDocument_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDocument_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_discussions(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_discussions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().Discussions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PlanDiscussion)
	fc.Result = res
	return ec.marshalNPlanDiscussion2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_discussions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDiscussion_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDiscussion_modelPlanID(ctx, field)
			case "content":
				return ec.fieldContext_PlanDiscussion_content(ctx, field)
			case "status":
				return ec.fieldContext_PlanDiscussion_status(ctx, field)
			case "replies":
				return ec.fieldContext_PlanDiscussion_replies(ctx, field)
			case "isAssessment":
				return ec.fieldContext_PlanDiscussion_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDiscussion_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDiscussion_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDiscussion_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDiscussion_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDiscussion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_payments(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_payments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().Payments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanPayments)
	fc.Result = res
	return ec.marshalNPlanPayments2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanPayments(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_payments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanPayments_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanPayments_modelPlanID(ctx, field)
			case "fundingSource":
				return ec.fieldContext_PlanPayments_fundingSource(ctx, field)
			case "fundingSourceTrustFund":
				return ec.fieldContext_PlanPayments_fundingSourceTrustFund(ctx, field)
			case "fundingSourceOther":
				return ec.fieldContext_PlanPayments_fundingSourceOther(ctx, field)
			case "fundingSourceNote":
				return ec.fieldContext_PlanPayments_fundingSourceNote(ctx, field)
			case "fundingSourceR":
				return ec.fieldContext_PlanPayments_fundingSourceR(ctx, field)
			case "fundingSourceRTrustFund":
				return ec.fieldContext_PlanPayments_fundingSourceRTrustFund(ctx, field)
			case "fundingSourceROther":
				return ec.fieldContext_PlanPayments_fundingSourceROther(ctx, field)
			case "fundingSourceRNote":
				return ec.fieldContext_PlanPayments_fundingSourceRNote(ctx, field)
			case "payRecipients":
				return ec.fieldContext_PlanPayments_payRecipients(ctx, field)
			case "payRecipientsOtherSpecification":
				return ec.fieldContext_PlanPayments_payRecipientsOtherSpecification(ctx, field)
			case "payRecipientsNote":
				return ec.fieldContext_PlanPayments_payRecipientsNote(ctx, field)
			case "payType":
				return ec.fieldContext_PlanPayments_payType(ctx, field)
			case "payTypeNote":
				return ec.fieldContext_PlanPayments_payTypeNote(ctx, field)
			case "payClaims":
				return ec.fieldContext_PlanPayments_payClaims(ctx, field)
			case "payClaimsOther":
				return ec.fieldContext_PlanPayments_payClaimsOther(ctx, field)
			case "payClaimsNote":
				return ec.fieldContext_PlanPayments_payClaimsNote(ctx, field)
			case "shouldAnyProvidersExcludedFFSSystems":
				return ec.fieldContext_PlanPayments_shouldAnyProvidersExcludedFFSSystems(ctx, field)
			case "shouldAnyProviderExcludedFFSSystemsNote":
				return ec.fieldContext_PlanPayments_shouldAnyProviderExcludedFFSSystemsNote(ctx, field)
			case "changesMedicarePhysicianFeeSchedule":
				return ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeSchedule(ctx, field)
			case "changesMedicarePhysicianFeeScheduleNote":
				return ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeScheduleNote(ctx, field)
			case "affectsMedicareSecondaryPayerClaims":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaims(ctx, field)
			case "affectsMedicareSecondaryPayerClaimsHow":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsHow(ctx, field)
			case "affectsMedicareSecondaryPayerClaimsNote":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsNote(ctx, field)
			case "payModelDifferentiation":
				return ec.fieldContext_PlanPayments_payModelDifferentiation(ctx, field)
			case "creatingDependenciesBetweenServices":
				return ec.fieldContext_PlanPayments_creatingDependenciesBetweenServices(ctx, field)
			case "creatingDependenciesBetweenServicesNote":
				return ec.fieldContext_PlanPayments_creatingDependenciesBetweenServicesNote(ctx, field)
			case "needsClaimsDataCollection":
				return ec.fieldContext_PlanPayments_needsClaimsDataCollection(ctx, field)
			case "needsClaimsDataCollectionNote":
				return ec.fieldContext_PlanPayments_needsClaimsDataCollectionNote(ctx, field)
			case "providingThirdPartyFile":
				return ec.fieldContext_PlanPayments_providingThirdPartyFile(ctx, field)
			case "isContractorAwareTestDataRequirements":
				return ec.fieldContext_PlanPayments_isContractorAwareTestDataRequirements(ctx, field)
			case "beneficiaryCostSharingLevelAndHandling":
				return ec.fieldContext_PlanPayments_beneficiaryCostSharingLevelAndHandling(ctx, field)
			case "waiveBeneficiaryCostSharingForAnyServices":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingForAnyServices(ctx, field)
			case "waiveBeneficiaryCostSharingServiceSpecification":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingServiceSpecification(ctx, field)
			case "waiverOnlyAppliesPartOfPayment":
				return ec.fieldContext_PlanPayments_waiverOnlyAppliesPartOfPayment(ctx, field)
			case "waiveBeneficiaryCostSharingNote":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingNote(ctx, field)
			case "nonClaimsPayments":
				return ec.fieldContext_PlanPayments_nonClaimsPayments(ctx, field)
			case "nonClaimsPaymentOther":
				return ec.fieldContext_PlanPayments_nonClaimsPaymentOther(ctx, field)
			case "paymentCalculationOwner":
				return ec.fieldContext_PlanPayments_paymentCalculationOwner(ctx, field)
			case "numberPaymentsPerPayCycle":
				return ec.fieldContext_PlanPayments_numberPaymentsPerPayCycle(ctx, field)
			case "numberPaymentsPerPayCycleNote":
				return ec.fieldContext_PlanPayments_numberPaymentsPerPayCycleNote(ctx, field)
			case "sharedSystemsInvolvedAdditionalClaimPayment":
				return ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPayment(ctx, field)
			case "sharedSystemsInvolvedAdditionalClaimPaymentNote":
				return ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPaymentNote(ctx, field)
			case "planningToUseInnovationPaymentContractor":
				return ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractor(ctx, field)
			case "planningToUseInnovationPaymentContractorNote":
				return ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractorNote(ctx, field)
			case "fundingStructure":
				return ec.fieldContext_PlanPayments_fundingStructure(ctx, field)
			case "expectedCalculationComplexityLevel":
				return ec.fieldContext_PlanPayments_expectedCalculationComplexityLevel(ctx, field)
			case "expectedCalculationComplexityLevelNote":
				return ec.fieldContext_PlanPayments_expectedCalculationComplexityLevelNote(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanisms":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanisms(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanismsHow":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsHow(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanismsNote":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsNote(ctx, field)
			case "anticipatedPaymentFrequency":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequency(ctx, field)
			case "anticipatedPaymentFrequencyOther":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyOther(ctx, field)
			case "anticipatedPaymentFrequencyNote":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyNote(ctx, field)
			case "willRecoverPayments":
				return ec.fieldContext_PlanPayments_willRecoverPayments(ctx, field)
			case "willRecoverPaymentsNote":
				return ec.fieldContext_PlanPayments_willRecoverPaymentsNote(ctx, field)
			case "anticipateReconcilingPaymentsRetrospectively":
				return ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectively(ctx, field)
			case "anticipateReconcilingPaymentsRetrospectivelyNote":
				return ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectivelyNote(ctx, field)
			case "paymentStartDate":
				return ec.fieldContext_PlanPayments_paymentStartDate(ctx, field)
			case "paymentStartDateNote":
				return ec.fieldContext_PlanPayments_paymentStartDateNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanPayments_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanPayments_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanPayments_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanPayments_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanPayments_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanPayments_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanPayments_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanPayments", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_itTools(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_itTools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().ItTools(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanITTools)
	fc.Result = res
	return ec.marshalNPlanITTools2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanITTools(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_itTools(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanITTools_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanITTools_modelPlanID(ctx, field)
			case "gcPartCD":
				return ec.fieldContext_PlanITTools_gcPartCD(ctx, field)
			case "gcPartCDOther":
				return ec.fieldContext_PlanITTools_gcPartCDOther(ctx, field)
			case "gcPartCDNote":
				return ec.fieldContext_PlanITTools_gcPartCDNote(ctx, field)
			case "gcCollectBids":
				return ec.fieldContext_PlanITTools_gcCollectBids(ctx, field)
			case "gcCollectBidsOther":
				return ec.fieldContext_PlanITTools_gcCollectBidsOther(ctx, field)
			case "gcCollectBidsNote":
				return ec.fieldContext_PlanITTools_gcCollectBidsNote(ctx, field)
			case "gcUpdateContract":
				return ec.fieldContext_PlanITTools_gcUpdateContract(ctx, field)
			case "gcUpdateContractOther":
				return ec.fieldContext_PlanITTools_gcUpdateContractOther(ctx, field)
			case "gcUpdateContractNote":
				return ec.fieldContext_PlanITTools_gcUpdateContractNote(ctx, field)
			case "ppToAdvertise":
				return ec.fieldContext_PlanITTools_ppToAdvertise(ctx, field)
			case "ppToAdvertiseOther":
				return ec.fieldContext_PlanITTools_ppToAdvertiseOther(ctx, field)
			case "ppToAdvertiseNote":
				return ec.fieldContext_PlanITTools_ppToAdvertiseNote(ctx, field)
			case "ppCollectScoreReview":
				return ec.fieldContext_PlanITTools_ppCollectScoreReview(ctx, field)
			case "ppCollectScoreReviewOther":
				return ec.fieldContext_PlanITTools_ppCollectScoreReviewOther(ctx, field)
			case "ppCollectScoreReviewNote":
				return ec.fieldContext_PlanITTools_ppCollectScoreReviewNote(ctx, field)
			case "ppAppSupportContractor":
				return ec.fieldContext_PlanITTools_ppAppSupportContractor(ctx, field)
			case "ppAppSupportContractorOther":
				return ec.fieldContext_PlanITTools_ppAppSupportContractorOther(ctx, field)
			case "ppAppSupportContractorNote":
				return ec.fieldContext_PlanITTools_ppAppSupportContractorNote(ctx, field)
			case "ppCommunicateWithParticipant":
				return ec.fieldContext_PlanITTools_ppCommunicateWithParticipant(ctx, field)
			case "ppCommunicateWithParticipantOther":
				return ec.fieldContext_PlanITTools_ppCommunicateWithParticipantOther(ctx, field)
			case "ppCommunicateWithParticipantNote":
				return ec.fieldContext_PlanITTools_ppCommunicateWithParticipantNote(ctx, field)
			case "ppManageProviderOverlap":
				return ec.fieldContext_PlanITTools_ppManageProviderOverlap(ctx, field)
			case "ppManageProviderOverlapOther":
				return ec.fieldContext_PlanITTools_ppManageProviderOverlapOther(ctx, field)
			case "ppManageProviderOverlapNote":
				return ec.fieldContext_PlanITTools_ppManageProviderOverlapNote(ctx, field)
			case "bManageBeneficiaryOverlap":
				return ec.fieldContext_PlanITTools_bManageBeneficiaryOverlap(ctx, field)
			case "bManageBeneficiaryOverlapOther":
				return ec.fieldContext_PlanITTools_bManageBeneficiaryOverlapOther(ctx, field)
			case "bManageBeneficiaryOverlapNote":
				return ec.fieldContext_PlanITTools_bManageBeneficiaryOverlapNote(ctx, field)
			case "oelHelpdeskSupport":
				return ec.fieldContext_PlanITTools_oelHelpdeskSupport(ctx, field)
			case "oelHelpdeskSupportOther":
				return ec.fieldContext_PlanITTools_oelHelpdeskSupportOther(ctx, field)
			case "oelHelpdeskSupportNote":
				return ec.fieldContext_PlanITTools_oelHelpdeskSupportNote(ctx, field)
			case "oelManageAco":
				return ec.fieldContext_PlanITTools_oelManageAco(ctx, field)
			case "oelManageAcoOther":
				return ec.fieldContext_PlanITTools_oelManageAcoOther(ctx, field)
			case "oelManageAcoNote":
				return ec.fieldContext_PlanITTools_oelManageAcoNote(ctx, field)
			case "oelPerformanceBenchmark":
				return ec.fieldContext_PlanITTools_oelPerformanceBenchmark(ctx, field)
			case "oelPerformanceBenchmarkOther":
				return ec.fieldContext_PlanITTools_oelPerformanceBenchmarkOther(ctx, field)
			case "oelPerformanceBenchmarkNote":
				return ec.fieldContext_PlanITTools_oelPerformanceBenchmarkNote(ctx, field)
			case "oelProcessAppeals":
				return ec.fieldContext_PlanITTools_oelProcessAppeals(ctx, field)
			case "oelProcessAppealsOther":
				return ec.fieldContext_PlanITTools_oelProcessAppealsOther(ctx, field)
			case "oelProcessAppealsNote":
				return ec.fieldContext_PlanITTools_oelProcessAppealsNote(ctx, field)
			case "oelEvaluationContractor":
				return ec.fieldContext_PlanITTools_oelEvaluationContractor(ctx, field)
			case "oelEvaluationContractorOther":
				return ec.fieldContext_PlanITTools_oelEvaluationContractorOther(ctx, field)
			case "oelEvaluationContractorNote":
				return ec.fieldContext_PlanITTools_oelEvaluationContractorNote(ctx, field)
			case "oelCollectData":
				return ec.fieldContext_PlanITTools_oelCollectData(ctx, field)
			case "oelCollectDataOther":
				return ec.fieldContext_PlanITTools_oelCollectDataOther(ctx, field)
			case "oelCollectDataNote":
				return ec.fieldContext_PlanITTools_oelCollectDataNote(ctx, field)
			case "oelObtainData":
				return ec.fieldContext_PlanITTools_oelObtainData(ctx, field)
			case "oelObtainDataOther":
				return ec.fieldContext_PlanITTools_oelObtainDataOther(ctx, field)
			case "oelObtainDataNote":
				return ec.fieldContext_PlanITTools_oelObtainDataNote(ctx, field)
			case "oelClaimsBasedMeasures":
				return ec.fieldContext_PlanITTools_oelClaimsBasedMeasures(ctx, field)
			case "oelClaimsBasedMeasuresOther":
				return ec.fieldContext_PlanITTools_oelClaimsBasedMeasuresOther(ctx, field)
			case "oelClaimsBasedMeasuresNote":
				return ec.fieldContext_PlanITTools_oelClaimsBasedMeasuresNote(ctx, field)
			case "oelQualityScores":
				return ec.fieldContext_PlanITTools_oelQualityScores(ctx, field)
			case "oelQualityScoresOther":
				return ec.fieldContext_PlanITTools_oelQualityScoresOther(ctx, field)
			case "oelQualityScoresNote":
				return ec.fieldContext_PlanITTools_oelQualityScoresNote(ctx, field)
			case "oelSendReports":
				return ec.fieldContext_PlanITTools_oelSendReports(ctx, field)
			case "oelSendReportsOther":
				return ec.fieldContext_PlanITTools_oelSendReportsOther(ctx, field)
			case "oelSendReportsNote":
				return ec.fieldContext_PlanITTools_oelSendReportsNote(ctx, field)
			case "oelLearningContractor":
				return ec.fieldContext_PlanITTools_oelLearningContractor(ctx, field)
			case "oelLearningContractorOther":
				return ec.fieldContext_PlanITTools_oelLearningContractorOther(ctx, field)
			case "oelLearningContractorNote":
				return ec.fieldContext_PlanITTools_oelLearningContractorNote(ctx, field)
			case "oelParticipantCollaboration":
				return ec.fieldContext_PlanITTools_oelParticipantCollaboration(ctx, field)
			case "oelParticipantCollaborationOther":
				return ec.fieldContext_PlanITTools_oelParticipantCollaborationOther(ctx, field)
			case "oelParticipantCollaborationNote":
				return ec.fieldContext_PlanITTools_oelParticipantCollaborationNote(ctx, field)
			case "oelEducateBeneficiaries":
				return ec.fieldContext_PlanITTools_oelEducateBeneficiaries(ctx, field)
			case "oelEducateBeneficiariesOther":
				return ec.fieldContext_PlanITTools_oelEducateBeneficiariesOther(ctx, field)
			case "oelEducateBeneficiariesNote":
				return ec.fieldContext_PlanITTools_oelEducateBeneficiariesNote(ctx, field)
			case "pMakeClaimsPayments":
				return ec.fieldContext_PlanITTools_pMakeClaimsPayments(ctx, field)
			case "pMakeClaimsPaymentsOther":
				return ec.fieldContext_PlanITTools_pMakeClaimsPaymentsOther(ctx, field)
			case "pMakeClaimsPaymentsNote":
				return ec.fieldContext_PlanITTools_pMakeClaimsPaymentsNote(ctx, field)
			case "pInformFfs":
				return ec.fieldContext_PlanITTools_pInformFfs(ctx, field)
			case "pInformFfsOther":
				return ec.fieldContext_PlanITTools_pInformFfsOther(ctx, field)
			case "pInformFfsNote":
				return ec.fieldContext_PlanITTools_pInformFfsNote(ctx, field)
			case "pNonClaimsBasedPayments":
				return ec.fieldContext_PlanITTools_pNonClaimsBasedPayments(ctx, field)
			case "pNonClaimsBasedPaymentsOther":
				return ec.fieldContext_PlanITTools_pNonClaimsBasedPaymentsOther(ctx, field)
			case "pNonClaimsBasedPaymentsNote":
				return ec.fieldContext_PlanITTools_pNonClaimsBasedPaymentsNote(ctx, field)
			case "pSharedSavingsPlan":
				return ec.fieldContext_PlanITTools_pSharedSavingsPlan(ctx, field)
			case "pSharedSavingsPlanOther":
				return ec.fieldContext_PlanITTools_pSharedSavingsPlanOther(ctx, field)
			case "pSharedSavingsPlanNote":
				return ec.fieldContext_PlanITTools_pSharedSavingsPlanNote(ctx, field)
			case "pRecoverPayments":
				return ec.fieldContext_PlanITTools_pRecoverPayments(ctx, field)
			case "pRecoverPaymentsOther":
				return ec.fieldContext_PlanITTools_pRecoverPaymentsOther(ctx, field)
			case "pRecoverPaymentsNote":
				return ec.fieldContext_PlanITTools_pRecoverPaymentsNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanITTools_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanITTools_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanITTools_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanITTools_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanITTools_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanITTools_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanITTools_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanITTools", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_status(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ModelStatus)
	fc.Result = res
	return ec.marshalNModelStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ModelStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_isFavorite(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_isFavorite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().IsFavorite(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_isFavorite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_isCollaborator(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_isCollaborator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().IsCollaborator(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_isCollaborator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_crTdls(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_crTdls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().CrTdls(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PlanCrTdl)
	fc.Result = res
	return ec.marshalNPlanCrTdl2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdlᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_crTdls(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCrTdl_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCrTdl_modelPlanID(ctx, field)
			case "idNumber":
				return ec.fieldContext_PlanCrTdl_idNumber(ctx, field)
			case "dateInitiated":
				return ec.fieldContext_PlanCrTdl_dateInitiated(ctx, field)
			case "title":
				return ec.fieldContext_PlanCrTdl_title(ctx, field)
			case "note":
				return ec.fieldContext_PlanCrTdl_note(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCrTdl_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCrTdl_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCrTdl_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCrTdl_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCrTdl", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModelPlan_nameHistory(ctx context.Context, field graphql.CollectedField, obj *models.ModelPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModelPlan_nameHistory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ModelPlan().NameHistory(rctx, obj, fc.Args["sort"].(models.SortDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModelPlan_nameHistory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModelPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_ModelPlan_nameHistory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createModelPlan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createModelPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateModelPlan(rctx, fc.Args["modelName"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ModelPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.ModelPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModelPlan)
	fc.Result = res
	return ec.marshalNModelPlan2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createModelPlan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModelPlan_id(ctx, field)
			case "modelName":
				return ec.fieldContext_ModelPlan_modelName(ctx, field)
			case "archived":
				return ec.fieldContext_ModelPlan_archived(ctx, field)
			case "createdBy":
				return ec.fieldContext_ModelPlan_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_ModelPlan_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ModelPlan_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ModelPlan_modifiedDts(ctx, field)
			case "basics":
				return ec.fieldContext_ModelPlan_basics(ctx, field)
			case "generalCharacteristics":
				return ec.fieldContext_ModelPlan_generalCharacteristics(ctx, field)
			case "participantsAndProviders":
				return ec.fieldContext_ModelPlan_participantsAndProviders(ctx, field)
			case "beneficiaries":
				return ec.fieldContext_ModelPlan_beneficiaries(ctx, field)
			case "opsEvalAndLearning":
				return ec.fieldContext_ModelPlan_opsEvalAndLearning(ctx, field)
			case "collaborators":
				return ec.fieldContext_ModelPlan_collaborators(ctx, field)
			case "documents":
				return ec.fieldContext_ModelPlan_documents(ctx, field)
			case "discussions":
				return ec.fieldContext_ModelPlan_discussions(ctx, field)
			case "payments":
				return ec.fieldContext_ModelPlan_payments(ctx, field)
			case "itTools":
				return ec.fieldContext_ModelPlan_itTools(ctx, field)
			case "status":
				return ec.fieldContext_ModelPlan_status(ctx, field)
			case "isFavorite":
				return ec.fieldContext_ModelPlan_isFavorite(ctx, field)
			case "isCollaborator":
				return ec.fieldContext_ModelPlan_isCollaborator(ctx, field)
			case "crTdls":
				return ec.fieldContext_ModelPlan_crTdls(ctx, field)
			case "nameHistory":
				return ec.fieldContext_ModelPlan_nameHistory(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModelPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createModelPlan_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateModelPlan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateModelPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateModelPlan(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.ModelPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.ModelPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModelPlan)
	fc.Result = res
	return ec.marshalNModelPlan2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateModelPlan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModelPlan_id(ctx, field)
			case "modelName":
				return ec.fieldContext_ModelPlan_modelName(ctx, field)
			case "archived":
				return ec.fieldContext_ModelPlan_archived(ctx, field)
			case "createdBy":
				return ec.fieldContext_ModelPlan_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_ModelPlan_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ModelPlan_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ModelPlan_modifiedDts(ctx, field)
			case "basics":
				return ec.fieldContext_ModelPlan_basics(ctx, field)
			case "generalCharacteristics":
				return ec.fieldContext_ModelPlan_generalCharacteristics(ctx, field)
			case "participantsAndProviders":
				return ec.fieldContext_ModelPlan_participantsAndProviders(ctx, field)
			case "beneficiaries":
				return ec.fieldContext_ModelPlan_beneficiaries(ctx, field)
			case "opsEvalAndLearning":
				return ec.fieldContext_ModelPlan_opsEvalAndLearning(ctx, field)
			case "collaborators":
				return ec.fieldContext_ModelPlan_collaborators(ctx, field)
			case "documents":
				return ec.fieldContext_ModelPlan_documents(ctx, field)
			case "discussions":
				return ec.fieldContext_ModelPlan_discussions(ctx, field)
			case "payments":
				return ec.fieldContext_ModelPlan_payments(ctx, field)
			case "itTools":
				return ec.fieldContext_ModelPlan_itTools(ctx, field)
			case "status":
				return ec.fieldContext_ModelPlan_status(ctx, field)
			case "isFavorite":
				return ec.fieldContext_ModelPlan_isFavorite(ctx, field)
			case "isCollaborator":
				return ec.fieldContext_ModelPlan_isCollaborator(ctx, field)
			case "crTdls":
				return ec.fieldContext_ModelPlan_crTdls(ctx, field)
			case "nameHistory":
				return ec.fieldContext_ModelPlan_nameHistory(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModelPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateModelPlan_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPlanCollaborator(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPlanCollaborator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreatePlanCollaborator(rctx, fc.Args["input"].(model.PlanCollaboratorCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanCollaborator); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanCollaborator`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCollaborator)
	fc.Result = res
	return ec.marshalNPlanCollaborator2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaborator(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPlanCollaborator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCollaborator_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCollaborator_modelPlanID(ctx, field)
			case "euaUserID":
				return ec.fieldContext_PlanCollaborator_euaUserID(ctx, field)
			case "fullName":
				return ec.fieldContext_PlanCollaborator_fullName(ctx, field)
			case "teamRole":
				return ec.fieldContext_PlanCollaborator_teamRole(ctx, field)
			case "email":
				return ec.fieldContext_PlanCollaborator_email(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCollaborator_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCollaborator_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCollaborator_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCollaborator_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCollaborator", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPlanCollaborator_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanCollaborator(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanCollaborator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanCollaborator(rctx, fc.Args["id"].(uuid.UUID), fc.Args["newRole"].(models.TeamRole))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanCollaborator); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanCollaborator`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCollaborator)
	fc.Result = res
	return ec.marshalNPlanCollaborator2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaborator(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanCollaborator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCollaborator_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCollaborator_modelPlanID(ctx, field)
			case "euaUserID":
				return ec.fieldContext_PlanCollaborator_euaUserID(ctx, field)
			case "fullName":
				return ec.fieldContext_PlanCollaborator_fullName(ctx, field)
			case "teamRole":
				return ec.fieldContext_PlanCollaborator_teamRole(ctx, field)
			case "email":
				return ec.fieldContext_PlanCollaborator_email(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCollaborator_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCollaborator_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCollaborator_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCollaborator_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCollaborator", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanCollaborator_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePlanCollaborator(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePlanCollaborator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePlanCollaborator(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanCollaborator); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanCollaborator`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCollaborator)
	fc.Result = res
	return ec.marshalNPlanCollaborator2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaborator(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePlanCollaborator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCollaborator_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCollaborator_modelPlanID(ctx, field)
			case "euaUserID":
				return ec.fieldContext_PlanCollaborator_euaUserID(ctx, field)
			case "fullName":
				return ec.fieldContext_PlanCollaborator_fullName(ctx, field)
			case "teamRole":
				return ec.fieldContext_PlanCollaborator_teamRole(ctx, field)
			case "email":
				return ec.fieldContext_PlanCollaborator_email(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCollaborator_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCollaborator_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCollaborator_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCollaborator_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCollaborator", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePlanCollaborator_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanBasics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanBasics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanBasics(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanBasics); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanBasics`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanBasics)
	fc.Result = res
	return ec.marshalNPlanBasics2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBasics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanBasics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanBasics_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanBasics_modelPlanID(ctx, field)
			case "modelCategory":
				return ec.fieldContext_PlanBasics_modelCategory(ctx, field)
			case "cmsCenters":
				return ec.fieldContext_PlanBasics_cmsCenters(ctx, field)
			case "cmsOther":
				return ec.fieldContext_PlanBasics_cmsOther(ctx, field)
			case "cmmiGroups":
				return ec.fieldContext_PlanBasics_cmmiGroups(ctx, field)
			case "modelType":
				return ec.fieldContext_PlanBasics_modelType(ctx, field)
			case "problem":
				return ec.fieldContext_PlanBasics_problem(ctx, field)
			case "goal":
				return ec.fieldContext_PlanBasics_goal(ctx, field)
			case "testInterventions":
				return ec.fieldContext_PlanBasics_testInterventions(ctx, field)
			case "note":
				return ec.fieldContext_PlanBasics_note(ctx, field)
			case "completeICIP":
				return ec.fieldContext_PlanBasics_completeICIP(ctx, field)
			case "clearanceStarts":
				return ec.fieldContext_PlanBasics_clearanceStarts(ctx, field)
			case "clearanceEnds":
				return ec.fieldContext_PlanBasics_clearanceEnds(ctx, field)
			case "announced":
				return ec.fieldContext_PlanBasics_announced(ctx, field)
			case "applicationsStart":
				return ec.fieldContext_PlanBasics_applicationsStart(ctx, field)
			case "applicationsEnd":
				return ec.fieldContext_PlanBasics_applicationsEnd(ctx, field)
			case "performancePeriodStarts":
				return ec.fieldContext_PlanBasics_performancePeriodStarts(ctx, field)
			case "performancePeriodEnds":
				return ec.fieldContext_PlanBasics_performancePeriodEnds(ctx, field)
			case "wrapUpEnds":
				return ec.fieldContext_PlanBasics_wrapUpEnds(ctx, field)
			case "highLevelNote":
				return ec.fieldContext_PlanBasics_highLevelNote(ctx, field)
			case "phasedIn":
				return ec.fieldContext_PlanBasics_phasedIn(ctx, field)
			case "phasedInNote":
				return ec.fieldContext_PlanBasics_phasedInNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanBasics_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanBasics_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanBasics_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanBasics_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanBasics_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanBasics_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanBasics_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanBasics", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanBasics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanGeneralCharacteristics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanGeneralCharacteristics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanGeneralCharacteristics(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanGeneralCharacteristics); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanGeneralCharacteristics`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanGeneralCharacteristics)
	fc.Result = res
	return ec.marshalNPlanGeneralCharacteristics2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanGeneralCharacteristics(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanGeneralCharacteristics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanGeneralCharacteristics_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanGeneralCharacteristics_modelPlanID(ctx, field)
			case "isNewModel":
				return ec.fieldContext_PlanGeneralCharacteristics_isNewModel(ctx, field)
			case "existingModel":
				return ec.fieldContext_PlanGeneralCharacteristics_existingModel(ctx, field)
			case "resemblesExistingModel":
				return ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModel(ctx, field)
			case "resemblesExistingModelWhich":
				return ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelWhich(ctx, field)
			case "resemblesExistingModelHow":
				return ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelHow(ctx, field)
			case "resemblesExistingModelNote":
				return ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelNote(ctx, field)
			case "hasComponentsOrTracks":
				return ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracks(ctx, field)
			case "hasComponentsOrTracksDiffer":
				return ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksDiffer(ctx, field)
			case "hasComponentsOrTracksNote":
				return ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksNote(ctx, field)
			case "alternativePaymentModel":
				return ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModel(ctx, field)
			case "alternativePaymentModelTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModelTypes(ctx, field)
			case "alternativePaymentModelNote":
				return ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModelNote(ctx, field)
			case "keyCharacteristics":
				return ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristics(ctx, field)
			case "keyCharacteristicsOther":
				return ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristicsOther(ctx, field)
			case "keyCharacteristicsNote":
				return ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristicsNote(ctx, field)
			case "collectPlanBids":
				return ec.fieldContext_PlanGeneralCharacteristics_collectPlanBids(ctx, field)
			case "collectPlanBidsNote":
				return ec.fieldContext_PlanGeneralCharacteristics_collectPlanBidsNote(ctx, field)
			case "managePartCDEnrollment":
				return ec.fieldContext_PlanGeneralCharacteristics_managePartCDEnrollment(ctx, field)
			case "managePartCDEnrollmentNote":
				return ec.fieldContext_PlanGeneralCharacteristics_managePartCDEnrollmentNote(ctx, field)
			case "planContactUpdated":
				return ec.fieldContext_PlanGeneralCharacteristics_planContactUpdated(ctx, field)
			case "planContactUpdatedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_planContactUpdatedNote(ctx, field)
			case "careCoordinationInvolved":
				return ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolved(ctx, field)
			case "careCoordinationInvolvedDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedDescription(ctx, field)
			case "careCoordinationInvolvedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedNote(ctx, field)
			case "additionalServicesInvolved":
				return ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolved(ctx, field)
			case "additionalServicesInvolvedDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedDescription(ctx, field)
			case "additionalServicesInvolvedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedNote(ctx, field)
			case "communityPartnersInvolved":
				return ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolved(ctx, field)
			case "communityPartnersInvolvedDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedDescription(ctx, field)
			case "communityPartnersInvolvedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedNote(ctx, field)
			case "geographiesTargeted":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargeted(ctx, field)
			case "geographiesTargetedTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypes(ctx, field)
			case "geographiesTargetedTypesOther":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypesOther(ctx, field)
			case "geographiesTargetedAppliedTo":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedTo(ctx, field)
			case "geographiesTargetedAppliedToOther":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedToOther(ctx, field)
			case "geographiesTargetedNote":
				return ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedNote(ctx, field)
			case "participationOptions":
				return ec.fieldContext_PlanGeneralCharacteristics_participationOptions(ctx, field)
			case "participationOptionsNote":
				return ec.fieldContext_PlanGeneralCharacteristics_participationOptionsNote(ctx, field)
			case "agreementTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_agreementTypes(ctx, field)
			case "agreementTypesOther":
				return ec.fieldContext_PlanGeneralCharacteristics_agreementTypesOther(ctx, field)
			case "multiplePatricipationAgreementsNeeded":
				return ec.fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeeded(ctx, field)
			case "multiplePatricipationAgreementsNeededNote":
				return ec.fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeededNote(ctx, field)
			case "rulemakingRequired":
				return ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequired(ctx, field)
			case "rulemakingRequiredDescription":
				return ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequiredDescription(ctx, field)
			case "rulemakingRequiredNote":
				return ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequiredNote(ctx, field)
			case "authorityAllowances":
				return ec.fieldContext_PlanGeneralCharacteristics_authorityAllowances(ctx, field)
			case "authorityAllowancesOther":
				return ec.fieldContext_PlanGeneralCharacteristics_authorityAllowancesOther(ctx, field)
			case "authorityAllowancesNote":
				return ec.fieldContext_PlanGeneralCharacteristics_authorityAllowancesNote(ctx, field)
			case "waiversRequired":
				return ec.fieldContext_PlanGeneralCharacteristics_waiversRequired(ctx, field)
			case "waiversRequiredTypes":
				return ec.fieldContext_PlanGeneralCharacteristics_waiversRequiredTypes(ctx, field)
			case "waiversRequiredNote":
				return ec.fieldContext_PlanGeneralCharacteristics_waiversRequiredNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanGeneralCharacteristics_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanGeneralCharacteristics_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanGeneralCharacteristics_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanGeneralCharacteristics_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanGeneralCharacteristics_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanGeneralCharacteristics_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanGeneralCharacteristics", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanGeneralCharacteristics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanBeneficiaries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanBeneficiaries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanBeneficiaries(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanBeneficiaries); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanBeneficiaries`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanBeneficiaries)
	fc.Result = res
	return ec.marshalNPlanBeneficiaries2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBeneficiaries(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanBeneficiaries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanBeneficiaries_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanBeneficiaries_modelPlanID(ctx, field)
			case "beneficiaries":
				return ec.fieldContext_PlanBeneficiaries_beneficiaries(ctx, field)
			case "beneficiariesOther":
				return ec.fieldContext_PlanBeneficiaries_beneficiariesOther(ctx, field)
			case "beneficiariesNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiariesNote(ctx, field)
			case "treatDualElligibleDifferent":
				return ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferent(ctx, field)
			case "treatDualElligibleDifferentHow":
				return ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferentHow(ctx, field)
			case "treatDualElligibleDifferentNote":
				return ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferentNote(ctx, field)
			case "excludeCertainCharacteristics":
				return ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristics(ctx, field)
			case "excludeCertainCharacteristicsCriteria":
				return ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsCriteria(ctx, field)
			case "excludeCertainCharacteristicsNote":
				return ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsNote(ctx, field)
			case "numberPeopleImpacted":
				return ec.fieldContext_PlanBeneficiaries_numberPeopleImpacted(ctx, field)
			case "estimateConfidence":
				return ec.fieldContext_PlanBeneficiaries_estimateConfidence(ctx, field)
			case "confidenceNote":
				return ec.fieldContext_PlanBeneficiaries_confidenceNote(ctx, field)
			case "beneficiarySelectionMethod":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionMethod(ctx, field)
			case "beneficiarySelectionOther":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionOther(ctx, field)
			case "beneficiarySelectionNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionNote(ctx, field)
			case "beneficiarySelectionFrequency":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequency(ctx, field)
			case "beneficiarySelectionFrequencyOther":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyOther(ctx, field)
			case "beneficiarySelectionFrequencyNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyNote(ctx, field)
			case "beneficiaryOverlap":
				return ec.fieldContext_PlanBeneficiaries_beneficiaryOverlap(ctx, field)
			case "beneficiaryOverlapNote":
				return ec.fieldContext_PlanBeneficiaries_beneficiaryOverlapNote(ctx, field)
			case "precedenceRules":
				return ec.fieldContext_PlanBeneficiaries_precedenceRules(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanBeneficiaries_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanBeneficiaries_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanBeneficiaries_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanBeneficiaries_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanBeneficiaries_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanBeneficiaries_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanBeneficiaries_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanBeneficiaries", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanBeneficiaries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanParticipantsAndProviders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanParticipantsAndProviders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanParticipantsAndProviders(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanParticipantsAndProviders); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanParticipantsAndProviders`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanParticipantsAndProviders)
	fc.Result = res
	return ec.marshalNPlanParticipantsAndProviders2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanParticipantsAndProviders(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanParticipantsAndProviders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanParticipantsAndProviders_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanParticipantsAndProviders_modelPlanID(ctx, field)
			case "participants":
				return ec.fieldContext_PlanParticipantsAndProviders_participants(ctx, field)
			case "medicareProviderType":
				return ec.fieldContext_PlanParticipantsAndProviders_medicareProviderType(ctx, field)
			case "statesEngagement":
				return ec.fieldContext_PlanParticipantsAndProviders_statesEngagement(ctx, field)
			case "participantsOther":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsOther(ctx, field)
			case "participantsNote":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsNote(ctx, field)
			case "participantsCurrentlyInModels":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModels(ctx, field)
			case "participantsCurrentlyInModelsNote":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModelsNote(ctx, field)
			case "modelApplicationLevel":
				return ec.fieldContext_PlanParticipantsAndProviders_modelApplicationLevel(ctx, field)
			case "expectedNumberOfParticipants":
				return ec.fieldContext_PlanParticipantsAndProviders_expectedNumberOfParticipants(ctx, field)
			case "estimateConfidence":
				return ec.fieldContext_PlanParticipantsAndProviders_estimateConfidence(ctx, field)
			case "confidenceNote":
				return ec.fieldContext_PlanParticipantsAndProviders_confidenceNote(ctx, field)
			case "recruitmentMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_recruitmentMethod(ctx, field)
			case "recruitmentOther":
				return ec.fieldContext_PlanParticipantsAndProviders_recruitmentOther(ctx, field)
			case "recruitmentNote":
				return ec.fieldContext_PlanParticipantsAndProviders_recruitmentNote(ctx, field)
			case "selectionMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_selectionMethod(ctx, field)
			case "selectionOther":
				return ec.fieldContext_PlanParticipantsAndProviders_selectionOther(ctx, field)
			case "selectionNote":
				return ec.fieldContext_PlanParticipantsAndProviders_selectionNote(ctx, field)
			case "communicationMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_communicationMethod(ctx, field)
			case "communicationMethodOther":
				return ec.fieldContext_PlanParticipantsAndProviders_communicationMethodOther(ctx, field)
			case "communicationNote":
				return ec.fieldContext_PlanParticipantsAndProviders_communicationNote(ctx, field)
			case "participantAssumeRisk":
				return ec.fieldContext_PlanParticipantsAndProviders_participantAssumeRisk(ctx, field)
			case "riskType":
				return ec.fieldContext_PlanParticipantsAndProviders_riskType(ctx, field)
			case "riskOther":
				return ec.fieldContext_PlanParticipantsAndProviders_riskOther(ctx, field)
			case "riskNote":
				return ec.fieldContext_PlanParticipantsAndProviders_riskNote(ctx, field)
			case "willRiskChange":
				return ec.fieldContext_PlanParticipantsAndProviders_willRiskChange(ctx, field)
			case "willRiskChangeNote":
				return ec.fieldContext_PlanParticipantsAndProviders_willRiskChangeNote(ctx, field)
			case "coordinateWork":
				return ec.fieldContext_PlanParticipantsAndProviders_coordinateWork(ctx, field)
			case "coordinateWorkNote":
				return ec.fieldContext_PlanParticipantsAndProviders_coordinateWorkNote(ctx, field)
			case "gainsharePayments":
				return ec.fieldContext_PlanParticipantsAndProviders_gainsharePayments(ctx, field)
			case "gainsharePaymentsTrack":
				return ec.fieldContext_PlanParticipantsAndProviders_gainsharePaymentsTrack(ctx, field)
			case "gainsharePaymentsNote":
				return ec.fieldContext_PlanParticipantsAndProviders_gainsharePaymentsNote(ctx, field)
			case "participantsIds":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsIds(ctx, field)
			case "participantsIdsOther":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsIdsOther(ctx, field)
			case "participantsIDSNote":
				return ec.fieldContext_PlanParticipantsAndProviders_participantsIDSNote(ctx, field)
			case "providerAdditionFrequency":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequency(ctx, field)
			case "providerAdditionFrequencyOther":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyOther(ctx, field)
			case "providerAdditionFrequencyNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyNote(ctx, field)
			case "providerAddMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAddMethod(ctx, field)
			case "providerAddMethodOther":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAddMethodOther(ctx, field)
			case "providerAddMethodNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerAddMethodNote(ctx, field)
			case "providerLeaveMethod":
				return ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethod(ctx, field)
			case "providerLeaveMethodOther":
				return ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethodOther(ctx, field)
			case "providerLeaveMethodNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethodNote(ctx, field)
			case "providerOverlap":
				return ec.fieldContext_PlanParticipantsAndProviders_providerOverlap(ctx, field)
			case "providerOverlapHierarchy":
				return ec.fieldContext_PlanParticipantsAndProviders_providerOverlapHierarchy(ctx, field)
			case "providerOverlapNote":
				return ec.fieldContext_PlanParticipantsAndProviders_providerOverlapNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanParticipantsAndProviders_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanParticipantsAndProviders_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanParticipantsAndProviders_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanParticipantsAndProviders_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanParticipantsAndProviders_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanParticipantsAndProviders_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanParticipantsAndProviders", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanParticipantsAndProviders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanItTools(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanItTools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanItTools(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanITTools); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanITTools`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanITTools)
	fc.Result = res
	return ec.marshalNPlanITTools2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanITTools(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanItTools(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanITTools_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanITTools_modelPlanID(ctx, field)
			case "gcPartCD":
				return ec.fieldContext_PlanITTools_gcPartCD(ctx, field)
			case "gcPartCDOther":
				return ec.fieldContext_PlanITTools_gcPartCDOther(ctx, field)
			case "gcPartCDNote":
				return ec.fieldContext_PlanITTools_gcPartCDNote(ctx, field)
			case "gcCollectBids":
				return ec.fieldContext_PlanITTools_gcCollectBids(ctx, field)
			case "gcCollectBidsOther":
				return ec.fieldContext_PlanITTools_gcCollectBidsOther(ctx, field)
			case "gcCollectBidsNote":
				return ec.fieldContext_PlanITTools_gcCollectBidsNote(ctx, field)
			case "gcUpdateContract":
				return ec.fieldContext_PlanITTools_gcUpdateContract(ctx, field)
			case "gcUpdateContractOther":
				return ec.fieldContext_PlanITTools_gcUpdateContractOther(ctx, field)
			case "gcUpdateContractNote":
				return ec.fieldContext_PlanITTools_gcUpdateContractNote(ctx, field)
			case "ppToAdvertise":
				return ec.fieldContext_PlanITTools_ppToAdvertise(ctx, field)
			case "ppToAdvertiseOther":
				return ec.fieldContext_PlanITTools_ppToAdvertiseOther(ctx, field)
			case "ppToAdvertiseNote":
				return ec.fieldContext_PlanITTools_ppToAdvertiseNote(ctx, field)
			case "ppCollectScoreReview":
				return ec.fieldContext_PlanITTools_ppCollectScoreReview(ctx, field)
			case "ppCollectScoreReviewOther":
				return ec.fieldContext_PlanITTools_ppCollectScoreReviewOther(ctx, field)
			case "ppCollectScoreReviewNote":
				return ec.fieldContext_PlanITTools_ppCollectScoreReviewNote(ctx, field)
			case "ppAppSupportContractor":
				return ec.fieldContext_PlanITTools_ppAppSupportContractor(ctx, field)
			case "ppAppSupportContractorOther":
				return ec.fieldContext_PlanITTools_ppAppSupportContractorOther(ctx, field)
			case "ppAppSupportContractorNote":
				return ec.fieldContext_PlanITTools_ppAppSupportContractorNote(ctx, field)
			case "ppCommunicateWithParticipant":
				return ec.fieldContext_PlanITTools_ppCommunicateWithParticipant(ctx, field)
			case "ppCommunicateWithParticipantOther":
				return ec.fieldContext_PlanITTools_ppCommunicateWithParticipantOther(ctx, field)
			case "ppCommunicateWithParticipantNote":
				return ec.fieldContext_PlanITTools_ppCommunicateWithParticipantNote(ctx, field)
			case "ppManageProviderOverlap":
				return ec.fieldContext_PlanITTools_ppManageProviderOverlap(ctx, field)
			case "ppManageProviderOverlapOther":
				return ec.fieldContext_PlanITTools_ppManageProviderOverlapOther(ctx, field)
			case "ppManageProviderOverlapNote":
				return ec.fieldContext_PlanITTools_ppManageProviderOverlapNote(ctx, field)
			case "bManageBeneficiaryOverlap":
				return ec.fieldContext_PlanITTools_bManageBeneficiaryOverlap(ctx, field)
			case "bManageBeneficiaryOverlapOther":
				return ec.fieldContext_PlanITTools_bManageBeneficiaryOverlapOther(ctx, field)
			case "bManageBeneficiaryOverlapNote":
				return ec.fieldContext_PlanITTools_bManageBeneficiaryOverlapNote(ctx, field)
			case "oelHelpdeskSupport":
				return ec.fieldContext_PlanITTools_oelHelpdeskSupport(ctx, field)
			case "oelHelpdeskSupportOther":
				return ec.fieldContext_PlanITTools_oelHelpdeskSupportOther(ctx, field)
			case "oelHelpdeskSupportNote":
				return ec.fieldContext_PlanITTools_oelHelpdeskSupportNote(ctx, field)
			case "oelManageAco":
				return ec.fieldContext_PlanITTools_oelManageAco(ctx, field)
			case "oelManageAcoOther":
				return ec.fieldContext_PlanITTools_oelManageAcoOther(ctx, field)
			case "oelManageAcoNote":
				return ec.fieldContext_PlanITTools_oelManageAcoNote(ctx, field)
			case "oelPerformanceBenchmark":
				return ec.fieldContext_PlanITTools_oelPerformanceBenchmark(ctx, field)
			case "oelPerformanceBenchmarkOther":
				return ec.fieldContext_PlanITTools_oelPerformanceBenchmarkOther(ctx, field)
			case "oelPerformanceBenchmarkNote":
				return ec.fieldContext_PlanITTools_oelPerformanceBenchmarkNote(ctx, field)
			case "oelProcessAppeals":
				return ec.fieldContext_PlanITTools_oelProcessAppeals(ctx, field)
			case "oelProcessAppealsOther":
				return ec.fieldContext_PlanITTools_oelProcessAppealsOther(ctx, field)
			case "oelProcessAppealsNote":
				return ec.fieldContext_PlanITTools_oelProcessAppealsNote(ctx, field)
			case "oelEvaluationContractor":
				return ec.fieldContext_PlanITTools_oelEvaluationContractor(ctx, field)
			case "oelEvaluationContractorOther":
				return ec.fieldContext_PlanITTools_oelEvaluationContractorOther(ctx, field)
			case "oelEvaluationContractorNote":
				return ec.fieldContext_PlanITTools_oelEvaluationContractorNote(ctx, field)
			case "oelCollectData":
				return ec.fieldContext_PlanITTools_oelCollectData(ctx, field)
			case "oelCollectDataOther":
				return ec.fieldContext_PlanITTools_oelCollectDataOther(ctx, field)
			case "oelCollectDataNote":
				return ec.fieldContext_PlanITTools_oelCollectDataNote(ctx, field)
			case "oelObtainData":
				return ec.fieldContext_PlanITTools_oelObtainData(ctx, field)
			case "oelObtainDataOther":
				return ec.fieldContext_PlanITTools_oelObtainDataOther(ctx, field)
			case "oelObtainDataNote":
				return ec.fieldContext_PlanITTools_oelObtainDataNote(ctx, field)
			case "oelClaimsBasedMeasures":
				return ec.fieldContext_PlanITTools_oelClaimsBasedMeasures(ctx, field)
			case "oelClaimsBasedMeasuresOther":
				return ec.fieldContext_PlanITTools_oelClaimsBasedMeasuresOther(ctx, field)
			case "oelClaimsBasedMeasuresNote":
				return ec.fieldContext_PlanITTools_oelClaimsBasedMeasuresNote(ctx, field)
			case "oelQualityScores":
				return ec.fieldContext_PlanITTools_oelQualityScores(ctx, field)
			case "oelQualityScoresOther":
				return ec.fieldContext_PlanITTools_oelQualityScoresOther(ctx, field)
			case "oelQualityScoresNote":
				return ec.fieldContext_PlanITTools_oelQualityScoresNote(ctx, field)
			case "oelSendReports":
				return ec.fieldContext_PlanITTools_oelSendReports(ctx, field)
			case "oelSendReportsOther":
				return ec.fieldContext_PlanITTools_oelSendReportsOther(ctx, field)
			case "oelSendReportsNote":
				return ec.fieldContext_PlanITTools_oelSendReportsNote(ctx, field)
			case "oelLearningContractor":
				return ec.fieldContext_PlanITTools_oelLearningContractor(ctx, field)
			case "oelLearningContractorOther":
				return ec.fieldContext_PlanITTools_oelLearningContractorOther(ctx, field)
			case "oelLearningContractorNote":
				return ec.fieldContext_PlanITTools_oelLearningContractorNote(ctx, field)
			case "oelParticipantCollaboration":
				return ec.fieldContext_PlanITTools_oelParticipantCollaboration(ctx, field)
			case "oelParticipantCollaborationOther":
				return ec.fieldContext_PlanITTools_oelParticipantCollaborationOther(ctx, field)
			case "oelParticipantCollaborationNote":
				return ec.fieldContext_PlanITTools_oelParticipantCollaborationNote(ctx, field)
			case "oelEducateBeneficiaries":
				return ec.fieldContext_PlanITTools_oelEducateBeneficiaries(ctx, field)
			case "oelEducateBeneficiariesOther":
				return ec.fieldContext_PlanITTools_oelEducateBeneficiariesOther(ctx, field)
			case "oelEducateBeneficiariesNote":
				return ec.fieldContext_PlanITTools_oelEducateBeneficiariesNote(ctx, field)
			case "pMakeClaimsPayments":
				return ec.fieldContext_PlanITTools_pMakeClaimsPayments(ctx, field)
			case "pMakeClaimsPaymentsOther":
				return ec.fieldContext_PlanITTools_pMakeClaimsPaymentsOther(ctx, field)
			case "pMakeClaimsPaymentsNote":
				return ec.fieldContext_PlanITTools_pMakeClaimsPaymentsNote(ctx, field)
			case "pInformFfs":
				return ec.fieldContext_PlanITTools_pInformFfs(ctx, field)
			case "pInformFfsOther":
				return ec.fieldContext_PlanITTools_pInformFfsOther(ctx, field)
			case "pInformFfsNote":
				return ec.fieldContext_PlanITTools_pInformFfsNote(ctx, field)
			case "pNonClaimsBasedPayments":
				return ec.fieldContext_PlanITTools_pNonClaimsBasedPayments(ctx, field)
			case "pNonClaimsBasedPaymentsOther":
				return ec.fieldContext_PlanITTools_pNonClaimsBasedPaymentsOther(ctx, field)
			case "pNonClaimsBasedPaymentsNote":
				return ec.fieldContext_PlanITTools_pNonClaimsBasedPaymentsNote(ctx, field)
			case "pSharedSavingsPlan":
				return ec.fieldContext_PlanITTools_pSharedSavingsPlan(ctx, field)
			case "pSharedSavingsPlanOther":
				return ec.fieldContext_PlanITTools_pSharedSavingsPlanOther(ctx, field)
			case "pSharedSavingsPlanNote":
				return ec.fieldContext_PlanITTools_pSharedSavingsPlanNote(ctx, field)
			case "pRecoverPayments":
				return ec.fieldContext_PlanITTools_pRecoverPayments(ctx, field)
			case "pRecoverPaymentsOther":
				return ec.fieldContext_PlanITTools_pRecoverPaymentsOther(ctx, field)
			case "pRecoverPaymentsNote":
				return ec.fieldContext_PlanITTools_pRecoverPaymentsNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanITTools_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanITTools_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanITTools_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanITTools_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanITTools_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanITTools_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanITTools_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanITTools", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanItTools_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanOpsEvalAndLearning(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanOpsEvalAndLearning(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanOpsEvalAndLearning(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanOpsEvalAndLearning); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanOpsEvalAndLearning`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanOpsEvalAndLearning)
	fc.Result = res
	return ec.marshalNPlanOpsEvalAndLearning2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanOpsEvalAndLearning(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanOpsEvalAndLearning(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanOpsEvalAndLearning_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelPlanID(ctx, field)
			case "agencyOrStateHelp":
				return ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelp(ctx, field)
			case "agencyOrStateHelpOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpOther(ctx, field)
			case "agencyOrStateHelpNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpNote(ctx, field)
			case "stakeholders":
				return ec.fieldContext_PlanOpsEvalAndLearning_stakeholders(ctx, field)
			case "stakeholdersOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_stakeholdersOther(ctx, field)
			case "stakeholdersNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_stakeholdersNote(ctx, field)
			case "helpdeskUse":
				return ec.fieldContext_PlanOpsEvalAndLearning_helpdeskUse(ctx, field)
			case "helpdeskUseNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_helpdeskUseNote(ctx, field)
			case "contractorSupport":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupport(ctx, field)
			case "contractorSupportOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportOther(ctx, field)
			case "contractorSupportHow":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportHow(ctx, field)
			case "contractorSupportNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportNote(ctx, field)
			case "iddocSupport":
				return ec.fieldContext_PlanOpsEvalAndLearning_iddocSupport(ctx, field)
			case "iddocSupportNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_iddocSupportNote(ctx, field)
			case "technicalContactsIdentified":
				return ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentified(ctx, field)
			case "technicalContactsIdentifiedDetail":
				return ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedDetail(ctx, field)
			case "technicalContactsIdentifiedNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedNote(ctx, field)
			case "captureParticipantInfo":
				return ec.fieldContext_PlanOpsEvalAndLearning_captureParticipantInfo(ctx, field)
			case "captureParticipantInfoNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_captureParticipantInfoNote(ctx, field)
			case "icdOwner":
				return ec.fieldContext_PlanOpsEvalAndLearning_icdOwner(ctx, field)
			case "draftIcdDueDate":
				return ec.fieldContext_PlanOpsEvalAndLearning_draftIcdDueDate(ctx, field)
			case "icdNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_icdNote(ctx, field)
			case "uatNeeds":
				return ec.fieldContext_PlanOpsEvalAndLearning_uatNeeds(ctx, field)
			case "stcNeeds":
				return ec.fieldContext_PlanOpsEvalAndLearning_stcNeeds(ctx, field)
			case "testingTimelines":
				return ec.fieldContext_PlanOpsEvalAndLearning_testingTimelines(ctx, field)
			case "testingNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_testingNote(ctx, field)
			case "dataMonitoringFileTypes":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileTypes(ctx, field)
			case "dataMonitoringFileOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileOther(ctx, field)
			case "dataResponseType":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataResponseType(ctx, field)
			case "dataResponseFileFrequency":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataResponseFileFrequency(ctx, field)
			case "dataFullTimeOrIncremental":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataFullTimeOrIncremental(ctx, field)
			case "eftSetUp":
				return ec.fieldContext_PlanOpsEvalAndLearning_eftSetUp(ctx, field)
			case "unsolicitedAdjustmentsIncluded":
				return ec.fieldContext_PlanOpsEvalAndLearning_unsolicitedAdjustmentsIncluded(ctx, field)
			case "dataFlowDiagramsNeeded":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataFlowDiagramsNeeded(ctx, field)
			case "produceBenefitEnhancementFiles":
				return ec.fieldContext_PlanOpsEvalAndLearning_produceBenefitEnhancementFiles(ctx, field)
			case "fileNamingConventions":
				return ec.fieldContext_PlanOpsEvalAndLearning_fileNamingConventions(ctx, field)
			case "dataMonitoringNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringNote(ctx, field)
			case "benchmarkForPerformance":
				return ec.fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformance(ctx, field)
			case "benchmarkForPerformanceNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformanceNote(ctx, field)
			case "computePerformanceScores":
				return ec.fieldContext_PlanOpsEvalAndLearning_computePerformanceScores(ctx, field)
			case "computePerformanceScoresNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_computePerformanceScoresNote(ctx, field)
			case "riskAdjustPerformance":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustPerformance(ctx, field)
			case "riskAdjustFeedback":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustFeedback(ctx, field)
			case "riskAdjustPayments":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustPayments(ctx, field)
			case "riskAdjustOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustOther(ctx, field)
			case "riskAdjustNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustNote(ctx, field)
			case "appealPerformance":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealPerformance(ctx, field)
			case "appealFeedback":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealFeedback(ctx, field)
			case "appealPayments":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealPayments(ctx, field)
			case "appealOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealOther(ctx, field)
			case "appealNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_appealNote(ctx, field)
			case "evaluationApproaches":
				return ec.fieldContext_PlanOpsEvalAndLearning_evaluationApproaches(ctx, field)
			case "evaluationApproachOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_evaluationApproachOther(ctx, field)
			case "evalutaionApproachNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_evalutaionApproachNote(ctx, field)
			case "ccmInvolvment":
				return ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvment(ctx, field)
			case "ccmInvolvmentOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentOther(ctx, field)
			case "ccmInvolvmentNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentNote(ctx, field)
			case "dataNeededForMonitoring":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoring(ctx, field)
			case "dataNeededForMonitoringOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringOther(ctx, field)
			case "dataNeededForMonitoringNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringNote(ctx, field)
			case "dataToSendParticicipants":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipants(ctx, field)
			case "dataToSendParticicipantsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsOther(ctx, field)
			case "dataToSendParticicipantsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsNote(ctx, field)
			case "shareCclfData":
				return ec.fieldContext_PlanOpsEvalAndLearning_shareCclfData(ctx, field)
			case "shareCclfDataNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_shareCclfDataNote(ctx, field)
			case "sendFilesBetweenCcw":
				return ec.fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcw(ctx, field)
			case "sendFilesBetweenCcwNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcwNote(ctx, field)
			case "appToSendFilesToKnown":
				return ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToKnown(ctx, field)
			case "appToSendFilesToWhich":
				return ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToWhich(ctx, field)
			case "appToSendFilesToNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToNote(ctx, field)
			case "useCcwForFileDistribiutionToParticipants":
				return ec.fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipants(ctx, field)
			case "useCcwForFileDistribiutionToParticipantsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipantsNote(ctx, field)
			case "developNewQualityMeasures":
				return ec.fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasures(ctx, field)
			case "developNewQualityMeasuresNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasuresNote(ctx, field)
			case "qualityPerformanceImpactsPayment":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPayment(ctx, field)
			case "qualityPerformanceImpactsPaymentNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPaymentNote(ctx, field)
			case "dataSharingStarts":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStarts(ctx, field)
			case "dataSharingStartsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStartsOther(ctx, field)
			case "dataSharingFrequency":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingFrequency(ctx, field)
			case "dataSharingFrequencyOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingFrequencyOther(ctx, field)
			case "dataSharingStartsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStartsNote(ctx, field)
			case "dataCollectionStarts":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionStarts(ctx, field)
			case "dataCollectionStartsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionStartsOther(ctx, field)
			case "dataCollectionFrequency":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequency(ctx, field)
			case "dataCollectionFrequencyOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyOther(ctx, field)
			case "dataCollectionFrequencyNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyNote(ctx, field)
			case "qualityReportingStarts":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStarts(ctx, field)
			case "qualityReportingStartsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsOther(ctx, field)
			case "qualityReportingStartsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsNote(ctx, field)
			case "modelLearningSystems":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystems(ctx, field)
			case "modelLearningSystemsOther":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsOther(ctx, field)
			case "modelLearningSystemsNote":
				return ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsNote(ctx, field)
			case "anticipatedChallenges":
				return ec.fieldContext_PlanOpsEvalAndLearning_anticipatedChallenges(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanOpsEvalAndLearning_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanOpsEvalAndLearning_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanOpsEvalAndLearning_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanOpsEvalAndLearning_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanOpsEvalAndLearning_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanOpsEvalAndLearning", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanOpsEvalAndLearning_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_uploadNewPlanDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_uploadNewPlanDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UploadNewPlanDocument(rctx, fc.Args["input"].(model.PlanDocumentInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanDocument); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanDocument`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanDocument)
	fc.Result = res
	return ec.marshalNPlanDocument2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_uploadNewPlanDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDocument_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDocument_modelPlanID(ctx, field)
			case "fileType":
				return ec.fieldContext_PlanDocument_fileType(ctx, field)
			case "bucket":
				return ec.fieldContext_PlanDocument_bucket(ctx, field)
			case "fileKey":
				return ec.fieldContext_PlanDocument_fileKey(ctx, field)
			case "virusScanned":
				return ec.fieldContext_PlanDocument_virusScanned(ctx, field)
			case "virusClean":
				return ec.fieldContext_PlanDocument_virusClean(ctx, field)
			case "fileName":
				return ec.fieldContext_PlanDocument_fileName(ctx, field)
			case "fileSize":
				return ec.fieldContext_PlanDocument_fileSize(ctx, field)
			case "documentType":
				return ec.fieldContext_PlanDocument_documentType(ctx, field)
			case "otherType":
				return ec.fieldContext_PlanDocument_otherType(ctx, field)
			case "optionalNotes":
				return ec.fieldContext_PlanDocument_optionalNotes(ctx, field)
			case "downloadUrl":
				return ec.fieldContext_PlanDocument_downloadUrl(ctx, field)
			case "deletedAt":
				return ec.fieldContext_PlanDocument_deletedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDocument_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDocument_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDocument_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDocument_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDocument", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_uploadNewPlanDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePlanDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePlanDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePlanDocument(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(int); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be int`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePlanDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePlanDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPlanDiscussion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPlanDiscussion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreatePlanDiscussion(rctx, fc.Args["input"].(model.PlanDiscussionCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanDiscussion); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanDiscussion`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanDiscussion)
	fc.Result = res
	return ec.marshalNPlanDiscussion2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussion(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPlanDiscussion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDiscussion_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDiscussion_modelPlanID(ctx, field)
			case "content":
				return ec.fieldContext_PlanDiscussion_content(ctx, field)
			case "status":
				return ec.fieldContext_PlanDiscussion_status(ctx, field)
			case "replies":
				return ec.fieldContext_PlanDiscussion_replies(ctx, field)
			case "isAssessment":
				return ec.fieldContext_PlanDiscussion_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDiscussion_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDiscussion_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDiscussion_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDiscussion_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDiscussion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPlanDiscussion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanDiscussion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanDiscussion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanDiscussion(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanDiscussion); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanDiscussion`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanDiscussion)
	fc.Result = res
	return ec.marshalNPlanDiscussion2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussion(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanDiscussion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDiscussion_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDiscussion_modelPlanID(ctx, field)
			case "content":
				return ec.fieldContext_PlanDiscussion_content(ctx, field)
			case "status":
				return ec.fieldContext_PlanDiscussion_status(ctx, field)
			case "replies":
				return ec.fieldContext_PlanDiscussion_replies(ctx, field)
			case "isAssessment":
				return ec.fieldContext_PlanDiscussion_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDiscussion_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDiscussion_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDiscussion_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDiscussion_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDiscussion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanDiscussion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePlanDiscussion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePlanDiscussion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePlanDiscussion(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanDiscussion); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanDiscussion`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanDiscussion)
	fc.Result = res
	return ec.marshalNPlanDiscussion2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussion(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePlanDiscussion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDiscussion_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDiscussion_modelPlanID(ctx, field)
			case "content":
				return ec.fieldContext_PlanDiscussion_content(ctx, field)
			case "status":
				return ec.fieldContext_PlanDiscussion_status(ctx, field)
			case "replies":
				return ec.fieldContext_PlanDiscussion_replies(ctx, field)
			case "isAssessment":
				return ec.fieldContext_PlanDiscussion_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDiscussion_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDiscussion_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDiscussion_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDiscussion_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDiscussion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePlanDiscussion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createDiscussionReply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createDiscussionReply(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateDiscussionReply(rctx, fc.Args["input"].(model.DiscussionReplyCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.DiscussionReply); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.DiscussionReply`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.DiscussionReply)
	fc.Result = res
	return ec.marshalNDiscussionReply2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReply(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createDiscussionReply(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DiscussionReply_id(ctx, field)
			case "discussionID":
				return ec.fieldContext_DiscussionReply_discussionID(ctx, field)
			case "content":
				return ec.fieldContext_DiscussionReply_content(ctx, field)
			case "resolution":
				return ec.fieldContext_DiscussionReply_resolution(ctx, field)
			case "isAssessment":
				return ec.fieldContext_DiscussionReply_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_DiscussionReply_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_DiscussionReply_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_DiscussionReply_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_DiscussionReply_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscussionReply", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createDiscussionReply_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDiscussionReply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDiscussionReply(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateDiscussionReply(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.DiscussionReply); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.DiscussionReply`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.DiscussionReply)
	fc.Result = res
	return ec.marshalNDiscussionReply2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReply(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDiscussionReply(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DiscussionReply_id(ctx, field)
			case "discussionID":
				return ec.fieldContext_DiscussionReply_discussionID(ctx, field)
			case "content":
				return ec.fieldContext_DiscussionReply_content(ctx, field)
			case "resolution":
				return ec.fieldContext_DiscussionReply_resolution(ctx, field)
			case "isAssessment":
				return ec.fieldContext_DiscussionReply_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_DiscussionReply_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_DiscussionReply_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_DiscussionReply_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_DiscussionReply_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscussionReply", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDiscussionReply_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDiscussionReply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDiscussionReply(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteDiscussionReply(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.DiscussionReply); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.DiscussionReply`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.DiscussionReply)
	fc.Result = res
	return ec.marshalNDiscussionReply2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReply(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDiscussionReply(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DiscussionReply_id(ctx, field)
			case "discussionID":
				return ec.fieldContext_DiscussionReply_discussionID(ctx, field)
			case "content":
				return ec.fieldContext_DiscussionReply_content(ctx, field)
			case "resolution":
				return ec.fieldContext_DiscussionReply_resolution(ctx, field)
			case "isAssessment":
				return ec.fieldContext_DiscussionReply_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_DiscussionReply_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_DiscussionReply_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_DiscussionReply_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_DiscussionReply_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscussionReply", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDiscussionReply_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_lockTaskListSection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_lockTaskListSection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().LockTaskListSection(rctx, fc.Args["modelPlanID"].(uuid.UUID), fc.Args["section"].(model.TaskListSection))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_lockTaskListSection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_lockTaskListSection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unlockTaskListSection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unlockTaskListSection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UnlockTaskListSection(rctx, fc.Args["modelPlanID"].(uuid.UUID), fc.Args["section"].(model.TaskListSection))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unlockTaskListSection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unlockTaskListSection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unlockAllTaskListSections(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unlockAllTaskListSections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UnlockAllTaskListSections(rctx, fc.Args["modelPlanID"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_ASSESSMENT")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.TaskListSectionLockStatus); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cmsgov/mint-app/pkg/graph/model.TaskListSectionLockStatus`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TaskListSectionLockStatus)
	fc.Result = res
	return ec.marshalNTaskListSectionLockStatus2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatusᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unlockAllTaskListSections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modelPlanID":
				return ec.fieldContext_TaskListSectionLockStatus_modelPlanID(ctx, field)
			case "section":
				return ec.fieldContext_TaskListSectionLockStatus_section(ctx, field)
			case "lockedBy":
				return ec.fieldContext_TaskListSectionLockStatus_lockedBy(ctx, field)
			case "isAssessment":
				return ec.fieldContext_TaskListSectionLockStatus_isAssessment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskListSectionLockStatus", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unlockAllTaskListSections_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanPayments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanPayments(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanPayments); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanPayments`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanPayments)
	fc.Result = res
	return ec.marshalNPlanPayments2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanPayments(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanPayments_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanPayments_modelPlanID(ctx, field)
			case "fundingSource":
				return ec.fieldContext_PlanPayments_fundingSource(ctx, field)
			case "fundingSourceTrustFund":
				return ec.fieldContext_PlanPayments_fundingSourceTrustFund(ctx, field)
			case "fundingSourceOther":
				return ec.fieldContext_PlanPayments_fundingSourceOther(ctx, field)
			case "fundingSourceNote":
				return ec.fieldContext_PlanPayments_fundingSourceNote(ctx, field)
			case "fundingSourceR":
				return ec.fieldContext_PlanPayments_fundingSourceR(ctx, field)
			case "fundingSourceRTrustFund":
				return ec.fieldContext_PlanPayments_fundingSourceRTrustFund(ctx, field)
			case "fundingSourceROther":
				return ec.fieldContext_PlanPayments_fundingSourceROther(ctx, field)
			case "fundingSourceRNote":
				return ec.fieldContext_PlanPayments_fundingSourceRNote(ctx, field)
			case "payRecipients":
				return ec.fieldContext_PlanPayments_payRecipients(ctx, field)
			case "payRecipientsOtherSpecification":
				return ec.fieldContext_PlanPayments_payRecipientsOtherSpecification(ctx, field)
			case "payRecipientsNote":
				return ec.fieldContext_PlanPayments_payRecipientsNote(ctx, field)
			case "payType":
				return ec.fieldContext_PlanPayments_payType(ctx, field)
			case "payTypeNote":
				return ec.fieldContext_PlanPayments_payTypeNote(ctx, field)
			case "payClaims":
				return ec.fieldContext_PlanPayments_payClaims(ctx, field)
			case "payClaimsOther":
				return ec.fieldContext_PlanPayments_payClaimsOther(ctx, field)
			case "payClaimsNote":
				return ec.fieldContext_PlanPayments_payClaimsNote(ctx, field)
			case "shouldAnyProvidersExcludedFFSSystems":
				return ec.fieldContext_PlanPayments_shouldAnyProvidersExcludedFFSSystems(ctx, field)
			case "shouldAnyProviderExcludedFFSSystemsNote":
				return ec.fieldContext_PlanPayments_shouldAnyProviderExcludedFFSSystemsNote(ctx, field)
			case "changesMedicarePhysicianFeeSchedule":
				return ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeSchedule(ctx, field)
			case "changesMedicarePhysicianFeeScheduleNote":
				return ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeScheduleNote(ctx, field)
			case "affectsMedicareSecondaryPayerClaims":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaims(ctx, field)
			case "affectsMedicareSecondaryPayerClaimsHow":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsHow(ctx, field)
			case "affectsMedicareSecondaryPayerClaimsNote":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsNote(ctx, field)
			case "payModelDifferentiation":
				return ec.fieldContext_PlanPayments_payModelDifferentiation(ctx, field)
			case "creatingDependenciesBetweenServices":
				return ec.fieldContext_PlanPayments_creatingDependenciesBetweenServices(ctx, field)
			case "creatingDependenciesBetweenServicesNote":
				return ec.fieldContext_PlanPayments_creatingDependenciesBetweenServicesNote(ctx, field)
			case "needsClaimsDataCollection":
				return ec.fieldContext_PlanPayments_needsClaimsDataCollection(ctx, field)
			case "needsClaimsDataCollectionNote":
				return ec.fieldContext_PlanPayments_needsClaimsDataCollectionNote(ctx, field)
			case "providingThirdPartyFile":
				return ec.fieldContext_PlanPayments_providingThirdPartyFile(ctx, field)
			case "isContractorAwareTestDataRequirements":
				return ec.fieldContext_PlanPayments_isContractorAwareTestDataRequirements(ctx, field)
			case "beneficiaryCostSharingLevelAndHandling":
				return ec.fieldContext_PlanPayments_beneficiaryCostSharingLevelAndHandling(ctx, field)
			case "waiveBeneficiaryCostSharingForAnyServices":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingForAnyServices(ctx, field)
			case "waiveBeneficiaryCostSharingServiceSpecification":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingServiceSpecification(ctx, field)
			case "waiverOnlyAppliesPartOfPayment":
				return ec.fieldContext_PlanPayments_waiverOnlyAppliesPartOfPayment(ctx, field)
			case "waiveBeneficiaryCostSharingNote":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingNote(ctx, field)
			case "nonClaimsPayments":
				return ec.fieldContext_PlanPayments_nonClaimsPayments(ctx, field)
			case "nonClaimsPaymentOther":
				return ec.fieldContext_PlanPayments_nonClaimsPaymentOther(ctx, field)
			case "paymentCalculationOwner":
				return ec.fieldContext_PlanPayments_paymentCalculationOwner(ctx, field)
			case "numberPaymentsPerPayCycle":
				return ec.fieldContext_PlanPayments_numberPaymentsPerPayCycle(ctx, field)
			case "numberPaymentsPerPayCycleNote":
				return ec.fieldContext_PlanPayments_numberPaymentsPerPayCycleNote(ctx, field)
			case "sharedSystemsInvolvedAdditionalClaimPayment":
				return ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPayment(ctx, field)
			case "sharedSystemsInvolvedAdditionalClaimPaymentNote":
				return ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPaymentNote(ctx, field)
			case "planningToUseInnovationPaymentContractor":
				return ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractor(ctx, field)
			case "planningToUseInnovationPaymentContractorNote":
				return ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractorNote(ctx, field)
			case "fundingStructure":
				return ec.fieldContext_PlanPayments_fundingStructure(ctx, field)
			case "expectedCalculationComplexityLevel":
				return ec.fieldContext_PlanPayments_expectedCalculationComplexityLevel(ctx, field)
			case "expectedCalculationComplexityLevelNote":
				return ec.fieldContext_PlanPayments_expectedCalculationComplexityLevelNote(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanisms":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanisms(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanismsHow":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsHow(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanismsNote":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsNote(ctx, field)
			case "anticipatedPaymentFrequency":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequency(ctx, field)
			case "anticipatedPaymentFrequencyOther":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyOther(ctx, field)
			case "anticipatedPaymentFrequencyNote":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyNote(ctx, field)
			case "willRecoverPayments":
				return ec.fieldContext_PlanPayments_willRecoverPayments(ctx, field)
			case "willRecoverPaymentsNote":
				return ec.fieldContext_PlanPayments_willRecoverPaymentsNote(ctx, field)
			case "anticipateReconcilingPaymentsRetrospectively":
				return ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectively(ctx, field)
			case "anticipateReconcilingPaymentsRetrospectivelyNote":
				return ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectivelyNote(ctx, field)
			case "paymentStartDate":
				return ec.fieldContext_PlanPayments_paymentStartDate(ctx, field)
			case "paymentStartDateNote":
				return ec.fieldContext_PlanPayments_paymentStartDateNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanPayments_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanPayments_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanPayments_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanPayments_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanPayments_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanPayments_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanPayments_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanPayments", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanPayments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_agreeToNDA(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_agreeToNDA(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AgreeToNda(rctx, fc.Args["agree"].(bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.NDAInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/graph/model.NDAInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NDAInfo)
	fc.Result = res
	return ec.marshalNNDAInfo2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNDAInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_agreeToNDA(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "agreed":
				return ec.fieldContext_NDAInfo_agreed(ctx, field)
			case "agreedDts":
				return ec.fieldContext_NDAInfo_agreedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NDAInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_agreeToNDA_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addPlanFavorite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addPlanFavorite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddPlanFavorite(rctx, fc.Args["modelPlanID"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanFavorite); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanFavorite`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanFavorite)
	fc.Result = res
	return ec.marshalNPlanFavorite2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanFavorite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addPlanFavorite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanFavorite_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanFavorite_modelPlanID(ctx, field)
			case "userID":
				return ec.fieldContext_PlanFavorite_userID(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanFavorite_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanFavorite_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanFavorite_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanFavorite_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanFavorite", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addPlanFavorite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePlanFavorite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePlanFavorite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePlanFavorite(rctx, fc.Args["modelPlanID"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanFavorite); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanFavorite`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanFavorite)
	fc.Result = res
	return ec.marshalNPlanFavorite2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanFavorite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePlanFavorite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanFavorite_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanFavorite_modelPlanID(ctx, field)
			case "userID":
				return ec.fieldContext_PlanFavorite_userID(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanFavorite_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanFavorite_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanFavorite_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanFavorite_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanFavorite", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePlanFavorite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPlanCrTdl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPlanCrTdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreatePlanCrTdl(rctx, fc.Args["input"].(model.PlanCrTdlCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanCrTdl); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanCrTdl`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCrTdl)
	fc.Result = res
	return ec.marshalNPlanCrTdl2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdl(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPlanCrTdl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCrTdl_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCrTdl_modelPlanID(ctx, field)
			case "idNumber":
				return ec.fieldContext_PlanCrTdl_idNumber(ctx, field)
			case "dateInitiated":
				return ec.fieldContext_PlanCrTdl_dateInitiated(ctx, field)
			case "title":
				return ec.fieldContext_PlanCrTdl_title(ctx, field)
			case "note":
				return ec.fieldContext_PlanCrTdl_note(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCrTdl_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCrTdl_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCrTdl_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCrTdl_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCrTdl", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPlanCrTdl_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlanCrTdl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlanCrTdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlanCrTdl(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanCrTdl); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanCrTdl`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCrTdl)
	fc.Result = res
	return ec.marshalNPlanCrTdl2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdl(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlanCrTdl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCrTdl_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCrTdl_modelPlanID(ctx, field)
			case "idNumber":
				return ec.fieldContext_PlanCrTdl_idNumber(ctx, field)
			case "dateInitiated":
				return ec.fieldContext_PlanCrTdl_dateInitiated(ctx, field)
			case "title":
				return ec.fieldContext_PlanCrTdl_title(ctx, field)
			case "note":
				return ec.fieldContext_PlanCrTdl_note(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCrTdl_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCrTdl_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCrTdl_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCrTdl_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCrTdl", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlanCrTdl_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePlanCrTdl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePlanCrTdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePlanCrTdl(rctx, fc.Args["id"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.PlanCrTdl); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cmsgov/mint-app/pkg/models.PlanCrTdl`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCrTdl)
	fc.Result = res
	return ec.marshalNPlanCrTdl2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdl(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePlanCrTdl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCrTdl_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCrTdl_modelPlanID(ctx, field)
			case "idNumber":
				return ec.fieldContext_PlanCrTdl_idNumber(ctx, field)
			case "dateInitiated":
				return ec.fieldContext_PlanCrTdl_dateInitiated(ctx, field)
			case "title":
				return ec.fieldContext_PlanCrTdl_title(ctx, field)
			case "note":
				return ec.fieldContext_PlanCrTdl_note(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCrTdl_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCrTdl_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCrTdl_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCrTdl_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCrTdl", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePlanCrTdl_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _NDAInfo_agreed(ctx context.Context, field graphql.CollectedField, obj *model.NDAInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NDAInfo_agreed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agreed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NDAInfo_agreed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NDAInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NDAInfo_agreedDts(ctx context.Context, field graphql.CollectedField, obj *model.NDAInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NDAInfo_agreedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgreedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NDAInfo_agreedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NDAInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_modelCategory(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_modelCategory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ModelCategory)
	fc.Result = res
	return ec.marshalOModelCategory2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_modelCategory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ModelCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_cmsCenters(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_cmsCenters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanBasics().CmsCenters(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.CMSCenter)
	fc.Result = res
	return ec.marshalNCMSCenter2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_cmsCenters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CMSCenter does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_cmsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_cmsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CMSOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_cmsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_cmmiGroups(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_cmmiGroups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanBasics().CmmiGroups(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.CMMIGroup)
	fc.Result = res
	return ec.marshalNCMMIGroup2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_cmmiGroups(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CMMIGroup does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_modelType(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_modelType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ModelType)
	fc.Result = res
	return ec.marshalOModelType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_modelType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ModelType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_problem(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_problem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Problem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_problem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_goal(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_goal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Goal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_goal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_testInterventions(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_testInterventions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestInterventions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_testInterventions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_note(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_note(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_completeICIP(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_completeICIP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompleteICIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_completeICIP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_clearanceStarts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_clearanceStarts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClearanceStarts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_clearanceStarts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_clearanceEnds(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_clearanceEnds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClearanceEnds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_clearanceEnds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_announced(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_announced(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Announced, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_announced(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_applicationsStart(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_applicationsStart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationsStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_applicationsStart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_applicationsEnd(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_applicationsEnd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationsEnd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_applicationsEnd(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_performancePeriodStarts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_performancePeriodStarts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerformancePeriodStarts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_performancePeriodStarts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_performancePeriodEnds(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_performancePeriodEnds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerformancePeriodEnds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_performancePeriodEnds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_wrapUpEnds(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_wrapUpEnds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WrapUpEnds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_wrapUpEnds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_highLevelNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_highLevelNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HighLevelNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_highLevelNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_phasedIn(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_phasedIn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhasedIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_phasedIn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_phasedInNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_phasedInNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhasedInNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_phasedInNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_readyForReviewBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_readyForReviewBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_readyForReviewBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_readyForReviewDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_readyForReviewDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_readyForReviewDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBasics_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanBasics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBasics_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TaskStatus)
	fc.Result = res
	return ec.marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBasics_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBasics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiaries(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiaries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanBeneficiaries().Beneficiaries(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.BeneficiariesType)
	fc.Result = res
	return ec.marshalNBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiaries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BeneficiariesType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiariesOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiariesOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiariesOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiariesOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiariesNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiariesNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiariesNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiariesNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_treatDualElligibleDifferent(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatDualElligibleDifferent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TriStateAnswer)
	fc.Result = res
	return ec.marshalOTriStateAnswer2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTriStateAnswer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_treatDualElligibleDifferent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TriStateAnswer does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_treatDualElligibleDifferentHow(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferentHow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatDualElligibleDifferentHow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_treatDualElligibleDifferentHow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_treatDualElligibleDifferentNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_treatDualElligibleDifferentNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatDualElligibleDifferentNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_treatDualElligibleDifferentNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_excludeCertainCharacteristics(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExcludeCertainCharacteristics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TriStateAnswer)
	fc.Result = res
	return ec.marshalOTriStateAnswer2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTriStateAnswer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_excludeCertainCharacteristics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TriStateAnswer does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_excludeCertainCharacteristicsCriteria(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsCriteria(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExcludeCertainCharacteristicsCriteria, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsCriteria(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_excludeCertainCharacteristicsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExcludeCertainCharacteristicsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_excludeCertainCharacteristicsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_numberPeopleImpacted(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_numberPeopleImpacted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberPeopleImpacted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_numberPeopleImpacted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_estimateConfidence(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_estimateConfidence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimateConfidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ConfidenceType)
	fc.Result = res
	return ec.marshalOConfidenceType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐConfidenceType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_estimateConfidence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfidenceType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_confidenceNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_confidenceNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfidenceNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_confidenceNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiarySelectionMethod(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiarySelectionMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanBeneficiaries().BeneficiarySelectionMethod(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.SelectionMethodType)
	fc.Result = res
	return ec.marshalNSelectionMethodType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiarySelectionMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SelectionMethodType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiarySelectionOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiarySelectionOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiarySelectionOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiarySelectionOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiarySelectionNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiarySelectionNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiarySelectionNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiarySelectionNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiarySelectionFrequency(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiarySelectionFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.FrequencyType)
	fc.Result = res
	return ec.marshalOFrequencyType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFrequencyType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiarySelectionFrequency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FrequencyType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiarySelectionFrequencyOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiarySelectionFrequencyOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiarySelectionFrequencyNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiarySelectionFrequencyNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiarySelectionFrequencyNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiaryOverlap(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiaryOverlap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryOverlap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OverlapType)
	fc.Result = res
	return ec.marshalOOverlapType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOverlapType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiaryOverlap(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OverlapType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_beneficiaryOverlapNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_beneficiaryOverlapNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryOverlapNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_beneficiaryOverlapNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_precedenceRules(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_precedenceRules(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrecedenceRules, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_precedenceRules(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_readyForReviewBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_readyForReviewBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_readyForReviewBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_readyForReviewDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_readyForReviewDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_readyForReviewDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanBeneficiaries_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanBeneficiaries) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanBeneficiaries_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TaskStatus)
	fc.Result = res
	return ec.marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanBeneficiaries_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanBeneficiaries",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_euaUserID(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_euaUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EUAUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_euaUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_fullName(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_fullName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_fullName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_teamRole(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_teamRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeamRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TeamRole)
	fc.Result = res
	return ec.marshalNTeamRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTeamRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_teamRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TeamRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_email(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCollaborator_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCollaborator_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCollaborator_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_idNumber(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_idNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_idNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_dateInitiated(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_dateInitiated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateInitiated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_dateInitiated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_title(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_note(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_note(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanCrTdl_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanCrTdl) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanCrTdl_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanCrTdl_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanCrTdl",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_content(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.DiscussionStatus)
	fc.Result = res
	return ec.marshalNDiscussionStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DiscussionStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_replies(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_replies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanDiscussion().Replies(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.DiscussionReply)
	fc.Result = res
	return ec.marshalNDiscussionReply2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReplyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_replies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DiscussionReply_id(ctx, field)
			case "discussionID":
				return ec.fieldContext_DiscussionReply_discussionID(ctx, field)
			case "content":
				return ec.fieldContext_DiscussionReply_content(ctx, field)
			case "resolution":
				return ec.fieldContext_DiscussionReply_resolution(ctx, field)
			case "isAssessment":
				return ec.fieldContext_DiscussionReply_isAssessment(ctx, field)
			case "createdBy":
				return ec.fieldContext_DiscussionReply_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_DiscussionReply_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_DiscussionReply_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_DiscussionReply_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiscussionReply", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_isAssessment(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_isAssessment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAssessment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_isAssessment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDiscussion_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDiscussion_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDiscussion_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_fileType(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_fileType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_fileType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_bucket(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_bucket(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bucket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_bucket(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_fileKey(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_fileKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_fileKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_virusScanned(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_virusScanned(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VirusScanned, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_virusScanned(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_virusClean(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_virusClean(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VirusClean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_virusClean(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_fileName(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_fileName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_fileSize(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_fileSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_fileSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_documentType(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_documentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.DocumentType)
	fc.Result = res
	return ec.marshalNDocumentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDocumentType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_documentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DocumentType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_otherType(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_otherType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanDocument().OtherType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_otherType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_optionalNotes(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_optionalNotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanDocument().OptionalNotes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_optionalNotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_downloadUrl(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_downloadUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanDocument().DownloadURL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_downloadUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanDocument_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanDocument_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanDocument_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_userID(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanFavorite_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanFavorite_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanFavorite_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_isNewModel(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_isNewModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNewModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_isNewModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_existingModel(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_existingModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExistingModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_existingModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_resemblesExistingModel(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResemblesExistingModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_resemblesExistingModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_resemblesExistingModelWhich(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelWhich(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().ResemblesExistingModelWhich(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_resemblesExistingModelWhich(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_resemblesExistingModelHow(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelHow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResemblesExistingModelHow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_resemblesExistingModelHow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_resemblesExistingModelNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_resemblesExistingModelNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResemblesExistingModelNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_resemblesExistingModelNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_hasComponentsOrTracks(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasComponentsOrTracks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_hasComponentsOrTracksDiffer(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksDiffer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasComponentsOrTracksDiffer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksDiffer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_hasComponentsOrTracksNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasComponentsOrTracksNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_hasComponentsOrTracksNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_alternativePaymentModel(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlternativePaymentModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_alternativePaymentModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_alternativePaymentModelTypes(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModelTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().AlternativePaymentModelTypes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.AlternativePaymentModelType)
	fc.Result = res
	return ec.marshalNAlternativePaymentModelType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_alternativePaymentModelTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AlternativePaymentModelType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_alternativePaymentModelNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_alternativePaymentModelNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlternativePaymentModelNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_alternativePaymentModelNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_keyCharacteristics(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().KeyCharacteristics(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.KeyCharacteristic)
	fc.Result = res
	return ec.marshalNKeyCharacteristic2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristicᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_keyCharacteristics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type KeyCharacteristic does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_keyCharacteristicsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristicsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeyCharacteristicsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_keyCharacteristicsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_keyCharacteristicsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_keyCharacteristicsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeyCharacteristicsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_keyCharacteristicsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_collectPlanBids(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_collectPlanBids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollectPlanBids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_collectPlanBids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_collectPlanBidsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_collectPlanBidsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollectPlanBidsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_collectPlanBidsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_managePartCDEnrollment(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_managePartCDEnrollment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagePartCDEnrollment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_managePartCDEnrollment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_managePartCDEnrollmentNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_managePartCDEnrollmentNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagePartCDEnrollmentNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_managePartCDEnrollmentNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_planContactUpdated(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_planContactUpdated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanContactUpdated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_planContactUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_planContactUpdatedNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_planContactUpdatedNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanContactUpdatedNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_planContactUpdatedNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_careCoordinationInvolved(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CareCoordinationInvolved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_careCoordinationInvolved(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_careCoordinationInvolvedDescription(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CareCoordinationInvolvedDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_careCoordinationInvolvedNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CareCoordinationInvolvedNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_careCoordinationInvolvedNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_additionalServicesInvolved(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalServicesInvolved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_additionalServicesInvolved(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_additionalServicesInvolvedDescription(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalServicesInvolvedDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_additionalServicesInvolvedNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalServicesInvolvedNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_additionalServicesInvolvedNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_communityPartnersInvolved(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunityPartnersInvolved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_communityPartnersInvolved(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_communityPartnersInvolvedDescription(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunityPartnersInvolvedDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_communityPartnersInvolvedNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunityPartnersInvolvedNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_communityPartnersInvolvedNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_geographiesTargeted(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_geographiesTargeted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeographiesTargeted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_geographiesTargeted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_geographiesTargetedTypes(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().GeographiesTargetedTypes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.GeographyType)
	fc.Result = res
	return ec.marshalNGeographyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GeographyType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_geographiesTargetedTypesOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypesOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeographiesTargetedTypesOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_geographiesTargetedTypesOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_geographiesTargetedAppliedTo(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedTo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().GeographiesTargetedAppliedTo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.GeographyApplication)
	fc.Result = res
	return ec.marshalNGeographyApplication2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplicationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedTo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GeographyApplication does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_geographiesTargetedAppliedToOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedToOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeographiesTargetedAppliedToOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_geographiesTargetedAppliedToOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_geographiesTargetedNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_geographiesTargetedNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeographiesTargetedNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_geographiesTargetedNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_participationOptions(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_participationOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipationOptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_participationOptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_participationOptionsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_participationOptionsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipationOptionsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_participationOptionsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_agreementTypes(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_agreementTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().AgreementTypes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.AgreementType)
	fc.Result = res
	return ec.marshalNAgreementType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_agreementTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AgreementType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_agreementTypesOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_agreementTypesOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgreementTypesOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_agreementTypesOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_multiplePatricipationAgreementsNeeded(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeeded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MultiplePatricipationAgreementsNeeded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeeded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_multiplePatricipationAgreementsNeededNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeededNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MultiplePatricipationAgreementsNeededNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_multiplePatricipationAgreementsNeededNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_rulemakingRequired(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RulemakingRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_rulemakingRequired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_rulemakingRequiredDescription(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequiredDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RulemakingRequiredDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_rulemakingRequiredDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_rulemakingRequiredNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_rulemakingRequiredNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RulemakingRequiredNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_rulemakingRequiredNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_authorityAllowances(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_authorityAllowances(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().AuthorityAllowances(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.AuthorityAllowance)
	fc.Result = res
	return ec.marshalNAuthorityAllowance2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowanceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_authorityAllowances(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AuthorityAllowance does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_authorityAllowancesOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_authorityAllowancesOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorityAllowancesOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_authorityAllowancesOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_authorityAllowancesNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_authorityAllowancesNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorityAllowancesNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_authorityAllowancesNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_waiversRequired(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_waiversRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WaiversRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_waiversRequired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_waiversRequiredTypes(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_waiversRequiredTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanGeneralCharacteristics().WaiversRequiredTypes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.WaiverType)
	fc.Result = res
	return ec.marshalNWaiverType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_waiversRequiredTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type WaiverType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_waiversRequiredNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_waiversRequiredNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WaiversRequiredNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_waiversRequiredNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_readyForReviewBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_readyForReviewBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_readyForReviewBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_readyForReviewDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_readyForReviewDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_readyForReviewDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanGeneralCharacteristics_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanGeneralCharacteristics) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanGeneralCharacteristics_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TaskStatus)
	fc.Result = res
	return ec.marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanGeneralCharacteristics_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanGeneralCharacteristics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_gcPartCD(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_gcPartCD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().GcPartCd(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.GcPartCDType)
	fc.Result = res
	return ec.marshalNGcPartCDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcPartCDTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_gcPartCD(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GcPartCDType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_gcPartCDOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_gcPartCDOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GcPartCDOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_gcPartCDOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_gcPartCDNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_gcPartCDNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GcPartCDNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_gcPartCDNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_gcCollectBids(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_gcCollectBids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().GcCollectBids(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.GcCollectBidsType)
	fc.Result = res
	return ec.marshalNGcCollectBidsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcCollectBidsTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_gcCollectBids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GcCollectBidsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_gcCollectBidsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_gcCollectBidsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GcCollectBidsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_gcCollectBidsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_gcCollectBidsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_gcCollectBidsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GcCollectBidsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_gcCollectBidsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_gcUpdateContract(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_gcUpdateContract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().GcUpdateContract(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.GcUpdateContractType)
	fc.Result = res
	return ec.marshalNGcUpdateContractType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcUpdateContractTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_gcUpdateContract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GcUpdateContractType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_gcUpdateContractOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_gcUpdateContractOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GcUpdateContractOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_gcUpdateContractOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_gcUpdateContractNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_gcUpdateContractNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GcUpdateContractNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_gcUpdateContractNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppToAdvertise(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppToAdvertise(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().PpToAdvertise(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.PpToAdvertiseType)
	fc.Result = res
	return ec.marshalNPpToAdvertiseType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpToAdvertiseTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppToAdvertise(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PpToAdvertiseType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppToAdvertiseOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppToAdvertiseOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PpToAdvertiseOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppToAdvertiseOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppToAdvertiseNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppToAdvertiseNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PpToAdvertiseNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppToAdvertiseNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppCollectScoreReview(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppCollectScoreReview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().PpCollectScoreReview(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.PpCollectScoreReviewType)
	fc.Result = res
	return ec.marshalNPpCollectScoreReviewType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCollectScoreReviewTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppCollectScoreReview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PpCollectScoreReviewType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppCollectScoreReviewOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppCollectScoreReviewOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PpCollectScoreReviewOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppCollectScoreReviewOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppCollectScoreReviewNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppCollectScoreReviewNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PpCollectScoreReviewNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppCollectScoreReviewNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppAppSupportContractor(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppAppSupportContractor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().PpAppSupportContractor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.PpAppSupportContractorType)
	fc.Result = res
	return ec.marshalNPpAppSupportContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpAppSupportContractorTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppAppSupportContractor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PpAppSupportContractorType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppAppSupportContractorOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppAppSupportContractorOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PpAppSupportContractorOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppAppSupportContractorOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppAppSupportContractorNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppAppSupportContractorNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PpAppSupportContractorNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppAppSupportContractorNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppCommunicateWithParticipant(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppCommunicateWithParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().PpCommunicateWithParticipant(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.PpCommunicateWithParticipantType)
	fc.Result = res
	return ec.marshalNPpCommunicateWithParticipantType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCommunicateWithParticipantTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppCommunicateWithParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PpCommunicateWithParticipantType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppCommunicateWithParticipantOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppCommunicateWithParticipantOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PpCommunicateWithParticipantOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppCommunicateWithParticipantOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppCommunicateWithParticipantNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppCommunicateWithParticipantNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PpCommunicateWithParticipantNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppCommunicateWithParticipantNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppManageProviderOverlap(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppManageProviderOverlap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().PpManageProviderOverlap(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.PpManageProviderOverlapType)
	fc.Result = res
	return ec.marshalNPpManageProviderOverlapType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpManageProviderOverlapTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppManageProviderOverlap(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PpManageProviderOverlapType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppManageProviderOverlapOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppManageProviderOverlapOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PpManageProviderOverlapOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppManageProviderOverlapOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_ppManageProviderOverlapNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_ppManageProviderOverlapNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PpManageProviderOverlapNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_ppManageProviderOverlapNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_bManageBeneficiaryOverlap(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_bManageBeneficiaryOverlap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().BManageBeneficiaryOverlap(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.BManageBeneficiaryOverlapType)
	fc.Result = res
	return ec.marshalNBManageBeneficiaryOverlapType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBManageBeneficiaryOverlapTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_bManageBeneficiaryOverlap(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BManageBeneficiaryOverlapType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_bManageBeneficiaryOverlapOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_bManageBeneficiaryOverlapOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BManageBeneficiaryOverlapOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_bManageBeneficiaryOverlapOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_bManageBeneficiaryOverlapNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_bManageBeneficiaryOverlapNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BManageBeneficiaryOverlapNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_bManageBeneficiaryOverlapNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelHelpdeskSupport(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelHelpdeskSupport(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().OelHelpdeskSupport(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.OelHelpdeskSupportType)
	fc.Result = res
	return ec.marshalNOelHelpdeskSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelHelpdeskSupportTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelHelpdeskSupport(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OelHelpdeskSupportType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelHelpdeskSupportOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelHelpdeskSupportOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelHelpdeskSupportOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelHelpdeskSupportOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelHelpdeskSupportNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelHelpdeskSupportNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelHelpdeskSupportNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelHelpdeskSupportNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelManageAco(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelManageAco(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().OelManageAco(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.OelManageAcoType)
	fc.Result = res
	return ec.marshalNOelManageAcoType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelManageAcoTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelManageAco(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OelManageAcoType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelManageAcoOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelManageAcoOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelManageAcoOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelManageAcoOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelManageAcoNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelManageAcoNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelManageAcoNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelManageAcoNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelPerformanceBenchmark(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelPerformanceBenchmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().OelPerformanceBenchmark(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.OelPerformanceBenchmarkType)
	fc.Result = res
	return ec.marshalNOelPerformanceBenchmarkType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelPerformanceBenchmarkTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelPerformanceBenchmark(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OelPerformanceBenchmarkType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelPerformanceBenchmarkOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelPerformanceBenchmarkOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelPerformanceBenchmarkOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelPerformanceBenchmarkOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelPerformanceBenchmarkNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelPerformanceBenchmarkNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelPerformanceBenchmarkNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelPerformanceBenchmarkNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelProcessAppeals(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelProcessAppeals(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().OelProcessAppeals(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.OelProcessAppealsType)
	fc.Result = res
	return ec.marshalNOelProcessAppealsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelProcessAppealsTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelProcessAppeals(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OelProcessAppealsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelProcessAppealsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelProcessAppealsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelProcessAppealsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelProcessAppealsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelProcessAppealsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelProcessAppealsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelProcessAppealsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelProcessAppealsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelEvaluationContractor(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelEvaluationContractor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().OelEvaluationContractor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.OelEvaluationContractorType)
	fc.Result = res
	return ec.marshalNOelEvaluationContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEvaluationContractorTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelEvaluationContractor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OelEvaluationContractorType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelEvaluationContractorOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelEvaluationContractorOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelEvaluationContractorOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelEvaluationContractorOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelEvaluationContractorNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelEvaluationContractorNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelEvaluationContractorNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelEvaluationContractorNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelCollectData(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelCollectData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().OelCollectData(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.OelCollectDataType)
	fc.Result = res
	return ec.marshalNOelCollectDataType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelCollectDataTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelCollectData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OelCollectDataType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelCollectDataOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelCollectDataOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelCollectDataOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelCollectDataOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelCollectDataNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelCollectDataNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelCollectDataNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelCollectDataNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelObtainData(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelObtainData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().OelObtainData(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.OelObtainDataType)
	fc.Result = res
	return ec.marshalNOelObtainDataType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelObtainDataTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelObtainData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OelObtainDataType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelObtainDataOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelObtainDataOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelObtainDataOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelObtainDataOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelObtainDataNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelObtainDataNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelObtainDataNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelObtainDataNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelClaimsBasedMeasures(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelClaimsBasedMeasures(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().OelClaimsBasedMeasures(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.OelClaimsBasedMeasuresType)
	fc.Result = res
	return ec.marshalNOelClaimsBasedMeasuresType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelClaimsBasedMeasuresTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelClaimsBasedMeasures(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OelClaimsBasedMeasuresType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelClaimsBasedMeasuresOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelClaimsBasedMeasuresOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelClaimsBasedMeasuresOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelClaimsBasedMeasuresOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelClaimsBasedMeasuresNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelClaimsBasedMeasuresNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelClaimsBasedMeasuresNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelClaimsBasedMeasuresNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelQualityScores(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelQualityScores(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().OelQualityScores(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.OelQualityScoresType)
	fc.Result = res
	return ec.marshalNOelQualityScoresType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelQualityScoresTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelQualityScores(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OelQualityScoresType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelQualityScoresOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelQualityScoresOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelQualityScoresOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelQualityScoresOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelQualityScoresNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelQualityScoresNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelQualityScoresNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelQualityScoresNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelSendReports(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelSendReports(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().OelSendReports(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.OelSendReportsType)
	fc.Result = res
	return ec.marshalNOelSendReportsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelSendReportsTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelSendReports(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OelSendReportsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelSendReportsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelSendReportsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelSendReportsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelSendReportsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelSendReportsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelSendReportsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelSendReportsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelSendReportsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelLearningContractor(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelLearningContractor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().OelLearningContractor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.OelLearningContractorType)
	fc.Result = res
	return ec.marshalNOelLearningContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelLearningContractorTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelLearningContractor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OelLearningContractorType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelLearningContractorOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelLearningContractorOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelLearningContractorOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelLearningContractorOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelLearningContractorNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelLearningContractorNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelLearningContractorNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelLearningContractorNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelParticipantCollaboration(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelParticipantCollaboration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().OelParticipantCollaboration(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.OelParticipantCollaborationType)
	fc.Result = res
	return ec.marshalNOelParticipantCollaborationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelParticipantCollaborationTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelParticipantCollaboration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OelParticipantCollaborationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelParticipantCollaborationOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelParticipantCollaborationOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelParticipantCollaborationOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelParticipantCollaborationOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelParticipantCollaborationNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelParticipantCollaborationNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelParticipantCollaborationNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelParticipantCollaborationNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelEducateBeneficiaries(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelEducateBeneficiaries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().OelEducateBeneficiaries(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.OelEducateBeneficiariesType)
	fc.Result = res
	return ec.marshalNOelEducateBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEducateBeneficiariesTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelEducateBeneficiaries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OelEducateBeneficiariesType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelEducateBeneficiariesOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelEducateBeneficiariesOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelEducateBeneficiariesOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelEducateBeneficiariesOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_oelEducateBeneficiariesNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_oelEducateBeneficiariesNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OelEducateBeneficiariesNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_oelEducateBeneficiariesNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pMakeClaimsPayments(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pMakeClaimsPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().PMakeClaimsPayments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.PMakeClaimsPaymentsType)
	fc.Result = res
	return ec.marshalNPMakeClaimsPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPMakeClaimsPaymentsTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pMakeClaimsPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PMakeClaimsPaymentsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pMakeClaimsPaymentsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pMakeClaimsPaymentsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PMakeClaimsPaymentsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pMakeClaimsPaymentsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pMakeClaimsPaymentsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pMakeClaimsPaymentsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PMakeClaimsPaymentsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pMakeClaimsPaymentsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pInformFfs(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pInformFfs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().PInformFfs(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.PInformFfsType)
	fc.Result = res
	return ec.marshalNPInformFfsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPInformFfsTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pInformFfs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PInformFfsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pInformFfsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pInformFfsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PInformFfsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pInformFfsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pInformFfsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pInformFfsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PInformFfsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pInformFfsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pNonClaimsBasedPayments(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pNonClaimsBasedPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().PNonClaimsBasedPayments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.PNonClaimsBasedPaymentsType)
	fc.Result = res
	return ec.marshalNPNonClaimsBasedPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPNonClaimsBasedPaymentsTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pNonClaimsBasedPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PNonClaimsBasedPaymentsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pNonClaimsBasedPaymentsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pNonClaimsBasedPaymentsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PNonClaimsBasedPaymentsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pNonClaimsBasedPaymentsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pNonClaimsBasedPaymentsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pNonClaimsBasedPaymentsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PNonClaimsBasedPaymentsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pNonClaimsBasedPaymentsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pSharedSavingsPlan(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pSharedSavingsPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().PSharedSavingsPlan(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.PSharedSavingsPlanType)
	fc.Result = res
	return ec.marshalNPSharedSavingsPlanType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPSharedSavingsPlanTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pSharedSavingsPlan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PSharedSavingsPlanType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pSharedSavingsPlanOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pSharedSavingsPlanOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PSharedSavingsPlanOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pSharedSavingsPlanOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pSharedSavingsPlanNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pSharedSavingsPlanNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PSharedSavingsPlanNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pSharedSavingsPlanNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pRecoverPayments(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pRecoverPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanITTools().PRecoverPayments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.PRecoverPaymentsType)
	fc.Result = res
	return ec.marshalNPRecoverPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPRecoverPaymentsTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pRecoverPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PRecoverPaymentsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pRecoverPaymentsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pRecoverPaymentsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PRecoverPaymentsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pRecoverPaymentsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_pRecoverPaymentsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_pRecoverPaymentsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PRecoverPaymentsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_pRecoverPaymentsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_readyForReviewBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_readyForReviewBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_readyForReviewBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_readyForReviewDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_readyForReviewDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_readyForReviewDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanITTools_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanITTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanITTools_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TaskStatus)
	fc.Result = res
	return ec.marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanITTools_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanITTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_agencyOrStateHelp(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().AgencyOrStateHelp(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.AgencyOrStateHelpType)
	fc.Result = res
	return ec.marshalNAgencyOrStateHelpType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AgencyOrStateHelpType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_agencyOrStateHelpOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgencyOrStateHelpOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_agencyOrStateHelpNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgencyOrStateHelpNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_agencyOrStateHelpNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_stakeholders(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_stakeholders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().Stakeholders(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.StakeholdersType)
	fc.Result = res
	return ec.marshalNStakeholdersType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_stakeholders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type StakeholdersType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_stakeholdersOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_stakeholdersOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StakeholdersOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_stakeholdersOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_stakeholdersNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_stakeholdersNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StakeholdersNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_stakeholdersNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_helpdeskUse(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_helpdeskUse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HelpdeskUse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_helpdeskUse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_helpdeskUseNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_helpdeskUseNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HelpdeskUseNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_helpdeskUseNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_contractorSupport(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_contractorSupport(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().ContractorSupport(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ContractorSupportType)
	fc.Result = res
	return ec.marshalNContractorSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_contractorSupport(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContractorSupportType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_contractorSupportOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorSupportOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_contractorSupportOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_contractorSupportHow(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportHow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorSupportHow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_contractorSupportHow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_contractorSupportNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_contractorSupportNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorSupportNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_contractorSupportNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_iddocSupport(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_iddocSupport(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IddocSupport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_iddocSupport(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_iddocSupportNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_iddocSupportNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IddocSupportNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_iddocSupportNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_technicalContactsIdentified(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentified(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TechnicalContactsIdentified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentified(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_technicalContactsIdentifiedDetail(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedDetail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TechnicalContactsIdentifiedDetail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedDetail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_technicalContactsIdentifiedNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TechnicalContactsIdentifiedNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_technicalContactsIdentifiedNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_captureParticipantInfo(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_captureParticipantInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaptureParticipantInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_captureParticipantInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_captureParticipantInfoNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_captureParticipantInfoNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaptureParticipantInfoNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_captureParticipantInfoNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_icdOwner(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_icdOwner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcdOwner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_icdOwner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_draftIcdDueDate(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_draftIcdDueDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DraftIcdDueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_draftIcdDueDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_icdNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_icdNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IcdNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_icdNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_uatNeeds(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_uatNeeds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UatNeeds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_uatNeeds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_stcNeeds(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_stcNeeds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StcNeeds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_stcNeeds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_testingTimelines(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_testingTimelines(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestingTimelines, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_testingTimelines(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_testingNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_testingNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestingNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_testingNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataMonitoringFileTypes(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().DataMonitoringFileTypes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.MonitoringFileType)
	fc.Result = res
	return ec.marshalNMonitoringFileType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MonitoringFileType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataMonitoringFileOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataMonitoringFileOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataMonitoringFileOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataResponseType(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataResponseType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataResponseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataResponseType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataResponseFileFrequency(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataResponseFileFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataResponseFileFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataResponseFileFrequency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataFullTimeOrIncremental(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataFullTimeOrIncremental(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataFullTimeOrIncremental, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DataFullTimeOrIncrementalType)
	fc.Result = res
	return ec.marshalODataFullTimeOrIncrementalType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataFullTimeOrIncrementalType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataFullTimeOrIncremental(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataFullTimeOrIncrementalType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_eftSetUp(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_eftSetUp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EftSetUp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_eftSetUp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_unsolicitedAdjustmentsIncluded(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_unsolicitedAdjustmentsIncluded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnsolicitedAdjustmentsIncluded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_unsolicitedAdjustmentsIncluded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataFlowDiagramsNeeded(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataFlowDiagramsNeeded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataFlowDiagramsNeeded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataFlowDiagramsNeeded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_produceBenefitEnhancementFiles(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_produceBenefitEnhancementFiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProduceBenefitEnhancementFiles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_produceBenefitEnhancementFiles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_fileNamingConventions(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_fileNamingConventions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileNamingConventions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_fileNamingConventions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataMonitoringNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataMonitoringNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataMonitoringNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataMonitoringNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_benchmarkForPerformance(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BenchmarkForPerformance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.BenchmarkForPerformanceType)
	fc.Result = res
	return ec.marshalOBenchmarkForPerformanceType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐBenchmarkForPerformanceType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BenchmarkForPerformanceType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_benchmarkForPerformanceNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformanceNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BenchmarkForPerformanceNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_benchmarkForPerformanceNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_computePerformanceScores(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_computePerformanceScores(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComputePerformanceScores, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_computePerformanceScores(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_computePerformanceScoresNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_computePerformanceScoresNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ComputePerformanceScoresNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_computePerformanceScoresNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_riskAdjustPerformance(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustPerformance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskAdjustPerformance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_riskAdjustPerformance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_riskAdjustFeedback(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustFeedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskAdjustFeedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_riskAdjustFeedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_riskAdjustPayments(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskAdjustPayments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_riskAdjustPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_riskAdjustOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskAdjustOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_riskAdjustOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_riskAdjustNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_riskAdjustNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskAdjustNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_riskAdjustNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appealPerformance(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appealPerformance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppealPerformance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appealPerformance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appealFeedback(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appealFeedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppealFeedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appealFeedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appealPayments(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appealPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppealPayments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appealPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appealOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appealOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppealOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appealOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appealNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appealNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppealNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appealNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_evaluationApproaches(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_evaluationApproaches(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().EvaluationApproaches(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.EvaluationApproachType)
	fc.Result = res
	return ec.marshalNEvaluationApproachType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_evaluationApproaches(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EvaluationApproachType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_evaluationApproachOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_evaluationApproachOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvaluationApproachOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_evaluationApproachOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_evalutaionApproachNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_evalutaionApproachNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvalutaionApproachNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_evalutaionApproachNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_ccmInvolvment(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().CcmInvolvment(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.CcmInvolvmentType)
	fc.Result = res
	return ec.marshalNCcmInvolvmentType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_ccmInvolvment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CcmInvolvmentType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_ccmInvolvmentOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcmInvolvmentOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_ccmInvolvmentNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcmInvolvmentNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_ccmInvolvmentNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataNeededForMonitoring(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoring(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().DataNeededForMonitoring(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.DataForMonitoringType)
	fc.Result = res
	return ec.marshalNDataForMonitoringType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoring(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataForMonitoringType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataNeededForMonitoringOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataNeededForMonitoringOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataNeededForMonitoringNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataNeededForMonitoringNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataNeededForMonitoringNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataToSendParticicipants(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().DataToSendParticicipants(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.DataToSendParticipantsType)
	fc.Result = res
	return ec.marshalNDataToSendParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataToSendParticipantsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataToSendParticicipantsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataToSendParticicipantsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataToSendParticicipantsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataToSendParticicipantsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataToSendParticicipantsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_shareCclfData(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_shareCclfData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShareCclfData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_shareCclfData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_shareCclfDataNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_shareCclfDataNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShareCclfDataNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_shareCclfDataNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_sendFilesBetweenCcw(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcw(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendFilesBetweenCcw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcw(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_sendFilesBetweenCcwNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcwNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendFilesBetweenCcwNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_sendFilesBetweenCcwNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appToSendFilesToKnown(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToKnown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppToSendFilesToKnown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appToSendFilesToKnown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appToSendFilesToWhich(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToWhich(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppToSendFilesToWhich, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appToSendFilesToWhich(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_appToSendFilesToNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_appToSendFilesToNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppToSendFilesToNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_appToSendFilesToNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipants(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseCcwForFileDistribiutionToParticipants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipantsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipantsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseCcwForFileDistribiutionToParticipantsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipantsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_developNewQualityMeasures(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasures(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DevelopNewQualityMeasures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasures(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_developNewQualityMeasuresNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasuresNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DevelopNewQualityMeasuresNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_developNewQualityMeasuresNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_qualityPerformanceImpactsPayment(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPayment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityPerformanceImpactsPayment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPayment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_qualityPerformanceImpactsPaymentNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPaymentNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityPerformanceImpactsPaymentNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_qualityPerformanceImpactsPaymentNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataSharingStarts(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStarts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSharingStarts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DataStartsType)
	fc.Result = res
	return ec.marshalODataStartsType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataStartsType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataSharingStarts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataStartsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataSharingStartsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStartsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSharingStartsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataSharingStartsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataSharingFrequency(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataSharingFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().DataSharingFrequency(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.DataFrequencyType)
	fc.Result = res
	return ec.marshalNDataFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataSharingFrequency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataFrequencyType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataSharingFrequencyOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataSharingFrequencyOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSharingFrequencyOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataSharingFrequencyOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataSharingStartsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataSharingStartsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSharingStartsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataSharingStartsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataCollectionStarts(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionStarts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataCollectionStarts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DataStartsType)
	fc.Result = res
	return ec.marshalODataStartsType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataStartsType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataCollectionStarts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataStartsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataCollectionStartsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionStartsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataCollectionStartsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataCollectionStartsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataCollectionFrequency(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().DataCollectionFrequency(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.DataFrequencyType)
	fc.Result = res
	return ec.marshalNDataFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataFrequencyType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataCollectionFrequencyOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataCollectionFrequencyOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_dataCollectionFrequencyNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataCollectionFrequencyNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_dataCollectionFrequencyNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_qualityReportingStarts(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStarts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityReportingStarts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DataStartsType)
	fc.Result = res
	return ec.marshalODataStartsType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataStartsType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_qualityReportingStarts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataStartsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_qualityReportingStartsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityReportingStartsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_qualityReportingStartsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityReportingStartsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_qualityReportingStartsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_modelLearningSystems(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanOpsEvalAndLearning().ModelLearningSystems(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ModelLearningSystemType)
	fc.Result = res
	return ec.marshalNModelLearningSystemType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_modelLearningSystems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ModelLearningSystemType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_modelLearningSystemsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelLearningSystemsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_modelLearningSystemsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelLearningSystemsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_modelLearningSystemsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_anticipatedChallenges(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_anticipatedChallenges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnticipatedChallenges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_anticipatedChallenges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_readyForReviewBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_readyForReviewBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_readyForReviewDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_readyForReviewDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_readyForReviewDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanOpsEvalAndLearning_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanOpsEvalAndLearning) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanOpsEvalAndLearning_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TaskStatus)
	fc.Result = res
	return ec.marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanOpsEvalAndLearning_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanOpsEvalAndLearning",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participants(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanParticipantsAndProviders().Participants(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ParticipantsType)
	fc.Result = res
	return ec.marshalNParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ParticipantsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_medicareProviderType(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_medicareProviderType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MedicareProviderType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_medicareProviderType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_statesEngagement(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_statesEngagement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatesEngagement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_statesEngagement(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantsCurrentlyInModels(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsCurrentlyInModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantsCurrentlyInModelsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModelsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsCurrentlyInModelsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantsCurrentlyInModelsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_modelApplicationLevel(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_modelApplicationLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelApplicationLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_modelApplicationLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_expectedNumberOfParticipants(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_expectedNumberOfParticipants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedNumberOfParticipants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_expectedNumberOfParticipants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_estimateConfidence(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_estimateConfidence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimateConfidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ConfidenceType)
	fc.Result = res
	return ec.marshalOConfidenceType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐConfidenceType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_estimateConfidence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConfidenceType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_confidenceNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_confidenceNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfidenceNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_confidenceNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_recruitmentMethod(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_recruitmentMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecruitmentMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RecruitmentType)
	fc.Result = res
	return ec.marshalORecruitmentType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐRecruitmentType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_recruitmentMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RecruitmentType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_recruitmentOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_recruitmentOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecruitmentOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_recruitmentOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_recruitmentNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_recruitmentNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecruitmentNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_recruitmentNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_selectionMethod(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_selectionMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanParticipantsAndProviders().SelectionMethod(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ParticipantSelectionType)
	fc.Result = res
	return ec.marshalNParticipantSelectionType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_selectionMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ParticipantSelectionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_selectionOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_selectionOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectionOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_selectionOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_selectionNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_selectionNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectionNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_selectionNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_communicationMethod(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_communicationMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanParticipantsAndProviders().CommunicationMethod(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ParticipantCommunicationType)
	fc.Result = res
	return ec.marshalNParticipantCommunicationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_communicationMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ParticipantCommunicationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_communicationMethodOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_communicationMethodOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationMethodOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_communicationMethodOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_communicationNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_communicationNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_communicationNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantAssumeRisk(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantAssumeRisk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantAssumeRisk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantAssumeRisk(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_riskType(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_riskType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ParticipantRiskType)
	fc.Result = res
	return ec.marshalOParticipantRiskType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐParticipantRiskType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_riskType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ParticipantRiskType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_riskOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_riskOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_riskOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_riskNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_riskNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_riskNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_willRiskChange(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_willRiskChange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WillRiskChange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_willRiskChange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_willRiskChangeNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_willRiskChangeNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WillRiskChangeNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_willRiskChangeNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_coordinateWork(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_coordinateWork(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CoordinateWork, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_coordinateWork(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_coordinateWorkNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_coordinateWorkNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CoordinateWorkNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_coordinateWorkNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_gainsharePayments(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_gainsharePayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GainsharePayments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_gainsharePayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_gainsharePaymentsTrack(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_gainsharePaymentsTrack(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GainsharePaymentsTrack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_gainsharePaymentsTrack(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_gainsharePaymentsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_gainsharePaymentsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GainsharePaymentsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_gainsharePaymentsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantsIds(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantsIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanParticipantsAndProviders().ParticipantsIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ParticipantsIDType)
	fc.Result = res
	return ec.marshalNParticipantsIDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantsIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ParticipantsIDType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantsIdsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantsIdsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsIdsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantsIdsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_participantsIDSNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_participantsIDSNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsIDSNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_participantsIDSNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerAdditionFrequency(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderAdditionFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.FrequencyType)
	fc.Result = res
	return ec.marshalOFrequencyType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFrequencyType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerAdditionFrequency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FrequencyType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerAdditionFrequencyOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderAdditionFrequencyOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerAdditionFrequencyNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderAdditionFrequencyNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerAdditionFrequencyNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerAddMethod(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerAddMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanParticipantsAndProviders().ProviderAddMethod(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ProviderAddType)
	fc.Result = res
	return ec.marshalNProviderAddType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerAddMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ProviderAddType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerAddMethodOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerAddMethodOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderAddMethodOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerAddMethodOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerAddMethodNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerAddMethodNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderAddMethodNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerAddMethodNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerLeaveMethod(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanParticipantsAndProviders().ProviderLeaveMethod(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ProviderLeaveType)
	fc.Result = res
	return ec.marshalNProviderLeaveType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerLeaveMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ProviderLeaveType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerLeaveMethodOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethodOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderLeaveMethodOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerLeaveMethodOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerLeaveMethodNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerLeaveMethodNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderLeaveMethodNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerLeaveMethodNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerOverlap(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerOverlap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderOverlap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.OverlapType)
	fc.Result = res
	return ec.marshalOOverlapType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOverlapType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerOverlap(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OverlapType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerOverlapHierarchy(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerOverlapHierarchy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderOverlapHierarchy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerOverlapHierarchy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_providerOverlapNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_providerOverlapNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderOverlapNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_providerOverlapNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_readyForReviewBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_readyForReviewBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_readyForReviewBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_readyForReviewDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_readyForReviewDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_readyForReviewDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanParticipantsAndProviders_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanParticipantsAndProviders) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanParticipantsAndProviders_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TaskStatus)
	fc.Result = res
	return ec.marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanParticipantsAndProviders_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanParticipantsAndProviders",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_id(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSource(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().FundingSource(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.FundingSource)
	fc.Result = res
	return ec.marshalNFundingSource2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FundingSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSourceTrustFund(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSourceTrustFund(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingSourceTrustFund, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSourceTrustFund(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSourceOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSourceOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingSourceOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSourceOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSourceNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSourceNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingSourceNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSourceNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSourceR(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSourceR(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().FundingSourceR(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.FundingSource)
	fc.Result = res
	return ec.marshalNFundingSource2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSourceR(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FundingSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSourceRTrustFund(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSourceRTrustFund(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingSourceRTrustFund, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSourceRTrustFund(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSourceROther(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSourceROther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingSourceROther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSourceROther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingSourceRNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingSourceRNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingSourceRNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingSourceRNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payRecipients(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payRecipients(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().PayRecipients(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.PayRecipient)
	fc.Result = res
	return ec.marshalNPayRecipient2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipientᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payRecipients(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PayRecipient does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payRecipientsOtherSpecification(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payRecipientsOtherSpecification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayRecipientsOtherSpecification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payRecipientsOtherSpecification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payRecipientsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payRecipientsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayRecipientsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payRecipientsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payType(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().PayType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.PayType)
	fc.Result = res
	return ec.marshalNPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PayType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payTypeNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payTypeNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayTypeNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payTypeNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payClaims(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payClaims(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().PayClaims(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.ClaimsBasedPayType)
	fc.Result = res
	return ec.marshalNClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payClaims(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ClaimsBasedPayType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payClaimsOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payClaimsOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayClaimsOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payClaimsOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payClaimsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payClaimsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayClaimsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payClaimsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_shouldAnyProvidersExcludedFFSSystems(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_shouldAnyProvidersExcludedFFSSystems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldAnyProvidersExcludedFFSSystems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_shouldAnyProvidersExcludedFFSSystems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_shouldAnyProviderExcludedFFSSystemsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_shouldAnyProviderExcludedFFSSystemsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldAnyProviderExcludedFFSSystemsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_shouldAnyProviderExcludedFFSSystemsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_changesMedicarePhysicianFeeSchedule(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeSchedule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangesMedicarePhysicianFeeSchedule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_changesMedicarePhysicianFeeSchedule(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_changesMedicarePhysicianFeeScheduleNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeScheduleNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangesMedicarePhysicianFeeScheduleNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_changesMedicarePhysicianFeeScheduleNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_affectsMedicareSecondaryPayerClaims(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaims(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectsMedicareSecondaryPayerClaims, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaims(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_affectsMedicareSecondaryPayerClaimsHow(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsHow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectsMedicareSecondaryPayerClaimsHow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsHow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_affectsMedicareSecondaryPayerClaimsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectsMedicareSecondaryPayerClaimsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_payModelDifferentiation(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_payModelDifferentiation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayModelDifferentiation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_payModelDifferentiation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_creatingDependenciesBetweenServices(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_creatingDependenciesBetweenServices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatingDependenciesBetweenServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_creatingDependenciesBetweenServices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_creatingDependenciesBetweenServicesNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_creatingDependenciesBetweenServicesNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatingDependenciesBetweenServicesNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_creatingDependenciesBetweenServicesNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_needsClaimsDataCollection(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_needsClaimsDataCollection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeedsClaimsDataCollection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_needsClaimsDataCollection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_needsClaimsDataCollectionNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_needsClaimsDataCollectionNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeedsClaimsDataCollectionNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_needsClaimsDataCollectionNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_providingThirdPartyFile(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_providingThirdPartyFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvidingThirdPartyFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_providingThirdPartyFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_isContractorAwareTestDataRequirements(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_isContractorAwareTestDataRequirements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsContractorAwareTestDataRequirements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_isContractorAwareTestDataRequirements(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_beneficiaryCostSharingLevelAndHandling(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_beneficiaryCostSharingLevelAndHandling(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryCostSharingLevelAndHandling, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_beneficiaryCostSharingLevelAndHandling(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_waiveBeneficiaryCostSharingForAnyServices(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingForAnyServices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WaiveBeneficiaryCostSharingForAnyServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_waiveBeneficiaryCostSharingForAnyServices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_waiveBeneficiaryCostSharingServiceSpecification(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingServiceSpecification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WaiveBeneficiaryCostSharingServiceSpecification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_waiveBeneficiaryCostSharingServiceSpecification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_waiverOnlyAppliesPartOfPayment(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_waiverOnlyAppliesPartOfPayment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WaiverOnlyAppliesPartOfPayment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_waiverOnlyAppliesPartOfPayment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_waiveBeneficiaryCostSharingNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WaiveBeneficiaryCostSharingNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_waiveBeneficiaryCostSharingNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_nonClaimsPayments(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_nonClaimsPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().NonClaimsPayments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.NonClaimsBasedPayType)
	fc.Result = res
	return ec.marshalNNonClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_nonClaimsPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NonClaimsBasedPayType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_nonClaimsPaymentOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_nonClaimsPaymentOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().NonClaimsPaymentOther(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_nonClaimsPaymentOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_paymentCalculationOwner(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_paymentCalculationOwner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentCalculationOwner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_paymentCalculationOwner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_numberPaymentsPerPayCycle(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_numberPaymentsPerPayCycle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberPaymentsPerPayCycle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_numberPaymentsPerPayCycle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_numberPaymentsPerPayCycleNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_numberPaymentsPerPayCycleNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberPaymentsPerPayCycleNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_numberPaymentsPerPayCycleNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_sharedSystemsInvolvedAdditionalClaimPayment(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPayment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharedSystemsInvolvedAdditionalClaimPayment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPayment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_sharedSystemsInvolvedAdditionalClaimPaymentNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPaymentNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharedSystemsInvolvedAdditionalClaimPaymentNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPaymentNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_planningToUseInnovationPaymentContractor(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanningToUseInnovationPaymentContractor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_planningToUseInnovationPaymentContractor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_planningToUseInnovationPaymentContractorNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractorNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanningToUseInnovationPaymentContractorNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_planningToUseInnovationPaymentContractorNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_fundingStructure(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_fundingStructure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingStructure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_fundingStructure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_expectedCalculationComplexityLevel(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_expectedCalculationComplexityLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedCalculationComplexityLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.ComplexityCalculationLevelType)
	fc.Result = res
	return ec.marshalOComplexityCalculationLevelType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐComplexityCalculationLevelType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_expectedCalculationComplexityLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ComplexityCalculationLevelType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_expectedCalculationComplexityLevelNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_expectedCalculationComplexityLevelNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedCalculationComplexityLevelNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_expectedCalculationComplexityLevelNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_canParticipantsSelectBetweenPaymentMechanisms(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanisms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanParticipantsSelectBetweenPaymentMechanisms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanisms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_canParticipantsSelectBetweenPaymentMechanismsHow(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsHow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanParticipantsSelectBetweenPaymentMechanismsHow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsHow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_canParticipantsSelectBetweenPaymentMechanismsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanParticipantsSelectBetweenPaymentMechanismsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_anticipatedPaymentFrequency(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_anticipatedPaymentFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PlanPayments().AnticipatedPaymentFrequency(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.AnticipatedPaymentFrequencyType)
	fc.Result = res
	return ec.marshalNAnticipatedPaymentFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_anticipatedPaymentFrequency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AnticipatedPaymentFrequencyType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_anticipatedPaymentFrequencyOther(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnticipatedPaymentFrequencyOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_anticipatedPaymentFrequencyOther(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_anticipatedPaymentFrequencyNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnticipatedPaymentFrequencyNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_anticipatedPaymentFrequencyNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_willRecoverPayments(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_willRecoverPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WillRecoverPayments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_willRecoverPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_willRecoverPaymentsNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_willRecoverPaymentsNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WillRecoverPaymentsNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_willRecoverPaymentsNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_anticipateReconcilingPaymentsRetrospectively(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectively(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnticipateReconcilingPaymentsRetrospectively, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectively(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_anticipateReconcilingPaymentsRetrospectivelyNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectivelyNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnticipateReconcilingPaymentsRetrospectivelyNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectivelyNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_paymentStartDate(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_paymentStartDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_paymentStartDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_paymentStartDateNote(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_paymentStartDateNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentStartDateNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_paymentStartDateNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_createdDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_createdDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_createdDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_modifiedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_modifiedDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_modifiedDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_modifiedDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_readyForReviewBy(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_readyForReviewBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_readyForReviewBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_readyForReviewDts(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_readyForReviewDts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadyForReviewDts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_readyForReviewDts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlanPayments_status(ctx context.Context, field graphql.CollectedField, obj *models.PlanPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlanPayments_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TaskStatus)
	fc.Result = res
	return ec.marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlanPayments_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlanPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_currentUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_currentUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CurrentUser(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CurrentUser)
	fc.Result = res
	return ec.marshalNCurrentUser2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCurrentUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_currentUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "launchDarkly":
				return ec.fieldContext_CurrentUser_launchDarkly(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CurrentUser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_modelPlan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_modelPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ModelPlan(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ModelPlan)
	fc.Result = res
	return ec.marshalNModelPlan2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_modelPlan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModelPlan_id(ctx, field)
			case "modelName":
				return ec.fieldContext_ModelPlan_modelName(ctx, field)
			case "archived":
				return ec.fieldContext_ModelPlan_archived(ctx, field)
			case "createdBy":
				return ec.fieldContext_ModelPlan_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_ModelPlan_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ModelPlan_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ModelPlan_modifiedDts(ctx, field)
			case "basics":
				return ec.fieldContext_ModelPlan_basics(ctx, field)
			case "generalCharacteristics":
				return ec.fieldContext_ModelPlan_generalCharacteristics(ctx, field)
			case "participantsAndProviders":
				return ec.fieldContext_ModelPlan_participantsAndProviders(ctx, field)
			case "beneficiaries":
				return ec.fieldContext_ModelPlan_beneficiaries(ctx, field)
			case "opsEvalAndLearning":
				return ec.fieldContext_ModelPlan_opsEvalAndLearning(ctx, field)
			case "collaborators":
				return ec.fieldContext_ModelPlan_collaborators(ctx, field)
			case "documents":
				return ec.fieldContext_ModelPlan_documents(ctx, field)
			case "discussions":
				return ec.fieldContext_ModelPlan_discussions(ctx, field)
			case "payments":
				return ec.fieldContext_ModelPlan_payments(ctx, field)
			case "itTools":
				return ec.fieldContext_ModelPlan_itTools(ctx, field)
			case "status":
				return ec.fieldContext_ModelPlan_status(ctx, field)
			case "isFavorite":
				return ec.fieldContext_ModelPlan_isFavorite(ctx, field)
			case "isCollaborator":
				return ec.fieldContext_ModelPlan_isCollaborator(ctx, field)
			case "crTdls":
				return ec.fieldContext_ModelPlan_crTdls(ctx, field)
			case "nameHistory":
				return ec.fieldContext_ModelPlan_nameHistory(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModelPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_modelPlan_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_planDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_planDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PlanDocument(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanDocument)
	fc.Result = res
	return ec.marshalNPlanDocument2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_planDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanDocument_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanDocument_modelPlanID(ctx, field)
			case "fileType":
				return ec.fieldContext_PlanDocument_fileType(ctx, field)
			case "bucket":
				return ec.fieldContext_PlanDocument_bucket(ctx, field)
			case "fileKey":
				return ec.fieldContext_PlanDocument_fileKey(ctx, field)
			case "virusScanned":
				return ec.fieldContext_PlanDocument_virusScanned(ctx, field)
			case "virusClean":
				return ec.fieldContext_PlanDocument_virusClean(ctx, field)
			case "fileName":
				return ec.fieldContext_PlanDocument_fileName(ctx, field)
			case "fileSize":
				return ec.fieldContext_PlanDocument_fileSize(ctx, field)
			case "documentType":
				return ec.fieldContext_PlanDocument_documentType(ctx, field)
			case "otherType":
				return ec.fieldContext_PlanDocument_otherType(ctx, field)
			case "optionalNotes":
				return ec.fieldContext_PlanDocument_optionalNotes(ctx, field)
			case "downloadUrl":
				return ec.fieldContext_PlanDocument_downloadUrl(ctx, field)
			case "deletedAt":
				return ec.fieldContext_PlanDocument_deletedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanDocument_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanDocument_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanDocument_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanDocument_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanDocument", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_planDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_modelPlanCollection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_modelPlanCollection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ModelPlanCollection(rctx, fc.Args["includeAll"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ModelPlan)
	fc.Result = res
	return ec.marshalNModelPlan2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_modelPlanCollection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModelPlan_id(ctx, field)
			case "modelName":
				return ec.fieldContext_ModelPlan_modelName(ctx, field)
			case "archived":
				return ec.fieldContext_ModelPlan_archived(ctx, field)
			case "createdBy":
				return ec.fieldContext_ModelPlan_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_ModelPlan_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ModelPlan_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ModelPlan_modifiedDts(ctx, field)
			case "basics":
				return ec.fieldContext_ModelPlan_basics(ctx, field)
			case "generalCharacteristics":
				return ec.fieldContext_ModelPlan_generalCharacteristics(ctx, field)
			case "participantsAndProviders":
				return ec.fieldContext_ModelPlan_participantsAndProviders(ctx, field)
			case "beneficiaries":
				return ec.fieldContext_ModelPlan_beneficiaries(ctx, field)
			case "opsEvalAndLearning":
				return ec.fieldContext_ModelPlan_opsEvalAndLearning(ctx, field)
			case "collaborators":
				return ec.fieldContext_ModelPlan_collaborators(ctx, field)
			case "documents":
				return ec.fieldContext_ModelPlan_documents(ctx, field)
			case "discussions":
				return ec.fieldContext_ModelPlan_discussions(ctx, field)
			case "payments":
				return ec.fieldContext_ModelPlan_payments(ctx, field)
			case "itTools":
				return ec.fieldContext_ModelPlan_itTools(ctx, field)
			case "status":
				return ec.fieldContext_ModelPlan_status(ctx, field)
			case "isFavorite":
				return ec.fieldContext_ModelPlan_isFavorite(ctx, field)
			case "isCollaborator":
				return ec.fieldContext_ModelPlan_isCollaborator(ctx, field)
			case "crTdls":
				return ec.fieldContext_ModelPlan_crTdls(ctx, field)
			case "nameHistory":
				return ec.fieldContext_ModelPlan_nameHistory(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModelPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_modelPlanCollection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_existingModelCollection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_existingModelCollection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ExistingModelCollection(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ExistingModel)
	fc.Result = res
	return ec.marshalNExistingModel2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_existingModelCollection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ExistingModel_id(ctx, field)
			case "modelName":
				return ec.fieldContext_ExistingModel_modelName(ctx, field)
			case "stage":
				return ec.fieldContext_ExistingModel_stage(ctx, field)
			case "numberOfParticipants":
				return ec.fieldContext_ExistingModel_numberOfParticipants(ctx, field)
			case "category":
				return ec.fieldContext_ExistingModel_category(ctx, field)
			case "authority":
				return ec.fieldContext_ExistingModel_authority(ctx, field)
			case "description":
				return ec.fieldContext_ExistingModel_description(ctx, field)
			case "numberOfBeneficiariesImpacted":
				return ec.fieldContext_ExistingModel_numberOfBeneficiariesImpacted(ctx, field)
			case "numberOfPhysiciansImpacted":
				return ec.fieldContext_ExistingModel_numberOfPhysiciansImpacted(ctx, field)
			case "dateBegan":
				return ec.fieldContext_ExistingModel_dateBegan(ctx, field)
			case "dateEnded":
				return ec.fieldContext_ExistingModel_dateEnded(ctx, field)
			case "states":
				return ec.fieldContext_ExistingModel_states(ctx, field)
			case "keywords":
				return ec.fieldContext_ExistingModel_keywords(ctx, field)
			case "url":
				return ec.fieldContext_ExistingModel_url(ctx, field)
			case "displayModelSummary":
				return ec.fieldContext_ExistingModel_displayModelSummary(ctx, field)
			case "createdBy":
				return ec.fieldContext_ExistingModel_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_ExistingModel_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_ExistingModel_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_ExistingModel_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExistingModel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_cedarPersonsByCommonName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cedarPersonsByCommonName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CedarPersonsByCommonName(rctx, fc.Args["commonName"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.UserInfo)
	fc.Result = res
	return ec.marshalNUserInfo2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐUserInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cedarPersonsByCommonName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "commonName":
				return ec.fieldContext_UserInfo_commonName(ctx, field)
			case "email":
				return ec.fieldContext_UserInfo_email(ctx, field)
			case "euaUserId":
				return ec.fieldContext_UserInfo_euaUserId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cedarPersonsByCommonName_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_planCollaboratorByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_planCollaboratorByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PlanCollaboratorByID(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCollaborator)
	fc.Result = res
	return ec.marshalNPlanCollaborator2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaborator(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_planCollaboratorByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCollaborator_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCollaborator_modelPlanID(ctx, field)
			case "euaUserID":
				return ec.fieldContext_PlanCollaborator_euaUserID(ctx, field)
			case "fullName":
				return ec.fieldContext_PlanCollaborator_fullName(ctx, field)
			case "teamRole":
				return ec.fieldContext_PlanCollaborator_teamRole(ctx, field)
			case "email":
				return ec.fieldContext_PlanCollaborator_email(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCollaborator_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCollaborator_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCollaborator_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCollaborator_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCollaborator", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_planCollaboratorByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_taskListSectionLocks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_taskListSectionLocks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TaskListSectionLocks(rctx, fc.Args["modelPlanID"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TaskListSectionLockStatus)
	fc.Result = res
	return ec.marshalNTaskListSectionLockStatus2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatusᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_taskListSectionLocks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modelPlanID":
				return ec.fieldContext_TaskListSectionLockStatus_modelPlanID(ctx, field)
			case "section":
				return ec.fieldContext_TaskListSectionLockStatus_section(ctx, field)
			case "lockedBy":
				return ec.fieldContext_TaskListSectionLockStatus_lockedBy(ctx, field)
			case "isAssessment":
				return ec.fieldContext_TaskListSectionLockStatus_isAssessment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskListSectionLockStatus", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_taskListSectionLocks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_planPayments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_planPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PlanPayments(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanPayments)
	fc.Result = res
	return ec.marshalNPlanPayments2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanPayments(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_planPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanPayments_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanPayments_modelPlanID(ctx, field)
			case "fundingSource":
				return ec.fieldContext_PlanPayments_fundingSource(ctx, field)
			case "fundingSourceTrustFund":
				return ec.fieldContext_PlanPayments_fundingSourceTrustFund(ctx, field)
			case "fundingSourceOther":
				return ec.fieldContext_PlanPayments_fundingSourceOther(ctx, field)
			case "fundingSourceNote":
				return ec.fieldContext_PlanPayments_fundingSourceNote(ctx, field)
			case "fundingSourceR":
				return ec.fieldContext_PlanPayments_fundingSourceR(ctx, field)
			case "fundingSourceRTrustFund":
				return ec.fieldContext_PlanPayments_fundingSourceRTrustFund(ctx, field)
			case "fundingSourceROther":
				return ec.fieldContext_PlanPayments_fundingSourceROther(ctx, field)
			case "fundingSourceRNote":
				return ec.fieldContext_PlanPayments_fundingSourceRNote(ctx, field)
			case "payRecipients":
				return ec.fieldContext_PlanPayments_payRecipients(ctx, field)
			case "payRecipientsOtherSpecification":
				return ec.fieldContext_PlanPayments_payRecipientsOtherSpecification(ctx, field)
			case "payRecipientsNote":
				return ec.fieldContext_PlanPayments_payRecipientsNote(ctx, field)
			case "payType":
				return ec.fieldContext_PlanPayments_payType(ctx, field)
			case "payTypeNote":
				return ec.fieldContext_PlanPayments_payTypeNote(ctx, field)
			case "payClaims":
				return ec.fieldContext_PlanPayments_payClaims(ctx, field)
			case "payClaimsOther":
				return ec.fieldContext_PlanPayments_payClaimsOther(ctx, field)
			case "payClaimsNote":
				return ec.fieldContext_PlanPayments_payClaimsNote(ctx, field)
			case "shouldAnyProvidersExcludedFFSSystems":
				return ec.fieldContext_PlanPayments_shouldAnyProvidersExcludedFFSSystems(ctx, field)
			case "shouldAnyProviderExcludedFFSSystemsNote":
				return ec.fieldContext_PlanPayments_shouldAnyProviderExcludedFFSSystemsNote(ctx, field)
			case "changesMedicarePhysicianFeeSchedule":
				return ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeSchedule(ctx, field)
			case "changesMedicarePhysicianFeeScheduleNote":
				return ec.fieldContext_PlanPayments_changesMedicarePhysicianFeeScheduleNote(ctx, field)
			case "affectsMedicareSecondaryPayerClaims":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaims(ctx, field)
			case "affectsMedicareSecondaryPayerClaimsHow":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsHow(ctx, field)
			case "affectsMedicareSecondaryPayerClaimsNote":
				return ec.fieldContext_PlanPayments_affectsMedicareSecondaryPayerClaimsNote(ctx, field)
			case "payModelDifferentiation":
				return ec.fieldContext_PlanPayments_payModelDifferentiation(ctx, field)
			case "creatingDependenciesBetweenServices":
				return ec.fieldContext_PlanPayments_creatingDependenciesBetweenServices(ctx, field)
			case "creatingDependenciesBetweenServicesNote":
				return ec.fieldContext_PlanPayments_creatingDependenciesBetweenServicesNote(ctx, field)
			case "needsClaimsDataCollection":
				return ec.fieldContext_PlanPayments_needsClaimsDataCollection(ctx, field)
			case "needsClaimsDataCollectionNote":
				return ec.fieldContext_PlanPayments_needsClaimsDataCollectionNote(ctx, field)
			case "providingThirdPartyFile":
				return ec.fieldContext_PlanPayments_providingThirdPartyFile(ctx, field)
			case "isContractorAwareTestDataRequirements":
				return ec.fieldContext_PlanPayments_isContractorAwareTestDataRequirements(ctx, field)
			case "beneficiaryCostSharingLevelAndHandling":
				return ec.fieldContext_PlanPayments_beneficiaryCostSharingLevelAndHandling(ctx, field)
			case "waiveBeneficiaryCostSharingForAnyServices":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingForAnyServices(ctx, field)
			case "waiveBeneficiaryCostSharingServiceSpecification":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingServiceSpecification(ctx, field)
			case "waiverOnlyAppliesPartOfPayment":
				return ec.fieldContext_PlanPayments_waiverOnlyAppliesPartOfPayment(ctx, field)
			case "waiveBeneficiaryCostSharingNote":
				return ec.fieldContext_PlanPayments_waiveBeneficiaryCostSharingNote(ctx, field)
			case "nonClaimsPayments":
				return ec.fieldContext_PlanPayments_nonClaimsPayments(ctx, field)
			case "nonClaimsPaymentOther":
				return ec.fieldContext_PlanPayments_nonClaimsPaymentOther(ctx, field)
			case "paymentCalculationOwner":
				return ec.fieldContext_PlanPayments_paymentCalculationOwner(ctx, field)
			case "numberPaymentsPerPayCycle":
				return ec.fieldContext_PlanPayments_numberPaymentsPerPayCycle(ctx, field)
			case "numberPaymentsPerPayCycleNote":
				return ec.fieldContext_PlanPayments_numberPaymentsPerPayCycleNote(ctx, field)
			case "sharedSystemsInvolvedAdditionalClaimPayment":
				return ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPayment(ctx, field)
			case "sharedSystemsInvolvedAdditionalClaimPaymentNote":
				return ec.fieldContext_PlanPayments_sharedSystemsInvolvedAdditionalClaimPaymentNote(ctx, field)
			case "planningToUseInnovationPaymentContractor":
				return ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractor(ctx, field)
			case "planningToUseInnovationPaymentContractorNote":
				return ec.fieldContext_PlanPayments_planningToUseInnovationPaymentContractorNote(ctx, field)
			case "fundingStructure":
				return ec.fieldContext_PlanPayments_fundingStructure(ctx, field)
			case "expectedCalculationComplexityLevel":
				return ec.fieldContext_PlanPayments_expectedCalculationComplexityLevel(ctx, field)
			case "expectedCalculationComplexityLevelNote":
				return ec.fieldContext_PlanPayments_expectedCalculationComplexityLevelNote(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanisms":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanisms(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanismsHow":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsHow(ctx, field)
			case "canParticipantsSelectBetweenPaymentMechanismsNote":
				return ec.fieldContext_PlanPayments_canParticipantsSelectBetweenPaymentMechanismsNote(ctx, field)
			case "anticipatedPaymentFrequency":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequency(ctx, field)
			case "anticipatedPaymentFrequencyOther":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyOther(ctx, field)
			case "anticipatedPaymentFrequencyNote":
				return ec.fieldContext_PlanPayments_anticipatedPaymentFrequencyNote(ctx, field)
			case "willRecoverPayments":
				return ec.fieldContext_PlanPayments_willRecoverPayments(ctx, field)
			case "willRecoverPaymentsNote":
				return ec.fieldContext_PlanPayments_willRecoverPaymentsNote(ctx, field)
			case "anticipateReconcilingPaymentsRetrospectively":
				return ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectively(ctx, field)
			case "anticipateReconcilingPaymentsRetrospectivelyNote":
				return ec.fieldContext_PlanPayments_anticipateReconcilingPaymentsRetrospectivelyNote(ctx, field)
			case "paymentStartDate":
				return ec.fieldContext_PlanPayments_paymentStartDate(ctx, field)
			case "paymentStartDateNote":
				return ec.fieldContext_PlanPayments_paymentStartDateNote(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanPayments_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanPayments_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanPayments_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanPayments_modifiedDts(ctx, field)
			case "readyForReviewBy":
				return ec.fieldContext_PlanPayments_readyForReviewBy(ctx, field)
			case "readyForReviewDts":
				return ec.fieldContext_PlanPayments_readyForReviewDts(ctx, field)
			case "status":
				return ec.fieldContext_PlanPayments_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanPayments", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_planPayments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_ndaInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_ndaInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NdaInfo(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NDAInfo)
	fc.Result = res
	return ec.marshalNNDAInfo2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNDAInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_ndaInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "agreed":
				return ec.fieldContext_NDAInfo_agreed(ctx, field)
			case "agreedDts":
				return ec.fieldContext_NDAInfo_agreedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NDAInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_crTdl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_crTdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CrTdl(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PlanCrTdl)
	fc.Result = res
	return ec.marshalNPlanCrTdl2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdl(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_crTdl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlanCrTdl_id(ctx, field)
			case "modelPlanID":
				return ec.fieldContext_PlanCrTdl_modelPlanID(ctx, field)
			case "idNumber":
				return ec.fieldContext_PlanCrTdl_idNumber(ctx, field)
			case "dateInitiated":
				return ec.fieldContext_PlanCrTdl_dateInitiated(ctx, field)
			case "title":
				return ec.fieldContext_PlanCrTdl_title(ctx, field)
			case "note":
				return ec.fieldContext_PlanCrTdl_note(ctx, field)
			case "createdBy":
				return ec.fieldContext_PlanCrTdl_createdBy(ctx, field)
			case "createdDts":
				return ec.fieldContext_PlanCrTdl_createdDts(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_PlanCrTdl_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_PlanCrTdl_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlanCrTdl", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_crTdl_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_auditChanges(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_auditChanges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AuditChanges(rctx, fc.Args["tableName"].(string), fc.Args["primaryKey"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.AuditChange)
	fc.Result = res
	return ec.marshalNAuditChange2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAuditChangeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_auditChanges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AuditChange_id(ctx, field)
			case "primaryKey":
				return ec.fieldContext_AuditChange_primaryKey(ctx, field)
			case "foreignKey":
				return ec.fieldContext_AuditChange_foreignKey(ctx, field)
			case "tableName":
				return ec.fieldContext_AuditChange_tableName(ctx, field)
			case "action":
				return ec.fieldContext_AuditChange_action(ctx, field)
			case "fields":
				return ec.fieldContext_AuditChange_fields(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_AuditChange_modifiedBy(ctx, field)
			case "modifiedDts":
				return ec.fieldContext_AuditChange_modifiedDts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuditChange", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_auditChanges_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_onTaskListSectionLocksChanged(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_onTaskListSectionLocksChanged(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().OnTaskListSectionLocksChanged(rctx, fc.Args["modelPlanID"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.TaskListSectionLockStatusChanged); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/cmsgov/mint-app/pkg/graph/model.TaskListSectionLockStatusChanged`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.TaskListSectionLockStatusChanged):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNTaskListSectionLockStatusChanged2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatusChanged(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_onTaskListSectionLocksChanged(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "changeType":
				return ec.fieldContext_TaskListSectionLockStatusChanged_changeType(ctx, field)
			case "lockStatus":
				return ec.fieldContext_TaskListSectionLockStatusChanged_lockStatus(ctx, field)
			case "actionType":
				return ec.fieldContext_TaskListSectionLockStatusChanged_actionType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskListSectionLockStatusChanged", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_onTaskListSectionLocksChanged_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_onLockTaskListSectionContext(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_onLockTaskListSectionContext(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Subscription().OnLockTaskListSectionContext(rctx, fc.Args["modelPlanID"].(uuid.UUID))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx, "MINT_USER")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(<-chan *model.TaskListSectionLockStatusChanged); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be <-chan *github.com/cmsgov/mint-app/pkg/graph/model.TaskListSectionLockStatusChanged`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.TaskListSectionLockStatusChanged):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNTaskListSectionLockStatusChanged2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatusChanged(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_onLockTaskListSectionContext(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "changeType":
				return ec.fieldContext_TaskListSectionLockStatusChanged_changeType(ctx, field)
			case "lockStatus":
				return ec.fieldContext_TaskListSectionLockStatusChanged_lockStatus(ctx, field)
			case "actionType":
				return ec.fieldContext_TaskListSectionLockStatusChanged_actionType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskListSectionLockStatusChanged", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_onLockTaskListSectionContext_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _TaskListSectionLockStatus_modelPlanID(ctx context.Context, field graphql.CollectedField, obj *model.TaskListSectionLockStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskListSectionLockStatus_modelPlanID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskListSectionLockStatus_modelPlanID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskListSectionLockStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskListSectionLockStatus_section(ctx context.Context, field graphql.CollectedField, obj *model.TaskListSectionLockStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskListSectionLockStatus_section(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Section, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.TaskListSection)
	fc.Result = res
	return ec.marshalNTaskListSection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskListSectionLockStatus_section(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskListSectionLockStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskListSection does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskListSectionLockStatus_lockedBy(ctx context.Context, field graphql.CollectedField, obj *model.TaskListSectionLockStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskListSectionLockStatus_lockedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LockedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskListSectionLockStatus_lockedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskListSectionLockStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskListSectionLockStatus_isAssessment(ctx context.Context, field graphql.CollectedField, obj *model.TaskListSectionLockStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskListSectionLockStatus_isAssessment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAssessment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskListSectionLockStatus_isAssessment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskListSectionLockStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskListSectionLockStatusChanged_changeType(ctx context.Context, field graphql.CollectedField, obj *model.TaskListSectionLockStatusChanged) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskListSectionLockStatusChanged_changeType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ChangeType)
	fc.Result = res
	return ec.marshalNChangeType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐChangeType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskListSectionLockStatusChanged_changeType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskListSectionLockStatusChanged",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ChangeType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskListSectionLockStatusChanged_lockStatus(ctx context.Context, field graphql.CollectedField, obj *model.TaskListSectionLockStatusChanged) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskListSectionLockStatusChanged_lockStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LockStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TaskListSectionLockStatus)
	fc.Result = res
	return ec.marshalNTaskListSectionLockStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskListSectionLockStatusChanged_lockStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskListSectionLockStatusChanged",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modelPlanID":
				return ec.fieldContext_TaskListSectionLockStatus_modelPlanID(ctx, field)
			case "section":
				return ec.fieldContext_TaskListSectionLockStatus_section(ctx, field)
			case "lockedBy":
				return ec.fieldContext_TaskListSectionLockStatus_lockedBy(ctx, field)
			case "isAssessment":
				return ec.fieldContext_TaskListSectionLockStatus_isAssessment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskListSectionLockStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskListSectionLockStatusChanged_actionType(ctx context.Context, field graphql.CollectedField, obj *model.TaskListSectionLockStatusChanged) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TaskListSectionLockStatusChanged_actionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActionType)
	fc.Result = res
	return ec.marshalNActionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐActionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TaskListSectionLockStatusChanged_actionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskListSectionLockStatusChanged",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_commonName(ctx context.Context, field graphql.CollectedField, obj *models.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_commonName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommonName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_commonName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_email(ctx context.Context, field graphql.CollectedField, obj *models.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserInfo().Email(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_euaUserId(ctx context.Context, field graphql.CollectedField, obj *models.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_euaUserId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EuaUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_euaUserId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputDiscussionReplyCreateInput(ctx context.Context, obj interface{}) (model.DiscussionReplyCreateInput, error) {
	var it model.DiscussionReplyCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["resolution"]; !present {
		asMap["resolution"] = false
	}

	fieldsInOrder := [...]string{"discussionID", "content", "resolution"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "discussionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discussionID"))
			it.DiscussionID, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "resolution":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resolution"))
			it.Resolution, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlanCollaboratorCreateInput(ctx context.Context, obj interface{}) (model.PlanCollaboratorCreateInput, error) {
	var it model.PlanCollaboratorCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"modelPlanID", "euaUserID", "fullName", "teamRole", "email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "modelPlanID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
			it.ModelPlanID, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "euaUserID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("euaUserID"))
			it.EuaUserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fullName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullName"))
			it.FullName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "teamRole":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teamRole"))
			it.TeamRole, err = ec.unmarshalNTeamRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTeamRole(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlanCrTdlCreateInput(ctx context.Context, obj interface{}) (model.PlanCrTdlCreateInput, error) {
	var it model.PlanCrTdlCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"modelPlanID", "idNumber", "dateInitiated", "title", "note"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "modelPlanID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
			it.ModelPlanID, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNumber"))
			it.IDNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateInitiated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateInitiated"))
			it.DateInitiated, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlanDiscussionCreateInput(ctx context.Context, obj interface{}) (model.PlanDiscussionCreateInput, error) {
	var it model.PlanDiscussionCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"modelPlanID", "content"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "modelPlanID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
			it.ModelPlanID, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlanDocumentInput(ctx context.Context, obj interface{}) (model.PlanDocumentInput, error) {
	var it model.PlanDocumentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"modelPlanID", "fileData", "documentType", "otherTypeDescription", "optionalNotes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "modelPlanID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("modelPlanID"))
			it.ModelPlanID, err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileData":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileData"))
			it.FileData, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentType"))
			it.DocumentType, err = ec.unmarshalNDocumentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDocumentType(ctx, v)
			if err != nil {
				return it, err
			}
		case "otherTypeDescription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherTypeDescription"))
			it.OtherTypeDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "optionalNotes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optionalNotes"))
			it.OptionalNotes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var auditChangeImplementors = []string{"AuditChange"}

func (ec *executionContext) _AuditChange(ctx context.Context, sel ast.SelectionSet, obj *models.AuditChange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, auditChangeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuditChange")
		case "id":

			out.Values[i] = ec._AuditChange_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "primaryKey":

			out.Values[i] = ec._AuditChange_primaryKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "foreignKey":

			out.Values[i] = ec._AuditChange_foreignKey(ctx, field, obj)

		case "tableName":

			out.Values[i] = ec._AuditChange_tableName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "action":

			out.Values[i] = ec._AuditChange_action(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fields":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._AuditChange_fields(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modifiedBy":

			out.Values[i] = ec._AuditChange_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._AuditChange_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var currentUserImplementors = []string{"CurrentUser"}

func (ec *executionContext) _CurrentUser(ctx context.Context, sel ast.SelectionSet, obj *model.CurrentUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, currentUserImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CurrentUser")
		case "launchDarkly":

			out.Values[i] = ec._CurrentUser_launchDarkly(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var discussionReplyImplementors = []string{"DiscussionReply"}

func (ec *executionContext) _DiscussionReply(ctx context.Context, sel ast.SelectionSet, obj *models.DiscussionReply) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, discussionReplyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DiscussionReply")
		case "id":

			out.Values[i] = ec._DiscussionReply_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "discussionID":

			out.Values[i] = ec._DiscussionReply_discussionID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":

			out.Values[i] = ec._DiscussionReply_content(ctx, field, obj)

		case "resolution":

			out.Values[i] = ec._DiscussionReply_resolution(ctx, field, obj)

		case "isAssessment":

			out.Values[i] = ec._DiscussionReply_isAssessment(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":

			out.Values[i] = ec._DiscussionReply_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdDts":

			out.Values[i] = ec._DiscussionReply_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modifiedBy":

			out.Values[i] = ec._DiscussionReply_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._DiscussionReply_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var existingModelImplementors = []string{"ExistingModel"}

func (ec *executionContext) _ExistingModel(ctx context.Context, sel ast.SelectionSet, obj *models.ExistingModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, existingModelImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExistingModel")
		case "id":

			out.Values[i] = ec._ExistingModel_id(ctx, field, obj)

		case "modelName":

			out.Values[i] = ec._ExistingModel_modelName(ctx, field, obj)

		case "stage":

			out.Values[i] = ec._ExistingModel_stage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "numberOfParticipants":

			out.Values[i] = ec._ExistingModel_numberOfParticipants(ctx, field, obj)

		case "category":

			out.Values[i] = ec._ExistingModel_category(ctx, field, obj)

		case "authority":

			out.Values[i] = ec._ExistingModel_authority(ctx, field, obj)

		case "description":

			out.Values[i] = ec._ExistingModel_description(ctx, field, obj)

		case "numberOfBeneficiariesImpacted":

			out.Values[i] = ec._ExistingModel_numberOfBeneficiariesImpacted(ctx, field, obj)

		case "numberOfPhysiciansImpacted":

			out.Values[i] = ec._ExistingModel_numberOfPhysiciansImpacted(ctx, field, obj)

		case "dateBegan":

			out.Values[i] = ec._ExistingModel_dateBegan(ctx, field, obj)

		case "dateEnded":

			out.Values[i] = ec._ExistingModel_dateEnded(ctx, field, obj)

		case "states":

			out.Values[i] = ec._ExistingModel_states(ctx, field, obj)

		case "keywords":

			out.Values[i] = ec._ExistingModel_keywords(ctx, field, obj)

		case "url":

			out.Values[i] = ec._ExistingModel_url(ctx, field, obj)

		case "displayModelSummary":

			out.Values[i] = ec._ExistingModel_displayModelSummary(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._ExistingModel_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdDts":

			out.Values[i] = ec._ExistingModel_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modifiedBy":

			out.Values[i] = ec._ExistingModel_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._ExistingModel_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var launchDarklySettingsImplementors = []string{"LaunchDarklySettings"}

func (ec *executionContext) _LaunchDarklySettings(ctx context.Context, sel ast.SelectionSet, obj *model.LaunchDarklySettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, launchDarklySettingsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LaunchDarklySettings")
		case "userKey":

			out.Values[i] = ec._LaunchDarklySettings_userKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "signedHash":

			out.Values[i] = ec._LaunchDarklySettings_signedHash(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var modelPlanImplementors = []string{"ModelPlan"}

func (ec *executionContext) _ModelPlan(ctx context.Context, sel ast.SelectionSet, obj *models.ModelPlan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modelPlanImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModelPlan")
		case "id":

			out.Values[i] = ec._ModelPlan_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelName":

			out.Values[i] = ec._ModelPlan_modelName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "archived":

			out.Values[i] = ec._ModelPlan_archived(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":

			out.Values[i] = ec._ModelPlan_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdDts":

			out.Values[i] = ec._ModelPlan_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._ModelPlan_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._ModelPlan_modifiedDts(ctx, field, obj)

		case "basics":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_basics(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "generalCharacteristics":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_generalCharacteristics(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "participantsAndProviders":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_participantsAndProviders(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "beneficiaries":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_beneficiaries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "opsEvalAndLearning":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_opsEvalAndLearning(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "collaborators":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_collaborators(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "documents":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_documents(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "discussions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_discussions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "payments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_payments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "itTools":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_itTools(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "status":

			out.Values[i] = ec._ModelPlan_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isFavorite":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_isFavorite(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "isCollaborator":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_isCollaborator(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "crTdls":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_crTdls(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "nameHistory":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ModelPlan_nameHistory(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createModelPlan":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createModelPlan(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateModelPlan":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateModelPlan(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPlanCollaborator":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPlanCollaborator(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanCollaborator":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanCollaborator(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePlanCollaborator":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlanCollaborator(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanBasics":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanBasics(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanGeneralCharacteristics":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanGeneralCharacteristics(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanBeneficiaries":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanBeneficiaries(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanParticipantsAndProviders":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanParticipantsAndProviders(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanItTools":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanItTools(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanOpsEvalAndLearning":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanOpsEvalAndLearning(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "uploadNewPlanDocument":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_uploadNewPlanDocument(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePlanDocument":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlanDocument(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPlanDiscussion":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPlanDiscussion(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanDiscussion":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanDiscussion(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePlanDiscussion":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlanDiscussion(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createDiscussionReply":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createDiscussionReply(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDiscussionReply":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDiscussionReply(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteDiscussionReply":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDiscussionReply(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lockTaskListSection":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_lockTaskListSection(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unlockTaskListSection":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unlockTaskListSection(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unlockAllTaskListSections":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unlockAllTaskListSections(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanPayments":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanPayments(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "agreeToNDA":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_agreeToNDA(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addPlanFavorite":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addPlanFavorite(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePlanFavorite":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlanFavorite(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPlanCrTdl":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPlanCrTdl(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePlanCrTdl":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlanCrTdl(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePlanCrTdl":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlanCrTdl(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nDAInfoImplementors = []string{"NDAInfo"}

func (ec *executionContext) _NDAInfo(ctx context.Context, sel ast.SelectionSet, obj *model.NDAInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nDAInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NDAInfo")
		case "agreed":

			out.Values[i] = ec._NDAInfo_agreed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "agreedDts":

			out.Values[i] = ec._NDAInfo_agreedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planBasicsImplementors = []string{"PlanBasics"}

func (ec *executionContext) _PlanBasics(ctx context.Context, sel ast.SelectionSet, obj *models.PlanBasics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planBasicsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanBasics")
		case "id":

			out.Values[i] = ec._PlanBasics_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanBasics_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelCategory":

			out.Values[i] = ec._PlanBasics_modelCategory(ctx, field, obj)

		case "cmsCenters":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBasics_cmsCenters(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "cmsOther":

			out.Values[i] = ec._PlanBasics_cmsOther(ctx, field, obj)

		case "cmmiGroups":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBasics_cmmiGroups(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modelType":

			out.Values[i] = ec._PlanBasics_modelType(ctx, field, obj)

		case "problem":

			out.Values[i] = ec._PlanBasics_problem(ctx, field, obj)

		case "goal":

			out.Values[i] = ec._PlanBasics_goal(ctx, field, obj)

		case "testInterventions":

			out.Values[i] = ec._PlanBasics_testInterventions(ctx, field, obj)

		case "note":

			out.Values[i] = ec._PlanBasics_note(ctx, field, obj)

		case "completeICIP":

			out.Values[i] = ec._PlanBasics_completeICIP(ctx, field, obj)

		case "clearanceStarts":

			out.Values[i] = ec._PlanBasics_clearanceStarts(ctx, field, obj)

		case "clearanceEnds":

			out.Values[i] = ec._PlanBasics_clearanceEnds(ctx, field, obj)

		case "announced":

			out.Values[i] = ec._PlanBasics_announced(ctx, field, obj)

		case "applicationsStart":

			out.Values[i] = ec._PlanBasics_applicationsStart(ctx, field, obj)

		case "applicationsEnd":

			out.Values[i] = ec._PlanBasics_applicationsEnd(ctx, field, obj)

		case "performancePeriodStarts":

			out.Values[i] = ec._PlanBasics_performancePeriodStarts(ctx, field, obj)

		case "performancePeriodEnds":

			out.Values[i] = ec._PlanBasics_performancePeriodEnds(ctx, field, obj)

		case "wrapUpEnds":

			out.Values[i] = ec._PlanBasics_wrapUpEnds(ctx, field, obj)

		case "highLevelNote":

			out.Values[i] = ec._PlanBasics_highLevelNote(ctx, field, obj)

		case "phasedIn":

			out.Values[i] = ec._PlanBasics_phasedIn(ctx, field, obj)

		case "phasedInNote":

			out.Values[i] = ec._PlanBasics_phasedInNote(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanBasics_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdDts":

			out.Values[i] = ec._PlanBasics_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanBasics_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._PlanBasics_modifiedDts(ctx, field, obj)

		case "readyForReviewBy":

			out.Values[i] = ec._PlanBasics_readyForReviewBy(ctx, field, obj)

		case "readyForReviewDts":

			out.Values[i] = ec._PlanBasics_readyForReviewDts(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanBasics_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planBeneficiariesImplementors = []string{"PlanBeneficiaries"}

func (ec *executionContext) _PlanBeneficiaries(ctx context.Context, sel ast.SelectionSet, obj *models.PlanBeneficiaries) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planBeneficiariesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanBeneficiaries")
		case "id":

			out.Values[i] = ec._PlanBeneficiaries_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanBeneficiaries_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "beneficiaries":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBeneficiaries_beneficiaries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "beneficiariesOther":

			out.Values[i] = ec._PlanBeneficiaries_beneficiariesOther(ctx, field, obj)

		case "beneficiariesNote":

			out.Values[i] = ec._PlanBeneficiaries_beneficiariesNote(ctx, field, obj)

		case "treatDualElligibleDifferent":

			out.Values[i] = ec._PlanBeneficiaries_treatDualElligibleDifferent(ctx, field, obj)

		case "treatDualElligibleDifferentHow":

			out.Values[i] = ec._PlanBeneficiaries_treatDualElligibleDifferentHow(ctx, field, obj)

		case "treatDualElligibleDifferentNote":

			out.Values[i] = ec._PlanBeneficiaries_treatDualElligibleDifferentNote(ctx, field, obj)

		case "excludeCertainCharacteristics":

			out.Values[i] = ec._PlanBeneficiaries_excludeCertainCharacteristics(ctx, field, obj)

		case "excludeCertainCharacteristicsCriteria":

			out.Values[i] = ec._PlanBeneficiaries_excludeCertainCharacteristicsCriteria(ctx, field, obj)

		case "excludeCertainCharacteristicsNote":

			out.Values[i] = ec._PlanBeneficiaries_excludeCertainCharacteristicsNote(ctx, field, obj)

		case "numberPeopleImpacted":

			out.Values[i] = ec._PlanBeneficiaries_numberPeopleImpacted(ctx, field, obj)

		case "estimateConfidence":

			out.Values[i] = ec._PlanBeneficiaries_estimateConfidence(ctx, field, obj)

		case "confidenceNote":

			out.Values[i] = ec._PlanBeneficiaries_confidenceNote(ctx, field, obj)

		case "beneficiarySelectionMethod":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanBeneficiaries_beneficiarySelectionMethod(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "beneficiarySelectionOther":

			out.Values[i] = ec._PlanBeneficiaries_beneficiarySelectionOther(ctx, field, obj)

		case "beneficiarySelectionNote":

			out.Values[i] = ec._PlanBeneficiaries_beneficiarySelectionNote(ctx, field, obj)

		case "beneficiarySelectionFrequency":

			out.Values[i] = ec._PlanBeneficiaries_beneficiarySelectionFrequency(ctx, field, obj)

		case "beneficiarySelectionFrequencyOther":

			out.Values[i] = ec._PlanBeneficiaries_beneficiarySelectionFrequencyOther(ctx, field, obj)

		case "beneficiarySelectionFrequencyNote":

			out.Values[i] = ec._PlanBeneficiaries_beneficiarySelectionFrequencyNote(ctx, field, obj)

		case "beneficiaryOverlap":

			out.Values[i] = ec._PlanBeneficiaries_beneficiaryOverlap(ctx, field, obj)

		case "beneficiaryOverlapNote":

			out.Values[i] = ec._PlanBeneficiaries_beneficiaryOverlapNote(ctx, field, obj)

		case "precedenceRules":

			out.Values[i] = ec._PlanBeneficiaries_precedenceRules(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanBeneficiaries_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdDts":

			out.Values[i] = ec._PlanBeneficiaries_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanBeneficiaries_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._PlanBeneficiaries_modifiedDts(ctx, field, obj)

		case "readyForReviewBy":

			out.Values[i] = ec._PlanBeneficiaries_readyForReviewBy(ctx, field, obj)

		case "readyForReviewDts":

			out.Values[i] = ec._PlanBeneficiaries_readyForReviewDts(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanBeneficiaries_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planCollaboratorImplementors = []string{"PlanCollaborator"}

func (ec *executionContext) _PlanCollaborator(ctx context.Context, sel ast.SelectionSet, obj *models.PlanCollaborator) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planCollaboratorImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanCollaborator")
		case "id":

			out.Values[i] = ec._PlanCollaborator_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanCollaborator_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "euaUserID":

			out.Values[i] = ec._PlanCollaborator_euaUserID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fullName":

			out.Values[i] = ec._PlanCollaborator_fullName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teamRole":

			out.Values[i] = ec._PlanCollaborator_teamRole(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":

			out.Values[i] = ec._PlanCollaborator_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":

			out.Values[i] = ec._PlanCollaborator_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdDts":

			out.Values[i] = ec._PlanCollaborator_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanCollaborator_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._PlanCollaborator_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planCrTdlImplementors = []string{"PlanCrTdl"}

func (ec *executionContext) _PlanCrTdl(ctx context.Context, sel ast.SelectionSet, obj *models.PlanCrTdl) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planCrTdlImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanCrTdl")
		case "id":

			out.Values[i] = ec._PlanCrTdl_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanCrTdl_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "idNumber":

			out.Values[i] = ec._PlanCrTdl_idNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dateInitiated":

			out.Values[i] = ec._PlanCrTdl_dateInitiated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":

			out.Values[i] = ec._PlanCrTdl_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":

			out.Values[i] = ec._PlanCrTdl_note(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanCrTdl_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdDts":

			out.Values[i] = ec._PlanCrTdl_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanCrTdl_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._PlanCrTdl_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planDiscussionImplementors = []string{"PlanDiscussion"}

func (ec *executionContext) _PlanDiscussion(ctx context.Context, sel ast.SelectionSet, obj *models.PlanDiscussion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planDiscussionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanDiscussion")
		case "id":

			out.Values[i] = ec._PlanDiscussion_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanDiscussion_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "content":

			out.Values[i] = ec._PlanDiscussion_content(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanDiscussion_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "replies":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDiscussion_replies(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "isAssessment":

			out.Values[i] = ec._PlanDiscussion_isAssessment(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdBy":

			out.Values[i] = ec._PlanDiscussion_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdDts":

			out.Values[i] = ec._PlanDiscussion_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanDiscussion_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._PlanDiscussion_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planDocumentImplementors = []string{"PlanDocument"}

func (ec *executionContext) _PlanDocument(ctx context.Context, sel ast.SelectionSet, obj *models.PlanDocument) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planDocumentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanDocument")
		case "id":

			out.Values[i] = ec._PlanDocument_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanDocument_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fileType":

			out.Values[i] = ec._PlanDocument_fileType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "bucket":

			out.Values[i] = ec._PlanDocument_bucket(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fileKey":

			out.Values[i] = ec._PlanDocument_fileKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "virusScanned":

			out.Values[i] = ec._PlanDocument_virusScanned(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "virusClean":

			out.Values[i] = ec._PlanDocument_virusClean(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fileName":

			out.Values[i] = ec._PlanDocument_fileName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fileSize":

			out.Values[i] = ec._PlanDocument_fileSize(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "documentType":

			out.Values[i] = ec._PlanDocument_documentType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "otherType":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDocument_otherType(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "optionalNotes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDocument_optionalNotes(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "downloadUrl":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanDocument_downloadUrl(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "deletedAt":

			out.Values[i] = ec._PlanDocument_deletedAt(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanDocument_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdDts":

			out.Values[i] = ec._PlanDocument_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanDocument_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._PlanDocument_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planFavoriteImplementors = []string{"PlanFavorite"}

func (ec *executionContext) _PlanFavorite(ctx context.Context, sel ast.SelectionSet, obj *models.PlanFavorite) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planFavoriteImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanFavorite")
		case "id":

			out.Values[i] = ec._PlanFavorite_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanFavorite_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._PlanFavorite_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdBy":

			out.Values[i] = ec._PlanFavorite_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdDts":

			out.Values[i] = ec._PlanFavorite_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanFavorite_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._PlanFavorite_modifiedDts(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planGeneralCharacteristicsImplementors = []string{"PlanGeneralCharacteristics"}

func (ec *executionContext) _PlanGeneralCharacteristics(ctx context.Context, sel ast.SelectionSet, obj *models.PlanGeneralCharacteristics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planGeneralCharacteristicsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanGeneralCharacteristics")
		case "id":

			out.Values[i] = ec._PlanGeneralCharacteristics_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanGeneralCharacteristics_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isNewModel":

			out.Values[i] = ec._PlanGeneralCharacteristics_isNewModel(ctx, field, obj)

		case "existingModel":

			out.Values[i] = ec._PlanGeneralCharacteristics_existingModel(ctx, field, obj)

		case "resemblesExistingModel":

			out.Values[i] = ec._PlanGeneralCharacteristics_resemblesExistingModel(ctx, field, obj)

		case "resemblesExistingModelWhich":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_resemblesExistingModelWhich(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "resemblesExistingModelHow":

			out.Values[i] = ec._PlanGeneralCharacteristics_resemblesExistingModelHow(ctx, field, obj)

		case "resemblesExistingModelNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_resemblesExistingModelNote(ctx, field, obj)

		case "hasComponentsOrTracks":

			out.Values[i] = ec._PlanGeneralCharacteristics_hasComponentsOrTracks(ctx, field, obj)

		case "hasComponentsOrTracksDiffer":

			out.Values[i] = ec._PlanGeneralCharacteristics_hasComponentsOrTracksDiffer(ctx, field, obj)

		case "hasComponentsOrTracksNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_hasComponentsOrTracksNote(ctx, field, obj)

		case "alternativePaymentModel":

			out.Values[i] = ec._PlanGeneralCharacteristics_alternativePaymentModel(ctx, field, obj)

		case "alternativePaymentModelTypes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_alternativePaymentModelTypes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "alternativePaymentModelNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_alternativePaymentModelNote(ctx, field, obj)

		case "keyCharacteristics":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_keyCharacteristics(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "keyCharacteristicsOther":

			out.Values[i] = ec._PlanGeneralCharacteristics_keyCharacteristicsOther(ctx, field, obj)

		case "keyCharacteristicsNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_keyCharacteristicsNote(ctx, field, obj)

		case "collectPlanBids":

			out.Values[i] = ec._PlanGeneralCharacteristics_collectPlanBids(ctx, field, obj)

		case "collectPlanBidsNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_collectPlanBidsNote(ctx, field, obj)

		case "managePartCDEnrollment":

			out.Values[i] = ec._PlanGeneralCharacteristics_managePartCDEnrollment(ctx, field, obj)

		case "managePartCDEnrollmentNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_managePartCDEnrollmentNote(ctx, field, obj)

		case "planContactUpdated":

			out.Values[i] = ec._PlanGeneralCharacteristics_planContactUpdated(ctx, field, obj)

		case "planContactUpdatedNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_planContactUpdatedNote(ctx, field, obj)

		case "careCoordinationInvolved":

			out.Values[i] = ec._PlanGeneralCharacteristics_careCoordinationInvolved(ctx, field, obj)

		case "careCoordinationInvolvedDescription":

			out.Values[i] = ec._PlanGeneralCharacteristics_careCoordinationInvolvedDescription(ctx, field, obj)

		case "careCoordinationInvolvedNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_careCoordinationInvolvedNote(ctx, field, obj)

		case "additionalServicesInvolved":

			out.Values[i] = ec._PlanGeneralCharacteristics_additionalServicesInvolved(ctx, field, obj)

		case "additionalServicesInvolvedDescription":

			out.Values[i] = ec._PlanGeneralCharacteristics_additionalServicesInvolvedDescription(ctx, field, obj)

		case "additionalServicesInvolvedNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_additionalServicesInvolvedNote(ctx, field, obj)

		case "communityPartnersInvolved":

			out.Values[i] = ec._PlanGeneralCharacteristics_communityPartnersInvolved(ctx, field, obj)

		case "communityPartnersInvolvedDescription":

			out.Values[i] = ec._PlanGeneralCharacteristics_communityPartnersInvolvedDescription(ctx, field, obj)

		case "communityPartnersInvolvedNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_communityPartnersInvolvedNote(ctx, field, obj)

		case "geographiesTargeted":

			out.Values[i] = ec._PlanGeneralCharacteristics_geographiesTargeted(ctx, field, obj)

		case "geographiesTargetedTypes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_geographiesTargetedTypes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "geographiesTargetedTypesOther":

			out.Values[i] = ec._PlanGeneralCharacteristics_geographiesTargetedTypesOther(ctx, field, obj)

		case "geographiesTargetedAppliedTo":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_geographiesTargetedAppliedTo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "geographiesTargetedAppliedToOther":

			out.Values[i] = ec._PlanGeneralCharacteristics_geographiesTargetedAppliedToOther(ctx, field, obj)

		case "geographiesTargetedNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_geographiesTargetedNote(ctx, field, obj)

		case "participationOptions":

			out.Values[i] = ec._PlanGeneralCharacteristics_participationOptions(ctx, field, obj)

		case "participationOptionsNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_participationOptionsNote(ctx, field, obj)

		case "agreementTypes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_agreementTypes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "agreementTypesOther":

			out.Values[i] = ec._PlanGeneralCharacteristics_agreementTypesOther(ctx, field, obj)

		case "multiplePatricipationAgreementsNeeded":

			out.Values[i] = ec._PlanGeneralCharacteristics_multiplePatricipationAgreementsNeeded(ctx, field, obj)

		case "multiplePatricipationAgreementsNeededNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_multiplePatricipationAgreementsNeededNote(ctx, field, obj)

		case "rulemakingRequired":

			out.Values[i] = ec._PlanGeneralCharacteristics_rulemakingRequired(ctx, field, obj)

		case "rulemakingRequiredDescription":

			out.Values[i] = ec._PlanGeneralCharacteristics_rulemakingRequiredDescription(ctx, field, obj)

		case "rulemakingRequiredNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_rulemakingRequiredNote(ctx, field, obj)

		case "authorityAllowances":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_authorityAllowances(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "authorityAllowancesOther":

			out.Values[i] = ec._PlanGeneralCharacteristics_authorityAllowancesOther(ctx, field, obj)

		case "authorityAllowancesNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_authorityAllowancesNote(ctx, field, obj)

		case "waiversRequired":

			out.Values[i] = ec._PlanGeneralCharacteristics_waiversRequired(ctx, field, obj)

		case "waiversRequiredTypes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanGeneralCharacteristics_waiversRequiredTypes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "waiversRequiredNote":

			out.Values[i] = ec._PlanGeneralCharacteristics_waiversRequiredNote(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanGeneralCharacteristics_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdDts":

			out.Values[i] = ec._PlanGeneralCharacteristics_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanGeneralCharacteristics_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._PlanGeneralCharacteristics_modifiedDts(ctx, field, obj)

		case "readyForReviewBy":

			out.Values[i] = ec._PlanGeneralCharacteristics_readyForReviewBy(ctx, field, obj)

		case "readyForReviewDts":

			out.Values[i] = ec._PlanGeneralCharacteristics_readyForReviewDts(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanGeneralCharacteristics_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planITToolsImplementors = []string{"PlanITTools"}

func (ec *executionContext) _PlanITTools(ctx context.Context, sel ast.SelectionSet, obj *models.PlanITTools) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planITToolsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanITTools")
		case "id":

			out.Values[i] = ec._PlanITTools_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanITTools_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "gcPartCD":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_gcPartCD(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "gcPartCDOther":

			out.Values[i] = ec._PlanITTools_gcPartCDOther(ctx, field, obj)

		case "gcPartCDNote":

			out.Values[i] = ec._PlanITTools_gcPartCDNote(ctx, field, obj)

		case "gcCollectBids":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_gcCollectBids(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "gcCollectBidsOther":

			out.Values[i] = ec._PlanITTools_gcCollectBidsOther(ctx, field, obj)

		case "gcCollectBidsNote":

			out.Values[i] = ec._PlanITTools_gcCollectBidsNote(ctx, field, obj)

		case "gcUpdateContract":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_gcUpdateContract(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "gcUpdateContractOther":

			out.Values[i] = ec._PlanITTools_gcUpdateContractOther(ctx, field, obj)

		case "gcUpdateContractNote":

			out.Values[i] = ec._PlanITTools_gcUpdateContractNote(ctx, field, obj)

		case "ppToAdvertise":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_ppToAdvertise(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ppToAdvertiseOther":

			out.Values[i] = ec._PlanITTools_ppToAdvertiseOther(ctx, field, obj)

		case "ppToAdvertiseNote":

			out.Values[i] = ec._PlanITTools_ppToAdvertiseNote(ctx, field, obj)

		case "ppCollectScoreReview":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_ppCollectScoreReview(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ppCollectScoreReviewOther":

			out.Values[i] = ec._PlanITTools_ppCollectScoreReviewOther(ctx, field, obj)

		case "ppCollectScoreReviewNote":

			out.Values[i] = ec._PlanITTools_ppCollectScoreReviewNote(ctx, field, obj)

		case "ppAppSupportContractor":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_ppAppSupportContractor(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ppAppSupportContractorOther":

			out.Values[i] = ec._PlanITTools_ppAppSupportContractorOther(ctx, field, obj)

		case "ppAppSupportContractorNote":

			out.Values[i] = ec._PlanITTools_ppAppSupportContractorNote(ctx, field, obj)

		case "ppCommunicateWithParticipant":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_ppCommunicateWithParticipant(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ppCommunicateWithParticipantOther":

			out.Values[i] = ec._PlanITTools_ppCommunicateWithParticipantOther(ctx, field, obj)

		case "ppCommunicateWithParticipantNote":

			out.Values[i] = ec._PlanITTools_ppCommunicateWithParticipantNote(ctx, field, obj)

		case "ppManageProviderOverlap":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_ppManageProviderOverlap(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ppManageProviderOverlapOther":

			out.Values[i] = ec._PlanITTools_ppManageProviderOverlapOther(ctx, field, obj)

		case "ppManageProviderOverlapNote":

			out.Values[i] = ec._PlanITTools_ppManageProviderOverlapNote(ctx, field, obj)

		case "bManageBeneficiaryOverlap":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_bManageBeneficiaryOverlap(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "bManageBeneficiaryOverlapOther":

			out.Values[i] = ec._PlanITTools_bManageBeneficiaryOverlapOther(ctx, field, obj)

		case "bManageBeneficiaryOverlapNote":

			out.Values[i] = ec._PlanITTools_bManageBeneficiaryOverlapNote(ctx, field, obj)

		case "oelHelpdeskSupport":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_oelHelpdeskSupport(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "oelHelpdeskSupportOther":

			out.Values[i] = ec._PlanITTools_oelHelpdeskSupportOther(ctx, field, obj)

		case "oelHelpdeskSupportNote":

			out.Values[i] = ec._PlanITTools_oelHelpdeskSupportNote(ctx, field, obj)

		case "oelManageAco":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_oelManageAco(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "oelManageAcoOther":

			out.Values[i] = ec._PlanITTools_oelManageAcoOther(ctx, field, obj)

		case "oelManageAcoNote":

			out.Values[i] = ec._PlanITTools_oelManageAcoNote(ctx, field, obj)

		case "oelPerformanceBenchmark":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_oelPerformanceBenchmark(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "oelPerformanceBenchmarkOther":

			out.Values[i] = ec._PlanITTools_oelPerformanceBenchmarkOther(ctx, field, obj)

		case "oelPerformanceBenchmarkNote":

			out.Values[i] = ec._PlanITTools_oelPerformanceBenchmarkNote(ctx, field, obj)

		case "oelProcessAppeals":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_oelProcessAppeals(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "oelProcessAppealsOther":

			out.Values[i] = ec._PlanITTools_oelProcessAppealsOther(ctx, field, obj)

		case "oelProcessAppealsNote":

			out.Values[i] = ec._PlanITTools_oelProcessAppealsNote(ctx, field, obj)

		case "oelEvaluationContractor":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_oelEvaluationContractor(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "oelEvaluationContractorOther":

			out.Values[i] = ec._PlanITTools_oelEvaluationContractorOther(ctx, field, obj)

		case "oelEvaluationContractorNote":

			out.Values[i] = ec._PlanITTools_oelEvaluationContractorNote(ctx, field, obj)

		case "oelCollectData":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_oelCollectData(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "oelCollectDataOther":

			out.Values[i] = ec._PlanITTools_oelCollectDataOther(ctx, field, obj)

		case "oelCollectDataNote":

			out.Values[i] = ec._PlanITTools_oelCollectDataNote(ctx, field, obj)

		case "oelObtainData":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_oelObtainData(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "oelObtainDataOther":

			out.Values[i] = ec._PlanITTools_oelObtainDataOther(ctx, field, obj)

		case "oelObtainDataNote":

			out.Values[i] = ec._PlanITTools_oelObtainDataNote(ctx, field, obj)

		case "oelClaimsBasedMeasures":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_oelClaimsBasedMeasures(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "oelClaimsBasedMeasuresOther":

			out.Values[i] = ec._PlanITTools_oelClaimsBasedMeasuresOther(ctx, field, obj)

		case "oelClaimsBasedMeasuresNote":

			out.Values[i] = ec._PlanITTools_oelClaimsBasedMeasuresNote(ctx, field, obj)

		case "oelQualityScores":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_oelQualityScores(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "oelQualityScoresOther":

			out.Values[i] = ec._PlanITTools_oelQualityScoresOther(ctx, field, obj)

		case "oelQualityScoresNote":

			out.Values[i] = ec._PlanITTools_oelQualityScoresNote(ctx, field, obj)

		case "oelSendReports":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_oelSendReports(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "oelSendReportsOther":

			out.Values[i] = ec._PlanITTools_oelSendReportsOther(ctx, field, obj)

		case "oelSendReportsNote":

			out.Values[i] = ec._PlanITTools_oelSendReportsNote(ctx, field, obj)

		case "oelLearningContractor":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_oelLearningContractor(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "oelLearningContractorOther":

			out.Values[i] = ec._PlanITTools_oelLearningContractorOther(ctx, field, obj)

		case "oelLearningContractorNote":

			out.Values[i] = ec._PlanITTools_oelLearningContractorNote(ctx, field, obj)

		case "oelParticipantCollaboration":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_oelParticipantCollaboration(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "oelParticipantCollaborationOther":

			out.Values[i] = ec._PlanITTools_oelParticipantCollaborationOther(ctx, field, obj)

		case "oelParticipantCollaborationNote":

			out.Values[i] = ec._PlanITTools_oelParticipantCollaborationNote(ctx, field, obj)

		case "oelEducateBeneficiaries":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_oelEducateBeneficiaries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "oelEducateBeneficiariesOther":

			out.Values[i] = ec._PlanITTools_oelEducateBeneficiariesOther(ctx, field, obj)

		case "oelEducateBeneficiariesNote":

			out.Values[i] = ec._PlanITTools_oelEducateBeneficiariesNote(ctx, field, obj)

		case "pMakeClaimsPayments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_pMakeClaimsPayments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "pMakeClaimsPaymentsOther":

			out.Values[i] = ec._PlanITTools_pMakeClaimsPaymentsOther(ctx, field, obj)

		case "pMakeClaimsPaymentsNote":

			out.Values[i] = ec._PlanITTools_pMakeClaimsPaymentsNote(ctx, field, obj)

		case "pInformFfs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_pInformFfs(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "pInformFfsOther":

			out.Values[i] = ec._PlanITTools_pInformFfsOther(ctx, field, obj)

		case "pInformFfsNote":

			out.Values[i] = ec._PlanITTools_pInformFfsNote(ctx, field, obj)

		case "pNonClaimsBasedPayments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_pNonClaimsBasedPayments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "pNonClaimsBasedPaymentsOther":

			out.Values[i] = ec._PlanITTools_pNonClaimsBasedPaymentsOther(ctx, field, obj)

		case "pNonClaimsBasedPaymentsNote":

			out.Values[i] = ec._PlanITTools_pNonClaimsBasedPaymentsNote(ctx, field, obj)

		case "pSharedSavingsPlan":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_pSharedSavingsPlan(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "pSharedSavingsPlanOther":

			out.Values[i] = ec._PlanITTools_pSharedSavingsPlanOther(ctx, field, obj)

		case "pSharedSavingsPlanNote":

			out.Values[i] = ec._PlanITTools_pSharedSavingsPlanNote(ctx, field, obj)

		case "pRecoverPayments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanITTools_pRecoverPayments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "pRecoverPaymentsOther":

			out.Values[i] = ec._PlanITTools_pRecoverPaymentsOther(ctx, field, obj)

		case "pRecoverPaymentsNote":

			out.Values[i] = ec._PlanITTools_pRecoverPaymentsNote(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanITTools_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdDts":

			out.Values[i] = ec._PlanITTools_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanITTools_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._PlanITTools_modifiedDts(ctx, field, obj)

		case "readyForReviewBy":

			out.Values[i] = ec._PlanITTools_readyForReviewBy(ctx, field, obj)

		case "readyForReviewDts":

			out.Values[i] = ec._PlanITTools_readyForReviewDts(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanITTools_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planOpsEvalAndLearningImplementors = []string{"PlanOpsEvalAndLearning"}

func (ec *executionContext) _PlanOpsEvalAndLearning(ctx context.Context, sel ast.SelectionSet, obj *models.PlanOpsEvalAndLearning) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planOpsEvalAndLearningImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanOpsEvalAndLearning")
		case "id":

			out.Values[i] = ec._PlanOpsEvalAndLearning_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanOpsEvalAndLearning_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "agencyOrStateHelp":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_agencyOrStateHelp(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "agencyOrStateHelpOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_agencyOrStateHelpOther(ctx, field, obj)

		case "agencyOrStateHelpNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_agencyOrStateHelpNote(ctx, field, obj)

		case "stakeholders":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_stakeholders(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "stakeholdersOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_stakeholdersOther(ctx, field, obj)

		case "stakeholdersNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_stakeholdersNote(ctx, field, obj)

		case "helpdeskUse":

			out.Values[i] = ec._PlanOpsEvalAndLearning_helpdeskUse(ctx, field, obj)

		case "helpdeskUseNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_helpdeskUseNote(ctx, field, obj)

		case "contractorSupport":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_contractorSupport(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "contractorSupportOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_contractorSupportOther(ctx, field, obj)

		case "contractorSupportHow":

			out.Values[i] = ec._PlanOpsEvalAndLearning_contractorSupportHow(ctx, field, obj)

		case "contractorSupportNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_contractorSupportNote(ctx, field, obj)

		case "iddocSupport":

			out.Values[i] = ec._PlanOpsEvalAndLearning_iddocSupport(ctx, field, obj)

		case "iddocSupportNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_iddocSupportNote(ctx, field, obj)

		case "technicalContactsIdentified":

			out.Values[i] = ec._PlanOpsEvalAndLearning_technicalContactsIdentified(ctx, field, obj)

		case "technicalContactsIdentifiedDetail":

			out.Values[i] = ec._PlanOpsEvalAndLearning_technicalContactsIdentifiedDetail(ctx, field, obj)

		case "technicalContactsIdentifiedNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_technicalContactsIdentifiedNote(ctx, field, obj)

		case "captureParticipantInfo":

			out.Values[i] = ec._PlanOpsEvalAndLearning_captureParticipantInfo(ctx, field, obj)

		case "captureParticipantInfoNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_captureParticipantInfoNote(ctx, field, obj)

		case "icdOwner":

			out.Values[i] = ec._PlanOpsEvalAndLearning_icdOwner(ctx, field, obj)

		case "draftIcdDueDate":

			out.Values[i] = ec._PlanOpsEvalAndLearning_draftIcdDueDate(ctx, field, obj)

		case "icdNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_icdNote(ctx, field, obj)

		case "uatNeeds":

			out.Values[i] = ec._PlanOpsEvalAndLearning_uatNeeds(ctx, field, obj)

		case "stcNeeds":

			out.Values[i] = ec._PlanOpsEvalAndLearning_stcNeeds(ctx, field, obj)

		case "testingTimelines":

			out.Values[i] = ec._PlanOpsEvalAndLearning_testingTimelines(ctx, field, obj)

		case "testingNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_testingNote(ctx, field, obj)

		case "dataMonitoringFileTypes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_dataMonitoringFileTypes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "dataMonitoringFileOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataMonitoringFileOther(ctx, field, obj)

		case "dataResponseType":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataResponseType(ctx, field, obj)

		case "dataResponseFileFrequency":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataResponseFileFrequency(ctx, field, obj)

		case "dataFullTimeOrIncremental":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataFullTimeOrIncremental(ctx, field, obj)

		case "eftSetUp":

			out.Values[i] = ec._PlanOpsEvalAndLearning_eftSetUp(ctx, field, obj)

		case "unsolicitedAdjustmentsIncluded":

			out.Values[i] = ec._PlanOpsEvalAndLearning_unsolicitedAdjustmentsIncluded(ctx, field, obj)

		case "dataFlowDiagramsNeeded":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataFlowDiagramsNeeded(ctx, field, obj)

		case "produceBenefitEnhancementFiles":

			out.Values[i] = ec._PlanOpsEvalAndLearning_produceBenefitEnhancementFiles(ctx, field, obj)

		case "fileNamingConventions":

			out.Values[i] = ec._PlanOpsEvalAndLearning_fileNamingConventions(ctx, field, obj)

		case "dataMonitoringNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataMonitoringNote(ctx, field, obj)

		case "benchmarkForPerformance":

			out.Values[i] = ec._PlanOpsEvalAndLearning_benchmarkForPerformance(ctx, field, obj)

		case "benchmarkForPerformanceNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_benchmarkForPerformanceNote(ctx, field, obj)

		case "computePerformanceScores":

			out.Values[i] = ec._PlanOpsEvalAndLearning_computePerformanceScores(ctx, field, obj)

		case "computePerformanceScoresNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_computePerformanceScoresNote(ctx, field, obj)

		case "riskAdjustPerformance":

			out.Values[i] = ec._PlanOpsEvalAndLearning_riskAdjustPerformance(ctx, field, obj)

		case "riskAdjustFeedback":

			out.Values[i] = ec._PlanOpsEvalAndLearning_riskAdjustFeedback(ctx, field, obj)

		case "riskAdjustPayments":

			out.Values[i] = ec._PlanOpsEvalAndLearning_riskAdjustPayments(ctx, field, obj)

		case "riskAdjustOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_riskAdjustOther(ctx, field, obj)

		case "riskAdjustNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_riskAdjustNote(ctx, field, obj)

		case "appealPerformance":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appealPerformance(ctx, field, obj)

		case "appealFeedback":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appealFeedback(ctx, field, obj)

		case "appealPayments":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appealPayments(ctx, field, obj)

		case "appealOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appealOther(ctx, field, obj)

		case "appealNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appealNote(ctx, field, obj)

		case "evaluationApproaches":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_evaluationApproaches(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "evaluationApproachOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_evaluationApproachOther(ctx, field, obj)

		case "evalutaionApproachNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_evalutaionApproachNote(ctx, field, obj)

		case "ccmInvolvment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_ccmInvolvment(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ccmInvolvmentOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_ccmInvolvmentOther(ctx, field, obj)

		case "ccmInvolvmentNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_ccmInvolvmentNote(ctx, field, obj)

		case "dataNeededForMonitoring":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_dataNeededForMonitoring(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "dataNeededForMonitoringOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataNeededForMonitoringOther(ctx, field, obj)

		case "dataNeededForMonitoringNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataNeededForMonitoringNote(ctx, field, obj)

		case "dataToSendParticicipants":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_dataToSendParticicipants(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "dataToSendParticicipantsOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataToSendParticicipantsOther(ctx, field, obj)

		case "dataToSendParticicipantsNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataToSendParticicipantsNote(ctx, field, obj)

		case "shareCclfData":

			out.Values[i] = ec._PlanOpsEvalAndLearning_shareCclfData(ctx, field, obj)

		case "shareCclfDataNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_shareCclfDataNote(ctx, field, obj)

		case "sendFilesBetweenCcw":

			out.Values[i] = ec._PlanOpsEvalAndLearning_sendFilesBetweenCcw(ctx, field, obj)

		case "sendFilesBetweenCcwNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_sendFilesBetweenCcwNote(ctx, field, obj)

		case "appToSendFilesToKnown":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appToSendFilesToKnown(ctx, field, obj)

		case "appToSendFilesToWhich":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appToSendFilesToWhich(ctx, field, obj)

		case "appToSendFilesToNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_appToSendFilesToNote(ctx, field, obj)

		case "useCcwForFileDistribiutionToParticipants":

			out.Values[i] = ec._PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipants(ctx, field, obj)

		case "useCcwForFileDistribiutionToParticipantsNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_useCcwForFileDistribiutionToParticipantsNote(ctx, field, obj)

		case "developNewQualityMeasures":

			out.Values[i] = ec._PlanOpsEvalAndLearning_developNewQualityMeasures(ctx, field, obj)

		case "developNewQualityMeasuresNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_developNewQualityMeasuresNote(ctx, field, obj)

		case "qualityPerformanceImpactsPayment":

			out.Values[i] = ec._PlanOpsEvalAndLearning_qualityPerformanceImpactsPayment(ctx, field, obj)

		case "qualityPerformanceImpactsPaymentNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_qualityPerformanceImpactsPaymentNote(ctx, field, obj)

		case "dataSharingStarts":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataSharingStarts(ctx, field, obj)

		case "dataSharingStartsOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataSharingStartsOther(ctx, field, obj)

		case "dataSharingFrequency":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_dataSharingFrequency(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "dataSharingFrequencyOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataSharingFrequencyOther(ctx, field, obj)

		case "dataSharingStartsNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataSharingStartsNote(ctx, field, obj)

		case "dataCollectionStarts":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataCollectionStarts(ctx, field, obj)

		case "dataCollectionStartsOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataCollectionStartsOther(ctx, field, obj)

		case "dataCollectionFrequency":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_dataCollectionFrequency(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "dataCollectionFrequencyOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataCollectionFrequencyOther(ctx, field, obj)

		case "dataCollectionFrequencyNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_dataCollectionFrequencyNote(ctx, field, obj)

		case "qualityReportingStarts":

			out.Values[i] = ec._PlanOpsEvalAndLearning_qualityReportingStarts(ctx, field, obj)

		case "qualityReportingStartsOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_qualityReportingStartsOther(ctx, field, obj)

		case "qualityReportingStartsNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_qualityReportingStartsNote(ctx, field, obj)

		case "modelLearningSystems":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanOpsEvalAndLearning_modelLearningSystems(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "modelLearningSystemsOther":

			out.Values[i] = ec._PlanOpsEvalAndLearning_modelLearningSystemsOther(ctx, field, obj)

		case "modelLearningSystemsNote":

			out.Values[i] = ec._PlanOpsEvalAndLearning_modelLearningSystemsNote(ctx, field, obj)

		case "anticipatedChallenges":

			out.Values[i] = ec._PlanOpsEvalAndLearning_anticipatedChallenges(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanOpsEvalAndLearning_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdDts":

			out.Values[i] = ec._PlanOpsEvalAndLearning_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanOpsEvalAndLearning_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._PlanOpsEvalAndLearning_modifiedDts(ctx, field, obj)

		case "readyForReviewBy":

			out.Values[i] = ec._PlanOpsEvalAndLearning_readyForReviewBy(ctx, field, obj)

		case "readyForReviewDts":

			out.Values[i] = ec._PlanOpsEvalAndLearning_readyForReviewDts(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanOpsEvalAndLearning_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planParticipantsAndProvidersImplementors = []string{"PlanParticipantsAndProviders"}

func (ec *executionContext) _PlanParticipantsAndProviders(ctx context.Context, sel ast.SelectionSet, obj *models.PlanParticipantsAndProviders) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planParticipantsAndProvidersImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanParticipantsAndProviders")
		case "id":

			out.Values[i] = ec._PlanParticipantsAndProviders_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanParticipantsAndProviders_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "participants":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_participants(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "medicareProviderType":

			out.Values[i] = ec._PlanParticipantsAndProviders_medicareProviderType(ctx, field, obj)

		case "statesEngagement":

			out.Values[i] = ec._PlanParticipantsAndProviders_statesEngagement(ctx, field, obj)

		case "participantsOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_participantsOther(ctx, field, obj)

		case "participantsNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_participantsNote(ctx, field, obj)

		case "participantsCurrentlyInModels":

			out.Values[i] = ec._PlanParticipantsAndProviders_participantsCurrentlyInModels(ctx, field, obj)

		case "participantsCurrentlyInModelsNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_participantsCurrentlyInModelsNote(ctx, field, obj)

		case "modelApplicationLevel":

			out.Values[i] = ec._PlanParticipantsAndProviders_modelApplicationLevel(ctx, field, obj)

		case "expectedNumberOfParticipants":

			out.Values[i] = ec._PlanParticipantsAndProviders_expectedNumberOfParticipants(ctx, field, obj)

		case "estimateConfidence":

			out.Values[i] = ec._PlanParticipantsAndProviders_estimateConfidence(ctx, field, obj)

		case "confidenceNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_confidenceNote(ctx, field, obj)

		case "recruitmentMethod":

			out.Values[i] = ec._PlanParticipantsAndProviders_recruitmentMethod(ctx, field, obj)

		case "recruitmentOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_recruitmentOther(ctx, field, obj)

		case "recruitmentNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_recruitmentNote(ctx, field, obj)

		case "selectionMethod":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_selectionMethod(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "selectionOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_selectionOther(ctx, field, obj)

		case "selectionNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_selectionNote(ctx, field, obj)

		case "communicationMethod":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_communicationMethod(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "communicationMethodOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_communicationMethodOther(ctx, field, obj)

		case "communicationNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_communicationNote(ctx, field, obj)

		case "participantAssumeRisk":

			out.Values[i] = ec._PlanParticipantsAndProviders_participantAssumeRisk(ctx, field, obj)

		case "riskType":

			out.Values[i] = ec._PlanParticipantsAndProviders_riskType(ctx, field, obj)

		case "riskOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_riskOther(ctx, field, obj)

		case "riskNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_riskNote(ctx, field, obj)

		case "willRiskChange":

			out.Values[i] = ec._PlanParticipantsAndProviders_willRiskChange(ctx, field, obj)

		case "willRiskChangeNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_willRiskChangeNote(ctx, field, obj)

		case "coordinateWork":

			out.Values[i] = ec._PlanParticipantsAndProviders_coordinateWork(ctx, field, obj)

		case "coordinateWorkNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_coordinateWorkNote(ctx, field, obj)

		case "gainsharePayments":

			out.Values[i] = ec._PlanParticipantsAndProviders_gainsharePayments(ctx, field, obj)

		case "gainsharePaymentsTrack":

			out.Values[i] = ec._PlanParticipantsAndProviders_gainsharePaymentsTrack(ctx, field, obj)

		case "gainsharePaymentsNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_gainsharePaymentsNote(ctx, field, obj)

		case "participantsIds":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_participantsIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "participantsIdsOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_participantsIdsOther(ctx, field, obj)

		case "participantsIDSNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_participantsIDSNote(ctx, field, obj)

		case "providerAdditionFrequency":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerAdditionFrequency(ctx, field, obj)

		case "providerAdditionFrequencyOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerAdditionFrequencyOther(ctx, field, obj)

		case "providerAdditionFrequencyNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerAdditionFrequencyNote(ctx, field, obj)

		case "providerAddMethod":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_providerAddMethod(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "providerAddMethodOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerAddMethodOther(ctx, field, obj)

		case "providerAddMethodNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerAddMethodNote(ctx, field, obj)

		case "providerLeaveMethod":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanParticipantsAndProviders_providerLeaveMethod(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "providerLeaveMethodOther":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerLeaveMethodOther(ctx, field, obj)

		case "providerLeaveMethodNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerLeaveMethodNote(ctx, field, obj)

		case "providerOverlap":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerOverlap(ctx, field, obj)

		case "providerOverlapHierarchy":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerOverlapHierarchy(ctx, field, obj)

		case "providerOverlapNote":

			out.Values[i] = ec._PlanParticipantsAndProviders_providerOverlapNote(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanParticipantsAndProviders_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdDts":

			out.Values[i] = ec._PlanParticipantsAndProviders_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanParticipantsAndProviders_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._PlanParticipantsAndProviders_modifiedDts(ctx, field, obj)

		case "readyForReviewBy":

			out.Values[i] = ec._PlanParticipantsAndProviders_readyForReviewBy(ctx, field, obj)

		case "readyForReviewDts":

			out.Values[i] = ec._PlanParticipantsAndProviders_readyForReviewDts(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanParticipantsAndProviders_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planPaymentsImplementors = []string{"PlanPayments"}

func (ec *executionContext) _PlanPayments(ctx context.Context, sel ast.SelectionSet, obj *models.PlanPayments) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planPaymentsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlanPayments")
		case "id":

			out.Values[i] = ec._PlanPayments_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modelPlanID":

			out.Values[i] = ec._PlanPayments_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "fundingSource":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_fundingSource(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "fundingSourceTrustFund":

			out.Values[i] = ec._PlanPayments_fundingSourceTrustFund(ctx, field, obj)

		case "fundingSourceOther":

			out.Values[i] = ec._PlanPayments_fundingSourceOther(ctx, field, obj)

		case "fundingSourceNote":

			out.Values[i] = ec._PlanPayments_fundingSourceNote(ctx, field, obj)

		case "fundingSourceR":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_fundingSourceR(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "fundingSourceRTrustFund":

			out.Values[i] = ec._PlanPayments_fundingSourceRTrustFund(ctx, field, obj)

		case "fundingSourceROther":

			out.Values[i] = ec._PlanPayments_fundingSourceROther(ctx, field, obj)

		case "fundingSourceRNote":

			out.Values[i] = ec._PlanPayments_fundingSourceRNote(ctx, field, obj)

		case "payRecipients":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_payRecipients(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "payRecipientsOtherSpecification":

			out.Values[i] = ec._PlanPayments_payRecipientsOtherSpecification(ctx, field, obj)

		case "payRecipientsNote":

			out.Values[i] = ec._PlanPayments_payRecipientsNote(ctx, field, obj)

		case "payType":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_payType(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "payTypeNote":

			out.Values[i] = ec._PlanPayments_payTypeNote(ctx, field, obj)

		case "payClaims":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_payClaims(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "payClaimsOther":

			out.Values[i] = ec._PlanPayments_payClaimsOther(ctx, field, obj)

		case "payClaimsNote":

			out.Values[i] = ec._PlanPayments_payClaimsNote(ctx, field, obj)

		case "shouldAnyProvidersExcludedFFSSystems":

			out.Values[i] = ec._PlanPayments_shouldAnyProvidersExcludedFFSSystems(ctx, field, obj)

		case "shouldAnyProviderExcludedFFSSystemsNote":

			out.Values[i] = ec._PlanPayments_shouldAnyProviderExcludedFFSSystemsNote(ctx, field, obj)

		case "changesMedicarePhysicianFeeSchedule":

			out.Values[i] = ec._PlanPayments_changesMedicarePhysicianFeeSchedule(ctx, field, obj)

		case "changesMedicarePhysicianFeeScheduleNote":

			out.Values[i] = ec._PlanPayments_changesMedicarePhysicianFeeScheduleNote(ctx, field, obj)

		case "affectsMedicareSecondaryPayerClaims":

			out.Values[i] = ec._PlanPayments_affectsMedicareSecondaryPayerClaims(ctx, field, obj)

		case "affectsMedicareSecondaryPayerClaimsHow":

			out.Values[i] = ec._PlanPayments_affectsMedicareSecondaryPayerClaimsHow(ctx, field, obj)

		case "affectsMedicareSecondaryPayerClaimsNote":

			out.Values[i] = ec._PlanPayments_affectsMedicareSecondaryPayerClaimsNote(ctx, field, obj)

		case "payModelDifferentiation":

			out.Values[i] = ec._PlanPayments_payModelDifferentiation(ctx, field, obj)

		case "creatingDependenciesBetweenServices":

			out.Values[i] = ec._PlanPayments_creatingDependenciesBetweenServices(ctx, field, obj)

		case "creatingDependenciesBetweenServicesNote":

			out.Values[i] = ec._PlanPayments_creatingDependenciesBetweenServicesNote(ctx, field, obj)

		case "needsClaimsDataCollection":

			out.Values[i] = ec._PlanPayments_needsClaimsDataCollection(ctx, field, obj)

		case "needsClaimsDataCollectionNote":

			out.Values[i] = ec._PlanPayments_needsClaimsDataCollectionNote(ctx, field, obj)

		case "providingThirdPartyFile":

			out.Values[i] = ec._PlanPayments_providingThirdPartyFile(ctx, field, obj)

		case "isContractorAwareTestDataRequirements":

			out.Values[i] = ec._PlanPayments_isContractorAwareTestDataRequirements(ctx, field, obj)

		case "beneficiaryCostSharingLevelAndHandling":

			out.Values[i] = ec._PlanPayments_beneficiaryCostSharingLevelAndHandling(ctx, field, obj)

		case "waiveBeneficiaryCostSharingForAnyServices":

			out.Values[i] = ec._PlanPayments_waiveBeneficiaryCostSharingForAnyServices(ctx, field, obj)

		case "waiveBeneficiaryCostSharingServiceSpecification":

			out.Values[i] = ec._PlanPayments_waiveBeneficiaryCostSharingServiceSpecification(ctx, field, obj)

		case "waiverOnlyAppliesPartOfPayment":

			out.Values[i] = ec._PlanPayments_waiverOnlyAppliesPartOfPayment(ctx, field, obj)

		case "waiveBeneficiaryCostSharingNote":

			out.Values[i] = ec._PlanPayments_waiveBeneficiaryCostSharingNote(ctx, field, obj)

		case "nonClaimsPayments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_nonClaimsPayments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "nonClaimsPaymentOther":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_nonClaimsPaymentOther(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "paymentCalculationOwner":

			out.Values[i] = ec._PlanPayments_paymentCalculationOwner(ctx, field, obj)

		case "numberPaymentsPerPayCycle":

			out.Values[i] = ec._PlanPayments_numberPaymentsPerPayCycle(ctx, field, obj)

		case "numberPaymentsPerPayCycleNote":

			out.Values[i] = ec._PlanPayments_numberPaymentsPerPayCycleNote(ctx, field, obj)

		case "sharedSystemsInvolvedAdditionalClaimPayment":

			out.Values[i] = ec._PlanPayments_sharedSystemsInvolvedAdditionalClaimPayment(ctx, field, obj)

		case "sharedSystemsInvolvedAdditionalClaimPaymentNote":

			out.Values[i] = ec._PlanPayments_sharedSystemsInvolvedAdditionalClaimPaymentNote(ctx, field, obj)

		case "planningToUseInnovationPaymentContractor":

			out.Values[i] = ec._PlanPayments_planningToUseInnovationPaymentContractor(ctx, field, obj)

		case "planningToUseInnovationPaymentContractorNote":

			out.Values[i] = ec._PlanPayments_planningToUseInnovationPaymentContractorNote(ctx, field, obj)

		case "fundingStructure":

			out.Values[i] = ec._PlanPayments_fundingStructure(ctx, field, obj)

		case "expectedCalculationComplexityLevel":

			out.Values[i] = ec._PlanPayments_expectedCalculationComplexityLevel(ctx, field, obj)

		case "expectedCalculationComplexityLevelNote":

			out.Values[i] = ec._PlanPayments_expectedCalculationComplexityLevelNote(ctx, field, obj)

		case "canParticipantsSelectBetweenPaymentMechanisms":

			out.Values[i] = ec._PlanPayments_canParticipantsSelectBetweenPaymentMechanisms(ctx, field, obj)

		case "canParticipantsSelectBetweenPaymentMechanismsHow":

			out.Values[i] = ec._PlanPayments_canParticipantsSelectBetweenPaymentMechanismsHow(ctx, field, obj)

		case "canParticipantsSelectBetweenPaymentMechanismsNote":

			out.Values[i] = ec._PlanPayments_canParticipantsSelectBetweenPaymentMechanismsNote(ctx, field, obj)

		case "anticipatedPaymentFrequency":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PlanPayments_anticipatedPaymentFrequency(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "anticipatedPaymentFrequencyOther":

			out.Values[i] = ec._PlanPayments_anticipatedPaymentFrequencyOther(ctx, field, obj)

		case "anticipatedPaymentFrequencyNote":

			out.Values[i] = ec._PlanPayments_anticipatedPaymentFrequencyNote(ctx, field, obj)

		case "willRecoverPayments":

			out.Values[i] = ec._PlanPayments_willRecoverPayments(ctx, field, obj)

		case "willRecoverPaymentsNote":

			out.Values[i] = ec._PlanPayments_willRecoverPaymentsNote(ctx, field, obj)

		case "anticipateReconcilingPaymentsRetrospectively":

			out.Values[i] = ec._PlanPayments_anticipateReconcilingPaymentsRetrospectively(ctx, field, obj)

		case "anticipateReconcilingPaymentsRetrospectivelyNote":

			out.Values[i] = ec._PlanPayments_anticipateReconcilingPaymentsRetrospectivelyNote(ctx, field, obj)

		case "paymentStartDate":

			out.Values[i] = ec._PlanPayments_paymentStartDate(ctx, field, obj)

		case "paymentStartDateNote":

			out.Values[i] = ec._PlanPayments_paymentStartDateNote(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._PlanPayments_createdBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdDts":

			out.Values[i] = ec._PlanPayments_createdDts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "modifiedBy":

			out.Values[i] = ec._PlanPayments_modifiedBy(ctx, field, obj)

		case "modifiedDts":

			out.Values[i] = ec._PlanPayments_modifiedDts(ctx, field, obj)

		case "readyForReviewBy":

			out.Values[i] = ec._PlanPayments_readyForReviewBy(ctx, field, obj)

		case "readyForReviewDts":

			out.Values[i] = ec._PlanPayments_readyForReviewDts(ctx, field, obj)

		case "status":

			out.Values[i] = ec._PlanPayments_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "currentUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currentUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "modelPlan":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_modelPlan(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "planDocument":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_planDocument(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "modelPlanCollection":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_modelPlanCollection(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "existingModelCollection":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_existingModelCollection(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "cedarPersonsByCommonName":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cedarPersonsByCommonName(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "planCollaboratorByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_planCollaboratorByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "taskListSectionLocks":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_taskListSectionLocks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "planPayments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_planPayments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "ndaInfo":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ndaInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "crTdl":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_crTdl(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "auditChanges":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_auditChanges(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "onTaskListSectionLocksChanged":
		return ec._Subscription_onTaskListSectionLocksChanged(ctx, fields[0])
	case "onLockTaskListSectionContext":
		return ec._Subscription_onLockTaskListSectionContext(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var taskListSectionLockStatusImplementors = []string{"TaskListSectionLockStatus"}

func (ec *executionContext) _TaskListSectionLockStatus(ctx context.Context, sel ast.SelectionSet, obj *model.TaskListSectionLockStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskListSectionLockStatusImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskListSectionLockStatus")
		case "modelPlanID":

			out.Values[i] = ec._TaskListSectionLockStatus_modelPlanID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "section":

			out.Values[i] = ec._TaskListSectionLockStatus_section(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lockedBy":

			out.Values[i] = ec._TaskListSectionLockStatus_lockedBy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isAssessment":

			out.Values[i] = ec._TaskListSectionLockStatus_isAssessment(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var taskListSectionLockStatusChangedImplementors = []string{"TaskListSectionLockStatusChanged"}

func (ec *executionContext) _TaskListSectionLockStatusChanged(ctx context.Context, sel ast.SelectionSet, obj *model.TaskListSectionLockStatusChanged) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskListSectionLockStatusChangedImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskListSectionLockStatusChanged")
		case "changeType":

			out.Values[i] = ec._TaskListSectionLockStatusChanged_changeType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lockStatus":

			out.Values[i] = ec._TaskListSectionLockStatusChanged_lockStatus(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "actionType":

			out.Values[i] = ec._TaskListSectionLockStatusChanged_actionType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userInfoImplementors = []string{"UserInfo"}

func (ec *executionContext) _UserInfo(ctx context.Context, sel ast.SelectionSet, obj *models.UserInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserInfo")
		case "commonName":

			out.Values[i] = ec._UserInfo_commonName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "email":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserInfo_email(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "euaUserId":

			out.Values[i] = ec._UserInfo_euaUserId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNActionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐActionType(ctx context.Context, v interface{}) (model.ActionType, error) {
	var res model.ActionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNActionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐActionType(ctx context.Context, sel ast.SelectionSet, v model.ActionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAgencyOrStateHelpType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpType(ctx context.Context, v interface{}) (model.AgencyOrStateHelpType, error) {
	var res model.AgencyOrStateHelpType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAgencyOrStateHelpType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpType(ctx context.Context, sel ast.SelectionSet, v model.AgencyOrStateHelpType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAgencyOrStateHelpType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpTypeᚄ(ctx context.Context, v interface{}) ([]model.AgencyOrStateHelpType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AgencyOrStateHelpType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAgencyOrStateHelpType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAgencyOrStateHelpType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AgencyOrStateHelpType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAgencyOrStateHelpType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNAgreementType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementType(ctx context.Context, v interface{}) (model.AgreementType, error) {
	var res model.AgreementType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAgreementType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementType(ctx context.Context, sel ast.SelectionSet, v model.AgreementType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAgreementType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementTypeᚄ(ctx context.Context, v interface{}) ([]model.AgreementType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AgreementType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAgreementType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAgreementType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AgreementType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAgreementType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNAlternativePaymentModelType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelType(ctx context.Context, v interface{}) (model.AlternativePaymentModelType, error) {
	var res model.AlternativePaymentModelType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAlternativePaymentModelType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelType(ctx context.Context, sel ast.SelectionSet, v model.AlternativePaymentModelType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAlternativePaymentModelType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelTypeᚄ(ctx context.Context, v interface{}) ([]model.AlternativePaymentModelType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AlternativePaymentModelType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAlternativePaymentModelType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAlternativePaymentModelType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AlternativePaymentModelType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlternativePaymentModelType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNAnticipatedPaymentFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyType(ctx context.Context, v interface{}) (models.AnticipatedPaymentFrequencyType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.AnticipatedPaymentFrequencyType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAnticipatedPaymentFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyType(ctx context.Context, sel ast.SelectionSet, v models.AnticipatedPaymentFrequencyType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNAnticipatedPaymentFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyTypeᚄ(ctx context.Context, v interface{}) ([]models.AnticipatedPaymentFrequencyType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.AnticipatedPaymentFrequencyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAnticipatedPaymentFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAnticipatedPaymentFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.AnticipatedPaymentFrequencyType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAnticipatedPaymentFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAuditChange2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAuditChangeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.AuditChange) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuditChange2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAuditChange(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAuditChange2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAuditChange(ctx context.Context, sel ast.SelectionSet, v *models.AuditChange) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuditChange(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthorityAllowance2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowance(ctx context.Context, v interface{}) (model.AuthorityAllowance, error) {
	var res model.AuthorityAllowance
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuthorityAllowance2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowance(ctx context.Context, sel ast.SelectionSet, v model.AuthorityAllowance) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAuthorityAllowance2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowanceᚄ(ctx context.Context, v interface{}) ([]model.AuthorityAllowance, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AuthorityAllowance, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAuthorityAllowance2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowance(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAuthorityAllowance2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowanceᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AuthorityAllowance) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuthorityAllowance2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNBManageBeneficiaryOverlapType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBManageBeneficiaryOverlapType(ctx context.Context, v interface{}) (model.BManageBeneficiaryOverlapType, error) {
	var res model.BManageBeneficiaryOverlapType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBManageBeneficiaryOverlapType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBManageBeneficiaryOverlapType(ctx context.Context, sel ast.SelectionSet, v model.BManageBeneficiaryOverlapType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBManageBeneficiaryOverlapType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBManageBeneficiaryOverlapTypeᚄ(ctx context.Context, v interface{}) ([]model.BManageBeneficiaryOverlapType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.BManageBeneficiaryOverlapType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBManageBeneficiaryOverlapType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBManageBeneficiaryOverlapType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNBManageBeneficiaryOverlapType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBManageBeneficiaryOverlapTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BManageBeneficiaryOverlapType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBManageBeneficiaryOverlapType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBManageBeneficiaryOverlapType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesType(ctx context.Context, v interface{}) (model.BeneficiariesType, error) {
	var res model.BeneficiariesType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesType(ctx context.Context, sel ast.SelectionSet, v model.BeneficiariesType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesTypeᚄ(ctx context.Context, v interface{}) ([]model.BeneficiariesType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.BeneficiariesType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BeneficiariesType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCMMIGroup2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroup(ctx context.Context, v interface{}) (model.CMMIGroup, error) {
	var res model.CMMIGroup
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCMMIGroup2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroup(ctx context.Context, sel ast.SelectionSet, v model.CMMIGroup) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCMMIGroup2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroupᚄ(ctx context.Context, v interface{}) ([]model.CMMIGroup, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CMMIGroup, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCMMIGroup2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroup(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNCMMIGroup2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroupᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CMMIGroup) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCMMIGroup2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNCMSCenter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenter(ctx context.Context, v interface{}) (model.CMSCenter, error) {
	var res model.CMSCenter
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCMSCenter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenter(ctx context.Context, sel ast.SelectionSet, v model.CMSCenter) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCMSCenter2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenterᚄ(ctx context.Context, v interface{}) ([]model.CMSCenter, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CMSCenter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCMSCenter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNCMSCenter2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenterᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CMSCenter) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCMSCenter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNCcmInvolvmentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentType(ctx context.Context, v interface{}) (model.CcmInvolvmentType, error) {
	var res model.CcmInvolvmentType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCcmInvolvmentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentType(ctx context.Context, sel ast.SelectionSet, v model.CcmInvolvmentType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCcmInvolvmentType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentTypeᚄ(ctx context.Context, v interface{}) ([]model.CcmInvolvmentType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CcmInvolvmentType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCcmInvolvmentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNCcmInvolvmentType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CcmInvolvmentType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCcmInvolvmentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNChangeType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐChangeType(ctx context.Context, v interface{}) (model.ChangeType, error) {
	var res model.ChangeType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNChangeType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐChangeType(ctx context.Context, sel ast.SelectionSet, v model.ChangeType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayType(ctx context.Context, v interface{}) (models.ClaimsBasedPayType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ClaimsBasedPayType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayType(ctx context.Context, sel ast.SelectionSet, v models.ClaimsBasedPayType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayTypeᚄ(ctx context.Context, v interface{}) ([]models.ClaimsBasedPayType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.ClaimsBasedPayType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.ClaimsBasedPayType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNContractorSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportType(ctx context.Context, v interface{}) (model.ContractorSupportType, error) {
	var res model.ContractorSupportType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContractorSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportType(ctx context.Context, sel ast.SelectionSet, v model.ContractorSupportType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNContractorSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportTypeᚄ(ctx context.Context, v interface{}) ([]model.ContractorSupportType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ContractorSupportType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNContractorSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNContractorSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ContractorSupportType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContractorSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCurrentUser2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCurrentUser(ctx context.Context, sel ast.SelectionSet, v model.CurrentUser) graphql.Marshaler {
	return ec._CurrentUser(ctx, sel, &v)
}

func (ec *executionContext) marshalNCurrentUser2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCurrentUser(ctx context.Context, sel ast.SelectionSet, v *model.CurrentUser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CurrentUser(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDataForMonitoringType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringType(ctx context.Context, v interface{}) (model.DataForMonitoringType, error) {
	var res model.DataForMonitoringType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDataForMonitoringType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringType(ctx context.Context, sel ast.SelectionSet, v model.DataForMonitoringType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDataForMonitoringType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringTypeᚄ(ctx context.Context, v interface{}) ([]model.DataForMonitoringType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.DataForMonitoringType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataForMonitoringType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNDataForMonitoringType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataForMonitoringType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataForMonitoringType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNDataFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyType(ctx context.Context, v interface{}) (model.DataFrequencyType, error) {
	var res model.DataFrequencyType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDataFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyType(ctx context.Context, sel ast.SelectionSet, v model.DataFrequencyType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDataFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyTypeᚄ(ctx context.Context, v interface{}) ([]model.DataFrequencyType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.DataFrequencyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNDataFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataFrequencyType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNDataToSendParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsType(ctx context.Context, v interface{}) (model.DataToSendParticipantsType, error) {
	var res model.DataToSendParticipantsType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDataToSendParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsType(ctx context.Context, sel ast.SelectionSet, v model.DataToSendParticipantsType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDataToSendParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsTypeᚄ(ctx context.Context, v interface{}) ([]model.DataToSendParticipantsType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.DataToSendParticipantsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataToSendParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNDataToSendParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataToSendParticipantsType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataToSendParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDiscussionReply2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReply(ctx context.Context, sel ast.SelectionSet, v models.DiscussionReply) graphql.Marshaler {
	return ec._DiscussionReply(ctx, sel, &v)
}

func (ec *executionContext) marshalNDiscussionReply2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReplyᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.DiscussionReply) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDiscussionReply2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReply(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDiscussionReply2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionReply(ctx context.Context, sel ast.SelectionSet, v *models.DiscussionReply) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DiscussionReply(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDiscussionReplyChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNDiscussionReplyCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDiscussionReplyCreateInput(ctx context.Context, v interface{}) (model.DiscussionReplyCreateInput, error) {
	res, err := ec.unmarshalInputDiscussionReplyCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDiscussionStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionStatus(ctx context.Context, v interface{}) (models.DiscussionStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.DiscussionStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDiscussionStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionStatus(ctx context.Context, sel ast.SelectionSet, v models.DiscussionStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDocumentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDocumentType(ctx context.Context, v interface{}) (models.DocumentType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.DocumentType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDocumentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDocumentType(ctx context.Context, sel ast.SelectionSet, v models.DocumentType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNEvaluationApproachType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachType(ctx context.Context, v interface{}) (model.EvaluationApproachType, error) {
	var res model.EvaluationApproachType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEvaluationApproachType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachType(ctx context.Context, sel ast.SelectionSet, v model.EvaluationApproachType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEvaluationApproachType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachTypeᚄ(ctx context.Context, v interface{}) ([]model.EvaluationApproachType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.EvaluationApproachType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEvaluationApproachType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNEvaluationApproachType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EvaluationApproachType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEvaluationApproachType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNExistingModel2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModelᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ExistingModel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNExistingModel2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNExistingModel2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐExistingModel(ctx context.Context, sel ast.SelectionSet, v *models.ExistingModel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ExistingModel(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFundingSource2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSource(ctx context.Context, v interface{}) (models.FundingSource, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.FundingSource(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFundingSource2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSource(ctx context.Context, sel ast.SelectionSet, v models.FundingSource) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFundingSource2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSourceᚄ(ctx context.Context, v interface{}) ([]models.FundingSource, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.FundingSource, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFundingSource2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSource(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNFundingSource2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSourceᚄ(ctx context.Context, sel ast.SelectionSet, v []models.FundingSource) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFundingSource2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNGcCollectBidsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcCollectBidsType(ctx context.Context, v interface{}) (model.GcCollectBidsType, error) {
	var res model.GcCollectBidsType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGcCollectBidsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcCollectBidsType(ctx context.Context, sel ast.SelectionSet, v model.GcCollectBidsType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNGcCollectBidsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcCollectBidsTypeᚄ(ctx context.Context, v interface{}) ([]model.GcCollectBidsType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.GcCollectBidsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGcCollectBidsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcCollectBidsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNGcCollectBidsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcCollectBidsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GcCollectBidsType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGcCollectBidsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcCollectBidsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNGcPartCDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcPartCDType(ctx context.Context, v interface{}) (model.GcPartCDType, error) {
	var res model.GcPartCDType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGcPartCDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcPartCDType(ctx context.Context, sel ast.SelectionSet, v model.GcPartCDType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNGcPartCDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcPartCDTypeᚄ(ctx context.Context, v interface{}) ([]model.GcPartCDType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.GcPartCDType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGcPartCDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcPartCDType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNGcPartCDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcPartCDTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GcPartCDType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGcPartCDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcPartCDType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNGcUpdateContractType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcUpdateContractType(ctx context.Context, v interface{}) (model.GcUpdateContractType, error) {
	var res model.GcUpdateContractType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGcUpdateContractType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcUpdateContractType(ctx context.Context, sel ast.SelectionSet, v model.GcUpdateContractType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNGcUpdateContractType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcUpdateContractTypeᚄ(ctx context.Context, v interface{}) ([]model.GcUpdateContractType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.GcUpdateContractType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGcUpdateContractType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcUpdateContractType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNGcUpdateContractType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcUpdateContractTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GcUpdateContractType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGcUpdateContractType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcUpdateContractType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNGeographyApplication2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplication(ctx context.Context, v interface{}) (model.GeographyApplication, error) {
	var res model.GeographyApplication
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGeographyApplication2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplication(ctx context.Context, sel ast.SelectionSet, v model.GeographyApplication) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNGeographyApplication2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplicationᚄ(ctx context.Context, v interface{}) ([]model.GeographyApplication, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.GeographyApplication, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGeographyApplication2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplication(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNGeographyApplication2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplicationᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GeographyApplication) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGeographyApplication2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplication(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNGeographyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyType(ctx context.Context, v interface{}) (model.GeographyType, error) {
	var res model.GeographyType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGeographyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyType(ctx context.Context, sel ast.SelectionSet, v model.GeographyType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNGeographyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyTypeᚄ(ctx context.Context, v interface{}) ([]model.GeographyType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.GeographyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGeographyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNGeographyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GeographyType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGeographyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNKeyCharacteristic2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristic(ctx context.Context, v interface{}) (model.KeyCharacteristic, error) {
	var res model.KeyCharacteristic
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNKeyCharacteristic2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristic(ctx context.Context, sel ast.SelectionSet, v model.KeyCharacteristic) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNKeyCharacteristic2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristicᚄ(ctx context.Context, v interface{}) ([]model.KeyCharacteristic, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.KeyCharacteristic, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNKeyCharacteristic2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristic(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNKeyCharacteristic2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristicᚄ(ctx context.Context, sel ast.SelectionSet, v []model.KeyCharacteristic) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKeyCharacteristic2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLaunchDarklySettings2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐLaunchDarklySettings(ctx context.Context, sel ast.SelectionSet, v *model.LaunchDarklySettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LaunchDarklySettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNModelLearningSystemType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemType(ctx context.Context, v interface{}) (model.ModelLearningSystemType, error) {
	var res model.ModelLearningSystemType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNModelLearningSystemType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemType(ctx context.Context, sel ast.SelectionSet, v model.ModelLearningSystemType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNModelLearningSystemType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemTypeᚄ(ctx context.Context, v interface{}) ([]model.ModelLearningSystemType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ModelLearningSystemType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNModelLearningSystemType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNModelLearningSystemType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ModelLearningSystemType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNModelLearningSystemType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNModelPlan2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlan(ctx context.Context, sel ast.SelectionSet, v models.ModelPlan) graphql.Marshaler {
	return ec._ModelPlan(ctx, sel, &v)
}

func (ec *executionContext) marshalNModelPlan2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlanᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ModelPlan) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNModelPlan2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNModelPlan2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelPlan(ctx context.Context, sel ast.SelectionSet, v *models.ModelPlan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ModelPlan(ctx, sel, v)
}

func (ec *executionContext) unmarshalNModelPlanChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNModelStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelStatus(ctx context.Context, v interface{}) (models.ModelStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ModelStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNModelStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelStatus(ctx context.Context, sel ast.SelectionSet, v models.ModelStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNMonitoringFileType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileType(ctx context.Context, v interface{}) (model.MonitoringFileType, error) {
	var res model.MonitoringFileType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMonitoringFileType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileType(ctx context.Context, sel ast.SelectionSet, v model.MonitoringFileType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMonitoringFileType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileTypeᚄ(ctx context.Context, v interface{}) ([]model.MonitoringFileType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.MonitoringFileType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMonitoringFileType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNMonitoringFileType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MonitoringFileType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMonitoringFileType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNDAInfo2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNDAInfo(ctx context.Context, sel ast.SelectionSet, v model.NDAInfo) graphql.Marshaler {
	return ec._NDAInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNNDAInfo2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNDAInfo(ctx context.Context, sel ast.SelectionSet, v *model.NDAInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NDAInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNonClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayType(ctx context.Context, v interface{}) (model.NonClaimsBasedPayType, error) {
	var res model.NonClaimsBasedPayType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNonClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayType(ctx context.Context, sel ast.SelectionSet, v model.NonClaimsBasedPayType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNNonClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayTypeᚄ(ctx context.Context, v interface{}) ([]model.NonClaimsBasedPayType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.NonClaimsBasedPayType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNonClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNNonClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.NonClaimsBasedPayType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNonClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOelClaimsBasedMeasuresType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelClaimsBasedMeasuresType(ctx context.Context, v interface{}) (model.OelClaimsBasedMeasuresType, error) {
	var res model.OelClaimsBasedMeasuresType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOelClaimsBasedMeasuresType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelClaimsBasedMeasuresType(ctx context.Context, sel ast.SelectionSet, v model.OelClaimsBasedMeasuresType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOelClaimsBasedMeasuresType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelClaimsBasedMeasuresTypeᚄ(ctx context.Context, v interface{}) ([]model.OelClaimsBasedMeasuresType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelClaimsBasedMeasuresType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelClaimsBasedMeasuresType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelClaimsBasedMeasuresType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNOelClaimsBasedMeasuresType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelClaimsBasedMeasuresTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelClaimsBasedMeasuresType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelClaimsBasedMeasuresType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelClaimsBasedMeasuresType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOelCollectDataType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelCollectDataType(ctx context.Context, v interface{}) (model.OelCollectDataType, error) {
	var res model.OelCollectDataType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOelCollectDataType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelCollectDataType(ctx context.Context, sel ast.SelectionSet, v model.OelCollectDataType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOelCollectDataType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelCollectDataTypeᚄ(ctx context.Context, v interface{}) ([]model.OelCollectDataType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelCollectDataType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelCollectDataType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelCollectDataType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNOelCollectDataType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelCollectDataTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelCollectDataType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelCollectDataType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelCollectDataType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOelEducateBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEducateBeneficiariesType(ctx context.Context, v interface{}) (model.OelEducateBeneficiariesType, error) {
	var res model.OelEducateBeneficiariesType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOelEducateBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEducateBeneficiariesType(ctx context.Context, sel ast.SelectionSet, v model.OelEducateBeneficiariesType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOelEducateBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEducateBeneficiariesTypeᚄ(ctx context.Context, v interface{}) ([]model.OelEducateBeneficiariesType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelEducateBeneficiariesType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelEducateBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEducateBeneficiariesType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNOelEducateBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEducateBeneficiariesTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelEducateBeneficiariesType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelEducateBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEducateBeneficiariesType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOelEvaluationContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEvaluationContractorType(ctx context.Context, v interface{}) (model.OelEvaluationContractorType, error) {
	var res model.OelEvaluationContractorType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOelEvaluationContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEvaluationContractorType(ctx context.Context, sel ast.SelectionSet, v model.OelEvaluationContractorType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOelEvaluationContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEvaluationContractorTypeᚄ(ctx context.Context, v interface{}) ([]model.OelEvaluationContractorType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelEvaluationContractorType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelEvaluationContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEvaluationContractorType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNOelEvaluationContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEvaluationContractorTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelEvaluationContractorType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelEvaluationContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEvaluationContractorType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOelHelpdeskSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelHelpdeskSupportType(ctx context.Context, v interface{}) (model.OelHelpdeskSupportType, error) {
	var res model.OelHelpdeskSupportType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOelHelpdeskSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelHelpdeskSupportType(ctx context.Context, sel ast.SelectionSet, v model.OelHelpdeskSupportType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOelHelpdeskSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelHelpdeskSupportTypeᚄ(ctx context.Context, v interface{}) ([]model.OelHelpdeskSupportType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelHelpdeskSupportType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelHelpdeskSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelHelpdeskSupportType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNOelHelpdeskSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelHelpdeskSupportTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelHelpdeskSupportType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelHelpdeskSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelHelpdeskSupportType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOelLearningContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelLearningContractorType(ctx context.Context, v interface{}) (model.OelLearningContractorType, error) {
	var res model.OelLearningContractorType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOelLearningContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelLearningContractorType(ctx context.Context, sel ast.SelectionSet, v model.OelLearningContractorType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOelLearningContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelLearningContractorTypeᚄ(ctx context.Context, v interface{}) ([]model.OelLearningContractorType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelLearningContractorType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelLearningContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelLearningContractorType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNOelLearningContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelLearningContractorTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelLearningContractorType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelLearningContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelLearningContractorType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOelManageAcoType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelManageAcoType(ctx context.Context, v interface{}) (model.OelManageAcoType, error) {
	var res model.OelManageAcoType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOelManageAcoType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelManageAcoType(ctx context.Context, sel ast.SelectionSet, v model.OelManageAcoType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOelManageAcoType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelManageAcoTypeᚄ(ctx context.Context, v interface{}) ([]model.OelManageAcoType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelManageAcoType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelManageAcoType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelManageAcoType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNOelManageAcoType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelManageAcoTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelManageAcoType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelManageAcoType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelManageAcoType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOelObtainDataType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelObtainDataType(ctx context.Context, v interface{}) (model.OelObtainDataType, error) {
	var res model.OelObtainDataType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOelObtainDataType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelObtainDataType(ctx context.Context, sel ast.SelectionSet, v model.OelObtainDataType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOelObtainDataType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelObtainDataTypeᚄ(ctx context.Context, v interface{}) ([]model.OelObtainDataType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelObtainDataType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelObtainDataType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelObtainDataType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNOelObtainDataType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelObtainDataTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelObtainDataType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelObtainDataType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelObtainDataType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOelParticipantCollaborationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelParticipantCollaborationType(ctx context.Context, v interface{}) (model.OelParticipantCollaborationType, error) {
	var res model.OelParticipantCollaborationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOelParticipantCollaborationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelParticipantCollaborationType(ctx context.Context, sel ast.SelectionSet, v model.OelParticipantCollaborationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOelParticipantCollaborationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelParticipantCollaborationTypeᚄ(ctx context.Context, v interface{}) ([]model.OelParticipantCollaborationType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelParticipantCollaborationType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelParticipantCollaborationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelParticipantCollaborationType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNOelParticipantCollaborationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelParticipantCollaborationTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelParticipantCollaborationType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelParticipantCollaborationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelParticipantCollaborationType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOelPerformanceBenchmarkType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelPerformanceBenchmarkType(ctx context.Context, v interface{}) (model.OelPerformanceBenchmarkType, error) {
	var res model.OelPerformanceBenchmarkType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOelPerformanceBenchmarkType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelPerformanceBenchmarkType(ctx context.Context, sel ast.SelectionSet, v model.OelPerformanceBenchmarkType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOelPerformanceBenchmarkType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelPerformanceBenchmarkTypeᚄ(ctx context.Context, v interface{}) ([]model.OelPerformanceBenchmarkType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelPerformanceBenchmarkType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelPerformanceBenchmarkType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelPerformanceBenchmarkType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNOelPerformanceBenchmarkType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelPerformanceBenchmarkTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelPerformanceBenchmarkType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelPerformanceBenchmarkType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelPerformanceBenchmarkType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOelProcessAppealsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelProcessAppealsType(ctx context.Context, v interface{}) (model.OelProcessAppealsType, error) {
	var res model.OelProcessAppealsType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOelProcessAppealsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelProcessAppealsType(ctx context.Context, sel ast.SelectionSet, v model.OelProcessAppealsType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOelProcessAppealsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelProcessAppealsTypeᚄ(ctx context.Context, v interface{}) ([]model.OelProcessAppealsType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelProcessAppealsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelProcessAppealsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelProcessAppealsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNOelProcessAppealsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelProcessAppealsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelProcessAppealsType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelProcessAppealsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelProcessAppealsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOelQualityScoresType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelQualityScoresType(ctx context.Context, v interface{}) (model.OelQualityScoresType, error) {
	var res model.OelQualityScoresType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOelQualityScoresType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelQualityScoresType(ctx context.Context, sel ast.SelectionSet, v model.OelQualityScoresType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOelQualityScoresType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelQualityScoresTypeᚄ(ctx context.Context, v interface{}) ([]model.OelQualityScoresType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelQualityScoresType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelQualityScoresType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelQualityScoresType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNOelQualityScoresType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelQualityScoresTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelQualityScoresType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelQualityScoresType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelQualityScoresType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOelSendReportsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelSendReportsType(ctx context.Context, v interface{}) (model.OelSendReportsType, error) {
	var res model.OelSendReportsType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOelSendReportsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelSendReportsType(ctx context.Context, sel ast.SelectionSet, v model.OelSendReportsType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOelSendReportsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelSendReportsTypeᚄ(ctx context.Context, v interface{}) ([]model.OelSendReportsType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelSendReportsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelSendReportsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelSendReportsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNOelSendReportsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelSendReportsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelSendReportsType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelSendReportsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelSendReportsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPInformFfsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPInformFfsType(ctx context.Context, v interface{}) (model.PInformFfsType, error) {
	var res model.PInformFfsType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPInformFfsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPInformFfsType(ctx context.Context, sel ast.SelectionSet, v model.PInformFfsType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPInformFfsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPInformFfsTypeᚄ(ctx context.Context, v interface{}) ([]model.PInformFfsType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PInformFfsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPInformFfsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPInformFfsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPInformFfsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPInformFfsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PInformFfsType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPInformFfsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPInformFfsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPMakeClaimsPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPMakeClaimsPaymentsType(ctx context.Context, v interface{}) (model.PMakeClaimsPaymentsType, error) {
	var res model.PMakeClaimsPaymentsType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPMakeClaimsPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPMakeClaimsPaymentsType(ctx context.Context, sel ast.SelectionSet, v model.PMakeClaimsPaymentsType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPMakeClaimsPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPMakeClaimsPaymentsTypeᚄ(ctx context.Context, v interface{}) ([]model.PMakeClaimsPaymentsType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PMakeClaimsPaymentsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPMakeClaimsPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPMakeClaimsPaymentsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPMakeClaimsPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPMakeClaimsPaymentsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PMakeClaimsPaymentsType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPMakeClaimsPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPMakeClaimsPaymentsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPNonClaimsBasedPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPNonClaimsBasedPaymentsType(ctx context.Context, v interface{}) (model.PNonClaimsBasedPaymentsType, error) {
	var res model.PNonClaimsBasedPaymentsType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPNonClaimsBasedPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPNonClaimsBasedPaymentsType(ctx context.Context, sel ast.SelectionSet, v model.PNonClaimsBasedPaymentsType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPNonClaimsBasedPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPNonClaimsBasedPaymentsTypeᚄ(ctx context.Context, v interface{}) ([]model.PNonClaimsBasedPaymentsType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PNonClaimsBasedPaymentsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPNonClaimsBasedPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPNonClaimsBasedPaymentsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPNonClaimsBasedPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPNonClaimsBasedPaymentsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PNonClaimsBasedPaymentsType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPNonClaimsBasedPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPNonClaimsBasedPaymentsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPRecoverPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPRecoverPaymentsType(ctx context.Context, v interface{}) (model.PRecoverPaymentsType, error) {
	var res model.PRecoverPaymentsType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPRecoverPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPRecoverPaymentsType(ctx context.Context, sel ast.SelectionSet, v model.PRecoverPaymentsType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPRecoverPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPRecoverPaymentsTypeᚄ(ctx context.Context, v interface{}) ([]model.PRecoverPaymentsType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PRecoverPaymentsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPRecoverPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPRecoverPaymentsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPRecoverPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPRecoverPaymentsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PRecoverPaymentsType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPRecoverPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPRecoverPaymentsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPSharedSavingsPlanType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPSharedSavingsPlanType(ctx context.Context, v interface{}) (model.PSharedSavingsPlanType, error) {
	var res model.PSharedSavingsPlanType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPSharedSavingsPlanType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPSharedSavingsPlanType(ctx context.Context, sel ast.SelectionSet, v model.PSharedSavingsPlanType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPSharedSavingsPlanType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPSharedSavingsPlanTypeᚄ(ctx context.Context, v interface{}) ([]model.PSharedSavingsPlanType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PSharedSavingsPlanType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPSharedSavingsPlanType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPSharedSavingsPlanType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPSharedSavingsPlanType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPSharedSavingsPlanTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PSharedSavingsPlanType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPSharedSavingsPlanType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPSharedSavingsPlanType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNParticipantCommunicationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationType(ctx context.Context, v interface{}) (model.ParticipantCommunicationType, error) {
	var res model.ParticipantCommunicationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNParticipantCommunicationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationType(ctx context.Context, sel ast.SelectionSet, v model.ParticipantCommunicationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNParticipantCommunicationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantCommunicationType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantCommunicationType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantCommunicationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNParticipantCommunicationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantCommunicationType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantCommunicationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNParticipantSelectionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionType(ctx context.Context, v interface{}) (model.ParticipantSelectionType, error) {
	var res model.ParticipantSelectionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNParticipantSelectionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionType(ctx context.Context, sel ast.SelectionSet, v model.ParticipantSelectionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNParticipantSelectionType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantSelectionType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantSelectionType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantSelectionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNParticipantSelectionType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantSelectionType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantSelectionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNParticipantsIDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDType(ctx context.Context, v interface{}) (model.ParticipantsIDType, error) {
	var res model.ParticipantsIDType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNParticipantsIDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDType(ctx context.Context, sel ast.SelectionSet, v model.ParticipantsIDType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNParticipantsIDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantsIDType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantsIDType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantsIDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNParticipantsIDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantsIDType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantsIDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsType(ctx context.Context, v interface{}) (model.ParticipantsType, error) {
	var res model.ParticipantsType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsType(ctx context.Context, sel ast.SelectionSet, v model.ParticipantsType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantsType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantsType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPayRecipient2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipient(ctx context.Context, v interface{}) (models.PayRecipient, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.PayRecipient(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPayRecipient2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipient(ctx context.Context, sel ast.SelectionSet, v models.PayRecipient) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPayRecipient2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipientᚄ(ctx context.Context, v interface{}) ([]models.PayRecipient, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.PayRecipient, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPayRecipient2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipient(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPayRecipient2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipientᚄ(ctx context.Context, sel ast.SelectionSet, v []models.PayRecipient) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayRecipient2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayType(ctx context.Context, v interface{}) (models.PayType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.PayType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayType(ctx context.Context, sel ast.SelectionSet, v models.PayType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayTypeᚄ(ctx context.Context, v interface{}) ([]models.PayType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.PayType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.PayType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlanBasics2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBasics(ctx context.Context, sel ast.SelectionSet, v models.PlanBasics) graphql.Marshaler {
	return ec._PlanBasics(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanBasics2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBasics(ctx context.Context, sel ast.SelectionSet, v *models.PlanBasics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanBasics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanBasicsChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNPlanBeneficiaries2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBeneficiaries(ctx context.Context, sel ast.SelectionSet, v models.PlanBeneficiaries) graphql.Marshaler {
	return ec._PlanBeneficiaries(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanBeneficiaries2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanBeneficiaries(ctx context.Context, sel ast.SelectionSet, v *models.PlanBeneficiaries) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanBeneficiaries(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanBeneficiariesChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNPlanCollaborator2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaborator(ctx context.Context, sel ast.SelectionSet, v models.PlanCollaborator) graphql.Marshaler {
	return ec._PlanCollaborator(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanCollaborator2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaboratorᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PlanCollaborator) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlanCollaborator2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaborator(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlanCollaborator2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCollaborator(ctx context.Context, sel ast.SelectionSet, v *models.PlanCollaborator) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanCollaborator(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanCollaboratorCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanCollaboratorCreateInput(ctx context.Context, v interface{}) (model.PlanCollaboratorCreateInput, error) {
	res, err := ec.unmarshalInputPlanCollaboratorCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlanCrTdl2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdl(ctx context.Context, sel ast.SelectionSet, v models.PlanCrTdl) graphql.Marshaler {
	return ec._PlanCrTdl(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanCrTdl2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdlᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PlanCrTdl) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlanCrTdl2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdl(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlanCrTdl2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanCrTdl(ctx context.Context, sel ast.SelectionSet, v *models.PlanCrTdl) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanCrTdl(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanCrTdlChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNPlanCrTdlCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanCrTdlCreateInput(ctx context.Context, v interface{}) (model.PlanCrTdlCreateInput, error) {
	res, err := ec.unmarshalInputPlanCrTdlCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlanDiscussion2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussion(ctx context.Context, sel ast.SelectionSet, v models.PlanDiscussion) graphql.Marshaler {
	return ec._PlanDiscussion(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanDiscussion2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussionᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PlanDiscussion) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlanDiscussion2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlanDiscussion2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDiscussion(ctx context.Context, sel ast.SelectionSet, v *models.PlanDiscussion) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanDiscussion(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanDiscussionChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNPlanDiscussionCreateInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanDiscussionCreateInput(ctx context.Context, v interface{}) (model.PlanDiscussionCreateInput, error) {
	res, err := ec.unmarshalInputPlanDiscussionCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlanDocument2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocument(ctx context.Context, sel ast.SelectionSet, v models.PlanDocument) graphql.Marshaler {
	return ec._PlanDocument(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanDocument2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocumentᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PlanDocument) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlanDocument2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocument(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlanDocument2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanDocument(ctx context.Context, sel ast.SelectionSet, v *models.PlanDocument) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanDocument(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanDocumentInput2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPlanDocumentInput(ctx context.Context, v interface{}) (model.PlanDocumentInput, error) {
	res, err := ec.unmarshalInputPlanDocumentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlanFavorite2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanFavorite(ctx context.Context, sel ast.SelectionSet, v models.PlanFavorite) graphql.Marshaler {
	return ec._PlanFavorite(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanFavorite2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanFavorite(ctx context.Context, sel ast.SelectionSet, v *models.PlanFavorite) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanFavorite(ctx, sel, v)
}

func (ec *executionContext) marshalNPlanGeneralCharacteristics2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanGeneralCharacteristics(ctx context.Context, sel ast.SelectionSet, v models.PlanGeneralCharacteristics) graphql.Marshaler {
	return ec._PlanGeneralCharacteristics(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanGeneralCharacteristics2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanGeneralCharacteristics(ctx context.Context, sel ast.SelectionSet, v *models.PlanGeneralCharacteristics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanGeneralCharacteristics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanGeneralCharacteristicsChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNPlanITTools2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanITTools(ctx context.Context, sel ast.SelectionSet, v models.PlanITTools) graphql.Marshaler {
	return ec._PlanITTools(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanITTools2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanITTools(ctx context.Context, sel ast.SelectionSet, v *models.PlanITTools) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanITTools(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanITToolsChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNPlanOpsEvalAndLearning2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanOpsEvalAndLearning(ctx context.Context, sel ast.SelectionSet, v models.PlanOpsEvalAndLearning) graphql.Marshaler {
	return ec._PlanOpsEvalAndLearning(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanOpsEvalAndLearning2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanOpsEvalAndLearning(ctx context.Context, sel ast.SelectionSet, v *models.PlanOpsEvalAndLearning) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanOpsEvalAndLearning(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanOpsEvalAndLearningChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNPlanParticipantsAndProviders2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanParticipantsAndProviders(ctx context.Context, sel ast.SelectionSet, v models.PlanParticipantsAndProviders) graphql.Marshaler {
	return ec._PlanParticipantsAndProviders(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanParticipantsAndProviders2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanParticipantsAndProviders(ctx context.Context, sel ast.SelectionSet, v *models.PlanParticipantsAndProviders) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanParticipantsAndProviders(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanParticipantsAndProvidersChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) marshalNPlanPayments2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanPayments(ctx context.Context, sel ast.SelectionSet, v models.PlanPayments) graphql.Marshaler {
	return ec._PlanPayments(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlanPayments2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPlanPayments(ctx context.Context, sel ast.SelectionSet, v *models.PlanPayments) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlanPayments(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlanPaymentsChanges2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	return v.(map[string]interface{}), nil
}

func (ec *executionContext) unmarshalNPpAppSupportContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpAppSupportContractorType(ctx context.Context, v interface{}) (model.PpAppSupportContractorType, error) {
	var res model.PpAppSupportContractorType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPpAppSupportContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpAppSupportContractorType(ctx context.Context, sel ast.SelectionSet, v model.PpAppSupportContractorType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPpAppSupportContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpAppSupportContractorTypeᚄ(ctx context.Context, v interface{}) ([]model.PpAppSupportContractorType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PpAppSupportContractorType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPpAppSupportContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpAppSupportContractorType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPpAppSupportContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpAppSupportContractorTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PpAppSupportContractorType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPpAppSupportContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpAppSupportContractorType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPpCollectScoreReviewType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCollectScoreReviewType(ctx context.Context, v interface{}) (model.PpCollectScoreReviewType, error) {
	var res model.PpCollectScoreReviewType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPpCollectScoreReviewType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCollectScoreReviewType(ctx context.Context, sel ast.SelectionSet, v model.PpCollectScoreReviewType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPpCollectScoreReviewType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCollectScoreReviewTypeᚄ(ctx context.Context, v interface{}) ([]model.PpCollectScoreReviewType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PpCollectScoreReviewType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPpCollectScoreReviewType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCollectScoreReviewType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPpCollectScoreReviewType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCollectScoreReviewTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PpCollectScoreReviewType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPpCollectScoreReviewType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCollectScoreReviewType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPpCommunicateWithParticipantType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCommunicateWithParticipantType(ctx context.Context, v interface{}) (model.PpCommunicateWithParticipantType, error) {
	var res model.PpCommunicateWithParticipantType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPpCommunicateWithParticipantType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCommunicateWithParticipantType(ctx context.Context, sel ast.SelectionSet, v model.PpCommunicateWithParticipantType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPpCommunicateWithParticipantType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCommunicateWithParticipantTypeᚄ(ctx context.Context, v interface{}) ([]model.PpCommunicateWithParticipantType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PpCommunicateWithParticipantType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPpCommunicateWithParticipantType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCommunicateWithParticipantType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPpCommunicateWithParticipantType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCommunicateWithParticipantTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PpCommunicateWithParticipantType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPpCommunicateWithParticipantType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCommunicateWithParticipantType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPpManageProviderOverlapType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpManageProviderOverlapType(ctx context.Context, v interface{}) (model.PpManageProviderOverlapType, error) {
	var res model.PpManageProviderOverlapType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPpManageProviderOverlapType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpManageProviderOverlapType(ctx context.Context, sel ast.SelectionSet, v model.PpManageProviderOverlapType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPpManageProviderOverlapType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpManageProviderOverlapTypeᚄ(ctx context.Context, v interface{}) ([]model.PpManageProviderOverlapType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PpManageProviderOverlapType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPpManageProviderOverlapType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpManageProviderOverlapType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPpManageProviderOverlapType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpManageProviderOverlapTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PpManageProviderOverlapType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPpManageProviderOverlapType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpManageProviderOverlapType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPpToAdvertiseType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpToAdvertiseType(ctx context.Context, v interface{}) (model.PpToAdvertiseType, error) {
	var res model.PpToAdvertiseType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPpToAdvertiseType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpToAdvertiseType(ctx context.Context, sel ast.SelectionSet, v model.PpToAdvertiseType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPpToAdvertiseType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpToAdvertiseTypeᚄ(ctx context.Context, v interface{}) ([]model.PpToAdvertiseType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PpToAdvertiseType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPpToAdvertiseType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpToAdvertiseType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPpToAdvertiseType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpToAdvertiseTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PpToAdvertiseType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPpToAdvertiseType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpToAdvertiseType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNProviderAddType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddType(ctx context.Context, v interface{}) (model.ProviderAddType, error) {
	var res model.ProviderAddType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProviderAddType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddType(ctx context.Context, sel ast.SelectionSet, v model.ProviderAddType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNProviderAddType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddTypeᚄ(ctx context.Context, v interface{}) ([]model.ProviderAddType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ProviderAddType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProviderAddType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNProviderAddType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ProviderAddType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProviderAddType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNProviderLeaveType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveType(ctx context.Context, v interface{}) (model.ProviderLeaveType, error) {
	var res model.ProviderLeaveType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProviderLeaveType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveType(ctx context.Context, sel ast.SelectionSet, v model.ProviderLeaveType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNProviderLeaveType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveTypeᚄ(ctx context.Context, v interface{}) ([]model.ProviderLeaveType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ProviderLeaveType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProviderLeaveType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNProviderLeaveType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ProviderLeaveType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProviderLeaveType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx context.Context, v interface{}) (model.Role, error) {
	var res model.Role
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐRole(ctx context.Context, sel ast.SelectionSet, v model.Role) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSelectionMethodType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodType(ctx context.Context, v interface{}) (model.SelectionMethodType, error) {
	var res model.SelectionMethodType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSelectionMethodType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodType(ctx context.Context, sel ast.SelectionSet, v model.SelectionMethodType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSelectionMethodType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodTypeᚄ(ctx context.Context, v interface{}) ([]model.SelectionMethodType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.SelectionMethodType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSelectionMethodType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNSelectionMethodType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SelectionMethodType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSelectionMethodType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNSortDirection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐSortDirection(ctx context.Context, v interface{}) (models.SortDirection, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SortDirection(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSortDirection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐSortDirection(ctx context.Context, sel ast.SelectionSet, v models.SortDirection) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNStakeholdersType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersType(ctx context.Context, v interface{}) (model.StakeholdersType, error) {
	var res model.StakeholdersType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStakeholdersType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersType(ctx context.Context, sel ast.SelectionSet, v model.StakeholdersType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNStakeholdersType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersTypeᚄ(ctx context.Context, v interface{}) ([]model.StakeholdersType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.StakeholdersType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNStakeholdersType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNStakeholdersType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.StakeholdersType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStakeholdersType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNTaskListSection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSection(ctx context.Context, v interface{}) (model.TaskListSection, error) {
	var res model.TaskListSection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTaskListSection2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSection(ctx context.Context, sel ast.SelectionSet, v model.TaskListSection) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNTaskListSectionLockStatus2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TaskListSectionLockStatus) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTaskListSectionLockStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTaskListSectionLockStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatus(ctx context.Context, sel ast.SelectionSet, v *model.TaskListSectionLockStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaskListSectionLockStatus(ctx, sel, v)
}

func (ec *executionContext) marshalNTaskListSectionLockStatusChanged2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatusChanged(ctx context.Context, sel ast.SelectionSet, v model.TaskListSectionLockStatusChanged) graphql.Marshaler {
	return ec._TaskListSectionLockStatusChanged(ctx, sel, &v)
}

func (ec *executionContext) marshalNTaskListSectionLockStatusChanged2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskListSectionLockStatusChanged(ctx context.Context, sel ast.SelectionSet, v *model.TaskListSectionLockStatusChanged) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaskListSectionLockStatusChanged(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx context.Context, v interface{}) (models.TaskStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TaskStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTaskStatus2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTaskStatus(ctx context.Context, sel ast.SelectionSet, v models.TaskStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTeamRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTeamRole(ctx context.Context, v interface{}) (models.TeamRole, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TeamRole(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTeamRole2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTeamRole(ctx context.Context, sel ast.SelectionSet, v models.TeamRole) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v interface{}) (uuid.UUID, error) {
	res, err := models.UnmarshalUUID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v uuid.UUID) graphql.Marshaler {
	res := models.MarshalUUID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNUserInfo2ᚕᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐUserInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.UserInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserInfo2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐUserInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserInfo2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐUserInfo(ctx context.Context, sel ast.SelectionSet, v *models.UserInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNWaiverType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverType(ctx context.Context, v interface{}) (model.WaiverType, error) {
	var res model.WaiverType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWaiverType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverType(ctx context.Context, sel ast.SelectionSet, v model.WaiverType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNWaiverType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverTypeᚄ(ctx context.Context, v interface{}) ([]model.WaiverType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.WaiverType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWaiverType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNWaiverType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.WaiverType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWaiverType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAgencyOrStateHelpType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpTypeᚄ(ctx context.Context, v interface{}) ([]model.AgencyOrStateHelpType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AgencyOrStateHelpType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAgencyOrStateHelpType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAgencyOrStateHelpType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AgencyOrStateHelpType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAgencyOrStateHelpType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgencyOrStateHelpType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAgreementType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementTypeᚄ(ctx context.Context, v interface{}) ([]model.AgreementType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AgreementType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAgreementType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAgreementType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AgreementType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAgreementType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAgreementType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAlternativePaymentModelType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelTypeᚄ(ctx context.Context, v interface{}) ([]model.AlternativePaymentModelType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AlternativePaymentModelType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAlternativePaymentModelType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAlternativePaymentModelType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AlternativePaymentModelType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlternativePaymentModelType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAlternativePaymentModelType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAnticipatedPaymentFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyTypeᚄ(ctx context.Context, v interface{}) ([]models.AnticipatedPaymentFrequencyType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.AnticipatedPaymentFrequencyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAnticipatedPaymentFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAnticipatedPaymentFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.AnticipatedPaymentFrequencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAnticipatedPaymentFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐAnticipatedPaymentFrequencyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAuthorityAllowance2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowanceᚄ(ctx context.Context, v interface{}) ([]model.AuthorityAllowance, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AuthorityAllowance, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAuthorityAllowance2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowance(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAuthorityAllowance2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowanceᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AuthorityAllowance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuthorityAllowance2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐAuthorityAllowance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBManageBeneficiaryOverlapType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBManageBeneficiaryOverlapTypeᚄ(ctx context.Context, v interface{}) ([]model.BManageBeneficiaryOverlapType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.BManageBeneficiaryOverlapType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBManageBeneficiaryOverlapType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBManageBeneficiaryOverlapType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBManageBeneficiaryOverlapType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBManageBeneficiaryOverlapTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BManageBeneficiaryOverlapType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBManageBeneficiaryOverlapType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBManageBeneficiaryOverlapType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBenchmarkForPerformanceType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐBenchmarkForPerformanceType(ctx context.Context, v interface{}) (*models.BenchmarkForPerformanceType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.BenchmarkForPerformanceType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBenchmarkForPerformanceType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐBenchmarkForPerformanceType(ctx context.Context, sel ast.SelectionSet, v *models.BenchmarkForPerformanceType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesTypeᚄ(ctx context.Context, v interface{}) ([]model.BeneficiariesType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.BeneficiariesType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.BeneficiariesType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐBeneficiariesType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOCMMIGroup2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroupᚄ(ctx context.Context, v interface{}) ([]model.CMMIGroup, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CMMIGroup, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCMMIGroup2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroup(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCMMIGroup2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroupᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CMMIGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCMMIGroup2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMMIGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCMSCenter2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenterᚄ(ctx context.Context, v interface{}) ([]model.CMSCenter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CMSCenter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCMSCenter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCMSCenter2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenterᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CMSCenter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCMSCenter2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCMSCenter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCcmInvolvmentType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentTypeᚄ(ctx context.Context, v interface{}) ([]model.CcmInvolvmentType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CcmInvolvmentType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCcmInvolvmentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCcmInvolvmentType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CcmInvolvmentType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCcmInvolvmentType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐCcmInvolvmentType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayTypeᚄ(ctx context.Context, v interface{}) ([]models.ClaimsBasedPayType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.ClaimsBasedPayType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.ClaimsBasedPayType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐClaimsBasedPayType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOComplexityCalculationLevelType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐComplexityCalculationLevelType(ctx context.Context, v interface{}) (*models.ComplexityCalculationLevelType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ComplexityCalculationLevelType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOComplexityCalculationLevelType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐComplexityCalculationLevelType(ctx context.Context, sel ast.SelectionSet, v *models.ComplexityCalculationLevelType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOConfidenceType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐConfidenceType(ctx context.Context, v interface{}) (*models.ConfidenceType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ConfidenceType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConfidenceType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐConfidenceType(ctx context.Context, sel ast.SelectionSet, v *models.ConfidenceType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOContractorSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportTypeᚄ(ctx context.Context, v interface{}) ([]model.ContractorSupportType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ContractorSupportType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNContractorSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOContractorSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ContractorSupportType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContractorSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐContractorSupportType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalODataForMonitoringType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringTypeᚄ(ctx context.Context, v interface{}) ([]model.DataForMonitoringType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.DataForMonitoringType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataForMonitoringType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODataForMonitoringType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataForMonitoringType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataForMonitoringType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataForMonitoringType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalODataFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyTypeᚄ(ctx context.Context, v interface{}) ([]model.DataFrequencyType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.DataFrequencyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODataFrequencyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataFrequencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataFrequencyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataFrequencyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalODataFullTimeOrIncrementalType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataFullTimeOrIncrementalType(ctx context.Context, v interface{}) (*models.DataFullTimeOrIncrementalType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.DataFullTimeOrIncrementalType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODataFullTimeOrIncrementalType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataFullTimeOrIncrementalType(ctx context.Context, sel ast.SelectionSet, v *models.DataFullTimeOrIncrementalType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalODataStartsType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataStartsType(ctx context.Context, v interface{}) (*models.DataStartsType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.DataStartsType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODataStartsType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDataStartsType(ctx context.Context, sel ast.SelectionSet, v *models.DataStartsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalODataToSendParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsTypeᚄ(ctx context.Context, v interface{}) ([]model.DataToSendParticipantsType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.DataToSendParticipantsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDataToSendParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODataToSendParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DataToSendParticipantsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataToSendParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐDataToSendParticipantsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalODiscussionStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionStatus(ctx context.Context, v interface{}) (*models.DiscussionStatus, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.DiscussionStatus(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODiscussionStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐDiscussionStatus(ctx context.Context, sel ast.SelectionSet, v *models.DiscussionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOEvaluationApproachType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachTypeᚄ(ctx context.Context, v interface{}) ([]model.EvaluationApproachType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.EvaluationApproachType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEvaluationApproachType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEvaluationApproachType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EvaluationApproachType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEvaluationApproachType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐEvaluationApproachType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOFrequencyType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFrequencyType(ctx context.Context, v interface{}) (*models.FrequencyType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.FrequencyType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFrequencyType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFrequencyType(ctx context.Context, sel ast.SelectionSet, v *models.FrequencyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOFundingSource2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSourceᚄ(ctx context.Context, v interface{}) ([]models.FundingSource, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.FundingSource, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFundingSource2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSource(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFundingSource2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSourceᚄ(ctx context.Context, sel ast.SelectionSet, v []models.FundingSource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFundingSource2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐFundingSource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOGcCollectBidsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcCollectBidsTypeᚄ(ctx context.Context, v interface{}) ([]model.GcCollectBidsType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.GcCollectBidsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGcCollectBidsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcCollectBidsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOGcCollectBidsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcCollectBidsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GcCollectBidsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGcCollectBidsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcCollectBidsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOGcPartCDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcPartCDTypeᚄ(ctx context.Context, v interface{}) ([]model.GcPartCDType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.GcPartCDType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGcPartCDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcPartCDType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOGcPartCDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcPartCDTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GcPartCDType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGcPartCDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcPartCDType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOGcUpdateContractType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcUpdateContractTypeᚄ(ctx context.Context, v interface{}) ([]model.GcUpdateContractType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.GcUpdateContractType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGcUpdateContractType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcUpdateContractType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOGcUpdateContractType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcUpdateContractTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GcUpdateContractType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGcUpdateContractType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGcUpdateContractType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOGeographyApplication2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplicationᚄ(ctx context.Context, v interface{}) ([]model.GeographyApplication, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.GeographyApplication, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGeographyApplication2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplication(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOGeographyApplication2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplicationᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GeographyApplication) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGeographyApplication2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyApplication(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOGeographyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyTypeᚄ(ctx context.Context, v interface{}) ([]model.GeographyType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.GeographyType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGeographyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOGeographyType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GeographyType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGeographyType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐGeographyType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOKeyCharacteristic2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristicᚄ(ctx context.Context, v interface{}) ([]model.KeyCharacteristic, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.KeyCharacteristic, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNKeyCharacteristic2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristic(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOKeyCharacteristic2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristicᚄ(ctx context.Context, sel ast.SelectionSet, v []model.KeyCharacteristic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKeyCharacteristic2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐKeyCharacteristic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOModelCategory2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelCategory(ctx context.Context, v interface{}) (*models.ModelCategory, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ModelCategory(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOModelCategory2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelCategory(ctx context.Context, sel ast.SelectionSet, v *models.ModelCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOModelLearningSystemType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemTypeᚄ(ctx context.Context, v interface{}) ([]model.ModelLearningSystemType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ModelLearningSystemType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNModelLearningSystemType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOModelLearningSystemType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ModelLearningSystemType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNModelLearningSystemType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐModelLearningSystemType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOModelStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelStatus(ctx context.Context, v interface{}) (*models.ModelStatus, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ModelStatus(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOModelStatus2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelStatus(ctx context.Context, sel ast.SelectionSet, v *models.ModelStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOModelType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelType(ctx context.Context, v interface{}) (*models.ModelType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ModelType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOModelType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐModelType(ctx context.Context, sel ast.SelectionSet, v *models.ModelType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOMonitoringFileType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileTypeᚄ(ctx context.Context, v interface{}) ([]model.MonitoringFileType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.MonitoringFileType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMonitoringFileType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMonitoringFileType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MonitoringFileType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMonitoringFileType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐMonitoringFileType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalONonClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayTypeᚄ(ctx context.Context, v interface{}) ([]model.NonClaimsBasedPayType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.NonClaimsBasedPayType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNonClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONonClaimsBasedPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.NonClaimsBasedPayType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNonClaimsBasedPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐNonClaimsBasedPayType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOelClaimsBasedMeasuresType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelClaimsBasedMeasuresTypeᚄ(ctx context.Context, v interface{}) ([]model.OelClaimsBasedMeasuresType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelClaimsBasedMeasuresType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelClaimsBasedMeasuresType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelClaimsBasedMeasuresType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOelClaimsBasedMeasuresType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelClaimsBasedMeasuresTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelClaimsBasedMeasuresType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelClaimsBasedMeasuresType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelClaimsBasedMeasuresType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOelCollectDataType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelCollectDataTypeᚄ(ctx context.Context, v interface{}) ([]model.OelCollectDataType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelCollectDataType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelCollectDataType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelCollectDataType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOelCollectDataType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelCollectDataTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelCollectDataType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelCollectDataType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelCollectDataType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOelEducateBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEducateBeneficiariesTypeᚄ(ctx context.Context, v interface{}) ([]model.OelEducateBeneficiariesType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelEducateBeneficiariesType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelEducateBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEducateBeneficiariesType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOelEducateBeneficiariesType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEducateBeneficiariesTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelEducateBeneficiariesType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelEducateBeneficiariesType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEducateBeneficiariesType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOelEvaluationContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEvaluationContractorTypeᚄ(ctx context.Context, v interface{}) ([]model.OelEvaluationContractorType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelEvaluationContractorType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelEvaluationContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEvaluationContractorType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOelEvaluationContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEvaluationContractorTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelEvaluationContractorType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelEvaluationContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelEvaluationContractorType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOelHelpdeskSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelHelpdeskSupportTypeᚄ(ctx context.Context, v interface{}) ([]model.OelHelpdeskSupportType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelHelpdeskSupportType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelHelpdeskSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelHelpdeskSupportType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOelHelpdeskSupportType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelHelpdeskSupportTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelHelpdeskSupportType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelHelpdeskSupportType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelHelpdeskSupportType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOelLearningContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelLearningContractorTypeᚄ(ctx context.Context, v interface{}) ([]model.OelLearningContractorType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelLearningContractorType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelLearningContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelLearningContractorType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOelLearningContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelLearningContractorTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelLearningContractorType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelLearningContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelLearningContractorType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOelManageAcoType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelManageAcoTypeᚄ(ctx context.Context, v interface{}) ([]model.OelManageAcoType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelManageAcoType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelManageAcoType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelManageAcoType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOelManageAcoType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelManageAcoTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelManageAcoType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelManageAcoType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelManageAcoType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOelObtainDataType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelObtainDataTypeᚄ(ctx context.Context, v interface{}) ([]model.OelObtainDataType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelObtainDataType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelObtainDataType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelObtainDataType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOelObtainDataType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelObtainDataTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelObtainDataType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelObtainDataType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelObtainDataType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOelParticipantCollaborationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelParticipantCollaborationTypeᚄ(ctx context.Context, v interface{}) ([]model.OelParticipantCollaborationType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelParticipantCollaborationType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelParticipantCollaborationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelParticipantCollaborationType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOelParticipantCollaborationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelParticipantCollaborationTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelParticipantCollaborationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelParticipantCollaborationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelParticipantCollaborationType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOelPerformanceBenchmarkType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelPerformanceBenchmarkTypeᚄ(ctx context.Context, v interface{}) ([]model.OelPerformanceBenchmarkType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelPerformanceBenchmarkType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelPerformanceBenchmarkType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelPerformanceBenchmarkType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOelPerformanceBenchmarkType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelPerformanceBenchmarkTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelPerformanceBenchmarkType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelPerformanceBenchmarkType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelPerformanceBenchmarkType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOelProcessAppealsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelProcessAppealsTypeᚄ(ctx context.Context, v interface{}) ([]model.OelProcessAppealsType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelProcessAppealsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelProcessAppealsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelProcessAppealsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOelProcessAppealsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelProcessAppealsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelProcessAppealsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelProcessAppealsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelProcessAppealsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOelQualityScoresType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelQualityScoresTypeᚄ(ctx context.Context, v interface{}) ([]model.OelQualityScoresType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelQualityScoresType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelQualityScoresType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelQualityScoresType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOelQualityScoresType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelQualityScoresTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelQualityScoresType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelQualityScoresType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelQualityScoresType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOelSendReportsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelSendReportsTypeᚄ(ctx context.Context, v interface{}) ([]model.OelSendReportsType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.OelSendReportsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOelSendReportsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelSendReportsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOOelSendReportsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelSendReportsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.OelSendReportsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOelSendReportsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐOelSendReportsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOOverlapType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOverlapType(ctx context.Context, v interface{}) (*models.OverlapType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.OverlapType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOverlapType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐOverlapType(ctx context.Context, sel ast.SelectionSet, v *models.OverlapType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOPInformFfsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPInformFfsTypeᚄ(ctx context.Context, v interface{}) ([]model.PInformFfsType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PInformFfsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPInformFfsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPInformFfsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPInformFfsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPInformFfsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PInformFfsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPInformFfsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPInformFfsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPMakeClaimsPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPMakeClaimsPaymentsTypeᚄ(ctx context.Context, v interface{}) ([]model.PMakeClaimsPaymentsType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PMakeClaimsPaymentsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPMakeClaimsPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPMakeClaimsPaymentsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPMakeClaimsPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPMakeClaimsPaymentsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PMakeClaimsPaymentsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPMakeClaimsPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPMakeClaimsPaymentsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPNonClaimsBasedPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPNonClaimsBasedPaymentsTypeᚄ(ctx context.Context, v interface{}) ([]model.PNonClaimsBasedPaymentsType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PNonClaimsBasedPaymentsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPNonClaimsBasedPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPNonClaimsBasedPaymentsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPNonClaimsBasedPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPNonClaimsBasedPaymentsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PNonClaimsBasedPaymentsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPNonClaimsBasedPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPNonClaimsBasedPaymentsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPRecoverPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPRecoverPaymentsTypeᚄ(ctx context.Context, v interface{}) ([]model.PRecoverPaymentsType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PRecoverPaymentsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPRecoverPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPRecoverPaymentsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPRecoverPaymentsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPRecoverPaymentsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PRecoverPaymentsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPRecoverPaymentsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPRecoverPaymentsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPSharedSavingsPlanType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPSharedSavingsPlanTypeᚄ(ctx context.Context, v interface{}) ([]model.PSharedSavingsPlanType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PSharedSavingsPlanType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPSharedSavingsPlanType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPSharedSavingsPlanType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPSharedSavingsPlanType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPSharedSavingsPlanTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PSharedSavingsPlanType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPSharedSavingsPlanType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPSharedSavingsPlanType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOParticipantCommunicationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantCommunicationType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantCommunicationType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantCommunicationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOParticipantCommunicationType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantCommunicationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantCommunicationType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantCommunicationType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOParticipantRiskType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐParticipantRiskType(ctx context.Context, v interface{}) (*models.ParticipantRiskType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.ParticipantRiskType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOParticipantRiskType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐParticipantRiskType(ctx context.Context, sel ast.SelectionSet, v *models.ParticipantRiskType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOParticipantSelectionType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantSelectionType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantSelectionType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantSelectionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOParticipantSelectionType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantSelectionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantSelectionType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantSelectionType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOParticipantsIDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantsIDType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantsIDType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantsIDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOParticipantsIDType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantsIDType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantsIDType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsIDType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsTypeᚄ(ctx context.Context, v interface{}) ([]model.ParticipantsType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ParticipantsType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOParticipantsType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ParticipantsType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParticipantsType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐParticipantsType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPayRecipient2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipientᚄ(ctx context.Context, v interface{}) ([]models.PayRecipient, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.PayRecipient, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPayRecipient2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipient(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPayRecipient2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipientᚄ(ctx context.Context, sel ast.SelectionSet, v []models.PayRecipient) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayRecipient2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayRecipient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayTypeᚄ(ctx context.Context, v interface{}) ([]models.PayType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]models.PayType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPayType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.PayType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPayType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐPayType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPpAppSupportContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpAppSupportContractorTypeᚄ(ctx context.Context, v interface{}) ([]model.PpAppSupportContractorType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PpAppSupportContractorType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPpAppSupportContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpAppSupportContractorType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPpAppSupportContractorType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpAppSupportContractorTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PpAppSupportContractorType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPpAppSupportContractorType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpAppSupportContractorType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPpCollectScoreReviewType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCollectScoreReviewTypeᚄ(ctx context.Context, v interface{}) ([]model.PpCollectScoreReviewType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PpCollectScoreReviewType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPpCollectScoreReviewType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCollectScoreReviewType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPpCollectScoreReviewType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCollectScoreReviewTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PpCollectScoreReviewType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPpCollectScoreReviewType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCollectScoreReviewType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPpCommunicateWithParticipantType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCommunicateWithParticipantTypeᚄ(ctx context.Context, v interface{}) ([]model.PpCommunicateWithParticipantType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PpCommunicateWithParticipantType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPpCommunicateWithParticipantType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCommunicateWithParticipantType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPpCommunicateWithParticipantType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCommunicateWithParticipantTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PpCommunicateWithParticipantType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPpCommunicateWithParticipantType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpCommunicateWithParticipantType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPpManageProviderOverlapType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpManageProviderOverlapTypeᚄ(ctx context.Context, v interface{}) ([]model.PpManageProviderOverlapType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PpManageProviderOverlapType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPpManageProviderOverlapType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpManageProviderOverlapType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPpManageProviderOverlapType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpManageProviderOverlapTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PpManageProviderOverlapType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPpManageProviderOverlapType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpManageProviderOverlapType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPpToAdvertiseType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpToAdvertiseTypeᚄ(ctx context.Context, v interface{}) ([]model.PpToAdvertiseType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.PpToAdvertiseType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPpToAdvertiseType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpToAdvertiseType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPpToAdvertiseType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpToAdvertiseTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.PpToAdvertiseType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPpToAdvertiseType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐPpToAdvertiseType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOProviderAddType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddTypeᚄ(ctx context.Context, v interface{}) ([]model.ProviderAddType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ProviderAddType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProviderAddType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOProviderAddType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ProviderAddType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProviderAddType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderAddType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOProviderLeaveType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveTypeᚄ(ctx context.Context, v interface{}) ([]model.ProviderLeaveType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ProviderLeaveType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProviderLeaveType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOProviderLeaveType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ProviderLeaveType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProviderLeaveType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐProviderLeaveType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalORecruitmentType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐRecruitmentType(ctx context.Context, v interface{}) (*models.RecruitmentType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.RecruitmentType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORecruitmentType2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐRecruitmentType(ctx context.Context, sel ast.SelectionSet, v *models.RecruitmentType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOSelectionMethodType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodTypeᚄ(ctx context.Context, v interface{}) ([]model.SelectionMethodType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.SelectionMethodType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSelectionMethodType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSelectionMethodType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SelectionMethodType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSelectionMethodType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐSelectionMethodType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOStakeholdersType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersTypeᚄ(ctx context.Context, v interface{}) ([]model.StakeholdersType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.StakeholdersType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNStakeholdersType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOStakeholdersType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.StakeholdersType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStakeholdersType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐStakeholdersType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTaskStatusInput2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskStatusInput(ctx context.Context, v interface{}) (*model.TaskStatusInput, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.TaskStatusInput)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTaskStatusInput2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐTaskStatusInput(ctx context.Context, sel ast.SelectionSet, v *model.TaskStatusInput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) unmarshalOTriStateAnswer2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTriStateAnswer(ctx context.Context, v interface{}) (*models.TriStateAnswer, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.TriStateAnswer(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTriStateAnswer2ᚖgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋmodelsᚐTriStateAnswer(ctx context.Context, sel ast.SelectionSet, v *models.TriStateAnswer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v interface{}) (uuid.UUID, error) {
	res, err := models.UnmarshalUUID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v uuid.UUID) graphql.Marshaler {
	res := models.MarshalUUID(v)
	return res
}

func (ec *executionContext) unmarshalOWaiverType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverTypeᚄ(ctx context.Context, v interface{}) ([]model.WaiverType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.WaiverType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNWaiverType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOWaiverType2ᚕgithubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.WaiverType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWaiverType2githubᚗcomᚋcmsgovᚋmintᚑappᚋpkgᚋgraphᚋmodelᚐWaiverType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
