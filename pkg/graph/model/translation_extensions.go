// Package model houses all autogenerated models from GQL gen
package model

import "github.com/cms-enterprise/mint-app/pkg/models"

// TableName returns the table name for this translation, satisfying the Translation interface
func (pbt *PlanBasicsTranslation) TableName() models.TableName {
	return models.TNPlanBasics
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (pbt *PlanBasicsTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*pbt)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (pbt *PlanBeneficiariesTranslation) TableName() models.TableName {
	return models.TNPlanBeneficiaries
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (pbt *PlanBeneficiariesTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*pbt)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (pct *PlanCollaboratorTranslation) TableName() models.TableName {
	return models.TNPlanCollaborator
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (pct *PlanCollaboratorTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*pct)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (pGct *PlanGeneralCharacteristicsTranslation) TableName() models.TableName {
	return models.TNPlanGeneralCharacteristics
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (pGct *PlanGeneralCharacteristicsTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*pGct)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (pOet *PlanOpsEvalAndLearningTranslation) TableName() models.TableName {
	return models.TNPlanOpsEvalAndLearning
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (pOet *PlanOpsEvalAndLearningTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*pOet)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (ppt *PlanPaymentsTranslation) TableName() models.TableName {
	return models.TNPlanPayments
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (ppt *PlanPaymentsTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*ppt)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (tpp *PlanParticipantsAndProvidersTranslation) TableName() models.TableName {
	return models.TNPlanParticipantsAndProviders
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (tpp *PlanParticipantsAndProvidersTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*tpp)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (tpp *ModelPlanTranslation) TableName() models.TableName {
	return models.TNModelPlan
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (tpp *ModelPlanTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*tpp)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (pdt *PlanDiscussionTranslation) TableName() models.TableName {
	return models.TNPlanDiscussion
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (pdt *PlanDiscussionTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*pdt)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (drt *DiscussionReplyTranslation) TableName() models.TableName {
	return models.TNDiscussionReply
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (drt *DiscussionReplyTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*drt)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (pct *PlanCRTranslation) TableName() models.TableName {
	return models.TNPlanCr
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (pct *PlanCRTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*pct)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (ptt *PlanTDLTranslation) TableName() models.TableName {
	return models.TNPlanTdl
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (ptt *PlanTDLTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*ptt)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (pdt *PlanDocumentTranslation) TableName() models.TableName {
	return models.TNPlanDocument
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (pdt *PlanDocumentTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*pdt)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (ont *OperationalNeedTranslation) TableName() models.TableName {
	return models.TNOperationalNeed
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (ont *OperationalNeedTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*ont)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (ost *OperationalSolutionTranslation) TableName() models.TableName {
	return models.TNOperationalSolution
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (ost *OperationalSolutionTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*ost)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (ost *OperationalSolutionSubtaskTranslation) TableName() models.TableName {
	return models.TNOperationalSolutionSubtask
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (ost *OperationalSolutionSubtaskTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*ost)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (emt *ExistingModelLinkTranslation) TableName() models.TableName {
	return models.TNExistingModelLink
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (emt *ExistingModelLinkTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*emt)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (pdt *PlanDocumentSolutionLinkTranslation) TableName() models.TableName {
	return models.TNPlanDocumentSolutionLink
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (pdt *PlanDocumentSolutionLinkTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*pdt)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (pdt *PlanDataExchangeApproachTranslation) TableName() models.TableName {
	return models.TNPlanDataExchangeApproach
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (pdt *PlanDataExchangeApproachTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*pdt)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (t *MTOCategoryTranslation) TableName() models.TableName {
	return models.TNMTOCategory
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (t *MTOCategoryTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*t)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (t *MTOMilestoneTranslation) TableName() models.TableName {
	return models.TNMTOMilestone
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (t *MTOMilestoneTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*t)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (t *MTOSolutionTranslation) TableName() models.TableName {
	return models.TNMTOSolution
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (t *MTOSolutionTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*t)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (t *MTOMilestoneSolutionLinkTranslation) TableName() models.TableName {
	return models.TNMTOMilestoneSolutionLink
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (t *MTOMilestoneSolutionLinkTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*t)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (t *MTOInfoTranslation) TableName() models.TableName {
	return models.TNMTOInfo
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (t *MTOInfoTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*t)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (t *MTOCommonSolutionContactTranslation) TableName() models.TableName {
	return models.TNMTOCommonSolutionContact
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (t *MTOCommonSolutionContactTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*t)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (t *MTOCommonSolutionContractorTranslation) TableName() models.TableName {
	return models.TNMTOCommonSolutionContact
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (t *MTOCommonSolutionContractorTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*t)
}

func (pbt *PlanTimelineTranslation) TableName() models.TableName {
	return models.TNPlanTimeline
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (pbt *PlanTimelineTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*pbt)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (t *MTOMilestoneNoteTranslation) TableName() models.TableName {
	return models.TNMTOMilestoneNote
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (t *MTOMilestoneNoteTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*t)
}

// TableName returns the table name for this translation, satisfying the Translation interface
func (t *ModelPlanMTOTemplateLinkTranslation) TableName() models.TableName {
	return models.TNModelPlanMTOTemplateLink
}

// ToMap translates this translation to a map, satisfying the Translation interface
func (t *ModelPlanMTOTemplateLinkTranslation) ToMap() (map[string]models.ITranslationField, error) {
	return models.StructToTranslationMap(*t)
}
