// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/cmsgov/mint-app/pkg/authentication"
	"github.com/cmsgov/mint-app/pkg/models"
	"github.com/google/uuid"
)

type CreateOperationalSolutionSubtaskInput struct {
	Name   string                                  `json:"name"`
	Status models.OperationalSolutionSubtaskStatus `json:"status"`
}

// The current user of the application
type CurrentUser struct {
	LaunchDarkly *LaunchDarklySettings `json:"launchDarkly"`
}

// DiscussionReplyCreateInput represents the necessary fields to create a discussion reply
type DiscussionReplyCreateInput struct {
	DiscussionID        uuid.UUID                  `json:"discussionID"`
	Content             models.TaggedHTML          `json:"content"`
	UserRole            *models.DiscussionUserRole `json:"userRole,omitempty"`
	UserRoleDescription *string                    `json:"userRoleDescription,omitempty"`
}

// The current user's Launch Darkly key
type LaunchDarklySettings struct {
	UserKey    string `json:"userKey"`
	SignedHash string `json:"signedHash"`
}

// NDAInfo represents whether a user has agreed to an NDA or not. If agreed to previously, there will be a datestamp visible
type NDAInfo struct {
	Agreed    bool       `json:"agreed"`
	AgreedDts *time.Time `json:"agreedDts,omitempty"`
}

type PlanCRCreateInput struct {
	ModelPlanID     uuid.UUID `json:"modelPlanID"`
	IDNumber        string    `json:"idNumber"`
	DateInitiated   time.Time `json:"dateInitiated"`
	DateImplemented time.Time `json:"dateImplemented"`
	Title           string    `json:"title"`
	Note            *string   `json:"note,omitempty"`
}

// PlanCollaboratorCreateInput represents the data required to create a collaborator on a plan
type PlanCollaboratorCreateInput struct {
	ModelPlanID uuid.UUID         `json:"modelPlanID"`
	UserName    string            `json:"userName"`
	TeamRoles   []models.TeamRole `json:"teamRoles"`
}

// PlanDiscussionCreateInput represents the necessary fields to create a plan discussion
type PlanDiscussionCreateInput struct {
	ModelPlanID         uuid.UUID                  `json:"modelPlanID"`
	Content             models.TaggedHTML          `json:"content"`
	UserRole            *models.DiscussionUserRole `json:"userRole,omitempty"`
	UserRoleDescription *string                    `json:"userRoleDescription,omitempty"`
}

// PlanDocumentInput
type PlanDocumentInput struct {
	ModelPlanID          uuid.UUID           `json:"modelPlanID"`
	FileData             graphql.Upload      `json:"fileData"`
	DocumentType         models.DocumentType `json:"documentType"`
	Restricted           bool                `json:"restricted"`
	OtherTypeDescription *string             `json:"otherTypeDescription,omitempty"`
	OptionalNotes        *string             `json:"optionalNotes,omitempty"`
}

// PlanDocumentLinkInput
type PlanDocumentLinkInput struct {
	ModelPlanID          uuid.UUID           `json:"modelPlanID"`
	URL                  string              `json:"url"`
	Name                 string              `json:"name"`
	DocumentType         models.DocumentType `json:"documentType"`
	Restricted           bool                `json:"restricted"`
	OtherTypeDescription *string             `json:"otherTypeDescription,omitempty"`
	OptionalNotes        *string             `json:"optionalNotes,omitempty"`
}

type PlanTDLCreateInput struct {
	ModelPlanID   uuid.UUID `json:"modelPlanID"`
	IDNumber      string    `json:"idNumber"`
	DateInitiated time.Time `json:"dateInitiated"`
	Title         string    `json:"title"`
	Note          *string   `json:"note,omitempty"`
}

type PrepareForClearance struct {
	Status             PrepareForClearanceStatus `json:"status"`
	LatestClearanceDts *time.Time                `json:"latestClearanceDts,omitempty"`
}

type ReportAProblemInput struct {
	IsAnonymousSubmission bool                    `json:"isAnonymousSubmission"`
	AllowContact          *bool                   `json:"allowContact,omitempty"`
	Section               *ReportAProblemSection  `json:"section,omitempty"`
	SectionOther          *string                 `json:"sectionOther,omitempty"`
	WhatDoing             *string                 `json:"whatDoing,omitempty"`
	WhatWentWrong         *string                 `json:"whatWentWrong,omitempty"`
	Severity              *ReportAProblemSeverity `json:"severity,omitempty"`
	SeverityOther         *string                 `json:"severityOther,omitempty"`
}

// The inputs to the user feedback form
type SendFeedbackEmailInput struct {
	IsAnonymousSubmission bool               `json:"isAnonymousSubmission"`
	AllowContact          *bool              `json:"allowContact,omitempty"`
	CmsRole               *string            `json:"cmsRole,omitempty"`
	MintUsedFor           []MintUses         `json:"mintUsedFor,omitempty"`
	MintUsedForOther      *string            `json:"mintUsedForOther,omitempty"`
	SystemEasyToUse       *EaseOfUse         `json:"systemEasyToUse,omitempty"`
	SystemEasyToUseOther  *string            `json:"systemEasyToUseOther,omitempty"`
	HowSatisfied          *SatisfactionLevel `json:"howSatisfied,omitempty"`
	HowCanWeImprove       *string            `json:"howCanWeImprove,omitempty"`
}

type TaskListSectionLockStatus struct {
	ModelPlanID         uuid.UUID                   `json:"modelPlanID"`
	Section             models.TaskListSection      `json:"section"`
	LockedByUserAccount *authentication.UserAccount `json:"lockedByUserAccount"`
	IsAssessment        bool                        `json:"isAssessment"`
}

type TaskListSectionLockStatusChanged struct {
	ChangeType ChangeType                 `json:"changeType"`
	LockStatus *TaskListSectionLockStatus `json:"lockStatus"`
	ActionType ActionType                 `json:"actionType"`
}

type UpdateOperationalSolutionSubtaskInput struct {
	ID      uuid.UUID              `json:"id"`
	Changes map[string]interface{} `json:"changes"`
}

type ActionType string

const (
	// A normal flow action
	ActionTypeNormal ActionType = "NORMAL"
	// An administrative action
	ActionTypeAdmin ActionType = "ADMIN"
)

var AllActionType = []ActionType{
	ActionTypeNormal,
	ActionTypeAdmin,
}

func (e ActionType) IsValid() bool {
	switch e {
	case ActionTypeNormal, ActionTypeAdmin:
		return true
	}
	return false
}

func (e ActionType) String() string {
	return string(e)
}

func (e *ActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActionType", str)
	}
	return nil
}

func (e ActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AgencyOrStateHelpType string

const (
	AgencyOrStateHelpTypeYesState       AgencyOrStateHelpType = "YES_STATE"
	AgencyOrStateHelpTypeYesAgencyIDEas AgencyOrStateHelpType = "YES_AGENCY_IDEAS"
	AgencyOrStateHelpTypeYesAgencyIaa   AgencyOrStateHelpType = "YES_AGENCY_IAA"
	AgencyOrStateHelpTypeNo             AgencyOrStateHelpType = "NO"
	AgencyOrStateHelpTypeOther          AgencyOrStateHelpType = "OTHER"
)

var AllAgencyOrStateHelpType = []AgencyOrStateHelpType{
	AgencyOrStateHelpTypeYesState,
	AgencyOrStateHelpTypeYesAgencyIDEas,
	AgencyOrStateHelpTypeYesAgencyIaa,
	AgencyOrStateHelpTypeNo,
	AgencyOrStateHelpTypeOther,
}

func (e AgencyOrStateHelpType) IsValid() bool {
	switch e {
	case AgencyOrStateHelpTypeYesState, AgencyOrStateHelpTypeYesAgencyIDEas, AgencyOrStateHelpTypeYesAgencyIaa, AgencyOrStateHelpTypeNo, AgencyOrStateHelpTypeOther:
		return true
	}
	return false
}

func (e AgencyOrStateHelpType) String() string {
	return string(e)
}

func (e *AgencyOrStateHelpType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AgencyOrStateHelpType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AgencyOrStateHelpType", str)
	}
	return nil
}

func (e AgencyOrStateHelpType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AgreementType string

const (
	AgreementTypeParticipation AgreementType = "PARTICIPATION"
	AgreementTypeCooperative   AgreementType = "COOPERATIVE"
	AgreementTypeOther         AgreementType = "OTHER"
)

var AllAgreementType = []AgreementType{
	AgreementTypeParticipation,
	AgreementTypeCooperative,
	AgreementTypeOther,
}

func (e AgreementType) IsValid() bool {
	switch e {
	case AgreementTypeParticipation, AgreementTypeCooperative, AgreementTypeOther:
		return true
	}
	return false
}

func (e AgreementType) String() string {
	return string(e)
}

func (e *AgreementType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AgreementType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AgreementType", str)
	}
	return nil
}

func (e AgreementType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AlternativePaymentModelType string

const (
	AlternativePaymentModelTypeRegular  AlternativePaymentModelType = "REGULAR"
	AlternativePaymentModelTypeMips     AlternativePaymentModelType = "MIPS"
	AlternativePaymentModelTypeAdvanced AlternativePaymentModelType = "ADVANCED"
	AlternativePaymentModelTypeNotApm   AlternativePaymentModelType = "NOT_APM"
)

var AllAlternativePaymentModelType = []AlternativePaymentModelType{
	AlternativePaymentModelTypeRegular,
	AlternativePaymentModelTypeMips,
	AlternativePaymentModelTypeAdvanced,
	AlternativePaymentModelTypeNotApm,
}

func (e AlternativePaymentModelType) IsValid() bool {
	switch e {
	case AlternativePaymentModelTypeRegular, AlternativePaymentModelTypeMips, AlternativePaymentModelTypeAdvanced, AlternativePaymentModelTypeNotApm:
		return true
	}
	return false
}

func (e AlternativePaymentModelType) String() string {
	return string(e)
}

func (e *AlternativePaymentModelType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlternativePaymentModelType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AlternativePaymentModelType", str)
	}
	return nil
}

func (e AlternativePaymentModelType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuthorityAllowance string

const (
	AuthorityAllowanceAca                     AuthorityAllowance = "ACA"
	AuthorityAllowanceCongressionallyMandated AuthorityAllowance = "CONGRESSIONALLY_MANDATED"
	AuthorityAllowanceSsaPartB                AuthorityAllowance = "SSA_PART_B"
	AuthorityAllowanceOther                   AuthorityAllowance = "OTHER"
)

var AllAuthorityAllowance = []AuthorityAllowance{
	AuthorityAllowanceAca,
	AuthorityAllowanceCongressionallyMandated,
	AuthorityAllowanceSsaPartB,
	AuthorityAllowanceOther,
}

func (e AuthorityAllowance) IsValid() bool {
	switch e {
	case AuthorityAllowanceAca, AuthorityAllowanceCongressionallyMandated, AuthorityAllowanceSsaPartB, AuthorityAllowanceOther:
		return true
	}
	return false
}

func (e AuthorityAllowance) String() string {
	return string(e)
}

func (e *AuthorityAllowance) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthorityAllowance(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthorityAllowance", str)
	}
	return nil
}

func (e AuthorityAllowance) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BeneficiariesType string

const (
	BeneficiariesTypeMedicareFfs       BeneficiariesType = "MEDICARE_FFS"
	BeneficiariesTypeMedicareAdvantage BeneficiariesType = "MEDICARE_ADVANTAGE"
	BeneficiariesTypeMedicarePartD     BeneficiariesType = "MEDICARE_PART_D"
	BeneficiariesTypeMedicaid          BeneficiariesType = "MEDICAID"
	BeneficiariesTypeDuallyEligible    BeneficiariesType = "DUALLY_ELIGIBLE"
	BeneficiariesTypeDiseaseSpecific   BeneficiariesType = "DISEASE_SPECIFIC"
	BeneficiariesTypeUnderserved       BeneficiariesType = "UNDERSERVED"
	BeneficiariesTypeOther             BeneficiariesType = "OTHER"
	BeneficiariesTypeNa                BeneficiariesType = "NA"
)

var AllBeneficiariesType = []BeneficiariesType{
	BeneficiariesTypeMedicareFfs,
	BeneficiariesTypeMedicareAdvantage,
	BeneficiariesTypeMedicarePartD,
	BeneficiariesTypeMedicaid,
	BeneficiariesTypeDuallyEligible,
	BeneficiariesTypeDiseaseSpecific,
	BeneficiariesTypeUnderserved,
	BeneficiariesTypeOther,
	BeneficiariesTypeNa,
}

func (e BeneficiariesType) IsValid() bool {
	switch e {
	case BeneficiariesTypeMedicareFfs, BeneficiariesTypeMedicareAdvantage, BeneficiariesTypeMedicarePartD, BeneficiariesTypeMedicaid, BeneficiariesTypeDuallyEligible, BeneficiariesTypeDiseaseSpecific, BeneficiariesTypeUnderserved, BeneficiariesTypeOther, BeneficiariesTypeNa:
		return true
	}
	return false
}

func (e BeneficiariesType) String() string {
	return string(e)
}

func (e *BeneficiariesType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BeneficiariesType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BeneficiariesType", str)
	}
	return nil
}

func (e BeneficiariesType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CMMIGroup string

const (
	CMMIGroupPatientCareModelsGroup        CMMIGroup = "PATIENT_CARE_MODELS_GROUP"
	CMMIGroupPolicyAndProgramsGroup        CMMIGroup = "POLICY_AND_PROGRAMS_GROUP"
	CMMIGroupSeamlessCareModelsGroup       CMMIGroup = "SEAMLESS_CARE_MODELS_GROUP"
	CMMIGroupStateAndPopulationHealthGroup CMMIGroup = "STATE_AND_POPULATION_HEALTH_GROUP"
	CMMIGroupTbd                           CMMIGroup = "TBD"
)

var AllCMMIGroup = []CMMIGroup{
	CMMIGroupPatientCareModelsGroup,
	CMMIGroupPolicyAndProgramsGroup,
	CMMIGroupSeamlessCareModelsGroup,
	CMMIGroupStateAndPopulationHealthGroup,
	CMMIGroupTbd,
}

func (e CMMIGroup) IsValid() bool {
	switch e {
	case CMMIGroupPatientCareModelsGroup, CMMIGroupPolicyAndProgramsGroup, CMMIGroupSeamlessCareModelsGroup, CMMIGroupStateAndPopulationHealthGroup, CMMIGroupTbd:
		return true
	}
	return false
}

func (e CMMIGroup) String() string {
	return string(e)
}

func (e *CMMIGroup) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CMMIGroup(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CMMIGroup", str)
	}
	return nil
}

func (e CMMIGroup) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CMSCenter string

const (
	CMSCenterCmmi                                 CMSCenter = "CMMI"
	CMSCenterCenterForMedicare                    CMSCenter = "CENTER_FOR_MEDICARE"
	CMSCenterFederalCoordinatedHealthCareOffice   CMSCenter = "FEDERAL_COORDINATED_HEALTH_CARE_OFFICE"
	CMSCenterCenterForMedicaidAndChipServices     CMSCenter = "CENTER_FOR_MEDICAID_AND_CHIP_SERVICES"
	CMSCenterCenterForClinicalStandardsAndQuality CMSCenter = "CENTER_FOR_CLINICAL_STANDARDS_AND_QUALITY"
	CMSCenterCenterForProgramIntegrity            CMSCenter = "CENTER_FOR_PROGRAM_INTEGRITY"
)

var AllCMSCenter = []CMSCenter{
	CMSCenterCmmi,
	CMSCenterCenterForMedicare,
	CMSCenterFederalCoordinatedHealthCareOffice,
	CMSCenterCenterForMedicaidAndChipServices,
	CMSCenterCenterForClinicalStandardsAndQuality,
	CMSCenterCenterForProgramIntegrity,
}

func (e CMSCenter) IsValid() bool {
	switch e {
	case CMSCenterCmmi, CMSCenterCenterForMedicare, CMSCenterFederalCoordinatedHealthCareOffice, CMSCenterCenterForMedicaidAndChipServices, CMSCenterCenterForClinicalStandardsAndQuality, CMSCenterCenterForProgramIntegrity:
		return true
	}
	return false
}

func (e CMSCenter) String() string {
	return string(e)
}

func (e *CMSCenter) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CMSCenter(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CMSCenter", str)
	}
	return nil
}

func (e CMSCenter) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CcmInvolvmentType string

const (
	CcmInvolvmentTypeYesEvaluation     CcmInvolvmentType = "YES_EVALUATION"
	CcmInvolvmentTypeYesImplementation CcmInvolvmentType = "YES__IMPLEMENTATION"
	CcmInvolvmentTypeNo                CcmInvolvmentType = "NO"
	CcmInvolvmentTypeOther             CcmInvolvmentType = "OTHER"
)

var AllCcmInvolvmentType = []CcmInvolvmentType{
	CcmInvolvmentTypeYesEvaluation,
	CcmInvolvmentTypeYesImplementation,
	CcmInvolvmentTypeNo,
	CcmInvolvmentTypeOther,
}

func (e CcmInvolvmentType) IsValid() bool {
	switch e {
	case CcmInvolvmentTypeYesEvaluation, CcmInvolvmentTypeYesImplementation, CcmInvolvmentTypeNo, CcmInvolvmentTypeOther:
		return true
	}
	return false
}

func (e CcmInvolvmentType) String() string {
	return string(e)
}

func (e *CcmInvolvmentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CcmInvolvmentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CcmInvolvmentType", str)
	}
	return nil
}

func (e CcmInvolvmentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ChangeType string

const (
	ChangeTypeAdded   ChangeType = "ADDED"
	ChangeTypeUpdated ChangeType = "UPDATED"
	ChangeTypeRemoved ChangeType = "REMOVED"
)

var AllChangeType = []ChangeType{
	ChangeTypeAdded,
	ChangeTypeUpdated,
	ChangeTypeRemoved,
}

func (e ChangeType) IsValid() bool {
	switch e {
	case ChangeTypeAdded, ChangeTypeUpdated, ChangeTypeRemoved:
		return true
	}
	return false
}

func (e ChangeType) String() string {
	return string(e)
}

func (e *ChangeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChangeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChangeType", str)
	}
	return nil
}

func (e ChangeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContractorSupportType string

const (
	ContractorSupportTypeOne      ContractorSupportType = "ONE"
	ContractorSupportTypeMultiple ContractorSupportType = "MULTIPLE"
	ContractorSupportTypeNone     ContractorSupportType = "NONE"
	ContractorSupportTypeOther    ContractorSupportType = "OTHER"
)

var AllContractorSupportType = []ContractorSupportType{
	ContractorSupportTypeOne,
	ContractorSupportTypeMultiple,
	ContractorSupportTypeNone,
	ContractorSupportTypeOther,
}

func (e ContractorSupportType) IsValid() bool {
	switch e {
	case ContractorSupportTypeOne, ContractorSupportTypeMultiple, ContractorSupportTypeNone, ContractorSupportTypeOther:
		return true
	}
	return false
}

func (e ContractorSupportType) String() string {
	return string(e)
}

func (e *ContractorSupportType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContractorSupportType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContractorSupportType", str)
	}
	return nil
}

func (e ContractorSupportType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DataForMonitoringType string

const (
	DataForMonitoringTypeSiteVisits                 DataForMonitoringType = "SITE_VISITS"
	DataForMonitoringTypeMedicareClaims             DataForMonitoringType = "MEDICARE_CLAIMS"
	DataForMonitoringTypeMedicaidClaims             DataForMonitoringType = "MEDICAID_CLAIMS"
	DataForMonitoringTypeEncounterData              DataForMonitoringType = "ENCOUNTER_DATA"
	DataForMonitoringTypeNoPayClaims                DataForMonitoringType = "NO_PAY_CLAIMS"
	DataForMonitoringTypeQualityClaimsBasedMeasures DataForMonitoringType = "QUALITY_CLAIMS_BASED_MEASURES"
	DataForMonitoringTypeQualityReportedMeasures    DataForMonitoringType = "QUALITY_REPORTED_MEASURES"
	DataForMonitoringTypeClinicalData               DataForMonitoringType = "CLINICAL_DATA"
	DataForMonitoringTypeNonClinicalData            DataForMonitoringType = "NON_CLINICAL_DATA"
	DataForMonitoringTypeNonMedicalData             DataForMonitoringType = "NON_MEDICAL_DATA"
	DataForMonitoringTypeOther                      DataForMonitoringType = "OTHER"
	DataForMonitoringTypeNotPlanningToCollectData   DataForMonitoringType = "NOT_PLANNING_TO_COLLECT_DATA"
)

var AllDataForMonitoringType = []DataForMonitoringType{
	DataForMonitoringTypeSiteVisits,
	DataForMonitoringTypeMedicareClaims,
	DataForMonitoringTypeMedicaidClaims,
	DataForMonitoringTypeEncounterData,
	DataForMonitoringTypeNoPayClaims,
	DataForMonitoringTypeQualityClaimsBasedMeasures,
	DataForMonitoringTypeQualityReportedMeasures,
	DataForMonitoringTypeClinicalData,
	DataForMonitoringTypeNonClinicalData,
	DataForMonitoringTypeNonMedicalData,
	DataForMonitoringTypeOther,
	DataForMonitoringTypeNotPlanningToCollectData,
}

func (e DataForMonitoringType) IsValid() bool {
	switch e {
	case DataForMonitoringTypeSiteVisits, DataForMonitoringTypeMedicareClaims, DataForMonitoringTypeMedicaidClaims, DataForMonitoringTypeEncounterData, DataForMonitoringTypeNoPayClaims, DataForMonitoringTypeQualityClaimsBasedMeasures, DataForMonitoringTypeQualityReportedMeasures, DataForMonitoringTypeClinicalData, DataForMonitoringTypeNonClinicalData, DataForMonitoringTypeNonMedicalData, DataForMonitoringTypeOther, DataForMonitoringTypeNotPlanningToCollectData:
		return true
	}
	return false
}

func (e DataForMonitoringType) String() string {
	return string(e)
}

func (e *DataForMonitoringType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DataForMonitoringType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DataForMonitoringType", str)
	}
	return nil
}

func (e DataForMonitoringType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DataToSendParticipantsType string

const (
	DataToSendParticipantsTypeBaselineHistoricalData DataToSendParticipantsType = "BASELINE_HISTORICAL_DATA"
	DataToSendParticipantsTypeClaimsLevelData        DataToSendParticipantsType = "CLAIMS_LEVEL_DATA"
	DataToSendParticipantsTypeBeneficiaryLevelData   DataToSendParticipantsType = "BENEFICIARY_LEVEL_DATA"
	DataToSendParticipantsTypeParticipantLevelData   DataToSendParticipantsType = "PARTICIPANT_LEVEL_DATA"
	DataToSendParticipantsTypeProviderLevelData      DataToSendParticipantsType = "PROVIDER_LEVEL_DATA"
	DataToSendParticipantsTypeOtherMipsData          DataToSendParticipantsType = "OTHER_MIPS_DATA"
	DataToSendParticipantsTypeNotPlanningToSendData  DataToSendParticipantsType = "NOT_PLANNING_TO_SEND_DATA"
)

var AllDataToSendParticipantsType = []DataToSendParticipantsType{
	DataToSendParticipantsTypeBaselineHistoricalData,
	DataToSendParticipantsTypeClaimsLevelData,
	DataToSendParticipantsTypeBeneficiaryLevelData,
	DataToSendParticipantsTypeParticipantLevelData,
	DataToSendParticipantsTypeProviderLevelData,
	DataToSendParticipantsTypeOtherMipsData,
	DataToSendParticipantsTypeNotPlanningToSendData,
}

func (e DataToSendParticipantsType) IsValid() bool {
	switch e {
	case DataToSendParticipantsTypeBaselineHistoricalData, DataToSendParticipantsTypeClaimsLevelData, DataToSendParticipantsTypeBeneficiaryLevelData, DataToSendParticipantsTypeParticipantLevelData, DataToSendParticipantsTypeProviderLevelData, DataToSendParticipantsTypeOtherMipsData, DataToSendParticipantsTypeNotPlanningToSendData:
		return true
	}
	return false
}

func (e DataToSendParticipantsType) String() string {
	return string(e)
}

func (e *DataToSendParticipantsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DataToSendParticipantsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DataToSendParticipantsType", str)
	}
	return nil
}

func (e DataToSendParticipantsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EaseOfUse string

const (
	EaseOfUseAgree    EaseOfUse = "AGREE"
	EaseOfUseDisagree EaseOfUse = "DISAGREE"
	EaseOfUseUnsure   EaseOfUse = "UNSURE"
)

var AllEaseOfUse = []EaseOfUse{
	EaseOfUseAgree,
	EaseOfUseDisagree,
	EaseOfUseUnsure,
}

func (e EaseOfUse) IsValid() bool {
	switch e {
	case EaseOfUseAgree, EaseOfUseDisagree, EaseOfUseUnsure:
		return true
	}
	return false
}

func (e EaseOfUse) String() string {
	return string(e)
}

func (e *EaseOfUse) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EaseOfUse(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EaseOfUse", str)
	}
	return nil
}

func (e EaseOfUse) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EvaluationApproachType string

const (
	EvaluationApproachTypeControlIntervention EvaluationApproachType = "CONTROL_INTERVENTION"
	EvaluationApproachTypeComparisonMatch     EvaluationApproachType = "COMPARISON_MATCH"
	EvaluationApproachTypeInterruptedTime     EvaluationApproachType = "INTERRUPTED_TIME"
	EvaluationApproachTypeNonMedicareData     EvaluationApproachType = "NON_MEDICARE_DATA"
	EvaluationApproachTypeOther               EvaluationApproachType = "OTHER"
)

var AllEvaluationApproachType = []EvaluationApproachType{
	EvaluationApproachTypeControlIntervention,
	EvaluationApproachTypeComparisonMatch,
	EvaluationApproachTypeInterruptedTime,
	EvaluationApproachTypeNonMedicareData,
	EvaluationApproachTypeOther,
}

func (e EvaluationApproachType) IsValid() bool {
	switch e {
	case EvaluationApproachTypeControlIntervention, EvaluationApproachTypeComparisonMatch, EvaluationApproachTypeInterruptedTime, EvaluationApproachTypeNonMedicareData, EvaluationApproachTypeOther:
		return true
	}
	return false
}

func (e EvaluationApproachType) String() string {
	return string(e)
}

func (e *EvaluationApproachType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EvaluationApproachType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EvaluationApproachType", str)
	}
	return nil
}

func (e EvaluationApproachType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GainshareArrangementEligibility string

const (
	GainshareArrangementEligibilityAllProviders  GainshareArrangementEligibility = "ALL_PROVIDERS"
	GainshareArrangementEligibilitySomeProviders GainshareArrangementEligibility = "SOME_PROVIDERS"
	GainshareArrangementEligibilityOther         GainshareArrangementEligibility = "OTHER"
	GainshareArrangementEligibilityNo            GainshareArrangementEligibility = "NO"
)

var AllGainshareArrangementEligibility = []GainshareArrangementEligibility{
	GainshareArrangementEligibilityAllProviders,
	GainshareArrangementEligibilitySomeProviders,
	GainshareArrangementEligibilityOther,
	GainshareArrangementEligibilityNo,
}

func (e GainshareArrangementEligibility) IsValid() bool {
	switch e {
	case GainshareArrangementEligibilityAllProviders, GainshareArrangementEligibilitySomeProviders, GainshareArrangementEligibilityOther, GainshareArrangementEligibilityNo:
		return true
	}
	return false
}

func (e GainshareArrangementEligibility) String() string {
	return string(e)
}

func (e *GainshareArrangementEligibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GainshareArrangementEligibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GainshareArrangementEligibility", str)
	}
	return nil
}

func (e GainshareArrangementEligibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GeographyApplication string

const (
	GeographyApplicationParticipants  GeographyApplication = "PARTICIPANTS"
	GeographyApplicationProviders     GeographyApplication = "PROVIDERS"
	GeographyApplicationBeneficiaries GeographyApplication = "BENEFICIARIES"
	GeographyApplicationOther         GeographyApplication = "OTHER"
)

var AllGeographyApplication = []GeographyApplication{
	GeographyApplicationParticipants,
	GeographyApplicationProviders,
	GeographyApplicationBeneficiaries,
	GeographyApplicationOther,
}

func (e GeographyApplication) IsValid() bool {
	switch e {
	case GeographyApplicationParticipants, GeographyApplicationProviders, GeographyApplicationBeneficiaries, GeographyApplicationOther:
		return true
	}
	return false
}

func (e GeographyApplication) String() string {
	return string(e)
}

func (e *GeographyApplication) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GeographyApplication(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GeographyApplication", str)
	}
	return nil
}

func (e GeographyApplication) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GeographyType string

const (
	GeographyTypeState  GeographyType = "STATE"
	GeographyTypeRegion GeographyType = "REGION"
	GeographyTypeOther  GeographyType = "OTHER"
)

var AllGeographyType = []GeographyType{
	GeographyTypeState,
	GeographyTypeRegion,
	GeographyTypeOther,
}

func (e GeographyType) IsValid() bool {
	switch e {
	case GeographyTypeState, GeographyTypeRegion, GeographyTypeOther:
		return true
	}
	return false
}

func (e GeographyType) String() string {
	return string(e)
}

func (e *GeographyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GeographyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GeographyType", str)
	}
	return nil
}

func (e GeographyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KeyCharacteristic string

const (
	KeyCharacteristicEpisodeBased     KeyCharacteristic = "EPISODE_BASED"
	KeyCharacteristicPartC            KeyCharacteristic = "PART_C"
	KeyCharacteristicPartD            KeyCharacteristic = "PART_D"
	KeyCharacteristicPayment          KeyCharacteristic = "PAYMENT"
	KeyCharacteristicPopulationBased  KeyCharacteristic = "POPULATION_BASED"
	KeyCharacteristicPreventative     KeyCharacteristic = "PREVENTATIVE"
	KeyCharacteristicServiceDelivery  KeyCharacteristic = "SERVICE_DELIVERY"
	KeyCharacteristicSharedSavings    KeyCharacteristic = "SHARED_SAVINGS"
	KeyCharacteristicOther            KeyCharacteristic = "OTHER"
	KeyCharacteristicMedicaidModel    KeyCharacteristic = "MEDICAID_MODEL"
	KeyCharacteristicMedicareFfsModel KeyCharacteristic = "MEDICARE_FFS_MODEL"
)

var AllKeyCharacteristic = []KeyCharacteristic{
	KeyCharacteristicEpisodeBased,
	KeyCharacteristicPartC,
	KeyCharacteristicPartD,
	KeyCharacteristicPayment,
	KeyCharacteristicPopulationBased,
	KeyCharacteristicPreventative,
	KeyCharacteristicServiceDelivery,
	KeyCharacteristicSharedSavings,
	KeyCharacteristicOther,
	KeyCharacteristicMedicaidModel,
	KeyCharacteristicMedicareFfsModel,
}

func (e KeyCharacteristic) IsValid() bool {
	switch e {
	case KeyCharacteristicEpisodeBased, KeyCharacteristicPartC, KeyCharacteristicPartD, KeyCharacteristicPayment, KeyCharacteristicPopulationBased, KeyCharacteristicPreventative, KeyCharacteristicServiceDelivery, KeyCharacteristicSharedSavings, KeyCharacteristicOther, KeyCharacteristicMedicaidModel, KeyCharacteristicMedicareFfsModel:
		return true
	}
	return false
}

func (e KeyCharacteristic) String() string {
	return string(e)
}

func (e *KeyCharacteristic) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KeyCharacteristic(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KeyCharacteristic", str)
	}
	return nil
}

func (e KeyCharacteristic) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MintUses string

const (
	MintUsesViewModel             MintUses = "VIEW_MODEL"
	MintUsesEditModel             MintUses = "EDIT_MODEL"
	MintUsesShareModel            MintUses = "SHARE_MODEL"
	MintUsesTrackSolutions        MintUses = "TRACK_SOLUTIONS"
	MintUsesContributeDiscussions MintUses = "CONTRIBUTE_DISCUSSIONS"
	MintUsesViewHelp              MintUses = "VIEW_HELP"
	MintUsesOther                 MintUses = "OTHER"
)

var AllMintUses = []MintUses{
	MintUsesViewModel,
	MintUsesEditModel,
	MintUsesShareModel,
	MintUsesTrackSolutions,
	MintUsesContributeDiscussions,
	MintUsesViewHelp,
	MintUsesOther,
}

func (e MintUses) IsValid() bool {
	switch e {
	case MintUsesViewModel, MintUsesEditModel, MintUsesShareModel, MintUsesTrackSolutions, MintUsesContributeDiscussions, MintUsesViewHelp, MintUsesOther:
		return true
	}
	return false
}

func (e MintUses) String() string {
	return string(e)
}

func (e *MintUses) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MintUses(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MintUses", str)
	}
	return nil
}

func (e MintUses) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ModelLearningSystemType string

const (
	ModelLearningSystemTypeLearningContractor       ModelLearningSystemType = "LEARNING_CONTRACTOR"
	ModelLearningSystemTypeItPlatformConnect        ModelLearningSystemType = "IT_PLATFORM_CONNECT"
	ModelLearningSystemTypeParticipantCollaboration ModelLearningSystemType = "PARTICIPANT_COLLABORATION"
	ModelLearningSystemTypeEducateBeneficiaries     ModelLearningSystemType = "EDUCATE_BENEFICIARIES"
	ModelLearningSystemTypeOther                    ModelLearningSystemType = "OTHER"
	ModelLearningSystemTypeNoLearningSystem         ModelLearningSystemType = "NO_LEARNING_SYSTEM"
)

var AllModelLearningSystemType = []ModelLearningSystemType{
	ModelLearningSystemTypeLearningContractor,
	ModelLearningSystemTypeItPlatformConnect,
	ModelLearningSystemTypeParticipantCollaboration,
	ModelLearningSystemTypeEducateBeneficiaries,
	ModelLearningSystemTypeOther,
	ModelLearningSystemTypeNoLearningSystem,
}

func (e ModelLearningSystemType) IsValid() bool {
	switch e {
	case ModelLearningSystemTypeLearningContractor, ModelLearningSystemTypeItPlatformConnect, ModelLearningSystemTypeParticipantCollaboration, ModelLearningSystemTypeEducateBeneficiaries, ModelLearningSystemTypeOther, ModelLearningSystemTypeNoLearningSystem:
		return true
	}
	return false
}

func (e ModelLearningSystemType) String() string {
	return string(e)
}

func (e *ModelLearningSystemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ModelLearningSystemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ModelLearningSystemType", str)
	}
	return nil
}

func (e ModelLearningSystemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ModelPlanFilter string

const (
	ModelPlanFilterIncludeAll ModelPlanFilter = "INCLUDE_ALL"
	ModelPlanFilterCollabOnly ModelPlanFilter = "COLLAB_ONLY"
	ModelPlanFilterWithCrTdls ModelPlanFilter = "WITH_CR_TDLS"
)

var AllModelPlanFilter = []ModelPlanFilter{
	ModelPlanFilterIncludeAll,
	ModelPlanFilterCollabOnly,
	ModelPlanFilterWithCrTdls,
}

func (e ModelPlanFilter) IsValid() bool {
	switch e {
	case ModelPlanFilterIncludeAll, ModelPlanFilterCollabOnly, ModelPlanFilterWithCrTdls:
		return true
	}
	return false
}

func (e ModelPlanFilter) String() string {
	return string(e)
}

func (e *ModelPlanFilter) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ModelPlanFilter(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ModelPlanFilter", str)
	}
	return nil
}

func (e ModelPlanFilter) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MonitoringFileType string

const (
	MonitoringFileTypeBeneficiary MonitoringFileType = "BENEFICIARY"
	MonitoringFileTypeProvider    MonitoringFileType = "PROVIDER"
	MonitoringFileTypePartA       MonitoringFileType = "PART_A"
	MonitoringFileTypePartB       MonitoringFileType = "PART_B"
	MonitoringFileTypeOther       MonitoringFileType = "OTHER"
)

var AllMonitoringFileType = []MonitoringFileType{
	MonitoringFileTypeBeneficiary,
	MonitoringFileTypeProvider,
	MonitoringFileTypePartA,
	MonitoringFileTypePartB,
	MonitoringFileTypeOther,
}

func (e MonitoringFileType) IsValid() bool {
	switch e {
	case MonitoringFileTypeBeneficiary, MonitoringFileTypeProvider, MonitoringFileTypePartA, MonitoringFileTypePartB, MonitoringFileTypeOther:
		return true
	}
	return false
}

func (e MonitoringFileType) String() string {
	return string(e)
}

func (e *MonitoringFileType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MonitoringFileType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MonitoringFileType", str)
	}
	return nil
}

func (e MonitoringFileType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NonClaimsBasedPayType string

const (
	NonClaimsBasedPayTypeAdvancedPayment                  NonClaimsBasedPayType = "ADVANCED_PAYMENT"
	NonClaimsBasedPayTypeBundledEpisodeOfCare             NonClaimsBasedPayType = "BUNDLED_EPISODE_OF_CARE"
	NonClaimsBasedPayTypeCapitationPopulationBasedFull    NonClaimsBasedPayType = "CAPITATION_POPULATION_BASED_FULL"
	NonClaimsBasedPayTypeCapitationPopulationBasedPartial NonClaimsBasedPayType = "CAPITATION_POPULATION_BASED_PARTIAL"
	NonClaimsBasedPayTypeCareCoordinationManagementFee    NonClaimsBasedPayType = "CARE_COORDINATION_MANAGEMENT_FEE"
	NonClaimsBasedPayTypeGlobalBudget                     NonClaimsBasedPayType = "GLOBAL_BUDGET"
	NonClaimsBasedPayTypeIncentivePayment                 NonClaimsBasedPayType = "INCENTIVE_PAYMENT"
	NonClaimsBasedPayTypeMapdSharedSavings                NonClaimsBasedPayType = "MAPD_SHARED_SAVINGS"
	NonClaimsBasedPayTypeSharedSavings                    NonClaimsBasedPayType = "SHARED_SAVINGS"
	NonClaimsBasedPayTypeOther                            NonClaimsBasedPayType = "OTHER"
)

var AllNonClaimsBasedPayType = []NonClaimsBasedPayType{
	NonClaimsBasedPayTypeAdvancedPayment,
	NonClaimsBasedPayTypeBundledEpisodeOfCare,
	NonClaimsBasedPayTypeCapitationPopulationBasedFull,
	NonClaimsBasedPayTypeCapitationPopulationBasedPartial,
	NonClaimsBasedPayTypeCareCoordinationManagementFee,
	NonClaimsBasedPayTypeGlobalBudget,
	NonClaimsBasedPayTypeIncentivePayment,
	NonClaimsBasedPayTypeMapdSharedSavings,
	NonClaimsBasedPayTypeSharedSavings,
	NonClaimsBasedPayTypeOther,
}

func (e NonClaimsBasedPayType) IsValid() bool {
	switch e {
	case NonClaimsBasedPayTypeAdvancedPayment, NonClaimsBasedPayTypeBundledEpisodeOfCare, NonClaimsBasedPayTypeCapitationPopulationBasedFull, NonClaimsBasedPayTypeCapitationPopulationBasedPartial, NonClaimsBasedPayTypeCareCoordinationManagementFee, NonClaimsBasedPayTypeGlobalBudget, NonClaimsBasedPayTypeIncentivePayment, NonClaimsBasedPayTypeMapdSharedSavings, NonClaimsBasedPayTypeSharedSavings, NonClaimsBasedPayTypeOther:
		return true
	}
	return false
}

func (e NonClaimsBasedPayType) String() string {
	return string(e)
}

func (e *NonClaimsBasedPayType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NonClaimsBasedPayType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NonClaimsBasedPayType", str)
	}
	return nil
}

func (e NonClaimsBasedPayType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ParticipantCommunicationType string

const (
	ParticipantCommunicationTypeMassEmail       ParticipantCommunicationType = "MASS_EMAIL"
	ParticipantCommunicationTypeItTool          ParticipantCommunicationType = "IT_TOOL"
	ParticipantCommunicationTypeOther           ParticipantCommunicationType = "OTHER"
	ParticipantCommunicationTypeNoCommunication ParticipantCommunicationType = "NO_COMMUNICATION"
)

var AllParticipantCommunicationType = []ParticipantCommunicationType{
	ParticipantCommunicationTypeMassEmail,
	ParticipantCommunicationTypeItTool,
	ParticipantCommunicationTypeOther,
	ParticipantCommunicationTypeNoCommunication,
}

func (e ParticipantCommunicationType) IsValid() bool {
	switch e {
	case ParticipantCommunicationTypeMassEmail, ParticipantCommunicationTypeItTool, ParticipantCommunicationTypeOther, ParticipantCommunicationTypeNoCommunication:
		return true
	}
	return false
}

func (e ParticipantCommunicationType) String() string {
	return string(e)
}

func (e *ParticipantCommunicationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ParticipantCommunicationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ParticipantCommunicationType", str)
	}
	return nil
}

func (e ParticipantCommunicationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ParticipantSelectionType string

const (
	ParticipantSelectionTypeModelTeamReviewApplications     ParticipantSelectionType = "MODEL_TEAM_REVIEW_APPLICATIONS"
	ParticipantSelectionTypeSupportFromCmmi                 ParticipantSelectionType = "SUPPORT_FROM_CMMI"
	ParticipantSelectionTypeCmsComponentOrProcess           ParticipantSelectionType = "CMS_COMPONENT_OR_PROCESS"
	ParticipantSelectionTypeApplicationReviewAndScoringTool ParticipantSelectionType = "APPLICATION_REVIEW_AND_SCORING_TOOL"
	ParticipantSelectionTypeApplicationSupportContractor    ParticipantSelectionType = "APPLICATION_SUPPORT_CONTRACTOR"
	ParticipantSelectionTypeBasicCriteria                   ParticipantSelectionType = "BASIC_CRITERIA"
	ParticipantSelectionTypeOther                           ParticipantSelectionType = "OTHER"
	ParticipantSelectionTypeNoSelectingParticipants         ParticipantSelectionType = "NO_SELECTING_PARTICIPANTS"
)

var AllParticipantSelectionType = []ParticipantSelectionType{
	ParticipantSelectionTypeModelTeamReviewApplications,
	ParticipantSelectionTypeSupportFromCmmi,
	ParticipantSelectionTypeCmsComponentOrProcess,
	ParticipantSelectionTypeApplicationReviewAndScoringTool,
	ParticipantSelectionTypeApplicationSupportContractor,
	ParticipantSelectionTypeBasicCriteria,
	ParticipantSelectionTypeOther,
	ParticipantSelectionTypeNoSelectingParticipants,
}

func (e ParticipantSelectionType) IsValid() bool {
	switch e {
	case ParticipantSelectionTypeModelTeamReviewApplications, ParticipantSelectionTypeSupportFromCmmi, ParticipantSelectionTypeCmsComponentOrProcess, ParticipantSelectionTypeApplicationReviewAndScoringTool, ParticipantSelectionTypeApplicationSupportContractor, ParticipantSelectionTypeBasicCriteria, ParticipantSelectionTypeOther, ParticipantSelectionTypeNoSelectingParticipants:
		return true
	}
	return false
}

func (e ParticipantSelectionType) String() string {
	return string(e)
}

func (e *ParticipantSelectionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ParticipantSelectionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ParticipantSelectionType", str)
	}
	return nil
}

func (e ParticipantSelectionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ParticipantsIDType string

const (
	ParticipantsIDTypeTins          ParticipantsIDType = "TINS"
	ParticipantsIDTypeNpis          ParticipantsIDType = "NPIS"
	ParticipantsIDTypeCcns          ParticipantsIDType = "CCNS"
	ParticipantsIDTypeOther         ParticipantsIDType = "OTHER"
	ParticipantsIDTypeNoIDEntifiers ParticipantsIDType = "NO_IDENTIFIERS"
)

var AllParticipantsIDType = []ParticipantsIDType{
	ParticipantsIDTypeTins,
	ParticipantsIDTypeNpis,
	ParticipantsIDTypeCcns,
	ParticipantsIDTypeOther,
	ParticipantsIDTypeNoIDEntifiers,
}

func (e ParticipantsIDType) IsValid() bool {
	switch e {
	case ParticipantsIDTypeTins, ParticipantsIDTypeNpis, ParticipantsIDTypeCcns, ParticipantsIDTypeOther, ParticipantsIDTypeNoIDEntifiers:
		return true
	}
	return false
}

func (e ParticipantsIDType) String() string {
	return string(e)
}

func (e *ParticipantsIDType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ParticipantsIDType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ParticipantsIDType", str)
	}
	return nil
}

func (e ParticipantsIDType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ParticipantsType string

const (
	ParticipantsTypeMedicareProviders                      ParticipantsType = "MEDICARE_PROVIDERS"
	ParticipantsTypeEntities                               ParticipantsType = "ENTITIES"
	ParticipantsTypeConvener                               ParticipantsType = "CONVENER"
	ParticipantsTypeMedicareAdvantagePlans                 ParticipantsType = "MEDICARE_ADVANTAGE_PLANS"
	ParticipantsTypeStandalonePartDPlans                   ParticipantsType = "STANDALONE_PART_D_PLANS"
	ParticipantsTypeMedicareAdvantagePrescriptionDrugPlans ParticipantsType = "MEDICARE_ADVANTAGE_PRESCRIPTION_DRUG_PLANS"
	ParticipantsTypeStateMedicaidAgencies                  ParticipantsType = "STATE_MEDICAID_AGENCIES"
	ParticipantsTypeMedicaidManagedCareOrganizations       ParticipantsType = "MEDICAID_MANAGED_CARE_ORGANIZATIONS"
	ParticipantsTypeMedicaidProviders                      ParticipantsType = "MEDICAID_PROVIDERS"
	ParticipantsTypeStates                                 ParticipantsType = "STATES"
	ParticipantsTypeCommunityBasedOrganizations            ParticipantsType = "COMMUNITY_BASED_ORGANIZATIONS"
	ParticipantsTypeNonProfitOrganizations                 ParticipantsType = "NON_PROFIT_ORGANIZATIONS"
	ParticipantsTypeCommercialPayers                       ParticipantsType = "COMMERCIAL_PAYERS"
	ParticipantsTypeAccountableCareOrganization            ParticipantsType = "ACCOUNTABLE_CARE_ORGANIZATION"
	ParticipantsTypeOther                                  ParticipantsType = "OTHER"
)

var AllParticipantsType = []ParticipantsType{
	ParticipantsTypeMedicareProviders,
	ParticipantsTypeEntities,
	ParticipantsTypeConvener,
	ParticipantsTypeMedicareAdvantagePlans,
	ParticipantsTypeStandalonePartDPlans,
	ParticipantsTypeMedicareAdvantagePrescriptionDrugPlans,
	ParticipantsTypeStateMedicaidAgencies,
	ParticipantsTypeMedicaidManagedCareOrganizations,
	ParticipantsTypeMedicaidProviders,
	ParticipantsTypeStates,
	ParticipantsTypeCommunityBasedOrganizations,
	ParticipantsTypeNonProfitOrganizations,
	ParticipantsTypeCommercialPayers,
	ParticipantsTypeAccountableCareOrganization,
	ParticipantsTypeOther,
}

func (e ParticipantsType) IsValid() bool {
	switch e {
	case ParticipantsTypeMedicareProviders, ParticipantsTypeEntities, ParticipantsTypeConvener, ParticipantsTypeMedicareAdvantagePlans, ParticipantsTypeStandalonePartDPlans, ParticipantsTypeMedicareAdvantagePrescriptionDrugPlans, ParticipantsTypeStateMedicaidAgencies, ParticipantsTypeMedicaidManagedCareOrganizations, ParticipantsTypeMedicaidProviders, ParticipantsTypeStates, ParticipantsTypeCommunityBasedOrganizations, ParticipantsTypeNonProfitOrganizations, ParticipantsTypeCommercialPayers, ParticipantsTypeAccountableCareOrganization, ParticipantsTypeOther:
		return true
	}
	return false
}

func (e ParticipantsType) String() string {
	return string(e)
}

func (e *ParticipantsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ParticipantsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ParticipantsType", str)
	}
	return nil
}

func (e ParticipantsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PrepareForClearanceStatus string

const (
	PrepareForClearanceStatusCannotStart       PrepareForClearanceStatus = "CANNOT_START"
	PrepareForClearanceStatusReady             PrepareForClearanceStatus = "READY"
	PrepareForClearanceStatusInProgress        PrepareForClearanceStatus = "IN_PROGRESS"
	PrepareForClearanceStatusReadyForClearance PrepareForClearanceStatus = "READY_FOR_CLEARANCE"
)

var AllPrepareForClearanceStatus = []PrepareForClearanceStatus{
	PrepareForClearanceStatusCannotStart,
	PrepareForClearanceStatusReady,
	PrepareForClearanceStatusInProgress,
	PrepareForClearanceStatusReadyForClearance,
}

func (e PrepareForClearanceStatus) IsValid() bool {
	switch e {
	case PrepareForClearanceStatusCannotStart, PrepareForClearanceStatusReady, PrepareForClearanceStatusInProgress, PrepareForClearanceStatusReadyForClearance:
		return true
	}
	return false
}

func (e PrepareForClearanceStatus) String() string {
	return string(e)
}

func (e *PrepareForClearanceStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PrepareForClearanceStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PrepareForClearanceStatus", str)
	}
	return nil
}

func (e PrepareForClearanceStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProviderAddType string

const (
	ProviderAddTypeProspectively   ProviderAddType = "PROSPECTIVELY"
	ProviderAddTypeRetrospectively ProviderAddType = "RETROSPECTIVELY"
	ProviderAddTypeVoluntarily     ProviderAddType = "VOLUNTARILY"
	ProviderAddTypeMandatorily     ProviderAddType = "MANDATORILY"
	ProviderAddTypeOnlineTools     ProviderAddType = "ONLINE_TOOLS"
	ProviderAddTypeOther           ProviderAddType = "OTHER"
	ProviderAddTypeNa              ProviderAddType = "NA"
)

var AllProviderAddType = []ProviderAddType{
	ProviderAddTypeProspectively,
	ProviderAddTypeRetrospectively,
	ProviderAddTypeVoluntarily,
	ProviderAddTypeMandatorily,
	ProviderAddTypeOnlineTools,
	ProviderAddTypeOther,
	ProviderAddTypeNa,
}

func (e ProviderAddType) IsValid() bool {
	switch e {
	case ProviderAddTypeProspectively, ProviderAddTypeRetrospectively, ProviderAddTypeVoluntarily, ProviderAddTypeMandatorily, ProviderAddTypeOnlineTools, ProviderAddTypeOther, ProviderAddTypeNa:
		return true
	}
	return false
}

func (e ProviderAddType) String() string {
	return string(e)
}

func (e *ProviderAddType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProviderAddType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProviderAddType", str)
	}
	return nil
}

func (e ProviderAddType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProviderLeaveType string

const (
	ProviderLeaveTypeVoluntarilyWithoutImplications ProviderLeaveType = "VOLUNTARILY_WITHOUT_IMPLICATIONS"
	ProviderLeaveTypeAfterACertainWithImplications  ProviderLeaveType = "AFTER_A_CERTAIN_WITH_IMPLICATIONS"
	ProviderLeaveTypeVariesByTypeOfProvider         ProviderLeaveType = "VARIES_BY_TYPE_OF_PROVIDER"
	ProviderLeaveTypeNotAllowedToLeave              ProviderLeaveType = "NOT_ALLOWED_TO_LEAVE"
	ProviderLeaveTypeOther                          ProviderLeaveType = "OTHER"
	ProviderLeaveTypeNotApplicable                  ProviderLeaveType = "NOT_APPLICABLE"
)

var AllProviderLeaveType = []ProviderLeaveType{
	ProviderLeaveTypeVoluntarilyWithoutImplications,
	ProviderLeaveTypeAfterACertainWithImplications,
	ProviderLeaveTypeVariesByTypeOfProvider,
	ProviderLeaveTypeNotAllowedToLeave,
	ProviderLeaveTypeOther,
	ProviderLeaveTypeNotApplicable,
}

func (e ProviderLeaveType) IsValid() bool {
	switch e {
	case ProviderLeaveTypeVoluntarilyWithoutImplications, ProviderLeaveTypeAfterACertainWithImplications, ProviderLeaveTypeVariesByTypeOfProvider, ProviderLeaveTypeNotAllowedToLeave, ProviderLeaveTypeOther, ProviderLeaveTypeNotApplicable:
		return true
	}
	return false
}

func (e ProviderLeaveType) String() string {
	return string(e)
}

func (e *ProviderLeaveType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProviderLeaveType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProviderLeaveType", str)
	}
	return nil
}

func (e ProviderLeaveType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReportAProblemSection string

const (
	ReportAProblemSectionReadView    ReportAProblemSection = "READ_VIEW"
	ReportAProblemSectionTaskList    ReportAProblemSection = "TASK_LIST"
	ReportAProblemSectionItSolutions ReportAProblemSection = "IT_SOLUTIONS"
	ReportAProblemSectionHelpCenter  ReportAProblemSection = "HELP_CENTER"
	ReportAProblemSectionOther       ReportAProblemSection = "OTHER"
)

var AllReportAProblemSection = []ReportAProblemSection{
	ReportAProblemSectionReadView,
	ReportAProblemSectionTaskList,
	ReportAProblemSectionItSolutions,
	ReportAProblemSectionHelpCenter,
	ReportAProblemSectionOther,
}

func (e ReportAProblemSection) IsValid() bool {
	switch e {
	case ReportAProblemSectionReadView, ReportAProblemSectionTaskList, ReportAProblemSectionItSolutions, ReportAProblemSectionHelpCenter, ReportAProblemSectionOther:
		return true
	}
	return false
}

func (e ReportAProblemSection) String() string {
	return string(e)
}

func (e *ReportAProblemSection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReportAProblemSection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReportAProblemSection", str)
	}
	return nil
}

func (e ReportAProblemSection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReportAProblemSeverity string

const (
	ReportAProblemSeverityPreventedTask ReportAProblemSeverity = "PREVENTED_TASK"
	ReportAProblemSeverityDelayedTask   ReportAProblemSeverity = "DELAYED_TASK"
	ReportAProblemSeverityMinor         ReportAProblemSeverity = "MINOR"
	ReportAProblemSeverityOther         ReportAProblemSeverity = "OTHER"
)

var AllReportAProblemSeverity = []ReportAProblemSeverity{
	ReportAProblemSeverityPreventedTask,
	ReportAProblemSeverityDelayedTask,
	ReportAProblemSeverityMinor,
	ReportAProblemSeverityOther,
}

func (e ReportAProblemSeverity) IsValid() bool {
	switch e {
	case ReportAProblemSeverityPreventedTask, ReportAProblemSeverityDelayedTask, ReportAProblemSeverityMinor, ReportAProblemSeverityOther:
		return true
	}
	return false
}

func (e ReportAProblemSeverity) String() string {
	return string(e)
}

func (e *ReportAProblemSeverity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReportAProblemSeverity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReportAProblemSeverity", str)
	}
	return nil
}

func (e ReportAProblemSeverity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A user role associated with a job code
type Role string

const (
	// A basic MINT user
	RoleMintUser Role = "MINT_USER"
	// A MINT assessment team user
	RoleMintAssessment Role = "MINT_ASSESSMENT"
	// A MINT MAC user
	RoleMintMac Role = "MINT_MAC"
)

var AllRole = []Role{
	RoleMintUser,
	RoleMintAssessment,
	RoleMintMac,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleMintUser, RoleMintAssessment, RoleMintMac:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SatisfactionLevel string

const (
	SatisfactionLevelVerySatisfied    SatisfactionLevel = "VERY_SATISFIED"
	SatisfactionLevelSatisfied        SatisfactionLevel = "SATISFIED"
	SatisfactionLevelNeutral          SatisfactionLevel = "NEUTRAL"
	SatisfactionLevelDissatisfied     SatisfactionLevel = "DISSATISFIED"
	SatisfactionLevelVeryDissatisfied SatisfactionLevel = "VERY_DISSATISFIED"
)

var AllSatisfactionLevel = []SatisfactionLevel{
	SatisfactionLevelVerySatisfied,
	SatisfactionLevelSatisfied,
	SatisfactionLevelNeutral,
	SatisfactionLevelDissatisfied,
	SatisfactionLevelVeryDissatisfied,
}

func (e SatisfactionLevel) IsValid() bool {
	switch e {
	case SatisfactionLevelVerySatisfied, SatisfactionLevelSatisfied, SatisfactionLevelNeutral, SatisfactionLevelDissatisfied, SatisfactionLevelVeryDissatisfied:
		return true
	}
	return false
}

func (e SatisfactionLevel) String() string {
	return string(e)
}

func (e *SatisfactionLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SatisfactionLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SatisfactionLevel", str)
	}
	return nil
}

func (e SatisfactionLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SelectionMethodType string

const (
	SelectionMethodTypeHistorical     SelectionMethodType = "HISTORICAL"
	SelectionMethodTypeProspective    SelectionMethodType = "PROSPECTIVE"
	SelectionMethodTypeRetrospective  SelectionMethodType = "RETROSPECTIVE"
	SelectionMethodTypeVoluntary      SelectionMethodType = "VOLUNTARY"
	SelectionMethodTypeProviderSignUp SelectionMethodType = "PROVIDER_SIGN_UP"
	SelectionMethodTypeOther          SelectionMethodType = "OTHER"
	SelectionMethodTypeNa             SelectionMethodType = "NA"
)

var AllSelectionMethodType = []SelectionMethodType{
	SelectionMethodTypeHistorical,
	SelectionMethodTypeProspective,
	SelectionMethodTypeRetrospective,
	SelectionMethodTypeVoluntary,
	SelectionMethodTypeProviderSignUp,
	SelectionMethodTypeOther,
	SelectionMethodTypeNa,
}

func (e SelectionMethodType) IsValid() bool {
	switch e {
	case SelectionMethodTypeHistorical, SelectionMethodTypeProspective, SelectionMethodTypeRetrospective, SelectionMethodTypeVoluntary, SelectionMethodTypeProviderSignUp, SelectionMethodTypeOther, SelectionMethodTypeNa:
		return true
	}
	return false
}

func (e SelectionMethodType) String() string {
	return string(e)
}

func (e *SelectionMethodType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SelectionMethodType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SelectionMethodType", str)
	}
	return nil
}

func (e SelectionMethodType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StakeholdersType string

const (
	StakeholdersTypeBeneficiaries             StakeholdersType = "BENEFICIARIES"
	StakeholdersTypeCommunityOrganizations    StakeholdersType = "COMMUNITY_ORGANIZATIONS"
	StakeholdersTypeParticipants              StakeholdersType = "PARTICIPANTS"
	StakeholdersTypeProfessionalOrganizations StakeholdersType = "PROFESSIONAL_ORGANIZATIONS"
	StakeholdersTypeProviders                 StakeholdersType = "PROVIDERS"
	StakeholdersTypeStates                    StakeholdersType = "STATES"
	StakeholdersTypeOther                     StakeholdersType = "OTHER"
)

var AllStakeholdersType = []StakeholdersType{
	StakeholdersTypeBeneficiaries,
	StakeholdersTypeCommunityOrganizations,
	StakeholdersTypeParticipants,
	StakeholdersTypeProfessionalOrganizations,
	StakeholdersTypeProviders,
	StakeholdersTypeStates,
	StakeholdersTypeOther,
}

func (e StakeholdersType) IsValid() bool {
	switch e {
	case StakeholdersTypeBeneficiaries, StakeholdersTypeCommunityOrganizations, StakeholdersTypeParticipants, StakeholdersTypeProfessionalOrganizations, StakeholdersTypeProviders, StakeholdersTypeStates, StakeholdersTypeOther:
		return true
	}
	return false
}

func (e StakeholdersType) String() string {
	return string(e)
}

func (e *StakeholdersType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StakeholdersType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StakeholdersType", str)
	}
	return nil
}

func (e StakeholdersType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskStatusInput string

const (
	TaskStatusInputInProgress        TaskStatusInput = "IN_PROGRESS"
	TaskStatusInputReadyForReview    TaskStatusInput = "READY_FOR_REVIEW"
	TaskStatusInputReadyForClearance TaskStatusInput = "READY_FOR_CLEARANCE"
)

var AllTaskStatusInput = []TaskStatusInput{
	TaskStatusInputInProgress,
	TaskStatusInputReadyForReview,
	TaskStatusInputReadyForClearance,
}

func (e TaskStatusInput) IsValid() bool {
	switch e {
	case TaskStatusInputInProgress, TaskStatusInputReadyForReview, TaskStatusInputReadyForClearance:
		return true
	}
	return false
}

func (e TaskStatusInput) String() string {
	return string(e)
}

func (e *TaskStatusInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatusInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatusInput", str)
	}
	return nil
}

func (e TaskStatusInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WaiverType string

const (
	WaiverTypeFraudAbuse     WaiverType = "FRAUD_ABUSE"
	WaiverTypeProgramPayment WaiverType = "PROGRAM_PAYMENT"
	WaiverTypeMedicaid       WaiverType = "MEDICAID"
)

var AllWaiverType = []WaiverType{
	WaiverTypeFraudAbuse,
	WaiverTypeProgramPayment,
	WaiverTypeMedicaid,
}

func (e WaiverType) IsValid() bool {
	switch e {
	case WaiverTypeFraudAbuse, WaiverTypeProgramPayment, WaiverTypeMedicaid:
		return true
	}
	return false
}

func (e WaiverType) String() string {
	return string(e)
}

func (e *WaiverType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WaiverType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WaiverType", str)
	}
	return nil
}

func (e WaiverType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
