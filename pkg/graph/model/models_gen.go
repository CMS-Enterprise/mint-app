// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/cmsgov/mint-app/pkg/models"
	"github.com/google/uuid"
)

// The current user of the application
type CurrentUser struct {
	LaunchDarkly *LaunchDarklySettings `json:"launchDarkly"`
}

// The current user's Launch Darkly key
type LaunchDarklySettings struct {
	UserKey    string `json:"userKey"`
	SignedHash string `json:"signedHash"`
}

// ModelPlanInput represent the data point for plans about a model. It is the central data type in the appliation
type ModelPlanInput struct {
	ID            *uuid.UUID            `json:"id"`
	ModelName     *string               `json:"modelName"`
	ModelCategory *models.ModelCategory `json:"modelCategory"`
	CmsCenter     *models.CMSCenter     `json:"cmsCenter"`
	CmmiGroup     []*models.CMMIGroup   `json:"cmmiGroup"`
	CreatedBy     *string               `json:"createdBy"`
	CreatedDts    *time.Time            `json:"createdDts"`
	ModifiedBy    *string               `json:"modifiedBy"`
	ModifiedDts   *time.Time            `json:"modifiedDts"`
}

// Represents plan basics
type PlanBasicsInput struct {
	ID             *uuid.UUID `json:"id"`
	ModelPlanID    *uuid.UUID `json:"modelPlanID"`
	ModelType      *string    `json:"modelType"`
	Problem        *string    `json:"problem"`
	Goal           *string    `json:"goal"`
	TestInventions *string    `json:"testInventions"`
	Note           *string    `json:"note"`
	CreatedBy      *string    `json:"createdBy"`
	CreatedDts     *time.Time `json:"createdDts"`
	ModifiedBy     *string    `json:"modifiedBy"`
	ModifiedDts    *time.Time `json:"modifiedDts"`
	Status         *string    `json:"status"`
}

// A user role associated with a job code
type Role string

const (
	// A basic MINT user
	RoleMintBaseUser Role = "MINT_BASE_USER"
	// A MINT admin user
	RoleMintAdminUser Role = "MINT_ADMIN_USER"
)

var AllRole = []Role{
	RoleMintBaseUser,
	RoleMintAdminUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleMintBaseUser, RoleMintAdminUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
