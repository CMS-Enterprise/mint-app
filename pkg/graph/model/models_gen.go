// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/cmsgov/mint-app/pkg/models"
	"github.com/google/uuid"
)

// The current user of the application
type CurrentUser struct {
	LaunchDarkly *LaunchDarklySettings `json:"launchDarkly"`
}

// DiscussionReplyCreateInput represents the necessary fields to create a discussion reply
type DiscussionReplyCreateInput struct {
	DiscussionID uuid.UUID `json:"discussionID"`
	Content      string    `json:"content"`
	Resolution   bool      `json:"resolution"`
}

// Input associated with a document to be uploaded
type GeneratePresignedUploadURLInput struct {
	FileName string `json:"fileName"`
	MimeType string `json:"mimeType"`
	Size     int    `json:"size"`
}

// URL generated for a document to be uploaded
type GeneratePresignedUploadURLPayload struct {
	URL *string `json:"url"`
}

// The current user's Launch Darkly key
type LaunchDarklySettings struct {
	UserKey    string `json:"userKey"`
	SignedHash string `json:"signedHash"`
}

// PlanCollaboratorCreateInput represents the data required to create a collaborator on a plan
type PlanCollaboratorCreateInput struct {
	ModelPlanID uuid.UUID       `json:"modelPlanID"`
	EuaUserID   string          `json:"euaUserID"`
	FullName    string          `json:"fullName"`
	TeamRole    models.TeamRole `json:"teamRole"`
}

// PlanDiscussionCreateInput represents the necessary fields to create a plan discussion
type PlanDiscussionCreateInput struct {
	ModelPlanID uuid.UUID `json:"modelPlanID"`
	Content     string    `json:"content"`
}

// PlanDocumentInput represents the data required to create, modify, or delete a document on a plan
type PlanDocumentInput struct {
	ID                 *uuid.UUID              `json:"id"`
	ModelPlanID        uuid.UUID               `json:"modelPlanID"`
	DocumentParameters *PlanDocumentParameters `json:"documentParameters"`
	URL                *string                 `json:"url"`
}

// PlanDocumentCreateParameters represents the specific data required to create or modify a document on a plan
type PlanDocumentParameters struct {
	FileName             *string              `json:"fileName"`
	FileSize             int                  `json:"fileSize"`
	FileType             *string              `json:"fileType"`
	DocumentType         *models.DocumentType `json:"documentType"`
	OtherTypeDescription *string              `json:"otherTypeDescription"`
	OptionalNotes        *string              `json:"optionalNotes"`
}

// PlanDocumentPayload represents the response to a document request
type PlanDocumentPayload struct {
	Document     *models.PlanDocument `json:"document"`
	PresignedURL *string              `json:"presignedURL"`
}

type AgreementType string

const (
	AgreementTypeParticipation AgreementType = "PARTICIPATION"
	AgreementTypeCooperative   AgreementType = "COOPERATIVE"
	AgreementTypeOther         AgreementType = "OTHER"
)

var AllAgreementType = []AgreementType{
	AgreementTypeParticipation,
	AgreementTypeCooperative,
	AgreementTypeOther,
}

func (e AgreementType) IsValid() bool {
	switch e {
	case AgreementTypeParticipation, AgreementTypeCooperative, AgreementTypeOther:
		return true
	}
	return false
}

func (e AgreementType) String() string {
	return string(e)
}

func (e *AgreementType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AgreementType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AgreementType", str)
	}
	return nil
}

func (e AgreementType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AlternativePaymentModelType string

const (
	AlternativePaymentModelTypeRegular  AlternativePaymentModelType = "REGULAR"
	AlternativePaymentModelTypeMips     AlternativePaymentModelType = "MIPS"
	AlternativePaymentModelTypeAdvanced AlternativePaymentModelType = "ADVANCED"
)

var AllAlternativePaymentModelType = []AlternativePaymentModelType{
	AlternativePaymentModelTypeRegular,
	AlternativePaymentModelTypeMips,
	AlternativePaymentModelTypeAdvanced,
}

func (e AlternativePaymentModelType) IsValid() bool {
	switch e {
	case AlternativePaymentModelTypeRegular, AlternativePaymentModelTypeMips, AlternativePaymentModelTypeAdvanced:
		return true
	}
	return false
}

func (e AlternativePaymentModelType) String() string {
	return string(e)
}

func (e *AlternativePaymentModelType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlternativePaymentModelType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AlternativePaymentModelType", str)
	}
	return nil
}

func (e AlternativePaymentModelType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuthorityAllowance string

const (
	AuthorityAllowanceAca                     AuthorityAllowance = "ACA"
	AuthorityAllowanceCongressionallyMandated AuthorityAllowance = "CONGRESSIONALLY_MANDATED"
	AuthorityAllowanceSsaPartB                AuthorityAllowance = "SSA_PART_B"
	AuthorityAllowanceOther                   AuthorityAllowance = "OTHER"
)

var AllAuthorityAllowance = []AuthorityAllowance{
	AuthorityAllowanceAca,
	AuthorityAllowanceCongressionallyMandated,
	AuthorityAllowanceSsaPartB,
	AuthorityAllowanceOther,
}

func (e AuthorityAllowance) IsValid() bool {
	switch e {
	case AuthorityAllowanceAca, AuthorityAllowanceCongressionallyMandated, AuthorityAllowanceSsaPartB, AuthorityAllowanceOther:
		return true
	}
	return false
}

func (e AuthorityAllowance) String() string {
	return string(e)
}

func (e *AuthorityAllowance) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthorityAllowance(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthorityAllowance", str)
	}
	return nil
}

func (e AuthorityAllowance) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BManageBeneficiaryOverlapType string

const (
	BManageBeneficiaryOverlapTypeMdm   BManageBeneficiaryOverlapType = "MDM"
	BManageBeneficiaryOverlapTypeOther BManageBeneficiaryOverlapType = "OTHER"
	BManageBeneficiaryOverlapTypeNa    BManageBeneficiaryOverlapType = "NA"
)

var AllBManageBeneficiaryOverlapType = []BManageBeneficiaryOverlapType{
	BManageBeneficiaryOverlapTypeMdm,
	BManageBeneficiaryOverlapTypeOther,
	BManageBeneficiaryOverlapTypeNa,
}

func (e BManageBeneficiaryOverlapType) IsValid() bool {
	switch e {
	case BManageBeneficiaryOverlapTypeMdm, BManageBeneficiaryOverlapTypeOther, BManageBeneficiaryOverlapTypeNa:
		return true
	}
	return false
}

func (e BManageBeneficiaryOverlapType) String() string {
	return string(e)
}

func (e *BManageBeneficiaryOverlapType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BManageBeneficiaryOverlapType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BManageBeneficiaryOverlapType", str)
	}
	return nil
}

func (e BManageBeneficiaryOverlapType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BeneficiariesType string

const (
	BeneficiariesTypeMedicareFfs       BeneficiariesType = "MEDICARE_FFS"
	BeneficiariesTypeMedicareAdvantage BeneficiariesType = "MEDICARE_ADVANTAGE"
	BeneficiariesTypeMedicarePartD     BeneficiariesType = "MEDICARE_PART_D"
	BeneficiariesTypeMedicaid          BeneficiariesType = "MEDICAID"
	BeneficiariesTypeDuallyEligible    BeneficiariesType = "DUALLY_ELIGIBLE"
	BeneficiariesTypeDiseaseSpecific   BeneficiariesType = "DISEASE_SPECIFIC"
	BeneficiariesTypeOther             BeneficiariesType = "OTHER"
	BeneficiariesTypeNa                BeneficiariesType = "NA"
)

var AllBeneficiariesType = []BeneficiariesType{
	BeneficiariesTypeMedicareFfs,
	BeneficiariesTypeMedicareAdvantage,
	BeneficiariesTypeMedicarePartD,
	BeneficiariesTypeMedicaid,
	BeneficiariesTypeDuallyEligible,
	BeneficiariesTypeDiseaseSpecific,
	BeneficiariesTypeOther,
	BeneficiariesTypeNa,
}

func (e BeneficiariesType) IsValid() bool {
	switch e {
	case BeneficiariesTypeMedicareFfs, BeneficiariesTypeMedicareAdvantage, BeneficiariesTypeMedicarePartD, BeneficiariesTypeMedicaid, BeneficiariesTypeDuallyEligible, BeneficiariesTypeDiseaseSpecific, BeneficiariesTypeOther, BeneficiariesTypeNa:
		return true
	}
	return false
}

func (e BeneficiariesType) String() string {
	return string(e)
}

func (e *BeneficiariesType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BeneficiariesType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BeneficiariesType", str)
	}
	return nil
}

func (e BeneficiariesType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CMMIGroup string

const (
	CMMIGroupPatientCareModelsGroup                       CMMIGroup = "PATIENT_CARE_MODELS_GROUP"
	CMMIGroupPolicyAndProgramsGroup                       CMMIGroup = "POLICY_AND_PROGRAMS_GROUP"
	CMMIGroupPreventiveAndPopulationHealthCareModelsGroup CMMIGroup = "PREVENTIVE_AND_POPULATION_HEALTH_CARE_MODELS_GROUP"
	CMMIGroupSeamlessCareModelsGroup                      CMMIGroup = "SEAMLESS_CARE_MODELS_GROUP"
	CMMIGroupStateInnovationsGroup                        CMMIGroup = "STATE_INNOVATIONS_GROUP"
)

var AllCMMIGroup = []CMMIGroup{
	CMMIGroupPatientCareModelsGroup,
	CMMIGroupPolicyAndProgramsGroup,
	CMMIGroupPreventiveAndPopulationHealthCareModelsGroup,
	CMMIGroupSeamlessCareModelsGroup,
	CMMIGroupStateInnovationsGroup,
}

func (e CMMIGroup) IsValid() bool {
	switch e {
	case CMMIGroupPatientCareModelsGroup, CMMIGroupPolicyAndProgramsGroup, CMMIGroupPreventiveAndPopulationHealthCareModelsGroup, CMMIGroupSeamlessCareModelsGroup, CMMIGroupStateInnovationsGroup:
		return true
	}
	return false
}

func (e CMMIGroup) String() string {
	return string(e)
}

func (e *CMMIGroup) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CMMIGroup(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CMMIGroup", str)
	}
	return nil
}

func (e CMMIGroup) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GcCollectBidsType string

const (
	GcCollectBidsTypeHpms  GcCollectBidsType = "HPMS"
	GcCollectBidsTypeOther GcCollectBidsType = "OTHER"
)

var AllGcCollectBidsType = []GcCollectBidsType{
	GcCollectBidsTypeHpms,
	GcCollectBidsTypeOther,
}

func (e GcCollectBidsType) IsValid() bool {
	switch e {
	case GcCollectBidsTypeHpms, GcCollectBidsTypeOther:
		return true
	}
	return false
}

func (e GcCollectBidsType) String() string {
	return string(e)
}

func (e *GcCollectBidsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GcCollectBidsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GcCollectBidsType", str)
	}
	return nil
}

func (e GcCollectBidsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GcPartCDType string

const (
	GcPartCDTypeMarx  GcPartCDType = "MARX"
	GcPartCDTypeOther GcPartCDType = "OTHER"
)

var AllGcPartCDType = []GcPartCDType{
	GcPartCDTypeMarx,
	GcPartCDTypeOther,
}

func (e GcPartCDType) IsValid() bool {
	switch e {
	case GcPartCDTypeMarx, GcPartCDTypeOther:
		return true
	}
	return false
}

func (e GcPartCDType) String() string {
	return string(e)
}

func (e *GcPartCDType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GcPartCDType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GcPartCDType", str)
	}
	return nil
}

func (e GcPartCDType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GcUpdateContractType string

const (
	GcUpdateContractTypeHpms  GcUpdateContractType = "HPMS"
	GcUpdateContractTypeOther GcUpdateContractType = "OTHER"
)

var AllGcUpdateContractType = []GcUpdateContractType{
	GcUpdateContractTypeHpms,
	GcUpdateContractTypeOther,
}

func (e GcUpdateContractType) IsValid() bool {
	switch e {
	case GcUpdateContractTypeHpms, GcUpdateContractTypeOther:
		return true
	}
	return false
}

func (e GcUpdateContractType) String() string {
	return string(e)
}

func (e *GcUpdateContractType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GcUpdateContractType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GcUpdateContractType", str)
	}
	return nil
}

func (e GcUpdateContractType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GeographyApplication string

const (
	GeographyApplicationParticipants  GeographyApplication = "PARTICIPANTS"
	GeographyApplicationProviders     GeographyApplication = "PROVIDERS"
	GeographyApplicationBeneficiaries GeographyApplication = "BENEFICIARIES"
	GeographyApplicationOther         GeographyApplication = "OTHER"
)

var AllGeographyApplication = []GeographyApplication{
	GeographyApplicationParticipants,
	GeographyApplicationProviders,
	GeographyApplicationBeneficiaries,
	GeographyApplicationOther,
}

func (e GeographyApplication) IsValid() bool {
	switch e {
	case GeographyApplicationParticipants, GeographyApplicationProviders, GeographyApplicationBeneficiaries, GeographyApplicationOther:
		return true
	}
	return false
}

func (e GeographyApplication) String() string {
	return string(e)
}

func (e *GeographyApplication) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GeographyApplication(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GeographyApplication", str)
	}
	return nil
}

func (e GeographyApplication) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GeographyType string

const (
	GeographyTypeState  GeographyType = "STATE"
	GeographyTypeRegion GeographyType = "REGION"
	GeographyTypeOther  GeographyType = "OTHER"
)

var AllGeographyType = []GeographyType{
	GeographyTypeState,
	GeographyTypeRegion,
	GeographyTypeOther,
}

func (e GeographyType) IsValid() bool {
	switch e {
	case GeographyTypeState, GeographyTypeRegion, GeographyTypeOther:
		return true
	}
	return false
}

func (e GeographyType) String() string {
	return string(e)
}

func (e *GeographyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GeographyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GeographyType", str)
	}
	return nil
}

func (e GeographyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KeyCharacteristic string

const (
	KeyCharacteristicEpisodeBased    KeyCharacteristic = "EPISODE_BASED"
	KeyCharacteristicPartC           KeyCharacteristic = "PART_C"
	KeyCharacteristicPartD           KeyCharacteristic = "PART_D"
	KeyCharacteristicPayment         KeyCharacteristic = "PAYMENT"
	KeyCharacteristicPopulationBased KeyCharacteristic = "POPULATION_BASED"
	KeyCharacteristicPreventative    KeyCharacteristic = "PREVENTATIVE"
	KeyCharacteristicServiceDelivery KeyCharacteristic = "SERVICE_DELIVERY"
	KeyCharacteristicSharedSavings   KeyCharacteristic = "SHARED_SAVINGS"
	KeyCharacteristicOther           KeyCharacteristic = "OTHER"
)

var AllKeyCharacteristic = []KeyCharacteristic{
	KeyCharacteristicEpisodeBased,
	KeyCharacteristicPartC,
	KeyCharacteristicPartD,
	KeyCharacteristicPayment,
	KeyCharacteristicPopulationBased,
	KeyCharacteristicPreventative,
	KeyCharacteristicServiceDelivery,
	KeyCharacteristicSharedSavings,
	KeyCharacteristicOther,
}

func (e KeyCharacteristic) IsValid() bool {
	switch e {
	case KeyCharacteristicEpisodeBased, KeyCharacteristicPartC, KeyCharacteristicPartD, KeyCharacteristicPayment, KeyCharacteristicPopulationBased, KeyCharacteristicPreventative, KeyCharacteristicServiceDelivery, KeyCharacteristicSharedSavings, KeyCharacteristicOther:
		return true
	}
	return false
}

func (e KeyCharacteristic) String() string {
	return string(e)
}

func (e *KeyCharacteristic) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KeyCharacteristic(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KeyCharacteristic", str)
	}
	return nil
}

func (e KeyCharacteristic) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelClaimsBasedMeasuresType string

const (
	OelClaimsBasedMeasuresTypeIDR   OelClaimsBasedMeasuresType = "IDR"
	OelClaimsBasedMeasuresTypeCcw   OelClaimsBasedMeasuresType = "CCW"
	OelClaimsBasedMeasuresTypeOther OelClaimsBasedMeasuresType = "OTHER"
)

var AllOelClaimsBasedMeasuresType = []OelClaimsBasedMeasuresType{
	OelClaimsBasedMeasuresTypeIDR,
	OelClaimsBasedMeasuresTypeCcw,
	OelClaimsBasedMeasuresTypeOther,
}

func (e OelClaimsBasedMeasuresType) IsValid() bool {
	switch e {
	case OelClaimsBasedMeasuresTypeIDR, OelClaimsBasedMeasuresTypeCcw, OelClaimsBasedMeasuresTypeOther:
		return true
	}
	return false
}

func (e OelClaimsBasedMeasuresType) String() string {
	return string(e)
}

func (e *OelClaimsBasedMeasuresType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelClaimsBasedMeasuresType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelClaimsBasedMeasuresType", str)
	}
	return nil
}

func (e OelClaimsBasedMeasuresType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelCollectDataType string

const (
	OelCollectDataTypeIDR        OelCollectDataType = "IDR"
	OelCollectDataTypeCcw        OelCollectDataType = "CCW"
	OelCollectDataTypeIDOs       OelCollectDataType = "IDOS"
	OelCollectDataTypeIsp        OelCollectDataType = "ISP"
	OelCollectDataTypeContractor OelCollectDataType = "CONTRACTOR"
	OelCollectDataTypeOther      OelCollectDataType = "OTHER"
)

var AllOelCollectDataType = []OelCollectDataType{
	OelCollectDataTypeIDR,
	OelCollectDataTypeCcw,
	OelCollectDataTypeIDOs,
	OelCollectDataTypeIsp,
	OelCollectDataTypeContractor,
	OelCollectDataTypeOther,
}

func (e OelCollectDataType) IsValid() bool {
	switch e {
	case OelCollectDataTypeIDR, OelCollectDataTypeCcw, OelCollectDataTypeIDOs, OelCollectDataTypeIsp, OelCollectDataTypeContractor, OelCollectDataTypeOther:
		return true
	}
	return false
}

func (e OelCollectDataType) String() string {
	return string(e)
}

func (e *OelCollectDataType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelCollectDataType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelCollectDataType", str)
	}
	return nil
}

func (e OelCollectDataType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelEducateBeneficiariesType string

const (
	OelEducateBeneficiariesTypeOc    OelEducateBeneficiariesType = "OC"
	OelEducateBeneficiariesTypeOther OelEducateBeneficiariesType = "OTHER"
)

var AllOelEducateBeneficiariesType = []OelEducateBeneficiariesType{
	OelEducateBeneficiariesTypeOc,
	OelEducateBeneficiariesTypeOther,
}

func (e OelEducateBeneficiariesType) IsValid() bool {
	switch e {
	case OelEducateBeneficiariesTypeOc, OelEducateBeneficiariesTypeOther:
		return true
	}
	return false
}

func (e OelEducateBeneficiariesType) String() string {
	return string(e)
}

func (e *OelEducateBeneficiariesType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelEducateBeneficiariesType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelEducateBeneficiariesType", str)
	}
	return nil
}

func (e OelEducateBeneficiariesType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelEvaluationContractorType string

const (
	OelEvaluationContractorTypeRmda  OelEvaluationContractorType = "RMDA"
	OelEvaluationContractorTypeOther OelEvaluationContractorType = "OTHER"
)

var AllOelEvaluationContractorType = []OelEvaluationContractorType{
	OelEvaluationContractorTypeRmda,
	OelEvaluationContractorTypeOther,
}

func (e OelEvaluationContractorType) IsValid() bool {
	switch e {
	case OelEvaluationContractorTypeRmda, OelEvaluationContractorTypeOther:
		return true
	}
	return false
}

func (e OelEvaluationContractorType) String() string {
	return string(e)
}

func (e *OelEvaluationContractorType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelEvaluationContractorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelEvaluationContractorType", str)
	}
	return nil
}

func (e OelEvaluationContractorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelHelpdeskSupportType string

const (
	OelHelpdeskSupportTypeCbosc      OelHelpdeskSupportType = "CBOSC"
	OelHelpdeskSupportTypeContractor OelHelpdeskSupportType = "CONTRACTOR"
	OelHelpdeskSupportTypeOther      OelHelpdeskSupportType = "OTHER"
)

var AllOelHelpdeskSupportType = []OelHelpdeskSupportType{
	OelHelpdeskSupportTypeCbosc,
	OelHelpdeskSupportTypeContractor,
	OelHelpdeskSupportTypeOther,
}

func (e OelHelpdeskSupportType) IsValid() bool {
	switch e {
	case OelHelpdeskSupportTypeCbosc, OelHelpdeskSupportTypeContractor, OelHelpdeskSupportTypeOther:
		return true
	}
	return false
}

func (e OelHelpdeskSupportType) String() string {
	return string(e)
}

func (e *OelHelpdeskSupportType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelHelpdeskSupportType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelHelpdeskSupportType", str)
	}
	return nil
}

func (e OelHelpdeskSupportType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelLearningContractorType string

const (
	OelLearningContractorTypeRmada              OelLearningContractorType = "RMADA"
	OelLearningContractorTypeCrossmodelcontract OelLearningContractorType = "CROSSMODELCONTRACT"
	OelLearningContractorTypeOther              OelLearningContractorType = "OTHER"
)

var AllOelLearningContractorType = []OelLearningContractorType{
	OelLearningContractorTypeRmada,
	OelLearningContractorTypeCrossmodelcontract,
	OelLearningContractorTypeOther,
}

func (e OelLearningContractorType) IsValid() bool {
	switch e {
	case OelLearningContractorTypeRmada, OelLearningContractorTypeCrossmodelcontract, OelLearningContractorTypeOther:
		return true
	}
	return false
}

func (e OelLearningContractorType) String() string {
	return string(e)
}

func (e *OelLearningContractorType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelLearningContractorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelLearningContractorType", str)
	}
	return nil
}

func (e OelLearningContractorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelManageAcoType string

const (
	OelManageAcoTypeAcoos      OelManageAcoType = "ACOOS"
	OelManageAcoTypeAcoui      OelManageAcoType = "ACOUI"
	OelManageAcoTypeInnovation OelManageAcoType = "INNOVATION"
	OelManageAcoTypeOther      OelManageAcoType = "OTHER"
)

var AllOelManageAcoType = []OelManageAcoType{
	OelManageAcoTypeAcoos,
	OelManageAcoTypeAcoui,
	OelManageAcoTypeInnovation,
	OelManageAcoTypeOther,
}

func (e OelManageAcoType) IsValid() bool {
	switch e {
	case OelManageAcoTypeAcoos, OelManageAcoTypeAcoui, OelManageAcoTypeInnovation, OelManageAcoTypeOther:
		return true
	}
	return false
}

func (e OelManageAcoType) String() string {
	return string(e)
}

func (e *OelManageAcoType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelManageAcoType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelManageAcoType", str)
	}
	return nil
}

func (e OelManageAcoType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelObtainDataType string

const (
	OelObtainDataTypeCcw   OelObtainDataType = "CCW"
	OelObtainDataTypeIDOs  OelObtainDataType = "IDOS"
	OelObtainDataTypeIsp   OelObtainDataType = "ISP"
	OelObtainDataTypeOther OelObtainDataType = "OTHER"
)

var AllOelObtainDataType = []OelObtainDataType{
	OelObtainDataTypeCcw,
	OelObtainDataTypeIDOs,
	OelObtainDataTypeIsp,
	OelObtainDataTypeOther,
}

func (e OelObtainDataType) IsValid() bool {
	switch e {
	case OelObtainDataTypeCcw, OelObtainDataTypeIDOs, OelObtainDataTypeIsp, OelObtainDataTypeOther:
		return true
	}
	return false
}

func (e OelObtainDataType) String() string {
	return string(e)
}

func (e *OelObtainDataType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelObtainDataType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelObtainDataType", str)
	}
	return nil
}

func (e OelObtainDataType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelParticipantCollaborationType string

const (
	OelParticipantCollaborationTypeConnect OelParticipantCollaborationType = "CONNECT"
	OelParticipantCollaborationTypeOther   OelParticipantCollaborationType = "OTHER"
)

var AllOelParticipantCollaborationType = []OelParticipantCollaborationType{
	OelParticipantCollaborationTypeConnect,
	OelParticipantCollaborationTypeOther,
}

func (e OelParticipantCollaborationType) IsValid() bool {
	switch e {
	case OelParticipantCollaborationTypeConnect, OelParticipantCollaborationTypeOther:
		return true
	}
	return false
}

func (e OelParticipantCollaborationType) String() string {
	return string(e)
}

func (e *OelParticipantCollaborationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelParticipantCollaborationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelParticipantCollaborationType", str)
	}
	return nil
}

func (e OelParticipantCollaborationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelPerformanceBenchmarkType string

const (
	OelPerformanceBenchmarkTypeIDR   OelPerformanceBenchmarkType = "IDR"
	OelPerformanceBenchmarkTypeCcw   OelPerformanceBenchmarkType = "CCW"
	OelPerformanceBenchmarkTypeOther OelPerformanceBenchmarkType = "OTHER"
)

var AllOelPerformanceBenchmarkType = []OelPerformanceBenchmarkType{
	OelPerformanceBenchmarkTypeIDR,
	OelPerformanceBenchmarkTypeCcw,
	OelPerformanceBenchmarkTypeOther,
}

func (e OelPerformanceBenchmarkType) IsValid() bool {
	switch e {
	case OelPerformanceBenchmarkTypeIDR, OelPerformanceBenchmarkTypeCcw, OelPerformanceBenchmarkTypeOther:
		return true
	}
	return false
}

func (e OelPerformanceBenchmarkType) String() string {
	return string(e)
}

func (e *OelPerformanceBenchmarkType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelPerformanceBenchmarkType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelPerformanceBenchmarkType", str)
	}
	return nil
}

func (e OelPerformanceBenchmarkType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelProcessAppealsType string

const (
	OelProcessAppealsTypeMedicareappealsystem OelProcessAppealsType = "MEDICAREAPPEALSYSTEM"
	OelProcessAppealsTypeOther                OelProcessAppealsType = "OTHER"
)

var AllOelProcessAppealsType = []OelProcessAppealsType{
	OelProcessAppealsTypeMedicareappealsystem,
	OelProcessAppealsTypeOther,
}

func (e OelProcessAppealsType) IsValid() bool {
	switch e {
	case OelProcessAppealsTypeMedicareappealsystem, OelProcessAppealsTypeOther:
		return true
	}
	return false
}

func (e OelProcessAppealsType) String() string {
	return string(e)
}

func (e *OelProcessAppealsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelProcessAppealsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelProcessAppealsType", str)
	}
	return nil
}

func (e OelProcessAppealsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelQualityScoresType string

const (
	OelQualityScoresTypeExistingdataandprocess OelQualityScoresType = "EXISTINGDATAANDPROCESS"
	OelQualityScoresTypeNewdataandcmmiprocess  OelQualityScoresType = "NEWDATAANDCMMIPROCESS"
	OelQualityScoresTypeOthernewprocess        OelQualityScoresType = "OTHERNEWPROCESS"
	OelQualityScoresTypeNone                   OelQualityScoresType = "NONE"
)

var AllOelQualityScoresType = []OelQualityScoresType{
	OelQualityScoresTypeExistingdataandprocess,
	OelQualityScoresTypeNewdataandcmmiprocess,
	OelQualityScoresTypeOthernewprocess,
	OelQualityScoresTypeNone,
}

func (e OelQualityScoresType) IsValid() bool {
	switch e {
	case OelQualityScoresTypeExistingdataandprocess, OelQualityScoresTypeNewdataandcmmiprocess, OelQualityScoresTypeOthernewprocess, OelQualityScoresTypeNone:
		return true
	}
	return false
}

func (e OelQualityScoresType) String() string {
	return string(e)
}

func (e *OelQualityScoresType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelQualityScoresType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelQualityScoresType", str)
	}
	return nil
}

func (e OelQualityScoresType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelSendReportsType string

const (
	OelSendReportsTypeIDOs          OelSendReportsType = "IDOS"
	OelSendReportsTypeRmada         OelSendReportsType = "RMADA"
	OelSendReportsTypeInternalstaff OelSendReportsType = "INTERNALSTAFF"
	OelSendReportsTypeOther         OelSendReportsType = "OTHER"
)

var AllOelSendReportsType = []OelSendReportsType{
	OelSendReportsTypeIDOs,
	OelSendReportsTypeRmada,
	OelSendReportsTypeInternalstaff,
	OelSendReportsTypeOther,
}

func (e OelSendReportsType) IsValid() bool {
	switch e {
	case OelSendReportsTypeIDOs, OelSendReportsTypeRmada, OelSendReportsTypeInternalstaff, OelSendReportsTypeOther:
		return true
	}
	return false
}

func (e OelSendReportsType) String() string {
	return string(e)
}

func (e *OelSendReportsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelSendReportsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelSendReportsType", str)
	}
	return nil
}

func (e OelSendReportsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelWorkingAgreementType string

const (
	OelWorkingAgreementTypeIaa   OelWorkingAgreementType = "IAA"
	OelWorkingAgreementTypeOther OelWorkingAgreementType = "OTHER"
)

var AllOelWorkingAgreementType = []OelWorkingAgreementType{
	OelWorkingAgreementTypeIaa,
	OelWorkingAgreementTypeOther,
}

func (e OelWorkingAgreementType) IsValid() bool {
	switch e {
	case OelWorkingAgreementTypeIaa, OelWorkingAgreementTypeOther:
		return true
	}
	return false
}

func (e OelWorkingAgreementType) String() string {
	return string(e)
}

func (e *OelWorkingAgreementType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelWorkingAgreementType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelWorkingAgreementType", str)
	}
	return nil
}

func (e OelWorkingAgreementType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PInformFfsType string

const (
	PInformFfsTypeFfscompetencycenter PInformFfsType = "FFSCOMPETENCYCENTER"
	PInformFfsTypeOther               PInformFfsType = "OTHER"
)

var AllPInformFfsType = []PInformFfsType{
	PInformFfsTypeFfscompetencycenter,
	PInformFfsTypeOther,
}

func (e PInformFfsType) IsValid() bool {
	switch e {
	case PInformFfsTypeFfscompetencycenter, PInformFfsTypeOther:
		return true
	}
	return false
}

func (e PInformFfsType) String() string {
	return string(e)
}

func (e *PInformFfsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PInformFfsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PInformFfsType", str)
	}
	return nil
}

func (e PInformFfsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PMakeClaimsPaymentsType string

const (
	PMakeClaimsPaymentsTypeSharedsystems PMakeClaimsPaymentsType = "SHAREDSYSTEMS"
	PMakeClaimsPaymentsTypeHiglas        PMakeClaimsPaymentsType = "HIGLAS"
	PMakeClaimsPaymentsTypeOther         PMakeClaimsPaymentsType = "OTHER"
)

var AllPMakeClaimsPaymentsType = []PMakeClaimsPaymentsType{
	PMakeClaimsPaymentsTypeSharedsystems,
	PMakeClaimsPaymentsTypeHiglas,
	PMakeClaimsPaymentsTypeOther,
}

func (e PMakeClaimsPaymentsType) IsValid() bool {
	switch e {
	case PMakeClaimsPaymentsTypeSharedsystems, PMakeClaimsPaymentsTypeHiglas, PMakeClaimsPaymentsTypeOther:
		return true
	}
	return false
}

func (e PMakeClaimsPaymentsType) String() string {
	return string(e)
}

func (e *PMakeClaimsPaymentsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PMakeClaimsPaymentsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PMakeClaimsPaymentsType", str)
	}
	return nil
}

func (e PMakeClaimsPaymentsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PNonClaimsBasedPaymentsType string

const (
	PNonClaimsBasedPaymentsTypeApps   PNonClaimsBasedPaymentsType = "APPS"
	PNonClaimsBasedPaymentsTypeHiglas PNonClaimsBasedPaymentsType = "HIGLAS"
	PNonClaimsBasedPaymentsTypeIPC    PNonClaimsBasedPaymentsType = "IPC"
	PNonClaimsBasedPaymentsTypeMac    PNonClaimsBasedPaymentsType = "MAC"
	PNonClaimsBasedPaymentsTypeOther  PNonClaimsBasedPaymentsType = "OTHER"
)

var AllPNonClaimsBasedPaymentsType = []PNonClaimsBasedPaymentsType{
	PNonClaimsBasedPaymentsTypeApps,
	PNonClaimsBasedPaymentsTypeHiglas,
	PNonClaimsBasedPaymentsTypeIPC,
	PNonClaimsBasedPaymentsTypeMac,
	PNonClaimsBasedPaymentsTypeOther,
}

func (e PNonClaimsBasedPaymentsType) IsValid() bool {
	switch e {
	case PNonClaimsBasedPaymentsTypeApps, PNonClaimsBasedPaymentsTypeHiglas, PNonClaimsBasedPaymentsTypeIPC, PNonClaimsBasedPaymentsTypeMac, PNonClaimsBasedPaymentsTypeOther:
		return true
	}
	return false
}

func (e PNonClaimsBasedPaymentsType) String() string {
	return string(e)
}

func (e *PNonClaimsBasedPaymentsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PNonClaimsBasedPaymentsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PNonClaimsBasedPaymentsType", str)
	}
	return nil
}

func (e PNonClaimsBasedPaymentsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PRecoverPaymentsType string

const (
	PRecoverPaymentsTypeApps  PRecoverPaymentsType = "APPS"
	PRecoverPaymentsTypeIPC   PRecoverPaymentsType = "IPC"
	PRecoverPaymentsTypeMac   PRecoverPaymentsType = "MAC"
	PRecoverPaymentsTypeOther PRecoverPaymentsType = "OTHER"
)

var AllPRecoverPaymentsType = []PRecoverPaymentsType{
	PRecoverPaymentsTypeApps,
	PRecoverPaymentsTypeIPC,
	PRecoverPaymentsTypeMac,
	PRecoverPaymentsTypeOther,
}

func (e PRecoverPaymentsType) IsValid() bool {
	switch e {
	case PRecoverPaymentsTypeApps, PRecoverPaymentsTypeIPC, PRecoverPaymentsTypeMac, PRecoverPaymentsTypeOther:
		return true
	}
	return false
}

func (e PRecoverPaymentsType) String() string {
	return string(e)
}

func (e *PRecoverPaymentsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PRecoverPaymentsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PRecoverPaymentsType", str)
	}
	return nil
}

func (e PRecoverPaymentsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PSharedSavingsPlanType string

const (
	PSharedSavingsPlanTypeRmada PSharedSavingsPlanType = "RMADA"
	PSharedSavingsPlanTypeOther PSharedSavingsPlanType = "OTHER"
)

var AllPSharedSavingsPlanType = []PSharedSavingsPlanType{
	PSharedSavingsPlanTypeRmada,
	PSharedSavingsPlanTypeOther,
}

func (e PSharedSavingsPlanType) IsValid() bool {
	switch e {
	case PSharedSavingsPlanTypeRmada, PSharedSavingsPlanTypeOther:
		return true
	}
	return false
}

func (e PSharedSavingsPlanType) String() string {
	return string(e)
}

func (e *PSharedSavingsPlanType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PSharedSavingsPlanType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PSharedSavingsPlanType", str)
	}
	return nil
}

func (e PSharedSavingsPlanType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ParticipantCommunicationType string

const (
	ParticipantCommunicationTypeMassEmail       ParticipantCommunicationType = "MASS_EMAIL"
	ParticipantCommunicationTypeItTool          ParticipantCommunicationType = "IT_TOOL"
	ParticipantCommunicationTypeOther           ParticipantCommunicationType = "OTHER"
	ParticipantCommunicationTypeNoCommunication ParticipantCommunicationType = "NO_COMMUNICATION"
)

var AllParticipantCommunicationType = []ParticipantCommunicationType{
	ParticipantCommunicationTypeMassEmail,
	ParticipantCommunicationTypeItTool,
	ParticipantCommunicationTypeOther,
	ParticipantCommunicationTypeNoCommunication,
}

func (e ParticipantCommunicationType) IsValid() bool {
	switch e {
	case ParticipantCommunicationTypeMassEmail, ParticipantCommunicationTypeItTool, ParticipantCommunicationTypeOther, ParticipantCommunicationTypeNoCommunication:
		return true
	}
	return false
}

func (e ParticipantCommunicationType) String() string {
	return string(e)
}

func (e *ParticipantCommunicationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ParticipantCommunicationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ParticipantCommunicationType", str)
	}
	return nil
}

func (e ParticipantCommunicationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ParticipantSelectionType string

const (
	ParticipantSelectionTypeModelTeamReviewApplications     ParticipantSelectionType = "MODEL_TEAM_REVIEW_APPLICATIONS"
	ParticipantSelectionTypeSupportFromCmmi                 ParticipantSelectionType = "SUPPORT_FROM_CMMI"
	ParticipantSelectionTypeCmsComponentOrProcess           ParticipantSelectionType = "CMS_COMPONENT_OR_PROCESS"
	ParticipantSelectionTypeApplicationReviewAndScoringTool ParticipantSelectionType = "APPLICATION_REVIEW_AND_SCORING_TOOL"
	ParticipantSelectionTypeApplicationSupportContractor    ParticipantSelectionType = "APPLICATION_SUPPORT_CONTRACTOR"
	ParticipantSelectionTypeBasicCriteria                   ParticipantSelectionType = "BASIC_CRITERIA"
	ParticipantSelectionTypeOther                           ParticipantSelectionType = "OTHER"
	ParticipantSelectionTypeNoSelectingParticipants         ParticipantSelectionType = "NO_SELECTING_PARTICIPANTS"
)

var AllParticipantSelectionType = []ParticipantSelectionType{
	ParticipantSelectionTypeModelTeamReviewApplications,
	ParticipantSelectionTypeSupportFromCmmi,
	ParticipantSelectionTypeCmsComponentOrProcess,
	ParticipantSelectionTypeApplicationReviewAndScoringTool,
	ParticipantSelectionTypeApplicationSupportContractor,
	ParticipantSelectionTypeBasicCriteria,
	ParticipantSelectionTypeOther,
	ParticipantSelectionTypeNoSelectingParticipants,
}

func (e ParticipantSelectionType) IsValid() bool {
	switch e {
	case ParticipantSelectionTypeModelTeamReviewApplications, ParticipantSelectionTypeSupportFromCmmi, ParticipantSelectionTypeCmsComponentOrProcess, ParticipantSelectionTypeApplicationReviewAndScoringTool, ParticipantSelectionTypeApplicationSupportContractor, ParticipantSelectionTypeBasicCriteria, ParticipantSelectionTypeOther, ParticipantSelectionTypeNoSelectingParticipants:
		return true
	}
	return false
}

func (e ParticipantSelectionType) String() string {
	return string(e)
}

func (e *ParticipantSelectionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ParticipantSelectionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ParticipantSelectionType", str)
	}
	return nil
}

func (e ParticipantSelectionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ParticipantsIDType string

const (
	ParticipantsIDTypeTins          ParticipantsIDType = "TINS"
	ParticipantsIDTypeNpis          ParticipantsIDType = "NPIS"
	ParticipantsIDTypeCcns          ParticipantsIDType = "CCNS"
	ParticipantsIDTypeOther         ParticipantsIDType = "OTHER"
	ParticipantsIDTypeNoIDEntifiers ParticipantsIDType = "NO_IDENTIFIERS"
)

var AllParticipantsIDType = []ParticipantsIDType{
	ParticipantsIDTypeTins,
	ParticipantsIDTypeNpis,
	ParticipantsIDTypeCcns,
	ParticipantsIDTypeOther,
	ParticipantsIDTypeNoIDEntifiers,
}

func (e ParticipantsIDType) IsValid() bool {
	switch e {
	case ParticipantsIDTypeTins, ParticipantsIDTypeNpis, ParticipantsIDTypeCcns, ParticipantsIDTypeOther, ParticipantsIDTypeNoIDEntifiers:
		return true
	}
	return false
}

func (e ParticipantsIDType) String() string {
	return string(e)
}

func (e *ParticipantsIDType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ParticipantsIDType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ParticipantsIDType", str)
	}
	return nil
}

func (e ParticipantsIDType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ParticipantsType string

const (
	ParticipantsTypeMedicareProviders                      ParticipantsType = "MEDICARE_PROVIDERS"
	ParticipantsTypeEntities                               ParticipantsType = "ENTITIES"
	ParticipantsTypeConvener                               ParticipantsType = "CONVENER"
	ParticipantsTypeMedicareAdvantagePlans                 ParticipantsType = "MEDICARE_ADVANTAGE_PLANS"
	ParticipantsTypeStandalonePartDPlans                   ParticipantsType = "STANDALONE_PART_D_PLANS"
	ParticipantsTypeMedicareAdvantagePrescriptionDrugPlans ParticipantsType = "MEDICARE_ADVANTAGE_PRESCRIPTION_DRUG_PLANS"
	ParticipantsTypeStateMedicaidAgencies                  ParticipantsType = "STATE_MEDICAID_AGENCIES"
	ParticipantsTypeMedicaidManagedCareOrganizations       ParticipantsType = "MEDICAID_MANAGED_CARE_ORGANIZATIONS"
	ParticipantsTypeMedicaidProviders                      ParticipantsType = "MEDICAID_PROVIDERS"
	ParticipantsTypeStates                                 ParticipantsType = "STATES"
	ParticipantsTypeCommunityBasedOrganizations            ParticipantsType = "COMMUNITY_BASED_ORGANIZATIONS"
	ParticipantsTypeNonProfitOrganizations                 ParticipantsType = "NON_PROFIT_ORGANIZATIONS"
	ParticipantsTypeCommercialPayers                       ParticipantsType = "COMMERCIAL_PAYERS"
	ParticipantsTypeOther                                  ParticipantsType = "OTHER"
)

var AllParticipantsType = []ParticipantsType{
	ParticipantsTypeMedicareProviders,
	ParticipantsTypeEntities,
	ParticipantsTypeConvener,
	ParticipantsTypeMedicareAdvantagePlans,
	ParticipantsTypeStandalonePartDPlans,
	ParticipantsTypeMedicareAdvantagePrescriptionDrugPlans,
	ParticipantsTypeStateMedicaidAgencies,
	ParticipantsTypeMedicaidManagedCareOrganizations,
	ParticipantsTypeMedicaidProviders,
	ParticipantsTypeStates,
	ParticipantsTypeCommunityBasedOrganizations,
	ParticipantsTypeNonProfitOrganizations,
	ParticipantsTypeCommercialPayers,
	ParticipantsTypeOther,
}

func (e ParticipantsType) IsValid() bool {
	switch e {
	case ParticipantsTypeMedicareProviders, ParticipantsTypeEntities, ParticipantsTypeConvener, ParticipantsTypeMedicareAdvantagePlans, ParticipantsTypeStandalonePartDPlans, ParticipantsTypeMedicareAdvantagePrescriptionDrugPlans, ParticipantsTypeStateMedicaidAgencies, ParticipantsTypeMedicaidManagedCareOrganizations, ParticipantsTypeMedicaidProviders, ParticipantsTypeStates, ParticipantsTypeCommunityBasedOrganizations, ParticipantsTypeNonProfitOrganizations, ParticipantsTypeCommercialPayers, ParticipantsTypeOther:
		return true
	}
	return false
}

func (e ParticipantsType) String() string {
	return string(e)
}

func (e *ParticipantsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ParticipantsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ParticipantsType", str)
	}
	return nil
}

func (e ParticipantsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PpAppSupportContractorType string

const (
	PpAppSupportContractorTypeRmda  PpAppSupportContractorType = "RMDA"
	PpAppSupportContractorTypeOther PpAppSupportContractorType = "OTHER"
)

var AllPpAppSupportContractorType = []PpAppSupportContractorType{
	PpAppSupportContractorTypeRmda,
	PpAppSupportContractorTypeOther,
}

func (e PpAppSupportContractorType) IsValid() bool {
	switch e {
	case PpAppSupportContractorTypeRmda, PpAppSupportContractorTypeOther:
		return true
	}
	return false
}

func (e PpAppSupportContractorType) String() string {
	return string(e)
}

func (e *PpAppSupportContractorType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PpAppSupportContractorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PpAppSupportContractorType", str)
	}
	return nil
}

func (e PpAppSupportContractorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PpCollectScoreReviewType string

const (
	PpCollectScoreReviewTypeRfa            PpCollectScoreReviewType = "RFA"
	PpCollectScoreReviewTypeArs            PpCollectScoreReviewType = "ARS"
	PpCollectScoreReviewTypeGrantsolutions PpCollectScoreReviewType = "GRANTSOLUTIONS"
	PpCollectScoreReviewTypeOther          PpCollectScoreReviewType = "OTHER"
)

var AllPpCollectScoreReviewType = []PpCollectScoreReviewType{
	PpCollectScoreReviewTypeRfa,
	PpCollectScoreReviewTypeArs,
	PpCollectScoreReviewTypeGrantsolutions,
	PpCollectScoreReviewTypeOther,
}

func (e PpCollectScoreReviewType) IsValid() bool {
	switch e {
	case PpCollectScoreReviewTypeRfa, PpCollectScoreReviewTypeArs, PpCollectScoreReviewTypeGrantsolutions, PpCollectScoreReviewTypeOther:
		return true
	}
	return false
}

func (e PpCollectScoreReviewType) String() string {
	return string(e)
}

func (e *PpCollectScoreReviewType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PpCollectScoreReviewType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PpCollectScoreReviewType", str)
	}
	return nil
}

func (e PpCollectScoreReviewType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PpCommunicateWithParticipantType string

const (
	PpCommunicateWithParticipantTypeOutlookmailbox   PpCommunicateWithParticipantType = "OUTLOOKMAILBOX"
	PpCommunicateWithParticipantTypeGovdelivery      PpCommunicateWithParticipantType = "GOVDELIVERY"
	PpCommunicateWithParticipantTypeSalesforceportal PpCommunicateWithParticipantType = "SALESFORCEPORTAL"
	PpCommunicateWithParticipantTypeOther            PpCommunicateWithParticipantType = "OTHER"
)

var AllPpCommunicateWithParticipantType = []PpCommunicateWithParticipantType{
	PpCommunicateWithParticipantTypeOutlookmailbox,
	PpCommunicateWithParticipantTypeGovdelivery,
	PpCommunicateWithParticipantTypeSalesforceportal,
	PpCommunicateWithParticipantTypeOther,
}

func (e PpCommunicateWithParticipantType) IsValid() bool {
	switch e {
	case PpCommunicateWithParticipantTypeOutlookmailbox, PpCommunicateWithParticipantTypeGovdelivery, PpCommunicateWithParticipantTypeSalesforceportal, PpCommunicateWithParticipantTypeOther:
		return true
	}
	return false
}

func (e PpCommunicateWithParticipantType) String() string {
	return string(e)
}

func (e *PpCommunicateWithParticipantType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PpCommunicateWithParticipantType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PpCommunicateWithParticipantType", str)
	}
	return nil
}

func (e PpCommunicateWithParticipantType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PpManageProviderOverlapType string

const (
	PpManageProviderOverlapTypeMdm   PpManageProviderOverlapType = "MDM"
	PpManageProviderOverlapTypeOther PpManageProviderOverlapType = "OTHER"
	PpManageProviderOverlapTypeNa    PpManageProviderOverlapType = "NA"
)

var AllPpManageProviderOverlapType = []PpManageProviderOverlapType{
	PpManageProviderOverlapTypeMdm,
	PpManageProviderOverlapTypeOther,
	PpManageProviderOverlapTypeNa,
}

func (e PpManageProviderOverlapType) IsValid() bool {
	switch e {
	case PpManageProviderOverlapTypeMdm, PpManageProviderOverlapTypeOther, PpManageProviderOverlapTypeNa:
		return true
	}
	return false
}

func (e PpManageProviderOverlapType) String() string {
	return string(e)
}

func (e *PpManageProviderOverlapType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PpManageProviderOverlapType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PpManageProviderOverlapType", str)
	}
	return nil
}

func (e PpManageProviderOverlapType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PpToAdvertiseType string

const (
	PpToAdvertiseTypeSalesforce     PpToAdvertiseType = "SALESFORCE"
	PpToAdvertiseTypeGrantsolutions PpToAdvertiseType = "GRANTSOLUTIONS"
	PpToAdvertiseTypeOther          PpToAdvertiseType = "OTHER"
)

var AllPpToAdvertiseType = []PpToAdvertiseType{
	PpToAdvertiseTypeSalesforce,
	PpToAdvertiseTypeGrantsolutions,
	PpToAdvertiseTypeOther,
}

func (e PpToAdvertiseType) IsValid() bool {
	switch e {
	case PpToAdvertiseTypeSalesforce, PpToAdvertiseTypeGrantsolutions, PpToAdvertiseTypeOther:
		return true
	}
	return false
}

func (e PpToAdvertiseType) String() string {
	return string(e)
}

func (e *PpToAdvertiseType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PpToAdvertiseType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PpToAdvertiseType", str)
	}
	return nil
}

func (e PpToAdvertiseType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProviderAddType string

const (
	ProviderAddTypeProspectively   ProviderAddType = "PROSPECTIVELY"
	ProviderAddTypeRetrospectively ProviderAddType = "RETROSPECTIVELY"
	ProviderAddTypeVoluntarily     ProviderAddType = "VOLUNTARILY"
	ProviderAddTypeMandatorily     ProviderAddType = "MANDATORILY"
	ProviderAddTypeOnlineTools     ProviderAddType = "ONLINE_TOOLS"
	ProviderAddTypeOther           ProviderAddType = "OTHER"
	ProviderAddTypeNa              ProviderAddType = "NA"
)

var AllProviderAddType = []ProviderAddType{
	ProviderAddTypeProspectively,
	ProviderAddTypeRetrospectively,
	ProviderAddTypeVoluntarily,
	ProviderAddTypeMandatorily,
	ProviderAddTypeOnlineTools,
	ProviderAddTypeOther,
	ProviderAddTypeNa,
}

func (e ProviderAddType) IsValid() bool {
	switch e {
	case ProviderAddTypeProspectively, ProviderAddTypeRetrospectively, ProviderAddTypeVoluntarily, ProviderAddTypeMandatorily, ProviderAddTypeOnlineTools, ProviderAddTypeOther, ProviderAddTypeNa:
		return true
	}
	return false
}

func (e ProviderAddType) String() string {
	return string(e)
}

func (e *ProviderAddType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProviderAddType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProviderAddType", str)
	}
	return nil
}

func (e ProviderAddType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProviderLeaveType string

const (
	ProviderLeaveTypeVoluntarilyWithoutImplications ProviderLeaveType = "VOLUNTARILY_WITHOUT_IMPLICATIONS"
	ProviderLeaveTypeAfterACertainWithImplications  ProviderLeaveType = "AFTER_A_CERTAIN_WITH_IMPLICATIONS"
	ProviderLeaveTypeVariesByTypeOfProvider         ProviderLeaveType = "VARIES_BY_TYPE_OF_PROVIDER"
	ProviderLeaveTypeNotAllowedToLeave              ProviderLeaveType = "NOT_ALLOWED_TO_LEAVE"
	ProviderLeaveTypeOther                          ProviderLeaveType = "OTHER"
	ProviderLeaveTypeNotApplicable                  ProviderLeaveType = "NOT_APPLICABLE"
)

var AllProviderLeaveType = []ProviderLeaveType{
	ProviderLeaveTypeVoluntarilyWithoutImplications,
	ProviderLeaveTypeAfterACertainWithImplications,
	ProviderLeaveTypeVariesByTypeOfProvider,
	ProviderLeaveTypeNotAllowedToLeave,
	ProviderLeaveTypeOther,
	ProviderLeaveTypeNotApplicable,
}

func (e ProviderLeaveType) IsValid() bool {
	switch e {
	case ProviderLeaveTypeVoluntarilyWithoutImplications, ProviderLeaveTypeAfterACertainWithImplications, ProviderLeaveTypeVariesByTypeOfProvider, ProviderLeaveTypeNotAllowedToLeave, ProviderLeaveTypeOther, ProviderLeaveTypeNotApplicable:
		return true
	}
	return false
}

func (e ProviderLeaveType) String() string {
	return string(e)
}

func (e *ProviderLeaveType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProviderLeaveType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProviderLeaveType", str)
	}
	return nil
}

func (e ProviderLeaveType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A user role associated with a job code
type Role string

const (
	// A basic MINT user
	RoleMintBaseUser Role = "MINT_BASE_USER"
	// A MINT admin user
	RoleMintAdminUser Role = "MINT_ADMIN_USER"
)

var AllRole = []Role{
	RoleMintBaseUser,
	RoleMintAdminUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleMintBaseUser, RoleMintAdminUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SelectionMethodType string

const (
	SelectionMethodTypeHistorical     SelectionMethodType = "HISTORICAL"
	SelectionMethodTypeProspective    SelectionMethodType = "PROSPECTIVE"
	SelectionMethodTypeRetrospective  SelectionMethodType = "RETROSPECTIVE"
	SelectionMethodTypeVoluntary      SelectionMethodType = "VOLUNTARY"
	SelectionMethodTypeProviderSignUp SelectionMethodType = "PROVIDER_SIGN_UP"
	SelectionMethodTypeOther          SelectionMethodType = "OTHER"
	SelectionMethodTypeNa             SelectionMethodType = "NA"
)

var AllSelectionMethodType = []SelectionMethodType{
	SelectionMethodTypeHistorical,
	SelectionMethodTypeProspective,
	SelectionMethodTypeRetrospective,
	SelectionMethodTypeVoluntary,
	SelectionMethodTypeProviderSignUp,
	SelectionMethodTypeOther,
	SelectionMethodTypeNa,
}

func (e SelectionMethodType) IsValid() bool {
	switch e {
	case SelectionMethodTypeHistorical, SelectionMethodTypeProspective, SelectionMethodTypeRetrospective, SelectionMethodTypeVoluntary, SelectionMethodTypeProviderSignUp, SelectionMethodTypeOther, SelectionMethodTypeNa:
		return true
	}
	return false
}

func (e SelectionMethodType) String() string {
	return string(e)
}

func (e *SelectionMethodType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SelectionMethodType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SelectionMethodType", str)
	}
	return nil
}

func (e SelectionMethodType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WaiverType string

const (
	WaiverTypeFraudAbuse     WaiverType = "FRAUD_ABUSE"
	WaiverTypeProgramPayment WaiverType = "PROGRAM_PAYMENT"
	WaiverTypeMedicaid       WaiverType = "MEDICAID"
)

var AllWaiverType = []WaiverType{
	WaiverTypeFraudAbuse,
	WaiverTypeProgramPayment,
	WaiverTypeMedicaid,
}

func (e WaiverType) IsValid() bool {
	switch e {
	case WaiverTypeFraudAbuse, WaiverTypeProgramPayment, WaiverTypeMedicaid:
		return true
	}
	return false
}

func (e WaiverType) String() string {
	return string(e)
}

func (e *WaiverType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WaiverType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WaiverType", str)
	}
	return nil
}

func (e WaiverType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
