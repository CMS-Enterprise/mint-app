// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/cmsgov/mint-app/pkg/models"
	"github.com/google/uuid"
)

// The current user of the application
type CurrentUser struct {
	LaunchDarkly *LaunchDarklySettings `json:"launchDarkly"`
}

// DiscussionReplyCreateInput represents the necessary fields to create a discussion reply
type DiscussionReplyCreateInput struct {
	DiscussionID uuid.UUID `json:"discussionID"`
	Content      string    `json:"content"`
	Resolution   bool      `json:"resolution"`
}

// Input associated with a document to be uploaded
type GeneratePresignedUploadURLInput struct {
	FileName string `json:"fileName"`
	MimeType string `json:"mimeType"`
	Size     int    `json:"size"`
}

// URL generated for a document to be uploaded
type GeneratePresignedUploadURLPayload struct {
	URL *string `json:"url"`
}

// The current user's Launch Darkly key
type LaunchDarklySettings struct {
	UserKey    string `json:"userKey"`
	SignedHash string `json:"signedHash"`
}

// PlanCollaboratorCreateInput represents the data required to create a collaborator on a plan
type PlanCollaboratorCreateInput struct {
	ModelPlanID uuid.UUID       `json:"modelPlanID"`
	EuaUserID   string          `json:"euaUserID"`
	FullName    string          `json:"fullName"`
	TeamRole    models.TeamRole `json:"teamRole"`
}

// PlanDiscussionCreateInput represents the necessary fields to create a plan discussion
type PlanDiscussionCreateInput struct {
	ModelPlanID uuid.UUID `json:"modelPlanID"`
	Content     string    `json:"content"`
}

// PlanDocumentInput represents the data required to create, modify, or delete a document on a plan
type PlanDocumentInput struct {
	ID                 *uuid.UUID              `json:"id"`
	ModelPlanID        uuid.UUID               `json:"modelPlanID"`
	DocumentParameters *PlanDocumentParameters `json:"documentParameters"`
	URL                *string                 `json:"url"`
}

// PlanDocumentCreateParameters represents the specific data required to create or modify a document on a plan
type PlanDocumentParameters struct {
	FileName             *string              `json:"fileName"`
	FileSize             int                  `json:"fileSize"`
	FileType             *string              `json:"fileType"`
	DocumentType         *models.DocumentType `json:"documentType"`
	OtherTypeDescription *string              `json:"otherTypeDescription"`
	OptionalNotes        *string              `json:"optionalNotes"`
}

// PlanDocumentPayload represents the response to a document request
type PlanDocumentPayload struct {
	Document     *models.PlanDocument `json:"document"`
	PresignedURL *string              `json:"presignedURL"`
}

type BManageBeneficiaryOverlapType string

const (
	BManageBeneficiaryOverlapTypeMdm   BManageBeneficiaryOverlapType = "MDM"
	BManageBeneficiaryOverlapTypeOther BManageBeneficiaryOverlapType = "OTHER"
	BManageBeneficiaryOverlapTypeNa    BManageBeneficiaryOverlapType = "NA"
)

var AllBManageBeneficiaryOverlapType = []BManageBeneficiaryOverlapType{
	BManageBeneficiaryOverlapTypeMdm,
	BManageBeneficiaryOverlapTypeOther,
	BManageBeneficiaryOverlapTypeNa,
}

func (e BManageBeneficiaryOverlapType) IsValid() bool {
	switch e {
	case BManageBeneficiaryOverlapTypeMdm, BManageBeneficiaryOverlapTypeOther, BManageBeneficiaryOverlapTypeNa:
		return true
	}
	return false
}

func (e BManageBeneficiaryOverlapType) String() string {
	return string(e)
}

func (e *BManageBeneficiaryOverlapType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BManageBeneficiaryOverlapType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BManageBeneficiaryOverlapType", str)
	}
	return nil
}

func (e BManageBeneficiaryOverlapType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GcCollectBidsType string

const (
	GcCollectBidsTypeHpms  GcCollectBidsType = "HPMS"
	GcCollectBidsTypeOther GcCollectBidsType = "OTHER"
)

var AllGcCollectBidsType = []GcCollectBidsType{
	GcCollectBidsTypeHpms,
	GcCollectBidsTypeOther,
}

func (e GcCollectBidsType) IsValid() bool {
	switch e {
	case GcCollectBidsTypeHpms, GcCollectBidsTypeOther:
		return true
	}
	return false
}

func (e GcCollectBidsType) String() string {
	return string(e)
}

func (e *GcCollectBidsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GcCollectBidsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GcCollectBidsType", str)
	}
	return nil
}

func (e GcCollectBidsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GcPartCDType string

const (
	GcPartCDTypeMarx  GcPartCDType = "MARX"
	GcPartCDTypeOther GcPartCDType = "OTHER"
)

var AllGcPartCDType = []GcPartCDType{
	GcPartCDTypeMarx,
	GcPartCDTypeOther,
}

func (e GcPartCDType) IsValid() bool {
	switch e {
	case GcPartCDTypeMarx, GcPartCDTypeOther:
		return true
	}
	return false
}

func (e GcPartCDType) String() string {
	return string(e)
}

func (e *GcPartCDType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GcPartCDType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GcPartCDType", str)
	}
	return nil
}

func (e GcPartCDType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GcUpdateContractType string

const (
	GcUpdateContractTypeHpms  GcUpdateContractType = "HPMS"
	GcUpdateContractTypeOther GcUpdateContractType = "OTHER"
)

var AllGcUpdateContractType = []GcUpdateContractType{
	GcUpdateContractTypeHpms,
	GcUpdateContractTypeOther,
}

func (e GcUpdateContractType) IsValid() bool {
	switch e {
	case GcUpdateContractTypeHpms, GcUpdateContractTypeOther:
		return true
	}
	return false
}

func (e GcUpdateContractType) String() string {
	return string(e)
}

func (e *GcUpdateContractType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GcUpdateContractType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GcUpdateContractType", str)
	}
	return nil
}

func (e GcUpdateContractType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelClaimsBasedMeasuresType string

const (
	OelClaimsBasedMeasuresTypeIDR   OelClaimsBasedMeasuresType = "IDR"
	OelClaimsBasedMeasuresTypeCcw   OelClaimsBasedMeasuresType = "CCW"
	OelClaimsBasedMeasuresTypeOther OelClaimsBasedMeasuresType = "OTHER"
)

var AllOelClaimsBasedMeasuresType = []OelClaimsBasedMeasuresType{
	OelClaimsBasedMeasuresTypeIDR,
	OelClaimsBasedMeasuresTypeCcw,
	OelClaimsBasedMeasuresTypeOther,
}

func (e OelClaimsBasedMeasuresType) IsValid() bool {
	switch e {
	case OelClaimsBasedMeasuresTypeIDR, OelClaimsBasedMeasuresTypeCcw, OelClaimsBasedMeasuresTypeOther:
		return true
	}
	return false
}

func (e OelClaimsBasedMeasuresType) String() string {
	return string(e)
}

func (e *OelClaimsBasedMeasuresType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelClaimsBasedMeasuresType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelClaimsBasedMeasuresType", str)
	}
	return nil
}

func (e OelClaimsBasedMeasuresType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelCollectDataType string

const (
	OelCollectDataTypeIDR        OelCollectDataType = "IDR"
	OelCollectDataTypeCcw        OelCollectDataType = "CCW"
	OelCollectDataTypeIDOs       OelCollectDataType = "IDOS"
	OelCollectDataTypeIsp        OelCollectDataType = "ISP"
	OelCollectDataTypeContractor OelCollectDataType = "CONTRACTOR"
	OelCollectDataTypeOther      OelCollectDataType = "OTHER"
)

var AllOelCollectDataType = []OelCollectDataType{
	OelCollectDataTypeIDR,
	OelCollectDataTypeCcw,
	OelCollectDataTypeIDOs,
	OelCollectDataTypeIsp,
	OelCollectDataTypeContractor,
	OelCollectDataTypeOther,
}

func (e OelCollectDataType) IsValid() bool {
	switch e {
	case OelCollectDataTypeIDR, OelCollectDataTypeCcw, OelCollectDataTypeIDOs, OelCollectDataTypeIsp, OelCollectDataTypeContractor, OelCollectDataTypeOther:
		return true
	}
	return false
}

func (e OelCollectDataType) String() string {
	return string(e)
}

func (e *OelCollectDataType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelCollectDataType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelCollectDataType", str)
	}
	return nil
}

func (e OelCollectDataType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelEducateBeneficiariesType string

const (
	OelEducateBeneficiariesTypeOc    OelEducateBeneficiariesType = "OC"
	OelEducateBeneficiariesTypeOther OelEducateBeneficiariesType = "OTHER"
)

var AllOelEducateBeneficiariesType = []OelEducateBeneficiariesType{
	OelEducateBeneficiariesTypeOc,
	OelEducateBeneficiariesTypeOther,
}

func (e OelEducateBeneficiariesType) IsValid() bool {
	switch e {
	case OelEducateBeneficiariesTypeOc, OelEducateBeneficiariesTypeOther:
		return true
	}
	return false
}

func (e OelEducateBeneficiariesType) String() string {
	return string(e)
}

func (e *OelEducateBeneficiariesType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelEducateBeneficiariesType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelEducateBeneficiariesType", str)
	}
	return nil
}

func (e OelEducateBeneficiariesType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelEvaluationContractorType string

const (
	OelEvaluationContractorTypeRmda  OelEvaluationContractorType = "RMDA"
	OelEvaluationContractorTypeOther OelEvaluationContractorType = "OTHER"
)

var AllOelEvaluationContractorType = []OelEvaluationContractorType{
	OelEvaluationContractorTypeRmda,
	OelEvaluationContractorTypeOther,
}

func (e OelEvaluationContractorType) IsValid() bool {
	switch e {
	case OelEvaluationContractorTypeRmda, OelEvaluationContractorTypeOther:
		return true
	}
	return false
}

func (e OelEvaluationContractorType) String() string {
	return string(e)
}

func (e *OelEvaluationContractorType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelEvaluationContractorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelEvaluationContractorType", str)
	}
	return nil
}

func (e OelEvaluationContractorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelHelpdeskSupportType string

const (
	OelHelpdeskSupportTypeCbosc      OelHelpdeskSupportType = "CBOSC"
	OelHelpdeskSupportTypeContractor OelHelpdeskSupportType = "CONTRACTOR"
	OelHelpdeskSupportTypeOther      OelHelpdeskSupportType = "OTHER"
)

var AllOelHelpdeskSupportType = []OelHelpdeskSupportType{
	OelHelpdeskSupportTypeCbosc,
	OelHelpdeskSupportTypeContractor,
	OelHelpdeskSupportTypeOther,
}

func (e OelHelpdeskSupportType) IsValid() bool {
	switch e {
	case OelHelpdeskSupportTypeCbosc, OelHelpdeskSupportTypeContractor, OelHelpdeskSupportTypeOther:
		return true
	}
	return false
}

func (e OelHelpdeskSupportType) String() string {
	return string(e)
}

func (e *OelHelpdeskSupportType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelHelpdeskSupportType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelHelpdeskSupportType", str)
	}
	return nil
}

func (e OelHelpdeskSupportType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelLearningContractorType string

const (
	OelLearningContractorTypeRmada              OelLearningContractorType = "RMADA"
	OelLearningContractorTypeCrossModelContract OelLearningContractorType = "CROSS_MODEL_CONTRACT"
	OelLearningContractorTypeOther              OelLearningContractorType = "OTHER"
)

var AllOelLearningContractorType = []OelLearningContractorType{
	OelLearningContractorTypeRmada,
	OelLearningContractorTypeCrossModelContract,
	OelLearningContractorTypeOther,
}

func (e OelLearningContractorType) IsValid() bool {
	switch e {
	case OelLearningContractorTypeRmada, OelLearningContractorTypeCrossModelContract, OelLearningContractorTypeOther:
		return true
	}
	return false
}

func (e OelLearningContractorType) String() string {
	return string(e)
}

func (e *OelLearningContractorType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelLearningContractorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelLearningContractorType", str)
	}
	return nil
}

func (e OelLearningContractorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelManageAcoType string

const (
	OelManageAcoTypeAcoOs      OelManageAcoType = "ACO_OS"
	OelManageAcoTypeAcoUI      OelManageAcoType = "ACO_UI"
	OelManageAcoTypeInnovation OelManageAcoType = "INNOVATION"
	OelManageAcoTypeOther      OelManageAcoType = "OTHER"
)

var AllOelManageAcoType = []OelManageAcoType{
	OelManageAcoTypeAcoOs,
	OelManageAcoTypeAcoUI,
	OelManageAcoTypeInnovation,
	OelManageAcoTypeOther,
}

func (e OelManageAcoType) IsValid() bool {
	switch e {
	case OelManageAcoTypeAcoOs, OelManageAcoTypeAcoUI, OelManageAcoTypeInnovation, OelManageAcoTypeOther:
		return true
	}
	return false
}

func (e OelManageAcoType) String() string {
	return string(e)
}

func (e *OelManageAcoType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelManageAcoType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelManageAcoType", str)
	}
	return nil
}

func (e OelManageAcoType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelObtainDataType string

const (
	OelObtainDataTypeCcw   OelObtainDataType = "CCW"
	OelObtainDataTypeIDOs  OelObtainDataType = "IDOS"
	OelObtainDataTypeIsp   OelObtainDataType = "ISP"
	OelObtainDataTypeOther OelObtainDataType = "OTHER"
)

var AllOelObtainDataType = []OelObtainDataType{
	OelObtainDataTypeCcw,
	OelObtainDataTypeIDOs,
	OelObtainDataTypeIsp,
	OelObtainDataTypeOther,
}

func (e OelObtainDataType) IsValid() bool {
	switch e {
	case OelObtainDataTypeCcw, OelObtainDataTypeIDOs, OelObtainDataTypeIsp, OelObtainDataTypeOther:
		return true
	}
	return false
}

func (e OelObtainDataType) String() string {
	return string(e)
}

func (e *OelObtainDataType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelObtainDataType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelObtainDataType", str)
	}
	return nil
}

func (e OelObtainDataType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelParticipantCollaborationType string

const (
	OelParticipantCollaborationTypeConnect OelParticipantCollaborationType = "CONNECT"
	OelParticipantCollaborationTypeOther   OelParticipantCollaborationType = "OTHER"
)

var AllOelParticipantCollaborationType = []OelParticipantCollaborationType{
	OelParticipantCollaborationTypeConnect,
	OelParticipantCollaborationTypeOther,
}

func (e OelParticipantCollaborationType) IsValid() bool {
	switch e {
	case OelParticipantCollaborationTypeConnect, OelParticipantCollaborationTypeOther:
		return true
	}
	return false
}

func (e OelParticipantCollaborationType) String() string {
	return string(e)
}

func (e *OelParticipantCollaborationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelParticipantCollaborationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelParticipantCollaborationType", str)
	}
	return nil
}

func (e OelParticipantCollaborationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelPerformanceBenchmarkType string

const (
	OelPerformanceBenchmarkTypeIDR   OelPerformanceBenchmarkType = "IDR"
	OelPerformanceBenchmarkTypeCcw   OelPerformanceBenchmarkType = "CCW"
	OelPerformanceBenchmarkTypeOther OelPerformanceBenchmarkType = "OTHER"
)

var AllOelPerformanceBenchmarkType = []OelPerformanceBenchmarkType{
	OelPerformanceBenchmarkTypeIDR,
	OelPerformanceBenchmarkTypeCcw,
	OelPerformanceBenchmarkTypeOther,
}

func (e OelPerformanceBenchmarkType) IsValid() bool {
	switch e {
	case OelPerformanceBenchmarkTypeIDR, OelPerformanceBenchmarkTypeCcw, OelPerformanceBenchmarkTypeOther:
		return true
	}
	return false
}

func (e OelPerformanceBenchmarkType) String() string {
	return string(e)
}

func (e *OelPerformanceBenchmarkType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelPerformanceBenchmarkType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelPerformanceBenchmarkType", str)
	}
	return nil
}

func (e OelPerformanceBenchmarkType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelProcessAppealsType string

const (
	OelProcessAppealsTypeMedicareAppealSystem OelProcessAppealsType = "MEDICARE_APPEAL_SYSTEM"
	OelProcessAppealsTypeOther                OelProcessAppealsType = "OTHER"
)

var AllOelProcessAppealsType = []OelProcessAppealsType{
	OelProcessAppealsTypeMedicareAppealSystem,
	OelProcessAppealsTypeOther,
}

func (e OelProcessAppealsType) IsValid() bool {
	switch e {
	case OelProcessAppealsTypeMedicareAppealSystem, OelProcessAppealsTypeOther:
		return true
	}
	return false
}

func (e OelProcessAppealsType) String() string {
	return string(e)
}

func (e *OelProcessAppealsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelProcessAppealsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelProcessAppealsType", str)
	}
	return nil
}

func (e OelProcessAppealsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelQualityScoresType string

const (
	OelQualityScoresTypeExistingDataAndProcess OelQualityScoresType = "EXISTING_DATA_AND_PROCESS"
	OelQualityScoresTypeNewDataAndCmmiProcess  OelQualityScoresType = "NEW_DATA_AND_CMMI_PROCESS"
	OelQualityScoresTypeOther                  OelQualityScoresType = "OTHER"
	OelQualityScoresTypeNone                   OelQualityScoresType = "NONE"
)

var AllOelQualityScoresType = []OelQualityScoresType{
	OelQualityScoresTypeExistingDataAndProcess,
	OelQualityScoresTypeNewDataAndCmmiProcess,
	OelQualityScoresTypeOther,
	OelQualityScoresTypeNone,
}

func (e OelQualityScoresType) IsValid() bool {
	switch e {
	case OelQualityScoresTypeExistingDataAndProcess, OelQualityScoresTypeNewDataAndCmmiProcess, OelQualityScoresTypeOther, OelQualityScoresTypeNone:
		return true
	}
	return false
}

func (e OelQualityScoresType) String() string {
	return string(e)
}

func (e *OelQualityScoresType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelQualityScoresType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelQualityScoresType", str)
	}
	return nil
}

func (e OelQualityScoresType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OelSendReportsType string

const (
	OelSendReportsTypeIDOs          OelSendReportsType = "IDOS"
	OelSendReportsTypeRmada         OelSendReportsType = "RMADA"
	OelSendReportsTypeInternalStaff OelSendReportsType = "INTERNAL_STAFF"
	OelSendReportsTypeOther         OelSendReportsType = "OTHER"
)

var AllOelSendReportsType = []OelSendReportsType{
	OelSendReportsTypeIDOs,
	OelSendReportsTypeRmada,
	OelSendReportsTypeInternalStaff,
	OelSendReportsTypeOther,
}

func (e OelSendReportsType) IsValid() bool {
	switch e {
	case OelSendReportsTypeIDOs, OelSendReportsTypeRmada, OelSendReportsTypeInternalStaff, OelSendReportsTypeOther:
		return true
	}
	return false
}

func (e OelSendReportsType) String() string {
	return string(e)
}

func (e *OelSendReportsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OelSendReportsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OelSendReportsType", str)
	}
	return nil
}

func (e OelSendReportsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PInformFfsType string

const (
	PInformFfsTypeFfsCompetencyCenter PInformFfsType = "FFS_COMPETENCY_CENTER"
	PInformFfsTypeOther               PInformFfsType = "OTHER"
)

var AllPInformFfsType = []PInformFfsType{
	PInformFfsTypeFfsCompetencyCenter,
	PInformFfsTypeOther,
}

func (e PInformFfsType) IsValid() bool {
	switch e {
	case PInformFfsTypeFfsCompetencyCenter, PInformFfsTypeOther:
		return true
	}
	return false
}

func (e PInformFfsType) String() string {
	return string(e)
}

func (e *PInformFfsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PInformFfsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PInformFfsType", str)
	}
	return nil
}

func (e PInformFfsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PMakeClaimsPaymentsType string

const (
	PMakeClaimsPaymentsTypeSharedSystems PMakeClaimsPaymentsType = "SHARED_SYSTEMS"
	PMakeClaimsPaymentsTypeHiglas        PMakeClaimsPaymentsType = "HIGLAS"
	PMakeClaimsPaymentsTypeOther         PMakeClaimsPaymentsType = "OTHER"
)

var AllPMakeClaimsPaymentsType = []PMakeClaimsPaymentsType{
	PMakeClaimsPaymentsTypeSharedSystems,
	PMakeClaimsPaymentsTypeHiglas,
	PMakeClaimsPaymentsTypeOther,
}

func (e PMakeClaimsPaymentsType) IsValid() bool {
	switch e {
	case PMakeClaimsPaymentsTypeSharedSystems, PMakeClaimsPaymentsTypeHiglas, PMakeClaimsPaymentsTypeOther:
		return true
	}
	return false
}

func (e PMakeClaimsPaymentsType) String() string {
	return string(e)
}

func (e *PMakeClaimsPaymentsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PMakeClaimsPaymentsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PMakeClaimsPaymentsType", str)
	}
	return nil
}

func (e PMakeClaimsPaymentsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PNonClaimsBasedPaymentsType string

const (
	PNonClaimsBasedPaymentsTypeApps   PNonClaimsBasedPaymentsType = "APPS"
	PNonClaimsBasedPaymentsTypeHiglas PNonClaimsBasedPaymentsType = "HIGLAS"
	PNonClaimsBasedPaymentsTypeIPC    PNonClaimsBasedPaymentsType = "IPC"
	PNonClaimsBasedPaymentsTypeMac    PNonClaimsBasedPaymentsType = "MAC"
	PNonClaimsBasedPaymentsTypeOther  PNonClaimsBasedPaymentsType = "OTHER"
)

var AllPNonClaimsBasedPaymentsType = []PNonClaimsBasedPaymentsType{
	PNonClaimsBasedPaymentsTypeApps,
	PNonClaimsBasedPaymentsTypeHiglas,
	PNonClaimsBasedPaymentsTypeIPC,
	PNonClaimsBasedPaymentsTypeMac,
	PNonClaimsBasedPaymentsTypeOther,
}

func (e PNonClaimsBasedPaymentsType) IsValid() bool {
	switch e {
	case PNonClaimsBasedPaymentsTypeApps, PNonClaimsBasedPaymentsTypeHiglas, PNonClaimsBasedPaymentsTypeIPC, PNonClaimsBasedPaymentsTypeMac, PNonClaimsBasedPaymentsTypeOther:
		return true
	}
	return false
}

func (e PNonClaimsBasedPaymentsType) String() string {
	return string(e)
}

func (e *PNonClaimsBasedPaymentsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PNonClaimsBasedPaymentsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PNonClaimsBasedPaymentsType", str)
	}
	return nil
}

func (e PNonClaimsBasedPaymentsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PRecoverPaymentsType string

const (
	PRecoverPaymentsTypeApps  PRecoverPaymentsType = "APPS"
	PRecoverPaymentsTypeIPC   PRecoverPaymentsType = "IPC"
	PRecoverPaymentsTypeMac   PRecoverPaymentsType = "MAC"
	PRecoverPaymentsTypeOther PRecoverPaymentsType = "OTHER"
)

var AllPRecoverPaymentsType = []PRecoverPaymentsType{
	PRecoverPaymentsTypeApps,
	PRecoverPaymentsTypeIPC,
	PRecoverPaymentsTypeMac,
	PRecoverPaymentsTypeOther,
}

func (e PRecoverPaymentsType) IsValid() bool {
	switch e {
	case PRecoverPaymentsTypeApps, PRecoverPaymentsTypeIPC, PRecoverPaymentsTypeMac, PRecoverPaymentsTypeOther:
		return true
	}
	return false
}

func (e PRecoverPaymentsType) String() string {
	return string(e)
}

func (e *PRecoverPaymentsType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PRecoverPaymentsType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PRecoverPaymentsType", str)
	}
	return nil
}

func (e PRecoverPaymentsType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PSharedSavingsPlanType string

const (
	PSharedSavingsPlanTypeRmada PSharedSavingsPlanType = "RMADA"
	PSharedSavingsPlanTypeOther PSharedSavingsPlanType = "OTHER"
)

var AllPSharedSavingsPlanType = []PSharedSavingsPlanType{
	PSharedSavingsPlanTypeRmada,
	PSharedSavingsPlanTypeOther,
}

func (e PSharedSavingsPlanType) IsValid() bool {
	switch e {
	case PSharedSavingsPlanTypeRmada, PSharedSavingsPlanTypeOther:
		return true
	}
	return false
}

func (e PSharedSavingsPlanType) String() string {
	return string(e)
}

func (e *PSharedSavingsPlanType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PSharedSavingsPlanType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PSharedSavingsPlanType", str)
	}
	return nil
}

func (e PSharedSavingsPlanType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PpAppSupportContractorType string

const (
	PpAppSupportContractorTypeRmda  PpAppSupportContractorType = "RMDA"
	PpAppSupportContractorTypeOther PpAppSupportContractorType = "OTHER"
)

var AllPpAppSupportContractorType = []PpAppSupportContractorType{
	PpAppSupportContractorTypeRmda,
	PpAppSupportContractorTypeOther,
}

func (e PpAppSupportContractorType) IsValid() bool {
	switch e {
	case PpAppSupportContractorTypeRmda, PpAppSupportContractorTypeOther:
		return true
	}
	return false
}

func (e PpAppSupportContractorType) String() string {
	return string(e)
}

func (e *PpAppSupportContractorType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PpAppSupportContractorType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PpAppSupportContractorType", str)
	}
	return nil
}

func (e PpAppSupportContractorType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PpCollectScoreReviewType string

const (
	PpCollectScoreReviewTypeRfa            PpCollectScoreReviewType = "RFA"
	PpCollectScoreReviewTypeArs            PpCollectScoreReviewType = "ARS"
	PpCollectScoreReviewTypeGrantSolutions PpCollectScoreReviewType = "GRANT_SOLUTIONS"
	PpCollectScoreReviewTypeOther          PpCollectScoreReviewType = "OTHER"
)

var AllPpCollectScoreReviewType = []PpCollectScoreReviewType{
	PpCollectScoreReviewTypeRfa,
	PpCollectScoreReviewTypeArs,
	PpCollectScoreReviewTypeGrantSolutions,
	PpCollectScoreReviewTypeOther,
}

func (e PpCollectScoreReviewType) IsValid() bool {
	switch e {
	case PpCollectScoreReviewTypeRfa, PpCollectScoreReviewTypeArs, PpCollectScoreReviewTypeGrantSolutions, PpCollectScoreReviewTypeOther:
		return true
	}
	return false
}

func (e PpCollectScoreReviewType) String() string {
	return string(e)
}

func (e *PpCollectScoreReviewType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PpCollectScoreReviewType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PpCollectScoreReviewType", str)
	}
	return nil
}

func (e PpCollectScoreReviewType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PpCommunicateWithParticipantType string

const (
	PpCommunicateWithParticipantTypeOutlookMailbox   PpCommunicateWithParticipantType = "OUTLOOK_MAILBOX"
	PpCommunicateWithParticipantTypeGovDelivery      PpCommunicateWithParticipantType = "GOV_DELIVERY"
	PpCommunicateWithParticipantTypeSalesforcePortal PpCommunicateWithParticipantType = "SALESFORCE_PORTAL"
	PpCommunicateWithParticipantTypeOther            PpCommunicateWithParticipantType = "OTHER"
)

var AllPpCommunicateWithParticipantType = []PpCommunicateWithParticipantType{
	PpCommunicateWithParticipantTypeOutlookMailbox,
	PpCommunicateWithParticipantTypeGovDelivery,
	PpCommunicateWithParticipantTypeSalesforcePortal,
	PpCommunicateWithParticipantTypeOther,
}

func (e PpCommunicateWithParticipantType) IsValid() bool {
	switch e {
	case PpCommunicateWithParticipantTypeOutlookMailbox, PpCommunicateWithParticipantTypeGovDelivery, PpCommunicateWithParticipantTypeSalesforcePortal, PpCommunicateWithParticipantTypeOther:
		return true
	}
	return false
}

func (e PpCommunicateWithParticipantType) String() string {
	return string(e)
}

func (e *PpCommunicateWithParticipantType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PpCommunicateWithParticipantType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PpCommunicateWithParticipantType", str)
	}
	return nil
}

func (e PpCommunicateWithParticipantType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PpManageProviderOverlapType string

const (
	PpManageProviderOverlapTypeMdm   PpManageProviderOverlapType = "MDM"
	PpManageProviderOverlapTypeOther PpManageProviderOverlapType = "OTHER"
	PpManageProviderOverlapTypeNa    PpManageProviderOverlapType = "NA"
)

var AllPpManageProviderOverlapType = []PpManageProviderOverlapType{
	PpManageProviderOverlapTypeMdm,
	PpManageProviderOverlapTypeOther,
	PpManageProviderOverlapTypeNa,
}

func (e PpManageProviderOverlapType) IsValid() bool {
	switch e {
	case PpManageProviderOverlapTypeMdm, PpManageProviderOverlapTypeOther, PpManageProviderOverlapTypeNa:
		return true
	}
	return false
}

func (e PpManageProviderOverlapType) String() string {
	return string(e)
}

func (e *PpManageProviderOverlapType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PpManageProviderOverlapType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PpManageProviderOverlapType", str)
	}
	return nil
}

func (e PpManageProviderOverlapType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PpToAdvertiseType string

const (
	PpToAdvertiseTypeSalesforce     PpToAdvertiseType = "SALESFORCE"
	PpToAdvertiseTypeGrantSolutions PpToAdvertiseType = "GRANT_SOLUTIONS"
	PpToAdvertiseTypeOther          PpToAdvertiseType = "OTHER"
)

var AllPpToAdvertiseType = []PpToAdvertiseType{
	PpToAdvertiseTypeSalesforce,
	PpToAdvertiseTypeGrantSolutions,
	PpToAdvertiseTypeOther,
}

func (e PpToAdvertiseType) IsValid() bool {
	switch e {
	case PpToAdvertiseTypeSalesforce, PpToAdvertiseTypeGrantSolutions, PpToAdvertiseTypeOther:
		return true
	}
	return false
}

func (e PpToAdvertiseType) String() string {
	return string(e)
}

func (e *PpToAdvertiseType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PpToAdvertiseType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PpToAdvertiseType", str)
	}
	return nil
}

func (e PpToAdvertiseType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A user role associated with a job code
type Role string

const (
	// A basic MINT user
	RoleMintBaseUser Role = "MINT_BASE_USER"
	// A MINT admin user
	RoleMintAdminUser Role = "MINT_ADMIN_USER"
)

var AllRole = []Role{
	RoleMintBaseUser,
	RoleMintAdminUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleMintBaseUser, RoleMintAdminUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
