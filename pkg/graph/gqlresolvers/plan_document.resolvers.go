package gqlresolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/cmsgov/mint-app/pkg/appcontext"
	"github.com/cmsgov/mint-app/pkg/graph/generated"
	"github.com/cmsgov/mint-app/pkg/graph/resolvers"
	"github.com/cmsgov/mint-app/pkg/models"
)

// OtherType is the resolver for the otherType field.
func (r *planDocumentResolver) OtherType(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	return obj.OtherTypeDescription.Ptr(), nil
}

// OptionalNotes is the resolver for the optionalNotes field.
func (r *planDocumentResolver) OptionalNotes(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	return obj.OptionalNotes.Ptr(), nil
}

// DownloadURL is the resolver for the downloadUrl field.
func (r *planDocumentResolver) DownloadURL(ctx context.Context, obj *models.PlanDocument) (*string, error) {
	url, err := r.s3Client.NewGetPresignedURL(obj.FileKey)
	if err != nil {
		return nil, err
	}

	return url, nil
}

// NumLinkedSolutions is the resolver for the numLinkedSolutions field.
func (r *planDocumentResolver) NumLinkedSolutions(ctx context.Context, obj *models.PlanDocument) (int, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return resolvers.PlanDocumentNumLinkedSolutions(logger, principal, r.store, obj.ID)
}

// PlanDocument returns generated.PlanDocumentResolver implementation.
func (r *Resolver) PlanDocument() generated.PlanDocumentResolver { return &planDocumentResolver{r} }

type planDocumentResolver struct{ *Resolver }
