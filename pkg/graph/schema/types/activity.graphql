"""
ActivityType represents the possible activities that happen in application that might result in a notification
"""
enum ActivityType {
  DAILY_DIGEST_COMPLETE
  ADDED_AS_COLLABORATOR
  TAGGED_IN_DISCUSSION
  TAGGED_IN_DISCUSSION_REPLY
  NEW_DISCUSSION_REPLY
  MODEL_PLAN_SHARED
  NEW_MODEL_PLAN
  DATES_CHANGED
  DATA_EXCHANGE_APPROACH_COMPLETED
}

enum DateChangeFieldType {
  COMPLETE_ICIP
  CLEARANCE
  ANNOUNCED
  APPLICATIONS
  PERFORMANCE_PERIOD
  WRAP_UP_ENDS
}

"""
ActivityMetaData is a type that represents all the data that can be captured in an Activity
"""
union ActivityMetaData = TaggedInPlanDiscussionActivityMeta  | TaggedInDiscussionReplyActivityMeta | DailyDigestCompleteActivityMeta | NewDiscussionRepliedActivityMeta | AddedAsCollaboratorMeta | ModelPlanSharedActivityMeta | NewModelPlanActivityMeta | DatesChangedActivityMeta | DataExchangeApproachCompletedActivityMeta

type AddedAsCollaboratorMeta {
  version: Int!
  type: ActivityType!
  modelPlanID: UUID!
  modelPlan: ModelPlan!
  collaboratorID: UUID!
  collaborator: PlanCollaborator!
}

type TaggedInPlanDiscussionActivityMeta {
  version: Int!
  type: ActivityType!
  modelPlanID: UUID!
  modelPlan: ModelPlan!
  discussionID: UUID!
  discussion: PlanDiscussion!
  content: String!
}

type TaggedInDiscussionReplyActivityMeta {
  version: Int!
  type: ActivityType!
  modelPlanID: UUID!
  modelPlan: ModelPlan!
  discussionID: UUID!
  discussion: PlanDiscussion!
  replyID: UUID!
  reply: DiscussionReply!
  content: String!
}

type ModelPlanSharedActivityMeta {
  version: Int!
  type: ActivityType!
  modelPlanID: UUID!
  modelPlan: ModelPlan!
  optionalMessage: String
}

type NewDiscussionRepliedActivityMeta {
  version: Int!
  type: ActivityType!
  modelPlanID: UUID!
  modelPlan: ModelPlan!
  discussionID: UUID!
  discussion: PlanDiscussion!
  replyID: UUID!
  reply: DiscussionReply!
  content: String!
}

type DailyDigestCompleteActivityMeta {
  version: Int!
  type: ActivityType!
  modelPlanIDs: [UUID!]!
  analyzedAudits: [AnalyzedAudit!]!
  userID: UUID!
  date:  Time!
}

type NewModelPlanActivityMeta {
  version: Int!
  type: ActivityType!
  modelPlanID: UUID!
  modelPlan: ModelPlan!
}

type DateChange {
  isChanged: Boolean!
  field: DateChangeFieldType!
  isRange: Boolean!
  oldDate: Time
  newDate: Time
  oldRangeStart: Time
  oldRangeEnd: Time
  newRangeStart: Time
  newRangeEnd: Time
}

type DatesChangedActivityMeta {
  version: Int!
  type: ActivityType!
  modelPlanID: UUID!
  modelPlan: ModelPlan!
  dateChanges: [DateChange!]!
}

# TODO: Change from this dummy type to the actual type when it is defined
type DataExchangeApproach {
  id: UUID!
  name: String!
  description: String
  isComplete: Boolean!
  modelPlanID: UUID!
  modelPlan: ModelPlan!
  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

type DataExchangeApproachCompletedActivityMeta {
  version: Int!
  type: ActivityType!
  dataExchangeApproach: DataExchangeApproach!
  markedCompleteBy: UUID!
  markedCompleteByUserAccount: UserAccount!
}

"""
Activity represents an event that happened in the application that could result in a notification.
"""
type Activity {
  id: UUID!
	actorID: UUID!
  actorUserAccount: UserAccount!
	entityID: UUID!
	activityType: ActivityType!
  metaData: ActivityMetaData!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

}
