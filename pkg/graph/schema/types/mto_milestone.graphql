
# TODO Determine what these should actually be with ZoÃ« & Natalie. These could change
enum MTOMilestoneStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}


# MTOMilestone represents a Milestone that has been added to a Model Plan's MTO
type MTOMilestone {
  # DB Fields
  id: UUID!
  name: String! # If sourced from a Common Milestone, this will resolve from the common milestone table (you can't edit this for common milestones!)
  key: MTOCommonMilestoneKey
  """
  Note: an mtoCategoryID can be null in the database. When that is the case, it will be nested under two uncategorized Categories
  This means that `MTOMilestone.mtoCategoryID` does _not_ always equal `MTOMilestone.Category.ID`
  """
  mtoCategoryID: UUID
  facilitatedBy: MTOFacilitator
  needBy: Time
  status: MTOMilestoneStatus!
  riskIndicator: MTORiskIndicator!
  isDraft: Boolean!

  #Meta Data
  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

  # Custom Resolvers
  addedFromMilestoneLibrary: Boolean! # Only true when commonMilestone && commonMilestone
  commonMilestone: MTOCommonMilestone
  solutions: [MTOSolution!]!
  # Category: {
  #   mtoCategoryID: UUID
  #   subcategoryID: UUID
  #   Category: MTOCategory
  #   subCategory: MTOSubcategory
  # }
  # TODO (mto) do we need to resolve category? Should we need to resolve it here? Also,
  # category: UNION MTOCategory | MTOSubcategory ?
  category: MTOCategory!
  subCategory: MTOSubcategory!
}

input MTOMilestoneChanges @goModel(model: "map[string]interface{}") {
  name: String # If sourced from a Common Milestone, this will resolve from the common milestone table (you can't edit this for common milestones!)
  mtoCategoryID: UUID
  facilitatedBy: MTOFacilitator
  needBy: Time
  status: MTOMilestoneStatus
  riskIndicator: MTORiskIndicator
  isDraft: Boolean
}

extend type Mutation {
  createMTOMilestoneCustom(modelPlanID: UUID!, name: String!, mtoCategoryID: UUID): MTOMilestone!
  @hasRole(role: MINT_USER)
  createMTOMilestoneCommon(modelPlanID: UUID!, commonMilestoneKey: MTOCommonMilestoneKey!, commonSolutions: [MTOCommonSolutionKey!]): MTOMilestone!
  @hasRole(role: MINT_USER)
  updateMTOMilestone(id: UUID!, changes: MTOMilestoneChanges!): MTOMilestone!
  @hasRole(role: MINT_USER)
  #TODO (mto) will we need any other mutations here? Can we ever delete?
}
