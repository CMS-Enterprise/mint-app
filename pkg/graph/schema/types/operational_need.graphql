type OperationalNeed {
  id: UUID!
  modelPlanID: UUID!

  needed: Boolean # if null, it has not been answered
  solutions(includeNotNeeded: Boolean! = false): [OperationalSolution!]!

  key: OperationalNeedKey
  name: String
  nameOther: String
  section: TaskListSection

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
  lastModifiedDts: Time
}

extend type Query {
  operationalNeed(id: UUID!): OperationalNeed!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
}

extend type Mutation {
  addOrUpdateCustomOperationalNeed(modelPlanID: UUID!, customNeedType: String! needed: Boolean!): OperationalNeed!
  @hasRole(role: MINT_USER)

  updateCustomOperationalNeedByID(id: UUID!, customNeedType: String needed: Boolean!): OperationalNeed!
  @hasRole(role: MINT_USER)
}