# ModelsToOperationMatrix Notes:
# - There's purposefully no `Milestones` query right now, since there's currently no need to query milestones outside the scope of a Category
type ModelsToOperationMatrix {
  categories: [MTOCategory!]! # Categories is at the top level because you _can_ have empty categories
  commonMilestones: [MTOCommonMilestone!]!
  commonSolutions: [MTOCommonSolution!]!
  milestones: [MTOMilestone!]!
  solutions: [MTOSolution!]! # Need to support solutions that _don't_ have milestones
  status: MTOStatus!
  recentEdit: RecentModification #Note, this data type could change. We might take an approach to return the most recent translated audit, which would provide this information, plus much more
  milestonesWithNoLinkedSolutions: [MTOMilestone!]!

  info: MTOInfo!

}


type RecentModification {
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

enum MTOStatus {
  READY
  IN_PROGRESS
  READY_FOR_REVIEW #Note, this is not yet returnable
}

enum MTOFacilitator {
  MODEL_TEAM
  MODEL_LEAD
  IT_LEAD
  SOLUTION_ARCHITECT
  IT_SYSTEM_TEAM_OR_PRODUCT_OWNER
  PARTICIPANTS
  APPLICATION_SUPPORT_CONTRACTOR
  IMPLEMENTATION_CONTRACTOR
  EVALUATION_CONTRACTOR
  QUALITY_MEASURES_DEVELOPMENT_CONTRACTOR
  LEARNING_CONTRACTOR
  MONITORING_CONTRACTOR
  CONTRACTING_OFFICERS_REPRESENTATIVE
  LEARNING_AND_DIFFUSION_GROUP
  RESEARCH_AND_RAPID_CYCLE_EVALUATION_GROUP
  OTHER
}

enum MTORiskIndicator {
  ON_TRACK
  OFF_TRACK
  AT_RISK
}

# TODO (mto) should this live in the mto info.graphql file?
extend type Mutation {
  markMTOReadyForReview(modelPlanID: UUID!, readyForReview: Boolean!): MTOInfo!
  @hasRole(role: MINT_USER)
}