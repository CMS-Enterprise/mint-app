enum UserNotificationPreferenceFlag {
  IN_APP,
  EMAIL
}

enum DatesChangedNotificationType {
  ALL_MODELS,
  FOLLOWED_MODELS,
  MY_MODELS,
}


"""
UserNotificationPreferences represents a users preferences about what type and where to receive a notification
"""
type UserNotificationPreferences {
  id: UUID!
	userID: UUID!

  dailyDigestComplete: [UserNotificationPreferenceFlag!]!

  addedAsCollaborator: [UserNotificationPreferenceFlag!]!

  taggedInDiscussion: [UserNotificationPreferenceFlag!]!

  taggedInDiscussionReply: [UserNotificationPreferenceFlag!]!

  newDiscussionReply: [UserNotificationPreferenceFlag!]!

  modelPlanShared: [UserNotificationPreferenceFlag!]!

  newModelPlan: [UserNotificationPreferenceFlag!]!

  datesChanged: [UserNotificationPreferenceFlag!]!
  datesChangedNotificationType: DatesChangedNotificationType

  dataExchangeApproachCompleted: [UserNotificationPreferenceFlag!]!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}


"""
UserNotificationPreferencesChanges represents the ways that a UserNotifications Preferences object can be updated
"""
input UserNotificationPreferencesChanges @goModel(model: "map[string]interface{}")  {

  dailyDigestComplete: [UserNotificationPreferenceFlag!]

  addedAsCollaborator: [UserNotificationPreferenceFlag!]

  taggedInDiscussion: [UserNotificationPreferenceFlag!]

  taggedInDiscussionReply: [UserNotificationPreferenceFlag!]

  newDiscussionReply: [UserNotificationPreferenceFlag!]

  modelPlanShared: [UserNotificationPreferenceFlag!]

  newModelPlan: [UserNotificationPreferenceFlag!]

  datesChanged: [UserNotificationPreferenceFlag!]
  datesChangedNotificationType: DatesChangedNotificationType

  dataExchangeApproachCompleted: [UserNotificationPreferenceFlag!]
}

extend type Mutation {

"""
Sets the notification preferences of a user.
"""
updateUserNotificationPreferences(changes: UserNotificationPreferencesChanges!): UserNotificationPreferences!
}