
type MTOCategory {
  # DB Fields
  id: UUID!
  name: String!
  position: Int!


  # Custom Resolvers
  isUncategorized: Boolean!
  subCategories: [MTOSubcategory!]!
}

type MTOSubcategory {
  # DB Fields
  id: UUID!
  name: String!
  position: Int!

  # Custom Resolvers
  isUncategorized: Boolean!
  milestones: [MTOMilestone!]!
}

"""
MTOCategories combines the concept of Category and Subcategory
This allows it to be fetched mor conveniently in one resolver
"""
type MTOCategories {
  category: MTOCategory!
  subCategory: MTOSubcategory!
}

extend type Mutation {
  """
  Allows you to create an MTOCategory or Subcategory if you provide a parent ID. 
  Note, the parent must belong to the same model plan, or this will return an error
  """
  createMTOCategory(modelPlanID: UUID!, name: String!, parentID: UUID): MTOCategory!
  @hasRole(role: MINT_USER)
  """
  Allows you to rename an MTO category. Notably, name is the only field that can be updated.
  You cannot have a duplicate name per model plan and parent. If the change makes a conflict, this will error.
  """
  renameMTOCategory(id: UUID!, name: String!): MTOCategory!
  @hasRole(role: MINT_USER)

  """
  Allows you to change the position and parent of an MTO category. Other categories will automatically
  have their positions changed to adjust to the new position of the new category.
  If only the parent is changed, the category will be placed as the last category in order for the group of subcategories
  Note, a subcategory can't become a subcategory and vice versa
  """
  reorderMTOCategory(id: UUID!, newOrder: Int, parentID: UUID): MTOCategory!
  @hasRole(role: MINT_USER)
}