# Mirror of DB enum MTOTemplateKey
enum MTOTemplateKey {
  ACO_AND_KIDNEY_MODELS
  EPISODE_PRIMARY_CARE_AND_NON_ACO_MODELS
  MEDICARE_ADVANTAGE_AND_DRUG_MODELS
  STANDARD_CATEGORIES
  STATE_AND_LOCAL_MODELS
}

type MtoTemplate {
  id: UUID!
  key: MTOTemplateKey!
  name: String!
  description: String

  categories(parentID: UUID): [MtoTemplateCategory!]!
  milestones(categoryID: UUID): [MtoTemplateMilestone!]!
  solutions: [MtoTemplateSolution!]!

  # Convenience count fields
  categoryCount: Int!
  milestoneCount: Int!
  solutionCount: Int!

  createdBy: UUID!
  createdDts: Time!
  modifiedBy: UUID
  modifiedDts: Time
}

type MtoTemplateCategory {
  id: UUID!
  templateID: UUID!
  name: String!
  parentID: UUID
  order: Int!

  createdBy: UUID!
  createdDts: Time!
  modifiedBy: UUID
  modifiedDts: Time
}

type MtoTemplateMilestone {
  id: UUID!
  templateID: UUID!
  mtoCommonMilestoneKey: String!
  mtoTemplateCategoryID: UUID

  createdBy: UUID!
  createdDts: Time!
  modifiedBy: UUID
  modifiedDts: Time
}

type MtoTemplateSolution {
  id: UUID!
  templateID: UUID!
  mtoCommonSolutionID: UUID!

  createdBy: UUID!
  createdDts: Time!
  modifiedBy: UUID
  modifiedDts: Time
}

type ApplyTemplateResult {
  modelPlanID: UUID!
  templateID: UUID!
  categoriesAdded: Int!
  milestonesAdded: Int!
  solutionsAdded: Int!
  warnings: [String!] # Non-blocking messages returned when applying a template.
}

extend type Query {
  # List all templates (optionally filter by keys)
  mtoTemplates(keys: [MTOTemplateKey!]): [MtoTemplate!]!

  # Get a single template by id or key
  mtoTemplate(id: UUID, key: MTOTemplateKey): MtoTemplate
}

extend type Mutation {
  # Apply a template to a specific MTO (matrix)
  applyTemplateToMto(
    modelPlanID: UUID!
    templateID: UUID!
  ): ApplyTemplateResult!
}
