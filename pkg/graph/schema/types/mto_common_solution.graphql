enum MTOCommonSolutionKey {
  INNOVATION
  ACO_OS
  APPS
  CDX
  CCW
  CMS_BOX
  CMS_QUALTRICS
  CBOSC
  CPI_VETTING
  EFT
  EDFR
  GOVDELIVERY
  GS
  HDR
  HPMS
  HIGLAS
  IPC
  IDR
  LDG
  LV
  MDM_POR
  MARX
  OUTLOOK_MAILBOX
  QV
  RMADA
  ARS
  CONNECT
  LOI
  POST_PORTAL
  RFA
  SHARED_SYSTEMS
  BCDA
  ISP
  MIDS
  MDM_NCBP
  MODEL_SPACE
  CDAC
}

enum MTOSolutionType {
  IT_SYSTEM
  CONTRACTOR
  CROSS_CUTTING_GROUP
  OTHER
}
enum MTOCommonSolutionSubject {
  APPLICATIONS_AND_PARTICIPANT_INTERACTION_ACO_AND_KIDNEY_MODELS
  APPLICATIONS_AND_PARTICIPANT_INTERACTION_NON_ACO_MODELS
  MEDICARE_FEE_FOR_SERVICE
  CONTRACT_VEHICLES
  LEARNING
  QUALITY
  COMMUNICATION_TOOLS_AND_HELP_DESK
  MEDICARE_ADVANTAGE_AND_PART_D
  PAYMENTS_AND_FINANCIALS
  DATA
  LEGAL
}

type MTOCommonSolution {
  #DB Fields
  name: String!
  key: MTOCommonSolutionKey!
  type: MTOSolutionType! 
  subjects: [MTOCommonSolutionSubject!]!
  filterView: ModelViewFilter


  #Custom Resolvers
  """
  Has this common solution been added to the MTO for a model plan? It is only evaluated when evaluated at the parent level, in the context of a model plan
  """
  isAdded: Boolean!
  contactInformation: MTOCommonSolutionContactInformation!

}

extend type Query {
  mtoCommonSolutions: [MTOCommonSolution!]!
  @hasRole(role: MINT_USER)
}

input CreateMTOCommonSolutionContactInput {
  key: MTOCommonSolutionKey!
  userAccountID: UUID!
  isTeam: Boolean!
  role: String
  isPrimary: Boolean!
  createdBy: UUID!
}

input UpdateMTOCommonSolutionContactInput {
  id: UUID!
  key: MTOCommonSolutionKey
  userAccountID: UUID
  isTeam: Boolean
  role: String
  isPrimary: Boolean
  modifiedBy: UUID
}

input CreateMTOCommonSolutionPrimaryContactInput {
  key: MTOCommonSolutionKey!
  userAccountID: UUID!
  isTeam: Boolean!
  role: String
  isPrimary: Boolean!
  createdBy: UUID!
}

input UpdateMTOCommonSolutionPrimaryContactInput {
  id: UUID!
  key: MTOCommonSolutionKey
  userAccountID: UUID
  isTeam: Boolean
  role: String
  isPrimary: Boolean
  modifiedBy: UUID
}

input RemoveMTOCommonSolutionContactInput {
  id: UUID!
}

input CreateMTOCommonSolutionContractorInput {
  key: MTOCommonSolutionKey!
  contractorTitle: String
  contractorName: String!
  createdBy: UUID!
}

input UpdateMTOCommonSolutionContractorInput {
  id: UUID!
  contractorTitle: String
  contractorName: String
  modifiedBy: UUID
}

input RemoveMTOCommonSolutionContractorInput {
  id: UUID!
}

extend type Mutation {
  # Points of Contact
  createMTOCommonSolutionContact(input: CreateMTOCommonSolutionContactInput!): MTOCommonSolutionContact!
    @hasRole(role: MINT_ASSESSMENT)
  updateMTOCommonSolutionContact(input: UpdateMTOCommonSolutionContactInput!): MTOCommonSolutionContact!
    @hasRole(role: MINT_ASSESSMENT)
  removeMTOCommonSolutionContact(input: RemoveMTOCommonSolutionContactInput!): Boolean!
    @hasRole(role: MINT_ASSESSMENT)

  # Primary Contact
  createMTOCommonSolutionPrimaryContact(input: CreateMTOCommonSolutionPrimaryContactInput!): MTOCommonSolutionContact!
    @hasRole(role: MINT_ASSESSMENT)
  updateMTOCommonSolutionPrimaryContact(input: UpdateMTOCommonSolutionPrimaryContactInput!): MTOCommonSolutionContact!
    @hasRole(role: MINT_ASSESSMENT)

  # Contractors
  createMTOCommonSolutionContractor(input: CreateMTOCommonSolutionContractorInput!): MTOCommonSolutionContractor!
    @hasRole(role: MINT_ASSESSMENT)
  updateMTOCommonSolutionContractor(input: UpdateMTOCommonSolutionContractorInput!): MTOCommonSolutionContractor!
    @hasRole(role: MINT_ASSESSMENT)
  removeMTOCommonSolutionContractor(input: RemoveMTOCommonSolutionContractorInput!): Boolean!
    @hasRole(role: MINT_ASSESSMENT)
}