"""
The current user's Launch Darkly key
"""
type LaunchDarklySettings {
  userKey: String!
  signedHash: String!
}

type OperationalNeed {
    id: UUID!
    modelPlanID: UUID!

    needed: Boolean # if null, it has not been answered
    solutions(includeNotNeeded: Boolean! = false): [OperationalSolution!]!

    key: OperationalNeedKey
    name: String
    nameOther: String
    section: TaskListSection

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}

type PossibleOperationalNeed {
    id: Int!
    possibleSolutions: [PossibleOperationalSolution!]!
    name: String!
    key: OperationalNeedKey!
    section: TaskListSection

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}
type PossibleOperationalSolution {
    id: Int!
    name: String!
    key: OperationalSolutionKey!
    treatAsOther: Boolean!
    pointsOfContact: [PossibleOperationalSolutionContact!]!
    filterView: ModelViewFilter

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}

"""
PossibleOperationalSolutionContact represents a contact for a possible operational solution
"""
type PossibleOperationalSolutionContact {
  id: UUID!
  possibleOperationalSolutionID: Int!

  name: String!
  email: String!
  isTeam: Boolean!
  role: String


  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

"""
PlanCollaborator represents a collaborator on a plan
"""
type PlanCollaborator {
  id: UUID!
  modelPlanID: UUID!
  userID: UUID!
  userAccount: UserAccount!
  teamRoles: [TeamRole!]!
  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}
"""
ExistingModel represents a model that already exists outside of the scope of MINT
"""
type ExistingModel {
  id: Int
  modelName: String!
  stage: String!
  numberOfParticipants: String
  category: String
  authority: String
  description: String
  numberOfBeneficiariesImpacted: Int
  numberOfPhysiciansImpacted: Int
  dateBegan: Time
  dateEnded: Time
  states: String
  keywords: String
  url: String
  displayModelSummary: Boolean

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}
"""
LinkedExistingModel is a union type that returns either an Existing Model, or a Model plan from the database
"""
union LinkedExistingModel =  ExistingModel | ModelPlan


type ExistingModelLinks {
  links: [ExistingModelLink!]!
  fieldName: ExisitingModelLinkFieldType!
  modelPlanID: UUID!
  names: [String!]!
}

type ExistingModelLink {
  id: UUID
  modelPlanID: UUID!
  existingModelID: Int
  currentModelPlanID: UUID
  fieldName: ExisitingModelLinkFieldType!
  model: LinkedExistingModel!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

type TaskListSectionLockStatusChanged {
  changeType: ChangeType!
  lockStatus: TaskListSectionLockStatus!
  actionType: ActionType!
}

type TaskListSectionLockStatus {
  modelPlanID: UUID!
  section: TaskListSection!
  lockedByUserAccount: UserAccount!
  isAssessment: Boolean!
}

"""
PlanCollaboratorCreateInput represents the data required to create a collaborator on a plan
"""
input PlanCollaboratorCreateInput {
  modelPlanID: UUID!
  userName: String!
  teamRoles: [TeamRole!]!
}

"""
PlanDocument represents a document on a plan
"""
type PlanDocument {
  id: UUID!
  modelPlanID: UUID!

  """
  If isLink = true, then this is a URL to a linked document, not an uploaded document
  """
  isLink: Boolean!
  """
  URL is the link that must be provided if this is a link instead of an uploaded document
  """
  url: String



  fileType: String!
  bucket: String!
  fileKey: String!
  virusScanned: Boolean!
  virusClean: Boolean!
  restricted: Boolean!
  fileName: String!
  fileSize: Int!
  documentType: DocumentType!
  otherType: String
  optionalNotes: String
  downloadUrl: String
  deletedAt: Time
  numLinkedSolutions: Int!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}


"""
PlanDocumentInput
"""
input PlanDocumentInput {
  modelPlanID: UUID!
  fileData: Upload!
  documentType: DocumentType!
  restricted: Boolean!
  otherTypeDescription: String
  optionalNotes: String
}

"""
PlanDocumentLinkInput
"""
input PlanDocumentLinkInput {
  modelPlanID: UUID!
  url: String!
  name: String!
  documentType: DocumentType!
  restricted: Boolean!
  otherTypeDescription: String
  optionalNotes: String
}

"""
Represents a person response from the Okta API
"""
type UserInfo {
  firstName: String!
  lastName: String!
  displayName: String!
  email: String!
  username: String!
}


"""
TaggedEntity is the actual object represented by a tag in the data base.
"""
union TaggedEntity =  UserAccount | PossibleOperationalSolution

"""
TaggedContent represents content that has a tag in it. It is composed of the raw tag text, as well as the array of possible tags
"""
type TaggedContent {
  """
  RawContent is HTML. It is sanitized on the backend
  """
  rawContent: String!
  tags: [Tag!]!
}

"""
Tag represents an entity tagged in the database
"""
type Tag {
  id: UUID!
  tagType: TagType!
  taggedField: String!
  taggedContentTable: String!
  taggedContentID: UUID!
  entityUUID: UUID
  entityIntID: Int

  entity: TaggedEntity

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

enum TagType {
    USER_ACCOUNT
    POSSIBLE_SOLUTION
}

"""
PlanDiscussion represents plan discussion
"""
type PlanDiscussion  {
	id: UUID!
	modelPlanID: UUID!
	content: TaggedContent
  userRole: DiscussionUserRole
  userRoleDescription: String
  replies: [DiscussionReply!]!
  isAssessment: Boolean!


  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

"""
PlanDiscussionCreateInput represents the necessary fields to create a plan discussion
"""
input PlanDiscussionCreateInput {
  modelPlanID: UUID!
  content: TaggedHTML!
  userRole: DiscussionUserRole
  userRoleDescription: String
}


"""
DiscussionReply represents a discussion reply
"""
type DiscussionReply  {
	id: UUID!
	discussionID: UUID!
	content: TaggedContent
  userRole: DiscussionUserRole
  userRoleDescription: String
  isAssessment: Boolean!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

"""
DiscussionReplyCreateInput represents the necessary fields to create a discussion reply
"""
input DiscussionReplyCreateInput {
  discussionID: UUID!
  content: TaggedHTML!
  userRole: DiscussionUserRole
  userRoleDescription: String
}

"""
Plan Beneficiaries represents the the beneficiaries section of the task list
"""

type PlanBeneficiaries {
  id: UUID!
  modelPlanID: UUID!
  #Page 1
  beneficiaries: [BeneficiariesType!]!
  beneficiariesOther: String
  beneficiariesNote: String
  diseaseSpecificGroup: String
  treatDualElligibleDifferent: TriStateAnswer
  treatDualElligibleDifferentHow: String
  treatDualElligibleDifferentNote: String
  excludeCertainCharacteristics: TriStateAnswer
  excludeCertainCharacteristicsCriteria: String
  excludeCertainCharacteristicsNote: String
  #Page 2
  numberPeopleImpacted: Int
  estimateConfidence: ConfidenceType
  confidenceNote: String
  beneficiarySelectionMethod: [SelectionMethodType!]!
  beneficiarySelectionOther: String
  beneficiarySelectionNote: String
  #Page 3
  beneficiarySelectionFrequency: [FrequencyType!]!
  beneficiarySelectionFrequencyContinually: String
  beneficiarySelectionFrequencyOther: String
  beneficiarySelectionFrequencyNote: String
  beneficiaryRemovalFrequency: [FrequencyType!]!
  beneficiaryRemovalFrequencyContinually: String
  beneficiaryRemovalFrequencyOther: String
  beneficiaryRemovalFrequencyNote: String
  beneficiaryOverlap: OverlapType
  beneficiaryOverlapNote: String
  precedenceRules: [YesNoType!]!
  precedenceRulesYes: String
  precedenceRulesNo: String
  precedenceRulesNote: String

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

  readyForReviewBy: UUID
  readyForReviewByUserAccount: UserAccount
  readyForReviewDts: Time
  readyForClearanceBy: UUID
  readyForClearanceByUserAccount: UserAccount
  readyForClearanceDts: Time

  status: TaskStatus!
}

input PlanBeneficiariesChanges @goModel(model: "map[string]interface{}") {
  #Page 1
  beneficiaries: [BeneficiariesType!]
  beneficiariesOther: String
  beneficiariesNote: String
  diseaseSpecificGroup: String
  treatDualElligibleDifferent: TriStateAnswer
  treatDualElligibleDifferentHow: String
  treatDualElligibleDifferentNote: String
  excludeCertainCharacteristics: TriStateAnswer
  excludeCertainCharacteristicsCriteria: String
  excludeCertainCharacteristicsNote: String
  #Page 2
  numberPeopleImpacted: Int
  estimateConfidence: ConfidenceType
  confidenceNote: String
  beneficiarySelectionMethod: [SelectionMethodType!]
  beneficiarySelectionOther: String
  beneficiarySelectionNote: String
  #Page 3
  beneficiarySelectionFrequency: [FrequencyType!]
  beneficiarySelectionFrequencyContinually: String
  beneficiarySelectionFrequencyOther: String
  beneficiarySelectionFrequencyNote: String
  beneficiaryRemovalFrequency: [FrequencyType!]
  beneficiaryRemovalFrequencyContinually: String
  beneficiaryRemovalFrequencyOther: String
  beneficiaryRemovalFrequencyNote: String
  beneficiaryOverlap: OverlapType
  beneficiaryOverlapNote: String
  precedenceRules: [YesNoType!]
  precedenceRulesYes: String
  precedenceRulesNo: String
  precedenceRulesNote: String

  status: TaskStatusInput
}

"""
PlanPayments is the task list section that deals with information regarding Payments
"""
type PlanPayments {
  id: UUID!
  modelPlanID: UUID!

  # Page 1
  fundingSource:                      [FundingSource!]!
  fundingSourceMedicareAInfo:         String
  fundingSourceMedicareBInfo:         String
  fundingSourceOther:                 String
  fundingSourceNote:                  String
  fundingSourceR:                     [FundingSource!]!
  fundingSourceRMedicareAInfo:        String
  fundingSourceRMedicareBInfo:        String
  fundingSourceROther:                String
  fundingSourceRNote:                 String
  payRecipients:                      [PayRecipient!]!
  payRecipientsOtherSpecification:    String
  payRecipientsNote:                  String
  payType:                            [PayType!]!
  payTypeNote:                        String

  # Page 2
  payClaims:                                      [ClaimsBasedPayType!]!
  payClaimsOther:                                 String
  payClaimsNote:                                  String
  shouldAnyProvidersExcludedFFSSystems:           Boolean
  shouldAnyProviderExcludedFFSSystemsNote:        String
  changesMedicarePhysicianFeeSchedule:            Boolean
  changesMedicarePhysicianFeeScheduleNote:        String
  affectsMedicareSecondaryPayerClaims:            Boolean
  affectsMedicareSecondaryPayerClaimsHow:         String
  affectsMedicareSecondaryPayerClaimsNote:        String
  payModelDifferentiation:                        String

  # Page 3
  creatingDependenciesBetweenServices:     Boolean
  creatingDependenciesBetweenServicesNote: String
  needsClaimsDataCollection:               Boolean
  needsClaimsDataCollectionNote:           String
  providingThirdPartyFile:                 Boolean
  isContractorAwareTestDataRequirements:   Boolean

  # Page 4
  beneficiaryCostSharingLevelAndHandling:          String
  waiveBeneficiaryCostSharingForAnyServices:       Boolean
  waiveBeneficiaryCostSharingServiceSpecification: String
  waiverOnlyAppliesPartOfPayment:                  Boolean
  waiveBeneficiaryCostSharingNote:                 String

  # Page 5
  nonClaimsPayments:                               [NonClaimsBasedPayType!]!
  nonClaimsPaymentOther:                           String
  nonClaimsPaymentsNote:                           String
  paymentCalculationOwner:                         String
  numberPaymentsPerPayCycle:                       String
  numberPaymentsPerPayCycleNote:                   String
  sharedSystemsInvolvedAdditionalClaimPayment:     Boolean
  sharedSystemsInvolvedAdditionalClaimPaymentNote: String
  planningToUseInnovationPaymentContractor:        Boolean
  planningToUseInnovationPaymentContractorNote:    String

  # Page 6
  expectedCalculationComplexityLevel:                ComplexityCalculationLevelType
  expectedCalculationComplexityLevelNote:            String
  claimsProcessingPrecedence:                        Boolean
  claimsProcessingPrecedenceOther:                   String
  claimsProcessingPrecedenceNote:                    String
  canParticipantsSelectBetweenPaymentMechanisms:     Boolean
  canParticipantsSelectBetweenPaymentMechanismsHow:  String
  canParticipantsSelectBetweenPaymentMechanismsNote: String
  anticipatedPaymentFrequency:                       [FrequencyType!]!
  anticipatedPaymentFrequencyContinually:            String
  anticipatedPaymentFrequencyOther:                  String
  anticipatedPaymentFrequencyNote:                   String

  # Page 7
  willRecoverPayments:                               Boolean
  willRecoverPaymentsNote:                           String
  anticipateReconcilingPaymentsRetrospectively:      Boolean
  anticipateReconcilingPaymentsRetrospectivelyNote:  String
  paymentReconciliationFrequency:                    [FrequencyType!]!
  paymentReconciliationFrequencyContinually:         String
  paymentReconciliationFrequencyOther:               String
  paymentReconciliationFrequencyNote:                String
  paymentDemandRecoupmentFrequency:                  [FrequencyType!]!
  paymentDemandRecoupmentFrequencyContinually:       String
  paymentDemandRecoupmentFrequencyOther:             String
  paymentDemandRecoupmentFrequencyNote:              String
  paymentStartDate:                                  Time
  paymentStartDateNote:                              String

  # Meta

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

  readyForReviewBy: UUID
  readyForReviewByUserAccount: UserAccount
  readyForReviewDts: Time
  readyForClearanceBy: UUID
  readyForClearanceByUserAccount: UserAccount
  readyForClearanceDts: Time

  status:      TaskStatus!
}

input PlanPaymentsChanges @goModel(model: "map[string]interface{}") {
  # Page 1
  fundingSource:                      [FundingSource!] #Combine these
  fundingSourceMedicareAInfo:         String
  fundingSourceMedicareBInfo:         String
  # fundingSourceTrustFundType:         [TrustFundType!]
  fundingSourceOther:                 String
  fundingSourceNote:                  String
  fundingSourceR:                     [FundingSource!]
  fundingSourceRMedicareAInfo:        String
  fundingSourceRMedicareBInfo:        String
  # fundingSourceRTrustFundType:        [TrustFundType!]
  fundingSourceROther:                String
  fundingSourceRNote:                 String
  payRecipients:                      [PayRecipient!]
  payRecipientsOtherSpecification:    String
  payRecipientsNote:                  String
  payType:                            [PayType!]
  payTypeNote:                        String

  # Page 2
  payClaims:                                      [ClaimsBasedPayType!]
  payClaimsOther:                                 String
  payClaimsNote:                                  String
  shouldAnyProvidersExcludedFFSSystems:           Boolean
  shouldAnyProviderExcludedFFSSystemsNote:        String
  changesMedicarePhysicianFeeSchedule:            Boolean
  changesMedicarePhysicianFeeScheduleNote:        String
  affectsMedicareSecondaryPayerClaims:            Boolean
  affectsMedicareSecondaryPayerClaimsHow:         String
  affectsMedicareSecondaryPayerClaimsNote:        String
  payModelDifferentiation:                        String

  # Page 3
  creatingDependenciesBetweenServices:     Boolean
  creatingDependenciesBetweenServicesNote: String
  needsClaimsDataCollection:               Boolean
  needsClaimsDataCollectionNote:           String
  providingThirdPartyFile:                 Boolean
  isContractorAwareTestDataRequirements:   Boolean

  # Page 4
  beneficiaryCostSharingLevelAndHandling:          String
  waiveBeneficiaryCostSharingForAnyServices:       Boolean
  waiveBeneficiaryCostSharingServiceSpecification: String
  waiverOnlyAppliesPartOfPayment:                  Boolean
  waiveBeneficiaryCostSharingNote:                 String

  # Page 5
  nonClaimsPayments:                               [NonClaimsBasedPayType!]
  nonClaimsPaymentOther:                           String
  nonClaimsPaymentsNote:                           String
  paymentCalculationOwner:                         String
  numberPaymentsPerPayCycle:                       String
  numberPaymentsPerPayCycleNote:                  String
  sharedSystemsInvolvedAdditionalClaimPayment:     Boolean
  sharedSystemsInvolvedAdditionalClaimPaymentNote: String
  planningToUseInnovationPaymentContractor:        Boolean
  planningToUseInnovationPaymentContractorNote:    String

  # Page 6
  expectedCalculationComplexityLevel:                       ComplexityCalculationLevelType
  expectedCalculationComplexityLevelNote:                   String
  claimsProcessingPrecedence:                               Boolean
  claimsProcessingPrecedenceOther:                          String
  claimsProcessingPrecedenceNote:                           String
  canParticipantsSelectBetweenPaymentMechanisms:            Boolean
  canParticipantsSelectBetweenPaymentMechanismsHow:         String
  canParticipantsSelectBetweenPaymentMechanismsNote:        String
  anticipatedPaymentFrequency:                              [FrequencyType!]
  anticipatedPaymentFrequencyContinually:                   String
  anticipatedPaymentFrequencyOther:                         String
  anticipatedPaymentFrequencyNote:                         String

  # Page 7
  willRecoverPayments:                               Boolean
  willRecoverPaymentsNote:                          String
  anticipateReconcilingPaymentsRetrospectively:      Boolean
  anticipateReconcilingPaymentsRetrospectivelyNote: String
  paymentReconciliationFrequency:                    [FrequencyType!]
  paymentReconciliationFrequencyContinually:         String
  paymentReconciliationFrequencyOther:               String
  paymentReconciliationFrequencyNote:                String
  paymentDemandRecoupmentFrequency:                    [FrequencyType!]
  paymentDemandRecoupmentFrequencyContinually:         String
  paymentDemandRecoupmentFrequencyOther:               String
  paymentDemandRecoupmentFrequencyNote:                String
  paymentStartDate:                                  Time
  paymentStartDateNote:                             String

  status: TaskStatusInput
}

"""
NDAInfo represents whether a user has agreed to an NDA or not. If agreed to previously, there will be a datestamp visible
"""
type NDAInfo {
  agreed: Boolean!
  agreedDts: Time
}

input ReportAProblemInput {
  isAnonymousSubmission: Boolean!
  allowContact: Boolean
  section: ReportAProblemSection
  sectionOther: String
  whatDoing: String
  whatWentWrong: String
  severity: ReportAProblemSeverity
  severityOther: String
}

enum ExisitingModelLinkFieldType {
  GEN_CHAR_RESEMBLES_EXISTING_MODEL_WHICH
  GEN_CHAR_PARTICIPATION_EXISTING_MODEL_WHICH
}

enum ReportAProblemSection {
  READ_VIEW
  TASK_LIST
  IT_SOLUTIONS
  HELP_CENTER
  OTHER
}

enum ReportAProblemSeverity {
  PREVENTED_TASK
  DELAYED_TASK
  MINOR
  OTHER
}

type PlanFavorite {
    id: UUID!
    modelPlanID: UUID!
    userID: UUID!
    userAccount: UserAccount!

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time

}

type PlanCR {
    id: UUID!
    modelPlanID: UUID!

    idNumber: String!
    dateInitiated: Time!
    dateImplemented: Time # Required in the API, but can be nullable for historical entries before we migrated CRs and TDLs as different types
    title: String!
    note: String

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}

type PlanTDL {
    id: UUID!
    modelPlanID: UUID!

    idNumber: String!
    dateInitiated: Time!
    title: String!
    note: String

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}

input PlanCRCreateInput {
    modelPlanID: UUID!

    idNumber: String!
    dateInitiated: Time!
    dateImplemented: Time!
    title: String!
    note: String
}

input PlanCRChanges @goModel(model: "map[string]interface{}") {
    idNumber: String
    dateInitiated: Time
    dateImplemented: Time
    title: String
    note: String
}

input PlanTDLCreateInput {
    modelPlanID: UUID!

    idNumber: String!
    dateInitiated: Time!
    title: String!
    note: String
}

input PlanTDLChanges @goModel(model: "map[string]interface{}") {
    idNumber: String
    dateInitiated: Time
    title: String
    note: String
}

type PrepareForClearance {
  status: PrepareForClearanceStatus!
  latestClearanceDts: Time
}

type AuditChange {
  id: Int!
  primaryKey: UUID!
  foreignKey: UUID
  tableName: String!
  action: String!
  fields: Map!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}


type OperationalSolution {
    id: UUID!
    operationalNeedID: UUID!

    solutionType: Int
    needed: Boolean # if null, it has not been selectd
    name: String
    key: OperationalSolutionKey
    nameOther: String

    pocName: String
    pocEmail: String
    mustStartDts: Time
    mustFinishDts: Time
    isOther: Boolean!
    isCommonSolution: Boolean!
    otherHeader: String
    status: OpSolutionStatus!

    documents: [PlanDocument!]!
    operationalSolutionSubtasks: [OperationalSolutionSubtask!]!

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}

input OperationalSolutionChanges @goModel(model: "map[string]interface{}"){
    needed: Boolean
    nameOther: String # Only valid for when solution type is null

    pocName: String
    pocEmail: String
    mustStartDts: Time
    mustFinishDts: Time
    otherHeader: String
    status: OpSolutionStatus
}

type PlanDocumentSolutionLink {
id: UUID!
solutionID: UUID!
documentID: UUID!

createdBy: UUID!
createdByUserAccount: UserAccount!
createdDts: Time!
modifiedBy: UUID
modifiedByUserAccount: UserAccount
modifiedDts: Time
}

input CreateOperationalSolutionSubtaskInput {
  name: String!
  status: OperationalSolutionSubtaskStatus!
}

input UpdateOperationalSolutionSubtaskInput {
  id: UUID!
  changes: UpdateOperationalSolutionSubtaskChangesInput!
}

input UpdateOperationalSolutionSubtaskChangesInput @goModel(model: "map[string]interface{}") {
  name: String!
  status: OperationalSolutionSubtaskStatus!
}

type OperationalSolutionSubtask {
  id: UUID!
  solutionID: UUID!
  name: String!
  status: OperationalSolutionSubtaskStatus!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

type DiscussionRoleSelection {
  userRole: DiscussionUserRole!
  userRoleDescription: String
}
"""
The inputs to the user feedback form
"""
input SendFeedbackEmailInput {
  isAnonymousSubmission: Boolean!
  allowContact: Boolean
  cmsRole: String
  mintUsedFor: [MintUses!]
  mintUsedForOther: String
  systemEasyToUse: EaseOfUse
  systemEasyToUseOther: String
  howSatisfied: SatisfactionLevel
  howCanWeImprove: String
}

enum EaseOfUse {
  AGREE
  DISAGREE
  UNSURE
}

enum MintUses {
  VIEW_MODEL
  EDIT_MODEL
  SHARE_MODEL
  TRACK_SOLUTIONS
  CONTRIBUTE_DISCUSSIONS
  VIEW_HELP
  OTHER
}
enum SatisfactionLevel {
  VERY_SATISFIED
  SATISFIED
  NEUTRAL
  DISSATISFIED
  VERY_DISSATISFIED
}


"""
Query definition for the schema
"""
type Query {
  planDocument(id: UUID!): PlanDocument!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  existingModelCollection: [ExistingModel!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchOktaUsers(searchTerm: String!): [UserInfo!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planCollaboratorByID(id: UUID!): PlanCollaborator!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  taskListSectionLocks(modelPlanID: UUID!): [TaskListSectionLockStatus!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planPayments(id: UUID!): PlanPayments!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  ndaInfo: NDAInfo!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planCR(id: UUID!): PlanCR!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planTDL(id: UUID!): PlanTDL!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  operationalSolutions(operationalNeedID: UUID!, includeNotNeeded: Boolean! = false): [OperationalSolution!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  operationalSolution(id: UUID!): OperationalSolution!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  operationalNeed(id: UUID!): OperationalNeed!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  auditChanges(tableName: String!, primaryKey: UUID!): [AuditChange!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  possibleOperationalNeeds: [PossibleOperationalNeed!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  possibleOperationalSolutions: [PossibleOperationalSolution!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  userAccount(username: String!): UserAccount!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  existingModelLink(id: UUID!): ExistingModelLink!
  @hasAnyRole(roles:[MINT_USER, MINT_MAC])
  mostRecentDiscussionRoleSelection: DiscussionRoleSelection
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
}

"""
Mutations definition for the schema
"""
type Mutation {
createPlanCollaborator(input: PlanCollaboratorCreateInput!): PlanCollaborator!
@hasRole(role: MINT_USER)

updatePlanCollaborator(id: UUID!, newRoles: [TeamRole!]!): PlanCollaborator!
@hasRole(role: MINT_USER)

deletePlanCollaborator(id: UUID!): PlanCollaborator!
@hasRole(role: MINT_USER)

updatePlanBeneficiaries(id: UUID!, changes: PlanBeneficiariesChanges!): PlanBeneficiaries!
@hasRole(role: MINT_USER)

uploadNewPlanDocument(input: PlanDocumentInput!): PlanDocument!
@hasRole(role: MINT_USER)

linkNewPlanDocument(input: PlanDocumentLinkInput!): PlanDocument!
@hasRole(role: MINT_USER)

deletePlanDocument(id: UUID!): Int!
@hasRole(role: MINT_USER)

createPlanDiscussion(input: PlanDiscussionCreateInput!): PlanDiscussion!
@hasAnyRole(roles: [MINT_USER, MINT_MAC])

createDiscussionReply(input: DiscussionReplyCreateInput!): DiscussionReply!
@hasAnyRole(roles: [MINT_USER, MINT_MAC])

lockTaskListSection(modelPlanID: UUID!, section: TaskListSection!): Boolean!
@hasRole(role: MINT_USER)

unlockTaskListSection(modelPlanID: UUID!, section: TaskListSection!): Boolean!
@hasRole(role: MINT_USER)

unlockAllTaskListSections(modelPlanID: UUID!): [TaskListSectionLockStatus!]!
@hasRole(role: MINT_ASSESSMENT)

updatePlanPayments(id: UUID!, changes: PlanPaymentsChanges!): PlanPayments!
@hasRole(role: MINT_USER)

agreeToNDA(agree: Boolean! = true): NDAInfo!
@hasAnyRole(roles: [MINT_USER, MINT_MAC])

addPlanFavorite(modelPlanID: UUID!): PlanFavorite!
@hasAnyRole(roles: [MINT_USER, MINT_MAC])

deletePlanFavorite(modelPlanID: UUID!): PlanFavorite!
@hasAnyRole(roles: [MINT_USER, MINT_MAC])

createPlanCR(input: PlanCRCreateInput!): PlanCR!
@hasRole(role: MINT_USER)

createPlanTDL(input: PlanTDLCreateInput!): PlanTDL!
@hasRole(role: MINT_USER)

updatePlanCR(id: UUID!, changes: PlanCRChanges!): PlanCR!
@hasRole(role: MINT_USER)

updatePlanTDL(id: UUID!, changes: PlanTDLChanges!): PlanTDL!
@hasRole(role: MINT_USER)

deletePlanCR(id: UUID!): PlanCR!
@hasRole(role: MINT_USER)

deletePlanTDL(id: UUID!): PlanTDL!
@hasRole(role: MINT_USER)

addOrUpdateCustomOperationalNeed(modelPlanID: UUID!, customNeedType: String! needed: Boolean!): OperationalNeed!
@hasRole(role: MINT_USER)

updateCustomOperationalNeedByID(id: UUID!, customNeedType: String needed: Boolean!): OperationalNeed!
@hasRole(role: MINT_USER)

createOperationalSolution(operationalNeedID: UUID!, solutionType: OperationalSolutionKey, changes: OperationalSolutionChanges!): OperationalSolution!
@hasRole(role: MINT_USER)

updateOperationalSolution(id: UUID!, changes: OperationalSolutionChanges!): OperationalSolution!
@hasRole(role: MINT_USER)

createPlanDocumentSolutionLinks(solutionID: UUID!, documentIDs: [UUID!]!): [PlanDocumentSolutionLink!]
@hasRole(role: MINT_USER)

removePlanDocumentSolutionLinks(solutionID: UUID!, documentIDs: [UUID!]!): Boolean!
@hasRole(role: MINT_USER)

createOperationalSolutionSubtasks(solutionID: UUID!, inputs: [CreateOperationalSolutionSubtaskInput!]!): [OperationalSolutionSubtask!]
@hasRole(role: MINT_USER)

updateOperationalSolutionSubtasks(inputs: [UpdateOperationalSolutionSubtaskInput!]!): [OperationalSolutionSubtask!]
@hasRole(role: MINT_USER)

deleteOperationalSolutionSubtask(id: UUID!): Int!
@hasRole(role: MINT_USER)

"""
This will update linked existing models, and relatede model plans for given model plan and fieldName.
The fieldName allows it so you can create links for multiple sections of the model plan
"""
updateExistingModelLinks(modelPlanID: UUID!,fieldName: ExisitingModelLinkFieldType!,  existingModelIDs: [Int!],currentModelPlanIDs: [UUID!]): ExistingModelLinks!
@hasRole(role: MINT_USER)

reportAProblem(input: ReportAProblemInput!): Boolean!
@hasAnyRole(roles: [MINT_USER, MINT_MAC])
"""
This mutation sends feedback about the MINT product to the MINT team
"""
sendFeedbackEmail(input: SendFeedbackEmailInput!): Boolean!


}

type Subscription {
  onTaskListSectionLocksChanged(modelPlanID: UUID!): TaskListSectionLockStatusChanged!
  @hasRole(role: MINT_USER)

  onLockTaskListSectionContext(modelPlanID: UUID!): TaskListSectionLockStatusChanged!
  @hasRole(role: MINT_USER)
}

enum ChangeType {
  ADDED
  UPDATED
  REMOVED
}

enum TaskStatus {
  READY
  IN_PROGRESS
  READY_FOR_REVIEW
  READY_FOR_CLEARANCE
}

enum PrepareForClearanceStatus {
  CANNOT_START
  READY
  IN_PROGRESS
  READY_FOR_CLEARANCE
}

enum TaskStatusInput {
  IN_PROGRESS
  READY_FOR_REVIEW
  READY_FOR_CLEARANCE
}

enum TaskListSection {
  BASICS,
  GENERAL_CHARACTERISTICS,
  PARTICIPANTS_AND_PROVIDERS,
  BENEFICIARIES,
  OPERATIONS_EVALUATION_AND_LEARNING,
  PAYMENT,
  PREPARE_FOR_CLEARANCE
}

enum TeamRole {
  MODEL_LEAD
  MODEL_TEAM
  LEADERSHIP
  LEARNING
  EVALUATION
  IT_LEAD
  QUALITY
  OACT
  PAYMENT
  CM_FFS_COUNTERPART
  COR
}

enum DocumentType {
  CONCEPT_PAPER,
  POLICY_PAPER,
  ICIP_DRAFT,
  MARKET_RESEARCH,
  DESIGN_PARAMETERS_MEMO,
  OFFICE_OF_THE_ADMINISTRATOR_PRESENTATION,
  OTHER
}

enum BeneficiariesType {
  MEDICARE_FFS
  MEDICARE_ADVANTAGE
  MEDICARE_PART_D
  MEDICAID
  DUALLY_ELIGIBLE
  DISEASE_SPECIFIC
  UNDERSERVED
  OTHER
  NA
}
enum SelectionMethodType {
  HISTORICAL
  PROSPECTIVE
  RETROSPECTIVE
  VOLUNTARY
  PROVIDER_SIGN_UP
  OTHER
  NA
}

enum TriStateAnswer {
  YES
  NO
  TBD
}

enum FundingSource {
  PATIENT_PROTECTION_AFFORDABLE_CARE_ACT
  MEDICARE_PART_A_HI_TRUST_FUND
  MEDICARE_PART_B_SMI_TRUST_FUND
  OTHER
}

enum PayRecipient {
  PROVIDERS
  BENEFICIARIES
  PARTICIPANTS
  STATES
  OTHER
}

enum PayType {
  CLAIMS_BASED_PAYMENTS
  NON_CLAIMS_BASED_PAYMENTS
  GRANTS
}

enum ClaimsBasedPayType {
  ADJUSTMENTS_TO_FFS_PAYMENTS
  CARE_MANAGEMENT_HOME_VISITS
  REDUCTIONS_TO_BENEFICIARY_COST_SHARING
  SNF_CLAIMS_WITHOUT_3DAY_HOSPITAL_ADMISSIONS
  TELEHEALTH_SERVICES_NOT_TRADITIONAL_MEDICARE
  SERVICES_NOT_COVERED_THROUGH_TRADITIONAL_MEDICARE
  PAYMENTS_FOR_POST_DISCHARGE_HOME_VISITS
  OTHER
}

enum NonClaimsBasedPayType {
  ADVANCED_PAYMENT
  BUNDLED_EPISODE_OF_CARE
  CAPITATION_POPULATION_BASED_FULL
  CAPITATION_POPULATION_BASED_PARTIAL
  CARE_COORDINATION_MANAGEMENT_FEE
  GLOBAL_BUDGET
  INCENTIVE_PAYMENT
  MAPD_SHARED_SAVINGS
  SHARED_SAVINGS
  OTHER
}

enum ComplexityCalculationLevelType {
  LOW
  MIDDLE
  HIGH
}

enum OpSolutionStatus {
  NOT_STARTED
  ONBOARDING
  BACKLOG
  IN_PROGRESS
  COMPLETED
  AT_RISK
}

enum OperationalNeedKey{
  MANAGE_CD
  REV_COL_BIDS
  UPDATE_CONTRACT
  RECRUIT_PARTICIPANTS
  REV_SCORE_APP
  APP_SUPPORT_CON
  COMM_W_PART
  MANAGE_PROV_OVERLAP
  MANAGE_BEN_OVERLAP
  HELPDESK_SUPPORT
  IDDOC_SUPPORT
  ESTABLISH_BENCH
  PROCESS_PART_APPEALS
  ACQUIRE_AN_EVAL_CONT
  DATA_TO_MONITOR
  DATA_TO_SUPPORT_EVAL
  CLAIMS_BASED_MEASURES
  QUALITY_PERFORMANCE_SCORES
  SEND_REPDATA_TO_PART
  ACQUIRE_A_LEARN_CONT
  PART_TO_PART_COLLAB
  EDUCATE_BENEF
  ADJUST_FFS_CLAIMS
  MANAGE_FFS_EXCL_PAYMENTS
  MAKE_NON_CLAIMS_BASED_PAYMENTS
  COMPUTE_SHARED_SAVINGS_PAYMENT
  RECOVER_PAYMENTS
  SIGN_PARTICIPATION_AGREEMENTS
  VET_PROVIDERS_FOR_PROGRAM_INTEGRITY
  UTILIZE_QUALITY_MEASURES_DEVELOPMENT_CONTRACTOR
  IT_PLATFORM_FOR_LEARNING
}

enum OperationalSolutionKey{
  INNOVATION
  ACO_OS
  APPS
  CDX
  CCW
  CMS_BOX
  CMS_QUALTRICS
  CBOSC
  CONTRACTOR
  CPI_VETTING
  CROSS_MODEL_CONTRACT
  EFT
  EXISTING_CMS_DATA_AND_PROCESS
  EDFR
  GOVDELIVERY
  GS
  HDR
  HPMS
  HIGLAS
  IPC
  IDR
  INTERNAL_STAFF
  LDG
  LV
  MDM
  MARX
  OTHER_NEW_PROCESS
  OUTLOOK_MAILBOX
  QV
  RMADA
  ARS
  CONNECT
  LOI
  POST_PORTAL
  RFA
  SHARED_SYSTEMS
  BCDA
  ISP
  MIDS
}

enum OperationalSolutionSubtaskStatus {
  TODO,
  IN_PROGRESS,
  DONE
}

type UserAccount {
	id: UUID!
	username: String!
	isEUAID: Boolean
	commonName: String!
	locale: String!
	email: String!
	givenName: String!
	familyName: String!
	zoneInfo: String!
	hasLoggedIn: Boolean
}


"""
A user role associated with a job code
"""
enum Role {
  """
  A basic MINT user
  """
  MINT_USER

  """
  A MINT assessment team user
  """
  MINT_ASSESSMENT

  """
  A MINT MAC user
  """
  MINT_MAC
}

enum ActionType {
  """
  A normal flow action
  """
  NORMAL

  """
  An administrative action
  """
  ADMIN
}

enum DiscussionUserRole {
  CMS_SYSTEM_SERVICE_TEAM,
  IT_ARCHITECT,
  LEADERSHIP,
  MEDICARE_ADMINISTRATIVE_CONTRACTOR,
  MINT_TEAM,
  MODEL_IT_LEAD,
  MODEL_TEAM,
  SHARED_SYSTEM_MAINTAINER,
  NONE_OF_THE_ABOVE,
}

enum YesNoType {
  YES,
  NO
}