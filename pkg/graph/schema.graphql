#import "./schema_types/scalars.graphql"
#import "./schema_enums/enums.graphql"

#import "./schema_types/launch_darkly_settings.graphql"
#import "./schema_types/current_user.graphql"
#import "./schema_types/model_plan.graphql"
#import "./schema_types/operational_need.graphql"
#import "./schema_types/possible_operational_need.graphql"
#import "./schema_types/possible_operational_solution.graphql"
#import "./schema_types/plan_collaborator.graphql"
#import "./schema_types/existing_model.graphql"
#import "./schema_types/task_list_section_lock_status_changed.graphql"
#import "./schema_types/task_list_section_lock_status.graphql"
#import "./schema_types/plan_document.graphql"
#import "./schema_types/plan_basics.graphql"
#import "./schema_types/user_info.graphql"
#import "./schema_types/discussion_reply.graphql"
#import "./schema_types/plan_general_characteristics.graphql"
#import "./schema_types/plan_beneficiaries.graphql"
#import "./schema_types/plan_participants_and_providers.graphql"
#import "./schema_types/plan_payments.graphql"
#import "./schema_types/plan_ops_eval_and_learning.graphql"
#import "./schema_types/nda_info.graphql"
#import "./schema_types/plan_favorite.graphql"
#import "./schema_types/plan_crtdl.graphql"
#import "./schema_types/prepare_for_clearance.graphql"
#import "./schema_types/audit_change.graphql"
#import "./schema_types/operational_solution.graphql"
#import "./schema_types/plan_document_solution_link.graphql"
#import "./schema_types/operational_solution_subtask.graphql"
#import "./schema_types/change_table_record.graphql"
#import "./schema_types/date_histogram_aggregation_bucket.graphql"
#import "./schema_types/user_account.graphql"

#import "./schema_types/inputs.graphql"


"""
Query definition for the schema
"""
type Query {
  currentUser: CurrentUser!
  modelPlan(id: UUID!): ModelPlan!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planDocument(id: UUID!): PlanDocument!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  modelPlanCollection(filter: ModelPlanFilter! = COLLAB_ONLY): [ModelPlan!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  existingModelCollection: [ExistingModel!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchOktaUsers(searchTerm: String!): [UserInfo!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planCollaboratorByID(id: UUID!): PlanCollaborator!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  taskListSectionLocks(modelPlanID: UUID!): [TaskListSectionLockStatus!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planPayments(id: UUID!): PlanPayments!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  ndaInfo: NDAInfo!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  crTdl(id: UUID!): PlanCrTdl!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  operationalSolutions(operationalNeedID: UUID!, includeNotNeeded: Boolean! = false): [OperationalSolution!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  operationalSolution(id: UUID!): OperationalSolution!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  operationalNeed(id: UUID!): OperationalNeed!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  auditChanges(tableName: String!, primaryKey: UUID!): [AuditChange!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  possibleOperationalNeeds: [PossibleOperationalNeed!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  possibleOperationalSolutions: [PossibleOperationalSolution!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  userAccount(username: String!): UserAccount!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchChangeTable(request: SearchRequest!, limit: Int!, offset: Int!): [ChangeTableRecord!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchChangeTableWithFreeText(searchText: String!, limit: Int!, offset: Int!): [ChangeTableRecord!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchChangeTableByModelPlanID(modelPlanID: UUID!, limit: Int!, offset: Int!): [ChangeTableRecord!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchChangeTableByDateRange(startDate: Time!, endDate: Time!, limit: Int!, offset: Int!): [ChangeTableRecord!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchChangeTableByActor(actor: String!, limit: Int!, offset: Int!): [ChangeTableRecord!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchChangeTableByModelStatus(modelStatus: ModelStatus!, limit: Int!, offset: Int!): [ChangeTableRecord!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchChangeTableDateHistogramConsolidatedAggregations(interval: String!, limit: Int!, offset: Int!): [DateHistogramAggregationBucket!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
}

"""
Mutations definition for the schema
"""
type Mutation {
createModelPlan(modelName: String!): ModelPlan!
@hasRole(role: MINT_USER)

updateModelPlan(id: UUID!, changes: ModelPlanChanges!): ModelPlan!
@hasRole(role: MINT_USER)

createPlanCollaborator(input: PlanCollaboratorCreateInput!): PlanCollaborator!
@hasRole(role: MINT_USER)

updatePlanCollaborator(id: UUID!, newRole: TeamRole!): PlanCollaborator!
@hasRole(role: MINT_USER)

deletePlanCollaborator(id: UUID!): PlanCollaborator!
@hasRole(role: MINT_USER)

updatePlanBasics(id: UUID!, changes: PlanBasicsChanges!): PlanBasics!
@hasRole(role: MINT_USER)

updatePlanGeneralCharacteristics(id: UUID!, changes: PlanGeneralCharacteristicsChanges!): PlanGeneralCharacteristics!
@hasRole(role: MINT_USER)

updatePlanBeneficiaries(id: UUID!, changes: PlanBeneficiariesChanges!): PlanBeneficiaries!
@hasRole(role: MINT_USER)

updatePlanParticipantsAndProviders(id: UUID!, changes: PlanParticipantsAndProvidersChanges!): PlanParticipantsAndProviders!
@hasRole(role: MINT_USER)

updatePlanOpsEvalAndLearning(id: UUID!, changes: PlanOpsEvalAndLearningChanges!): PlanOpsEvalAndLearning!
@hasRole(role: MINT_USER)

uploadNewPlanDocument(input: PlanDocumentInput!): PlanDocument!
@hasRole(role: MINT_USER)

deletePlanDocument(id: UUID!): Int!
@hasRole(role: MINT_USER)

createPlanDiscussion(input: PlanDiscussionCreateInput!): PlanDiscussion!
@hasRole(role: MINT_USER)

updatePlanDiscussion(id: UUID!, changes: PlanDiscussionChanges!): PlanDiscussion!
@hasRole(role: MINT_USER)

deletePlanDiscussion(id: UUID!): PlanDiscussion!
@hasRole(role: MINT_USER)

createDiscussionReply(input: DiscussionReplyCreateInput!): DiscussionReply!
@hasRole(role: MINT_USER)

updateDiscussionReply(id: UUID!, changes: DiscussionReplyChanges!): DiscussionReply!
@hasRole(role: MINT_USER)

deleteDiscussionReply(id: UUID!): DiscussionReply!
@hasRole(role: MINT_USER)

lockTaskListSection(modelPlanID: UUID!, section: TaskListSection!): Boolean!
@hasRole(role: MINT_USER)

unlockTaskListSection(modelPlanID: UUID!, section: TaskListSection!): Boolean!
@hasRole(role: MINT_USER)

unlockAllTaskListSections(modelPlanID: UUID!): [TaskListSectionLockStatus!]!
@hasRole(role: MINT_ASSESSMENT)

updatePlanPayments(id: UUID!, changes: PlanPaymentsChanges!): PlanPayments!
@hasRole(role: MINT_USER)

agreeToNDA(agree: Boolean! = true): NDAInfo!
@hasAnyRole(roles: [MINT_USER, MINT_MAC])

addPlanFavorite(modelPlanID: UUID!): PlanFavorite!
@hasRole(role: MINT_USER)

deletePlanFavorite(modelPlanID: UUID!): PlanFavorite!
@hasRole(role: MINT_USER)

createPlanCrTdl(input: PlanCrTdlCreateInput!): PlanCrTdl!
@hasRole(role: MINT_USER)

updatePlanCrTdl(id: UUID!, changes: PlanCrTdlChanges!): PlanCrTdl!
@hasRole(role: MINT_USER)

deletePlanCrTdl(id: UUID!): PlanCrTdl!
@hasRole(role: MINT_USER)

addOrUpdateCustomOperationalNeed(modelPlanID: UUID!, customNeedType: String! needed: Boolean!): OperationalNeed!
@hasRole(role: MINT_USER)

updateCustomOperationalNeedByID(id: UUID!, customNeedType: String needed: Boolean!): OperationalNeed!
@hasRole(role: MINT_USER)

createOperationalSolution(operationalNeedID: UUID!, solutionType: OperationalSolutionKey, changes: OperationalSolutionChanges!): OperationalSolution!
@hasRole(role: MINT_USER)

updateOperationalSolution(id: UUID!, changes: OperationalSolutionChanges!): OperationalSolution!
@hasRole(role: MINT_USER)

createPlanDocumentSolutionLinks(solutionID: UUID!, documentIDs: [UUID!]!): [PlanDocumentSolutionLink!]
@hasRole(role: MINT_USER)

removePlanDocumentSolutionLinks(solutionID: UUID!, documentIDs: [UUID!]!): Boolean!
@hasRole(role: MINT_USER)

createOperationalSolutionSubtasks(solutionID: UUID!, inputs: [CreateOperationalSolutionSubtaskInput!]!): [OperationalSolutionSubtask!]
@hasRole(role: MINT_USER)

updateOperationalSolutionSubtasks(inputs: [UpdateOperationalSolutionSubtaskInput!]!): [OperationalSolutionSubtask!]
@hasRole(role: MINT_USER)

deleteOperationalSolutionSubtask(id: UUID!): Int!
@hasRole(role: MINT_USER)
}

type Subscription {
  onTaskListSectionLocksChanged(modelPlanID: UUID!): TaskListSectionLockStatusChanged!
  @hasRole(role: MINT_USER)

  onLockTaskListSectionContext(modelPlanID: UUID!): TaskListSectionLockStatusChanged!
  @hasRole(role: MINT_USER)
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

directive @hasAnyRole(roles: [Role!]!) on FIELD_DEFINITION

# https://gqlgen.com/config/#inline-config-with-directives
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION


"""
A user role associated with a job code
"""
enum Role {
  """
  A basic MINT user
  """
  MINT_USER

  """
  A MINT assessment team user
  """
  MINT_ASSESSMENT

  """
  A MINT MAC user
  """
  MINT_MAC
}