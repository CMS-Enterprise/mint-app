

"""
The current user's Launch Darkly key
"""
type LaunchDarklySettings {
  userKey: String!
  signedHash: String!
}

"""
The current user of the application
"""
type CurrentUser {
  launchDarkly: LaunchDarklySettings!
}
"""
UUIDs are represented using 36 ASCII characters, for example B0511859-ADE6-4A67-8969-16EC280C0E1A
"""
scalar UUID
"""
Time values are represented as strings using RFC3339 format, for example 2019-10-12T07:20:50G.52Z
"""
scalar Time

"""
ModelPlan represent the data point for plans about a model. It is the central data type in the application
"""
type ModelPlan {
  id: UUID
  modelName: String!
  modelCategory: ModelCategory
  cmsCenters: [CMSCenter!]!
  cmsOther: String
  cmmiGroups: [CMMIGroup!]!
  archived: Boolean!
  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
  basics: PlanBasics
  milestones: PlanMilestones
  collaborators: [PlanCollaborator!]!
  documents: [PlanDocument!]!
  discussions: [PlanDiscussion!]!
  status: ModelStatus!
}

"""
ModelPlanChanges represents the possible changes you can make to a model plan when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
"""
input ModelPlanChanges {
  modelName: String
  modelCategory: ModelCategory
  cmsCenters: [CMSCenter!]
  cmsOther: String
  cmmiGroups: [CMMIGroup!]
  someNumbers: [Int!]
  archived: Boolean
  status: ModelStatus
}

"""
PlanCollaborator represents a collaborator on a plan
"""
type PlanCollaborator {
  id: UUID!
  modelPlanID: UUID!
  euaUserID: String!
  fullName: String!
  teamRole: TeamRole!
  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
}

"""
PlanCollaboratorInput represents the data required to create, modify, or delete a collaborator on a plan
"""
input PlanCollaboratorInput {
  id: UUID
  modelPlanID: UUID!
  euaUserID: String!
  fullName: String!
  teamRole: TeamRole!
  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
}

"""
Input associated with a document to be uploaded
"""
input GeneratePresignedUploadURLInput {
  fileName: String!
  mimeType: String!
  size: Int!
}

"""
URL generated for a document to be uploaded
"""
type GeneratePresignedUploadURLPayload {
  url: String
}

"""
PlanDocument represents a document on a plan
"""
type PlanDocument {
  id: UUID!
  modelPlanID: UUID!
  fileType: String
  bucket: String
  fileKey: String
  virusScanned: Boolean
  virusClean: Boolean
  fileName: String
  fileSize: Int
  documentType: DocumentType
  otherType: String
  optionalNotes: String
  deletedAt: Time
  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
}

"""
PlanDocumentInput represents the data required to create, modify, or delete a document on a plan
"""
input PlanDocumentInput {
  id: UUID
  modelPlanID: UUID!
  documentParameters: PlanDocumentParameters!
  url: String
}

"""
PlanDocumentCreateParameters represents the specific data required to create or modify a document on a plan
"""
input PlanDocumentParameters {
  fileName: String
  fileSize: Int!
  fileType: String
  documentType: DocumentType
  otherTypeDescription: String
  optionalNotes: String
}

"""
PlanDocumentPayload represents the response to a document request
"""
type PlanDocumentPayload {
  document: PlanDocument
  presignedURL: String
}

"""
Represents plan basics
"""
type PlanBasics {
  id: UUID
  modelPlanID: UUID

  modelType: ModelType
  problem: String
  goal: String
  testInventions: String
  note: String
  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
  status: TaskStatus!
}


"""
Represents plan basics
"""
input PlanBasicsInput {
  id: UUID
  modelPlanID: UUID

  modelType: ModelType
  problem: String
  goal: String
  testInventions: String
  note: String
  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
  status: TaskStatus
}

"""
Represents a person response from CEDAR LDAP
"""
type UserInfo {
  commonName: String!
  email: String!
  euaUserId: String!
}
"""
Represents plan milestones
"""
type PlanMilestones {
  id: UUID
  modelPlanID: UUID

  completeICIP: Time
  clearanceStarts: Time
  clearanceEnds: Time

  announced: Time

  applicationsStart: Time
  applicationsEnd: Time

  performancePeriodStarts: Time
  performancePeriodEnds: Time
  wrapUpEnds: Time
  highLevelNote: String

  phasedIn: Boolean
  phasedInNote: String


  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
  status: TaskStatus
}

"""
Represents plan milestones input
"""
input PlanMilestonesInput {
  id: UUID
  modelPlanID: UUID

  completeICIP: Time
  clearanceStarts: Time
  clearanceEnds: Time

  announced: Time

  applicationsStart: Time
  applicationsEnd: Time

  performancePeriodStarts: Time
  performancePeriodEnds: Time
  wrapUpEnds: Time
  highLevelNote: String

  phasedIn: Boolean
  phasedInNote: String


  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
  status: TaskStatus
}

"""
PlanDiscussion represents plan discussion
"""
type PlanDiscussion  {
	id:          UUID
	modelPlanID: UUID
	content: String
	status: DiscussionStatus!
  replies: [DiscussionReply!]!

  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
}

"""
PlanDiscussionCreateInput represents the necessary fields to create a plan discussion
"""
input PlanDiscussionCreateInput {
  modelPlanID: UUID!
  content: String!
}

"""
PlanDiscussionChanges represents the possible changes you can make to a plan discussion when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
"""
input PlanDiscussionChanges {
  content: String
  status: DiscussionStatus
}

"""
DiscussionReply represents a discussion reply
"""
type DiscussionReply  {
	id: UUID
	discussionID: UUID!
	content: String
	resolution: Boolean

	createdBy: String
	createdDts: Time
	modifiedBy: String
	modifiedDts: Time
}

"""
DiscussionReplyCreateInput represents the necessary fields to create a discussion reply
"""
input DiscussionReplyCreateInput {
  discussionID: UUID!
  content: String!
  resolution: Boolean! = false
}

"""
DiscussionReplyChanges represents the possible changes you can make to a discussion reply when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
"""
input DiscussionReplyChanges {
  content: String
  resolution: Boolean
}

"""
Query definition for the schema
"""
type Query {
  currentUser: CurrentUser
  modelPlan(id: UUID!) : ModelPlan
  planBasics(id: UUID!) : PlanBasics
  planMilestones(id: UUID!) : PlanMilestones
  planDocument(id: UUID!) : PlanDocument
  planDocumentDownloadURL(id: UUID!) : PlanDocumentPayload
  readPlanDocumentByModelID(id: UUID!) : [PlanDocument]
  modelPlanCollection: [ModelPlan]
  cedarPersonsByCommonName(commonName: String!): [UserInfo!]!
  planCollaboratorByID(id: UUID!): PlanCollaborator!
}

"""
Mutations definition for the schema
"""
type Mutation {
createModelPlan(modelName: String!):ModelPlan
@hasRole(role: MINT_BASE_USER)

updateModelPlan(id: UUID!, changes: ModelPlanChanges!): ModelPlan
@hasRole(role: MINT_BASE_USER)

createPlanCollaborator(input: PlanCollaboratorInput!): PlanCollaborator
@hasRole(role: MINT_BASE_USER)

updatePlanCollaborator(input: PlanCollaboratorInput!): PlanCollaborator
@hasRole(role: MINT_BASE_USER)

deletePlanCollaborator(input: PlanCollaboratorInput!): PlanCollaborator
@hasRole(role: MINT_BASE_USER)

createPlanBasics(input: PlanBasicsInput!):PlanBasics
@hasRole(role: MINT_BASE_USER)

updatePlanBasics(input: PlanBasicsInput!): PlanBasics
@hasRole(role: MINT_BASE_USER)

createPlanMilestones(input: PlanMilestonesInput!): PlanMilestones
@hasRole(role: MINT_BASE_USER)

updatePlanMilestones(input: PlanMilestonesInput!): PlanMilestones
@hasRole(role: MINT_BASE_USER)

generatePresignedUploadURL(input: GeneratePresignedUploadURLInput!): GeneratePresignedUploadURLPayload
@hasRole(role: MINT_BASE_USER)

createPlanDocument(input: PlanDocumentInput!): PlanDocumentPayload
@hasRole(role: MINT_BASE_USER)

updatePlanDocument(input: PlanDocumentInput!): PlanDocumentPayload
@hasRole(role: MINT_BASE_USER)

deletePlanDocument(input: PlanDocumentInput!): Int!
@hasRole(role: MINT_BASE_USER)

createPlanDiscussion(input: PlanDiscussionCreateInput!): PlanDiscussion
@hasRole(role: MINT_BASE_USER)

updatePlanDiscussion(id: UUID!, changes: PlanDiscussionChanges!): PlanDiscussion
@hasRole(role: MINT_BASE_USER)

deletePlanDiscussion(id: UUID!): PlanDiscussion
@hasRole(role: MINT_BASE_USER)

createDiscussionReply(input: DiscussionReplyCreateInput!): DiscussionReply
@hasRole(role: MINT_BASE_USER)

updateDiscussionReply(id: UUID!, changes: DiscussionReplyChanges!): DiscussionReply
@hasRole(role: MINT_BASE_USER)

deleteDiscussionReply(id: UUID!): DiscussionReply
@hasRole(role: MINT_BASE_USER)
}

enum TaskStatus {
  READY
  IN_PROGRESS
  COMPLETE
}

enum TeamRole {
  MODEL_LEAD
  MODEL_TEAM
  LEADERSHIP
  LEARNING
  EVALUATION
}

enum ModelType
{
  VOLUNTARY
  MANDATORY
  TBD
}

enum ModelCategory {
	ACCOUNTABLE_CARE
	DEMONSTRATION
	EPISODE_BASED_PAYMENT_INITIATIVES
	INIT_MEDICAID_CHIP_POP
	INIT__MEDICARE_MEDICAID_ENROLLEES
	INIT_ACCEL_DEV_AND_TEST
	INIT_SPEED_ADOPT_BEST_PRACTICE
	PRIMARY_CARE_TRANSFORMATION
	UNKNOWN
}

enum ModelStatus {
	PLAN_DRAFT
	PLAN_COMPLETE
	ICIP_COMPLETE
	INTERNAL_CMMI_CLEARANCE
	CMS_CLEARANCE
	HHS_CLEARANCE
	OMB_ASRF_CLEARANCE
	CLEARED
	ANNOUNCED
}

enum CMSCenter {
  CMMI
  CENTER_FOR_MEDICARE
  FEDERAL_COORDINATED_HEALTH_CARE_OFFICE
  CENTER_FOR_CLINICAL_STANDARDS_AND_QUALITY
  CENTER_FOR_PROGRAM_INTEGRITY
  OTHER
}

enum CMMIGroup {
  PATIENT_CARE_MODELS_GROUP
  POLICY_AND_PROGRAMS_GROUP
  PREVENTIVE_AND_POPULATION_HEALTH_CARE_MODELS_GROUP
  SEAMLESS_CARE_MODELS_GROUP
  STATE_INNOVATIONS_GROUP
}

enum DiscussionStatus {
  ANSWERED
  WAITING_FOR_RESPONSE
  UNANSWERED
}

enum DocumentType {
  CONCEPT_PAPER,
  POLICY_PAPER,
  ICIP_DRAFT,
  MARKET_RESEARCH,
  OTHER
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

"""
A user role associated with a job code
"""
enum Role {
  """
  A basic MINT user
  """
  MINT_BASE_USER

  """
  A MINT admin user
  """
  MINT_ADMIN_USER
}
