

"""
The current user's Launch Darkly key
"""
type LaunchDarklySettings {
  userKey: String!
  signedHash: String!
}

"""
The current user of the application
"""
type CurrentUser {
  launchDarkly: LaunchDarklySettings!
}
"""
UUIDs are represented using 36 ASCII characters, for example B0511859-ADE6-4A67-8969-16EC280C0E1A
"""
scalar UUID
"""
Time values are represented as strings using RFC3339 format, for example 2019-10-12T07:20:50.52Z
"""
scalar Time

"""
ModelPlan represent the data point for plans about a model. It is the central data type in the application
"""
type ModelPlan {
  id: UUID
  modelName: String
  modelCategory: ModelCategory
  cmsCenter: CMSCenter
  cmmiGroups: [CMMIGroup!]
  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
  basics: PlanBasics
  collaborators: [PlanCollaborator!]!
}

"""
ModelPlanInput represent the data point for plans about a model. It is the central data type in the appliation
"""
# input ModelPlanInput ModelPlan {
input ModelPlanInput{
id: UUID
modelName: String
modelCategory: ModelCategory
cmsCenter: CMSCenter
cmmiGroups: [CMMIGroup!]
createdBy: String
createdDts: Time
modifiedBy: String
modifiedDts: Time
}

"""
PlanCollaborator represents a collaborator on a plan
"""
type PlanCollaborator {
  id: UUID!
  modelPlanID: UUID!
  euaUserID: String!
  fullName: String!
  cmsCenter: CMSCenter!
  teamRole: TeamRole!
  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
}

"""
PlanCollaboratorInput represents the data required to create, modify, or delete a collaborator on a plan
"""
input PlanCollaboratorInput {
  id: UUID
  modelPlanID: UUID!
  euaUserID: String!
  fullName: String!
  cmsCenter: CMSCenter!
  teamRole: TeamRole!
  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
}

"""
Represents plan basics
"""
type PlanBasics {
  id: UUID
  modelPlanID: UUID

  modelType: ModelType
  problem: String
  goal: String
  testInventions: String
  note: String
  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
  status: TaskStatus!
}


"""
Represents plan basics
"""
input PlanBasicsInput {
  id: UUID
  modelPlanID: UUID

  modelType: ModelType
  problem: String
  goal: String
  testInventions: String
  note: String
  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
  status: TaskStatus!
}

"""
Represents a person response from CEDAR LDAP
"""
type UserInfo {
  commonName: String!
  email: String!
  euaUserId: String!
}

"""
Query definition for the schema
"""
type Query {
  currentUser: CurrentUser
  modelPlan(id: UUID!) : ModelPlan
  planBasics(id: UUID!) : PlanBasics
  modelPlanCollection: [ModelPlan]
  cedarPersonsByCommonName(commonName: String!): [UserInfo!]!
}

"""
Mutations definition for the schema
"""
type Mutation {
createModelPlan(input: ModelPlanInput!):ModelPlan
@hasRole(role: MINT_BASE_USER)

createPlanCollaborator(input: PlanCollaboratorInput!): PlanCollaborator
@hasRole(role: MINT_BASE_USER)

updatePlanCollaborator(input: PlanCollaboratorInput!): PlanCollaborator
@hasRole(role: MINT_BASE_USER)

deletePlanCollaborator(input: PlanCollaboratorInput!): PlanCollaborator
@hasRole(role: MINT_BASE_USER)

createPlanBasics(input: PlanBasicsInput!):PlanBasics
@hasRole(role: MINT_BASE_USER)

updateModelPlan(input: ModelPlanInput!):ModelPlan
@hasRole(role: MINT_BASE_USER)

updatePlanBasics(input: PlanBasicsInput!): PlanBasics
@hasRole(role: MINT_BASE_USER)
}

enum TaskStatus {
  READY
  IN_PROGRESS
  COMPLETE
}

enum TeamRole {
  MODEL_LEAD
  MODEL_TEAM
  LEADERSHIP
  LEARNING
  EVALUATION
}

enum ModelType
{
  VOLUNTARY
  MANDATORY
  TBD
}

enum ModelCategory{
	ACCOUNTABLE_CARE
	DEMONSTRATION
	EPISODE_BASED_PAYMENT_INITIATIVES
	INIT_MEDICAID_CHIP_POP
	INIT__MEDICARE_MEDICAID_ENROLLEES
	INIT_ACCEL_DEV_AND_TEST
	INIT_SPEED_ADOPT_BEST_PRACTICE
	PRIMARY_CARE_TRANSFORMATION
	UNKNOWN
}
enum CMSCenter {
  CMMI
  CENTER_FOR_MEDICARE
  FEDERAL_COORDINATED_HEALTH_CARE_OFFICE
  CENTER_FOR_CLINICAL_STANDARDS_AND_QUALITY
  CENTER_FOR_PROGRAM_INTEGRITY
  OTHER
}

enum CMMIGroup {
  PATIENT_CARE_MODELS_GROUP
  POLICY_AND_PROGRAMS_GROUP
  PREVENTIVE_AND_POPULATION_HEALTH_CARE_MODELS_GROUP
  SEAMLESS_CARE_MODELS_GROUP
  STATE_INNOVATIONS_GROUP
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

"""
A user role associated with a job code
"""
enum Role {
  """
  A basic MINT user
  """
  MINT_BASE_USER

  """
  A MINT admin user
  """
  MINT_ADMIN_USER
}
