

"""
The current user's Launch Darkly key
"""
type LaunchDarklySettings {
  userKey: String!
  signedHash: String!
}

"""
The current user of the application
"""
type CurrentUser {
  launchDarkly: LaunchDarklySettings!
}
"""
UUIDs are represented using 36 ASCII characters, for example B0511859-ADE6-4A67-8969-16EC280C0E1A
"""
scalar UUID
"""
Time values are represented as strings using RFC3339 format, for example 2019-10-12T07:20:50.52Z
"""
scalar Time

"""
ModelPlan represent the data point for plans about a model. It is the central data type in the application
"""
type ModelPlan {
  id: UUID
  modelName: String
  modelCategory: String
  cmsCenter: String
  cmmiGroup: String
  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
}

"""
ModelPlanInput represent the data point for plans about a model. It is the central data type in the appliation
"""
# input ModelPlanInput ModelPlan {
input ModelPlanInput{
id: UUID
modelName: String
modelCategory: String
cmsCenter: String
cmmiGroup: String
createdBy: String
createdDts: Time
modifiedBy: String
modifiedDts: Time
}



"""
Represents plan basics
"""
type PlanBasics {
  id: UUID
  modelPlanID: UUID

  modelType: String
  problem: String
  goal: String
  testInventions: String
  note: String
  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
  status: String
}


"""
Represents plan basics
"""
input PlanBasicsInput {
  id: UUID
  modelPlanID: UUID

  modelType: String
  problem: String
  goal: String
  testInventions: String
  note: String
  createdBy: String
  createdDts: Time
  modifiedBy: String
  modifiedDts: Time
  status: String
}


"""
Query definition for the schema
"""
type Query {
  currentUser: CurrentUser
  modelPlan(id: UUID!) : ModelPlan
  planBasics(id: UUID!) : PlanBasics
  modelPlanCollection: [ModelPlan]
}

"""
Mutations definition for the schema
"""
type Mutation {
createModelPlan(input: ModelPlanInput!):ModelPlan
@hasRole(role: MINT_BASE_USER)
# createPlanBasics(input: CreatePlanBasicsRequestInput!):CreatePlanBasicsPayload
createPlanBasics(input: PlanBasicsInput!):PlanBasics
@hasRole(role: MINT_BASE_USER)

updateModelPlan(input: ModelPlanInput!):ModelPlan
@hasRole(role: MINT_BASE_USER)

}

directive @hasRole(role: Role!) on FIELD_DEFINITION

"""
A user role associated with a job code
"""
enum Role {
  """
  A basic MINT user
  """
  MINT_BASE_USER

  """
  A MINT admin user
  """
  MINT_ADMIN_USER
}
