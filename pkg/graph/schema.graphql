

"""
The current user's Launch Darkly key
"""
type LaunchDarklySettings {
  userKey: String!
  signedHash: String!
}

"""
The current user of the application
"""
type CurrentUser {
  launchDarkly: LaunchDarklySettings!
  account: UserAccount!
  notifications: UserNotifications!
  notificationPreferences: UserNotificationPreferences!
}
"""
UUIDs are represented using 36 ASCII characters, for example B0511859-ADE6-4A67-8969-16EC280C0E1A
"""
scalar UUID
"""
Time values are represented as strings using RFC3339 format, for example 2019-10-12T07:20:50G.52Z
"""
scalar Time
"""
Maps an arbitrary GraphQL value to a map[string]interface{} Go type.
"""
scalar Map

"""
TaggedHTML represents an input type for HTML that could also include tags that reference another entity
"""
scalar TaggedHTML

enum SortDirection {
  ASC
  DESC
}
"""
https://gqlgen.com/reference/file-upload/
Represents a multipart file upload
"""
scalar Upload

"""
ModelPlan represent the data point for plans about a model. It is the central data type in the application
"""
type ModelPlan {
  id: UUID!
  modelName: String!
  abbreviation: String
  archived: Boolean!
  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
  basics: PlanBasics!
  generalCharacteristics: PlanGeneralCharacteristics!
  participantsAndProviders: PlanParticipantsAndProviders!
  beneficiaries: PlanBeneficiaries!
  opsEvalAndLearning: PlanOpsEvalAndLearning!
  collaborators: [PlanCollaborator!]!
  documents: [PlanDocument!]!
  discussions: [PlanDiscussion!]!
  payments: PlanPayments!
  status: ModelStatus!
  isFavorite: Boolean!
  isCollaborator: Boolean!
  crs: [PlanCR!]!
  tdls: [PlanTDL!]!
  prepareForClearance: PrepareForClearance!
  nameHistory(sort: SortDirection! = DESC): [String!]!
  operationalNeeds: [OperationalNeed!]!
}

type OperationalNeed {
    id: UUID!
    modelPlanID: UUID!

    needed: Boolean # if null, it has not been answered
    solutions(includeNotNeeded: Boolean! = false): [OperationalSolution!]!

    key: OperationalNeedKey
    name: String
    nameOther: String
    section: TaskListSection

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}

type PossibleOperationalNeed {
    id: Int!
    possibleSolutions: [PossibleOperationalSolution!]!
    name: String!
    key: OperationalNeedKey!
    section: TaskListSection

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}
type PossibleOperationalSolution {
    id: Int!
    name: String!
    key: OperationalSolutionKey!
    treatAsOther: Boolean!
    pointsOfContact: [PossibleOperationalSolutionContact!]!
    filterView: ModelViewFilter

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}

"""
PossibleOperationalSolutionContact represents a contact for a possible operational solution
"""
type PossibleOperationalSolutionContact {
  id: UUID!
  possibleOperationalSolutionID: Int!

  name: String!
  email: String!
  isTeam: Boolean!
  role: String


  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

"""
ModelPlanChanges represents the possible changes you can make to a model plan when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input ModelPlanChanges @goModel(model: "map[string]interface{}") {
  modelName: String
  abbreviation: String
  someNumbers: [Int!]
  archived: Boolean
  status: ModelStatus
}

"""
PlanCollaborator represents a collaborator on a plan
"""
type PlanCollaborator {
  id: UUID!
  modelPlanID: UUID!
  userID: UUID!
  userAccount: UserAccount!
  teamRoles: [TeamRole!]!
  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}
"""
ExistingModel represents a model that already exists outside of the scope of MINT
"""
type ExistingModel {
  id: Int
  modelName: String!
  stage: String!
  numberOfParticipants: String
  category: String
  authority: String
  description: String
  numberOfBeneficiariesImpacted: Int
  numberOfPhysiciansImpacted: Int
  dateBegan: Time
  dateEnded: Time
  states: String
  keywords: String
  url: String
  displayModelSummary: Boolean

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}
"""
LinkedExistingModel is a union type that returns either an Existing Model, or a Model plan from the database
"""
union LinkedExistingModel =  ExistingModel | ModelPlan


type ExistingModelLinks {
  links: [ExistingModelLink!]!
  fieldName: ExisitingModelLinkFieldType!
  modelPlanID: UUID!
  names: [String!]!
}

type ExistingModelLink {
  id: UUID
  modelPlanID: UUID!
  existingModelID: Int
  currentModelPlanID: UUID
  fieldName: ExisitingModelLinkFieldType!
  model: LinkedExistingModel!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

type TaskListSectionLockStatusChanged {
  changeType: ChangeType!
  lockStatus: TaskListSectionLockStatus!
  actionType: ActionType!
}

type TaskListSectionLockStatus {
  modelPlanID: UUID!
  section: TaskListSection!
  lockedByUserAccount: UserAccount!
  isAssessment: Boolean!
}

"""
PlanCollaboratorCreateInput represents the data required to create a collaborator on a plan
"""
input PlanCollaboratorCreateInput {
  modelPlanID: UUID!
  userName: String!
  teamRoles: [TeamRole!]!
}

"""
PlanDocument represents a document on a plan
"""
type PlanDocument {
  id: UUID!
  modelPlanID: UUID!

  """
  If isLink = true, then this is a URL to a linked document, not an uploaded document
  """
  isLink: Boolean!
  """
  URL is the link that must be provided if this is a link instead of an uploaded document
  """
  url: String



  fileType: String!
  bucket: String!
  fileKey: String!
  virusScanned: Boolean!
  virusClean: Boolean!
  restricted: Boolean!
  fileName: String!
  fileSize: Int!
  documentType: DocumentType!
  otherType: String
  optionalNotes: String
  downloadUrl: String
  deletedAt: Time
  numLinkedSolutions: Int!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}


"""
PlanDocumentInput
"""
input PlanDocumentInput {
  modelPlanID: UUID!
  fileData: Upload!
  documentType: DocumentType!
  restricted: Boolean!
  otherTypeDescription: String
  optionalNotes: String
}

"""
PlanDocumentLinkInput
"""
input PlanDocumentLinkInput {
  modelPlanID: UUID!
  url: String!
  name: String!
  documentType: DocumentType!
  restricted: Boolean!
  otherTypeDescription: String
  optionalNotes: String
}

"""
Represents plan basics
"""
type PlanBasics {
  id: UUID!
  modelPlanID: UUID!

  demoCode: String
  amsModelID: String

  modelCategory: ModelCategory
  additionalModelCategories: [ModelCategory!]!
  cmsCenters: [CMSCenter!]!
  cmmiGroups: [CMMIGroup!]!
  modelType: [ModelType!]!
  modelTypeOther: String
  problem: String
  goal: String
  testInterventions: String
  note: String

  # Milestones
  completeICIP: Time
  clearanceStarts: Time
  clearanceEnds: Time
  announced: Time
  applicationsStart: Time
  applicationsEnd: Time
  performancePeriodStarts: Time
  performancePeriodEnds: Time
  wrapUpEnds: Time
  highLevelNote: String
  phasedIn: Boolean
  phasedInNote: String

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

  readyForReviewBy: UUID
  readyForReviewByUserAccount: UserAccount
  readyForReviewDts: Time
  readyForClearanceBy: UUID
  readyForClearanceByUserAccount: UserAccount
  readyForClearanceDts: Time

  status: TaskStatus!
}

"""
PlanBasicsChanges represents the possible changes you can make to a Plan Basics object when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input PlanBasicsChanges @goModel(model: "map[string]interface{}") {
  demoCode: String
  amsModelID: String

  modelCategory: ModelCategory
  additionalModelCategories: [ModelCategory!]
  cmsCenters: [CMSCenter!]
  cmmiGroups: [CMMIGroup!]
  modelType: [ModelType!]
  modelTypeOther: String
  problem: String
  goal: String
  testInterventions: String
  note: String

  # Milestones
  completeICIP: Time
  clearanceStarts: Time
  clearanceEnds: Time
  announced: Time
  applicationsStart: Time
  applicationsEnd: Time
  performancePeriodStarts: Time
  performancePeriodEnds: Time
  wrapUpEnds: Time
  highLevelNote: String
  phasedIn: Boolean
  phasedInNote: String
  status: TaskStatusInput
}

"""
Represents a person response from the Okta API
"""
type UserInfo {
  firstName: String!
  lastName: String!
  displayName: String!
  email: String!
  username: String!
}


"""
TaggedEntity is the actual object represented by a tag in the data base.
"""
union TaggedEntity =  UserAccount | PossibleOperationalSolution

"""
TaggedContent represents content that has a tag in it. It is composed of the raw tag text, as well as the array of possible tags
"""
type TaggedContent {
  """
  RawContent is HTML. It is sanitized on the backend
  """
  rawContent: String!
  tags: [Tag!]!
}

"""
Tag represents an entity tagged in the database
"""
type Tag {
  id: UUID!
  tagType: TagType!
  taggedField: String!
  taggedContentTable: String!
  taggedContentID: UUID!
  entityUUID: UUID
  entityIntID: Int

  entity: TaggedEntity

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

enum TagType {
    USER_ACCOUNT
    POSSIBLE_SOLUTION
}

"""
PlanDiscussion represents plan discussion
"""
type PlanDiscussion  {
	id: UUID!
	modelPlanID: UUID!
	content: TaggedContent
  userRole: DiscussionUserRole
  userRoleDescription: String
  replies: [DiscussionReply!]!
  isAssessment: Boolean!


  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

"""
PlanDiscussionCreateInput represents the necessary fields to create a plan discussion
"""
input PlanDiscussionCreateInput {
  modelPlanID: UUID!
  content: TaggedHTML!
  userRole: DiscussionUserRole
  userRoleDescription: String
}


"""
DiscussionReply represents a discussion reply
"""
type DiscussionReply  {
	id: UUID!
	discussionID: UUID!
	content: TaggedContent
  userRole: DiscussionUserRole
  userRoleDescription: String
  isAssessment: Boolean!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

"""
DiscussionReplyCreateInput represents the necessary fields to create a discussion reply
"""
input DiscussionReplyCreateInput {
  discussionID: UUID!
  content: TaggedHTML!
  userRole: DiscussionUserRole
  userRoleDescription: String
}

"""
PlanGeneralCharacteristics represents a plan general characteristics object
"""
type PlanGeneralCharacteristics {
  id: UUID!
  modelPlanID: UUID!

  # Page 1
  isNewModel: Boolean
  existingModel: String
  currentModelPlanID: UUID
  currentModelPlan: ModelPlan
  existingModelID: Int
  existingModelPlan: ExistingModel
  resemblesExistingModel: YesNoOtherType
  """
  For providing clarifying comments if Yes or No is selected for resemblesExistingModel
  """
  resemblesExistingModelWhyHow: String
  """
  For providing clarifying comments if Other is selected for resemblesExistingModel
  """
  resemblesExistingModelOtherSpecify: String
  """
  For denoting if there is an other model that this model resembles if it's true that it resembles existing models.
  """
  resemblesExistingModelOtherSelected: Boolean
  """
  For denoting the name of the other existing model that this model resembles
  """
  resemblesExistingModelOtherOption: String
  resemblesExistingModelHow: String
  resemblesExistingModelNote: String
  resemblesExistingModelWhich: ExistingModelLinks
  """
  For answering if participation in other models is a precondition for participating in this model
  """
  participationInModelPrecondition: YesNoOtherType
  """
  For providing clarifying comments if Yes or No is selected for participationInModelPrecondition
  """
  participationInModelPreconditionWhyHow: String
  """
  For providing clarifying comments if Other is selected for participationInModelPrecondition
  """
  participationInModelPreconditionOtherSpecify: String
  """
  For denoting if there is an other model that this model refers to.
  """
  participationInModelPreconditionOtherSelected: Boolean
  """
  For denoting the name of the other existing model
  """
  participationInModelPreconditionOtherOption: String
  """
  A note field for participationInModelPrecondition
  """
  participationInModelPreconditionNote: String
  """
  The collection of existing model links relevant to the participationInModelPrecondition question
  """
  participationInModelPreconditionWhich: ExistingModelLinks
  hasComponentsOrTracks: Boolean
  hasComponentsOrTracksDiffer: String
  hasComponentsOrTracksNote: String

  # Page 2
  agencyOrStateHelp: [AgencyOrStateHelpType!]!
  agencyOrStateHelpOther: String
  agencyOrStateHelpNote: String
  alternativePaymentModelTypes: [AlternativePaymentModelType!]!
  alternativePaymentModelNote: String
  keyCharacteristics: [KeyCharacteristic!]!
  keyCharacteristicsOther: String
  keyCharacteristicsNote: String
  collectPlanBids: Boolean
  collectPlanBidsNote: String
  managePartCDEnrollment: Boolean
  managePartCDEnrollmentNote: String
  planContractUpdated: Boolean
  planContractUpdatedNote: String

  # Page 3
  careCoordinationInvolved: Boolean
  careCoordinationInvolvedDescription: String
  careCoordinationInvolvedNote: String
  additionalServicesInvolved: Boolean
  additionalServicesInvolvedDescription: String
  additionalServicesInvolvedNote: String
  communityPartnersInvolved: Boolean
  communityPartnersInvolvedDescription: String
  communityPartnersInvolvedNote: String

  # Page 4
  geographiesTargeted: Boolean
  geographiesTargetedTypes: [GeographyType!]!
  geographiesStatesAndTerritories: [StatesAndTerritories!]!
  geographiesRegionTypes: [GeographyRegionType!]!
  geographiesTargetedTypesOther: String
  geographiesTargetedAppliedTo: [GeographyApplication!]!
  geographiesTargetedAppliedToOther: String
  geographiesTargetedNote: String
  participationOptions: Boolean
  participationOptionsNote: String
  agreementTypes: [AgreementType!]!
  agreementTypesOther: String
  multiplePatricipationAgreementsNeeded: Boolean
  multiplePatricipationAgreementsNeededNote: String

  # Page 5
  rulemakingRequired: Boolean
  rulemakingRequiredDescription: String
  rulemakingRequiredNote: String
  authorityAllowances: [AuthorityAllowance!]!
  authorityAllowancesOther: String
  authorityAllowancesNote: String
  waiversRequired: Boolean
  waiversRequiredTypes: [WaiverType!]!
  waiversRequiredNote: String

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

  readyForReviewBy: UUID
  readyForReviewByUserAccount: UserAccount
  readyForReviewDts: Time
  readyForClearanceBy: UUID
  readyForClearanceByUserAccount: UserAccount
  readyForClearanceDts: Time

  status: TaskStatus!
}

"""
PlanGeneralCharacteristicsChanges represents the possible changes you can make to a
general characteristics object when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input PlanGeneralCharacteristicsChanges @goModel(model: "map[string]interface{}") {
  # Page 1
  isNewModel: Boolean
  currentModelPlanID: UUID
  existingModelID: Int
  resemblesExistingModel: YesNoOtherType
  """
  For providing clarifying comments if Yes or No is selected for resemblesExistingModel
  """
  resemblesExistingModelWhyHow: String
  """
  For providing clarifying comments if Other is selected for resemblesExistingModel
  """
  resemblesExistingModelOtherSpecify: String
  """
  For denoting if there is an other model that this model resembles if it's true that it resembles existing models.
  """
  resemblesExistingModelOtherSelected: Boolean
  """
  For denoting the name of the other existing model that this model resembles
  """
  resemblesExistingModelOtherOption: String
  resemblesExistingModelHow: String
  resemblesExistingModelNote: String
  """
  For answering if participation in other models is a precondition for participating in this model
  """
  participationInModelPrecondition: YesNoOtherType
  """
  For providing clarifying comments if Yes or No is selected for participationInModelPrecondition
  """
  participationInModelPreconditionWhyHow: String
  """
  For providing clarifying comments if Other is selected for participationInModelPrecondition
  """
  participationInModelPreconditionOtherSpecify: String
  """
  For denoting if there is an other model that this model refers to.
  """
  participationInModelPreconditionOtherSelected: Boolean
  """
  For denoting the name of the other existing model
  """
  participationInModelPreconditionOtherOption: String
  """
  A note field for participationInModelPrecondition
  """
  participationInModelPreconditionNote: String
  hasComponentsOrTracks: Boolean
  hasComponentsOrTracksDiffer: String
  hasComponentsOrTracksNote: String

  # Page 2
  agencyOrStateHelp: [AgencyOrStateHelpType!]
  agencyOrStateHelpOther: String
  agencyOrStateHelpNote: String
  alternativePaymentModelTypes: [AlternativePaymentModelType!]
  alternativePaymentModelNote: String
  keyCharacteristics: [KeyCharacteristic!]
  keyCharacteristicsOther: String
  keyCharacteristicsNote: String
  collectPlanBids: Boolean
  collectPlanBidsNote: String
  managePartCDEnrollment: Boolean
  managePartCDEnrollmentNote: String
  planContractUpdated: Boolean
  planContractUpdatedNote: String

  # Page 3
  careCoordinationInvolved: Boolean
  careCoordinationInvolvedDescription: String
  careCoordinationInvolvedNote: String
  additionalServicesInvolved: Boolean
  additionalServicesInvolvedDescription: String
  additionalServicesInvolvedNote: String
  communityPartnersInvolved: Boolean
  communityPartnersInvolvedDescription: String
  communityPartnersInvolvedNote: String

  # Page 4
  geographiesTargeted: Boolean
  geographiesTargetedTypes: [GeographyType!]
  geographiesStatesAndTerritories: [StatesAndTerritories!]
  geographiesRegionTypes: [GeographyRegionType!]
  geographiesTargetedTypesOther: String
  geographiesTargetedAppliedTo: [GeographyApplication!]
  geographiesTargetedAppliedToOther: String
  geographiesTargetedNote: String
  participationOptions: Boolean
  participationOptionsNote: String
  agreementTypes: [AgreementType!]
  agreementTypesOther: String
  multiplePatricipationAgreementsNeeded: Boolean
  multiplePatricipationAgreementsNeededNote: String

  # Page 5
  rulemakingRequired: Boolean
  rulemakingRequiredDescription: String
  rulemakingRequiredNote: String
  authorityAllowances: [AuthorityAllowance!]
  authorityAllowancesOther: String
  authorityAllowancesNote: String
  waiversRequired: Boolean
  waiversRequiredTypes: [WaiverType!]
  waiversRequiredNote: String

  status: TaskStatusInput
}

"""
Plan Beneficiaries represents the the beneficiaries section of the task list
"""

type PlanBeneficiaries {
  id: UUID!
  modelPlanID: UUID!
  #Page 1
  beneficiaries: [BeneficiariesType!]!
  beneficiariesOther: String
  beneficiariesNote: String
  diseaseSpecificGroup: String
  treatDualElligibleDifferent: TriStateAnswer
  treatDualElligibleDifferentHow: String
  treatDualElligibleDifferentNote: String
  excludeCertainCharacteristics: TriStateAnswer
  excludeCertainCharacteristicsCriteria: String
  excludeCertainCharacteristicsNote: String
  #Page 2
  numberPeopleImpacted: Int
  estimateConfidence: ConfidenceType
  confidenceNote: String
  beneficiarySelectionMethod: [SelectionMethodType!]!
  beneficiarySelectionOther: String
  beneficiarySelectionNote: String
  #Page 3
  beneficiarySelectionFrequency: [FrequencyType!]!
  beneficiarySelectionFrequencyContinually: String
  beneficiarySelectionFrequencyOther: String
  beneficiarySelectionFrequencyNote: String
  beneficiaryRemovalFrequency: [FrequencyType!]!
  beneficiaryRemovalFrequencyContinually: String
  beneficiaryRemovalFrequencyOther: String
  beneficiaryRemovalFrequencyNote: String
  beneficiaryOverlap: OverlapType
  beneficiaryOverlapNote: String
  precedenceRules: [YesNoType!]!
  precedenceRulesYes: String
  precedenceRulesNo: String
  precedenceRulesNote: String

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

  readyForReviewBy: UUID
  readyForReviewByUserAccount: UserAccount
  readyForReviewDts: Time
  readyForClearanceBy: UUID
  readyForClearanceByUserAccount: UserAccount
  readyForClearanceDts: Time

  status: TaskStatus!
}

input PlanBeneficiariesChanges @goModel(model: "map[string]interface{}") {
  #Page 1
  beneficiaries: [BeneficiariesType!]
  beneficiariesOther: String
  beneficiariesNote: String
  diseaseSpecificGroup: String
  treatDualElligibleDifferent: TriStateAnswer
  treatDualElligibleDifferentHow: String
  treatDualElligibleDifferentNote: String
  excludeCertainCharacteristics: TriStateAnswer
  excludeCertainCharacteristicsCriteria: String
  excludeCertainCharacteristicsNote: String
  #Page 2
  numberPeopleImpacted: Int
  estimateConfidence: ConfidenceType
  confidenceNote: String
  beneficiarySelectionMethod: [SelectionMethodType!]
  beneficiarySelectionOther: String
  beneficiarySelectionNote: String
  #Page 3
  beneficiarySelectionFrequency: [FrequencyType!]
  beneficiarySelectionFrequencyContinually: String
  beneficiarySelectionFrequencyOther: String
  beneficiarySelectionFrequencyNote: String
  beneficiaryRemovalFrequency: [FrequencyType!]
  beneficiaryRemovalFrequencyContinually: String
  beneficiaryRemovalFrequencyOther: String
  beneficiaryRemovalFrequencyNote: String
  beneficiaryOverlap: OverlapType
  beneficiaryOverlapNote: String
  precedenceRules: [YesNoType!]
  precedenceRulesYes: String
  precedenceRulesNo: String
  precedenceRulesNote: String

  status: TaskStatusInput
}

"""
PlanParticipantsAndProviders is the task list section that deals with information regarding all Providers and Participants
"""
type PlanParticipantsAndProviders {
  id: UUID!
  modelPlanID: UUID!

  #Page 1
  participants:                      [ParticipantsType!]!
  medicareProviderType:              String
  statesEngagement:                  String
  participantsOther:                 String
  participantsNote:                  String
  participantsCurrentlyInModels:     Boolean
  participantsCurrentlyInModelsNote: String
  modelApplicationLevel:             String

  #Page 2
  expectedNumberOfParticipants: Int
  estimateConfidence:           ConfidenceType
  confidenceNote:               String
  recruitmentMethod:            RecruitmentType
  recruitmentOther:             String
  recruitmentNote:              String
  selectionMethod:              [ParticipantSelectionType!]!
  selectionOther:               String
  selectionNote:                String

  #Page 3
  participantAddedFrequency:                 [FrequencyType!]!
  participantAddedFrequencyContinually:      String
  participantAddedFrequencyOther:            String
  participantAddedFrequencyNote:             String
  participantRemovedFrequency:               [FrequencyType!]!
  participantRemovedFrequencyContinually:    String
  participantRemovedFrequencyOther:          String
  participantRemovedFrequencyNote:           String
  communicationMethod:   [ParticipantCommunicationType!]!
  communicationMethodOther:   String
  communicationNote:     String
  riskType:              [ParticipantRiskType!]!
  riskOther:             String
  riskNote:              String
  willRiskChange:        Boolean
  willRiskChangeNote:    String

  #Page 4
  coordinateWork:          Boolean
  coordinateWorkNote:      String
  gainsharePayments:       Boolean
  gainsharePaymentsTrack: Boolean
  gainsharePaymentsNote:   String
  gainsharePaymentsEligibility: [GainshareArrangementEligibility!]!
  gainsharePaymentsEligibilityOther: String
  participantsIds:         [ParticipantsIDType!]!
  participantsIdsOther:    String
  participantsIDSNote:     String

  #Page 5
  providerAdditionFrequency:      [FrequencyType!]!
  providerAdditionFrequencyContinually: String
  providerAdditionFrequencyOther: String
  providerAdditionFrequencyNote:  String
  providerAddMethod:              [ProviderAddType!]!
  providerAddMethodOther:         String
  providerAddMethodNote:          String
  providerLeaveMethod:            [ProviderLeaveType!]!
  providerLeaveMethodOther:       String
  providerLeaveMethodNote:        String
  providerRemovalFrequency:       [FrequencyType!]!
  providerRemovalFrequencyContinually: String
  providerRemovalFrequencyOther:  String
  providerRemovalFrequencyNote:   String
  providerOverlap:                OverlapType
  providerOverlapHierarchy:       String
  providerOverlapNote:            String


  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

  readyForReviewBy: UUID
  readyForReviewByUserAccount: UserAccount
  readyForReviewDts: Time
  readyForClearanceBy: UUID
  readyForClearanceByUserAccount: UserAccount
  readyForClearanceDts: Time

  status: TaskStatus!

}

"""
PlanParticipantsAndProvidersChanges represents the possible changes you can make to a
providers and participants object when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input PlanParticipantsAndProvidersChanges @goModel(model: "map[string]interface{}") {
  #Page 1
  participants:                      [ParticipantsType!]
  medicareProviderType:              String
  statesEngagement:                  String
  participantsOther:                 String
  participantsNote:                  String
  participantsCurrentlyInModels:     Boolean
  participantsCurrentlyInModelsNote: String
  modelApplicationLevel:             String

  #Page 2
  expectedNumberOfParticipants: Int
  estimateConfidence:           ConfidenceType
  confidenceNote:               String
  recruitmentMethod:            RecruitmentType
  recruitmentOther:             String
  recruitmentNote:              String
  selectionMethod:              [ParticipantSelectionType!]
  selectionOther:               String
  selectionNote:                String

  #Page 3
  participantAddedFrequency:                 [FrequencyType!]
  participantAddedFrequencyContinually:      String
  participantAddedFrequencyOther:            String
  participantAddedFrequencyNote:             String
  participantRemovedFrequency:               [FrequencyType!]
  participantRemovedFrequencyContinually:    String
  participantRemovedFrequencyOther:          String
  participantRemovedFrequencyNote:           String
  communicationMethod:   [ParticipantCommunicationType!]
  communicationMethodOther:   String
  communicationNote:     String
  riskType:              [ParticipantRiskType!]
  riskOther:             String
  riskNote:              String
  willRiskChange:        Boolean
  willRiskChangeNote:    String

  #Page 4
  coordinateWork:          Boolean
  coordinateWorkNote:      String
  gainsharePayments:       Boolean
  gainsharePaymentsTrack: Boolean
  gainsharePaymentsNote:   String
  gainsharePaymentsEligibility: [GainshareArrangementEligibility!]
  gainsharePaymentsEligibilityOther: String
  participantsIds:         [ParticipantsIDType!]
  participantsIdsOther:    String
  participantsIDSNote:     String

  #Page 5
  providerAdditionFrequency:      [FrequencyType!]
  providerAdditionFrequencyContinually: String
  providerAdditionFrequencyOther: String
  providerAdditionFrequencyNote:  String
  providerAddMethod:              [ProviderAddType!]
  providerAddMethodOther:         String
  providerAddMethodNote:          String
  providerLeaveMethod:            [ProviderLeaveType!]
  providerLeaveMethodOther:       String
  providerLeaveMethodNote:        String
  providerRemovalFrequency:       [FrequencyType!]
  providerRemovalFrequencyContinually: String
  providerRemovalFrequencyOther:  String
  providerRemovalFrequencyNote:   String
  providerOverlap:                OverlapType
  providerOverlapHierarchy:       String
  providerOverlapNote:            String

  status: TaskStatusInput
}

"""
PlanPayments is the task list section that deals with information regarding Payments
"""
type PlanPayments {
  id: UUID!
  modelPlanID: UUID!

  # Page 1
  fundingSource:                      [FundingSource!]!
  fundingSourceMedicareAInfo:         String
  fundingSourceMedicareBInfo:         String
  fundingSourceOther:                 String
  fundingSourceNote:                  String
  fundingSourceR:                     [FundingSource!]!
  fundingSourceRMedicareAInfo:        String
  fundingSourceRMedicareBInfo:        String
  fundingSourceROther:                String
  fundingSourceRNote:                 String
  payRecipients:                      [PayRecipient!]!
  payRecipientsOtherSpecification:    String
  payRecipientsNote:                  String
  payType:                            [PayType!]!
  payTypeNote:                        String

  # Page 2
  payClaims:                                      [ClaimsBasedPayType!]!
  payClaimsOther:                                 String
  payClaimsNote:                                  String
  shouldAnyProvidersExcludedFFSSystems:           Boolean
  shouldAnyProviderExcludedFFSSystemsNote:        String
  changesMedicarePhysicianFeeSchedule:            Boolean
  changesMedicarePhysicianFeeScheduleNote:        String
  affectsMedicareSecondaryPayerClaims:            Boolean
  affectsMedicareSecondaryPayerClaimsHow:         String
  affectsMedicareSecondaryPayerClaimsNote:        String
  payModelDifferentiation:                        String

  # Page 3
  creatingDependenciesBetweenServices:     Boolean
  creatingDependenciesBetweenServicesNote: String
  needsClaimsDataCollection:               Boolean
  needsClaimsDataCollectionNote:           String
  providingThirdPartyFile:                 Boolean
  isContractorAwareTestDataRequirements:   Boolean

  # Page 4
  beneficiaryCostSharingLevelAndHandling:          String
  waiveBeneficiaryCostSharingForAnyServices:       Boolean
  waiveBeneficiaryCostSharingServiceSpecification: String
  waiverOnlyAppliesPartOfPayment:                  Boolean
  waiveBeneficiaryCostSharingNote:                 String

  # Page 5
  nonClaimsPayments:                               [NonClaimsBasedPayType!]!
  nonClaimsPaymentOther:                           String
  nonClaimsPaymentsNote:                           String
  paymentCalculationOwner:                         String
  numberPaymentsPerPayCycle:                       String
  numberPaymentsPerPayCycleNote:                   String
  sharedSystemsInvolvedAdditionalClaimPayment:     Boolean
  sharedSystemsInvolvedAdditionalClaimPaymentNote: String
  planningToUseInnovationPaymentContractor:        Boolean
  planningToUseInnovationPaymentContractorNote:    String

  # Page 6
  expectedCalculationComplexityLevel:                ComplexityCalculationLevelType
  expectedCalculationComplexityLevelNote:            String
  claimsProcessingPrecedence:                        Boolean
  claimsProcessingPrecedenceOther:                   String
  claimsProcessingPrecedenceNote:                    String
  canParticipantsSelectBetweenPaymentMechanisms:     Boolean
  canParticipantsSelectBetweenPaymentMechanismsHow:  String
  canParticipantsSelectBetweenPaymentMechanismsNote: String
  anticipatedPaymentFrequency:                       [FrequencyType!]!
  anticipatedPaymentFrequencyContinually:            String
  anticipatedPaymentFrequencyOther:                  String
  anticipatedPaymentFrequencyNote:                   String

  # Page 7
  willRecoverPayments:                               Boolean
  willRecoverPaymentsNote:                           String
  anticipateReconcilingPaymentsRetrospectively:      Boolean
  anticipateReconcilingPaymentsRetrospectivelyNote:  String
  paymentReconciliationFrequency:                    [FrequencyType!]!
  paymentReconciliationFrequencyContinually:         String
  paymentReconciliationFrequencyOther:               String
  paymentReconciliationFrequencyNote:                String
  paymentDemandRecoupmentFrequency:                  [FrequencyType!]!
  paymentDemandRecoupmentFrequencyContinually:       String
  paymentDemandRecoupmentFrequencyOther:             String
  paymentDemandRecoupmentFrequencyNote:              String
  paymentStartDate:                                  Time
  paymentStartDateNote:                              String

  # Meta

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

  readyForReviewBy: UUID
  readyForReviewByUserAccount: UserAccount
  readyForReviewDts: Time
  readyForClearanceBy: UUID
  readyForClearanceByUserAccount: UserAccount
  readyForClearanceDts: Time

  status:      TaskStatus!
}

input PlanPaymentsChanges @goModel(model: "map[string]interface{}") {
  # Page 1
  fundingSource:                      [FundingSource!] #Combine these
  fundingSourceMedicareAInfo:         String
  fundingSourceMedicareBInfo:         String
  # fundingSourceTrustFundType:         [TrustFundType!]
  fundingSourceOther:                 String
  fundingSourceNote:                  String
  fundingSourceR:                     [FundingSource!]
  fundingSourceRMedicareAInfo:        String
  fundingSourceRMedicareBInfo:        String
  # fundingSourceRTrustFundType:        [TrustFundType!]
  fundingSourceROther:                String
  fundingSourceRNote:                 String
  payRecipients:                      [PayRecipient!]
  payRecipientsOtherSpecification:    String
  payRecipientsNote:                  String
  payType:                            [PayType!]
  payTypeNote:                        String

  # Page 2
  payClaims:                                      [ClaimsBasedPayType!]
  payClaimsOther:                                 String
  payClaimsNote:                                  String
  shouldAnyProvidersExcludedFFSSystems:           Boolean
  shouldAnyProviderExcludedFFSSystemsNote:        String
  changesMedicarePhysicianFeeSchedule:            Boolean
  changesMedicarePhysicianFeeScheduleNote:        String
  affectsMedicareSecondaryPayerClaims:            Boolean
  affectsMedicareSecondaryPayerClaimsHow:         String
  affectsMedicareSecondaryPayerClaimsNote:        String
  payModelDifferentiation:                        String

  # Page 3
  creatingDependenciesBetweenServices:     Boolean
  creatingDependenciesBetweenServicesNote: String
  needsClaimsDataCollection:               Boolean
  needsClaimsDataCollectionNote:           String
  providingThirdPartyFile:                 Boolean
  isContractorAwareTestDataRequirements:   Boolean

  # Page 4
  beneficiaryCostSharingLevelAndHandling:          String
  waiveBeneficiaryCostSharingForAnyServices:       Boolean
  waiveBeneficiaryCostSharingServiceSpecification: String
  waiverOnlyAppliesPartOfPayment:                  Boolean
  waiveBeneficiaryCostSharingNote:                 String

  # Page 5
  nonClaimsPayments:                               [NonClaimsBasedPayType!]
  nonClaimsPaymentOther:                           String
  nonClaimsPaymentsNote:                           String
  paymentCalculationOwner:                         String
  numberPaymentsPerPayCycle:                       String
  numberPaymentsPerPayCycleNote:                  String
  sharedSystemsInvolvedAdditionalClaimPayment:     Boolean
  sharedSystemsInvolvedAdditionalClaimPaymentNote: String
  planningToUseInnovationPaymentContractor:        Boolean
  planningToUseInnovationPaymentContractorNote:    String

  # Page 6
  expectedCalculationComplexityLevel:                       ComplexityCalculationLevelType
  expectedCalculationComplexityLevelNote:                   String
  claimsProcessingPrecedence:                               Boolean
  claimsProcessingPrecedenceOther:                          String
  claimsProcessingPrecedenceNote:                           String
  canParticipantsSelectBetweenPaymentMechanisms:            Boolean
  canParticipantsSelectBetweenPaymentMechanismsHow:         String
  canParticipantsSelectBetweenPaymentMechanismsNote:        String
  anticipatedPaymentFrequency:                              [FrequencyType!]
  anticipatedPaymentFrequencyContinually:                   String
  anticipatedPaymentFrequencyOther:                         String
  anticipatedPaymentFrequencyNote:                         String

  # Page 7
  willRecoverPayments:                               Boolean
  willRecoverPaymentsNote:                          String
  anticipateReconcilingPaymentsRetrospectively:      Boolean
  anticipateReconcilingPaymentsRetrospectivelyNote: String
  paymentReconciliationFrequency:                    [FrequencyType!]
  paymentReconciliationFrequencyContinually:         String
  paymentReconciliationFrequencyOther:               String
  paymentReconciliationFrequencyNote:                String
  paymentDemandRecoupmentFrequency:                    [FrequencyType!]
  paymentDemandRecoupmentFrequencyContinually:         String
  paymentDemandRecoupmentFrequencyOther:               String
  paymentDemandRecoupmentFrequencyNote:                String
  paymentStartDate:                                  Time
  paymentStartDateNote:                             String

  status: TaskStatusInput
}

"""
PlanOpsEvalAndLearning represents the task list section that deals with information regarding the Ops Eval and Learning
"""
type PlanOpsEvalAndLearning {
    id: UUID!
    modelPlanID: UUID!

    #Page 1
    stakeholders: [StakeholdersType!]!
    stakeholdersOther: String
    stakeholdersNote: String
    helpdeskUse: Boolean
    helpdeskUseNote: String
    contractorSupport: [ContractorSupportType!]!
    contractorSupportOther: String
    contractorSupportHow: String
    contractorSupportNote: String
    iddocSupport: Boolean
    iddocSupportNote: String
    #Page 2
    technicalContactsIdentified: Boolean
    technicalContactsIdentifiedDetail: String
    technicalContactsIdentifiedNote: String
    captureParticipantInfo: Boolean
    captureParticipantInfoNote: String
    icdOwner: String
    draftIcdDueDate: Time
    icdNote: String
    #Page 3
    uatNeeds: String
    stcNeeds: String
    testingTimelines: String
    testingNote: String
    dataMonitoringFileTypes: [MonitoringFileType!]!
    dataMonitoringFileOther: String
    dataResponseType: String
    dataResponseFileFrequency: String
    #Page 4
    dataFullTimeOrIncremental: DataFullTimeOrIncrementalType
    eftSetUp: Boolean
    unsolicitedAdjustmentsIncluded: Boolean
    dataFlowDiagramsNeeded: Boolean
    produceBenefitEnhancementFiles: Boolean
    fileNamingConventions: String
    dataMonitoringNote: String
    #Page 5
    benchmarkForPerformance: BenchmarkForPerformanceType
    benchmarkForPerformanceNote: String
    computePerformanceScores: Boolean
    computePerformanceScoresNote: String
    riskAdjustPerformance: Boolean
    riskAdjustFeedback: Boolean
    riskAdjustPayments: Boolean
    riskAdjustOther: Boolean
    riskAdjustNote: String
    appealPerformance: Boolean
    appealFeedback: Boolean
    appealPayments: Boolean
    appealOther: Boolean
    appealNote: String
    #Page 6
    evaluationApproaches: [EvaluationApproachType!]!
    evaluationApproachOther: String
    evalutaionApproachNote: String
    ccmInvolvment: [CcmInvolvmentType!]!
    ccmInvolvmentOther: String
    ccmInvolvmentNote: String
    dataNeededForMonitoring: [DataForMonitoringType!]!
    dataNeededForMonitoringOther: String
    dataNeededForMonitoringNote: String
    dataToSendParticicipants: [DataToSendParticipantsType!]!
    dataToSendParticicipantsOther: String
    dataToSendParticicipantsNote: String
    shareCclfData: Boolean
    shareCclfDataNote: String
    #Page 7
    sendFilesBetweenCcw: Boolean
    sendFilesBetweenCcwNote: String
    appToSendFilesToKnown: Boolean
    appToSendFilesToWhich: String
    appToSendFilesToNote: String
    useCcwForFileDistribiutionToParticipants: Boolean
    useCcwForFileDistribiutionToParticipantsNote: String
    developNewQualityMeasures: Boolean
    developNewQualityMeasuresNote: String
    qualityPerformanceImpactsPayment: YesNoOtherType
    qualityPerformanceImpactsPaymentOther: String
    qualityPerformanceImpactsPaymentNote: String
    #Page 8
    dataSharingStarts: DataStartsType
    dataSharingStartsOther: String
    dataSharingFrequency: [FrequencyType!]!
    dataSharingFrequencyContinually: String
    dataSharingFrequencyOther: String
    dataSharingStartsNote: String
    dataCollectionStarts: DataStartsType
    dataCollectionStartsOther: String
    dataCollectionFrequency: [FrequencyType!]!
    dataCollectionFrequencyContinually: String
    dataCollectionFrequencyOther: String
    dataCollectionFrequencyNote: String
    qualityReportingStarts: DataStartsType
    qualityReportingStartsOther: String
    qualityReportingStartsNote: String
    qualityReportingFrequency: [FrequencyType!]!
    qualityReportingFrequencyContinually: String
    qualityReportingFrequencyOther: String
    #Page 9
    modelLearningSystems: [ModelLearningSystemType!]!
    modelLearningSystemsOther: String
    modelLearningSystemsNote: String
    anticipatedChallenges: String

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time

    readyForReviewBy: UUID
    readyForReviewByUserAccount: UserAccount
    readyForReviewDts: Time
    readyForClearanceBy: UUID
    readyForClearanceByUserAccount: UserAccount
    readyForClearanceDts: Time

    status: TaskStatus!
}

"""
PlanOpsEvalAndLearningChanges represents the possible changes you can make to a
ops, eval and learning object when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input PlanOpsEvalAndLearningChanges @goModel(model: "map[string]interface{}") {

    #Page 1
    stakeholders: [StakeholdersType!]
    stakeholdersOther: String
    stakeholdersNote: String
    helpdeskUse: Boolean
    helpdeskUseNote: String
    contractorSupport: [ContractorSupportType!]
    contractorSupportOther: String
    contractorSupportHow: String
    contractorSupportNote: String
    iddocSupport: Boolean
    iddocSupportNote: String
    #Page 2
    technicalContactsIdentified: Boolean
    technicalContactsIdentifiedDetail: String
    technicalContactsIdentifiedNote: String
    captureParticipantInfo: Boolean
    captureParticipantInfoNote: String
    icdOwner: String
    draftIcdDueDate: Time
    icdNote: String
    #Page 3
    uatNeeds: String
    stcNeeds: String
    testingTimelines: String
    testingNote: String
    dataMonitoringFileTypes: [MonitoringFileType!]
    dataMonitoringFileOther: String
    dataResponseType: String
    dataResponseFileFrequency: String
    #Page 4
    dataFullTimeOrIncremental: DataFullTimeOrIncrementalType
    eftSetUp: Boolean
    unsolicitedAdjustmentsIncluded: Boolean
    dataFlowDiagramsNeeded: Boolean
    produceBenefitEnhancementFiles: Boolean
    fileNamingConventions: String
    dataMonitoringNote: String
    #Page 5
    benchmarkForPerformance: BenchmarkForPerformanceType
    benchmarkForPerformanceNote: String
    computePerformanceScores: Boolean
    computePerformanceScoresNote: String
    riskAdjustPerformance: Boolean
    riskAdjustFeedback: Boolean
    riskAdjustPayments: Boolean
    riskAdjustOther: Boolean
    riskAdjustNote: String
    appealPerformance: Boolean
    appealFeedback: Boolean
    appealPayments: Boolean
    appealOther: Boolean
    appealNote: String
    #Page 6
    evaluationApproaches: [EvaluationApproachType!]
    evaluationApproachOther: String
    evalutaionApproachNote: String
    ccmInvolvment: [CcmInvolvmentType!]
    ccmInvolvmentOther: String
    ccmInvolvmentNote: String
    dataNeededForMonitoring: [DataForMonitoringType!]
    dataNeededForMonitoringOther: String
    dataNeededForMonitoringNote: String
    dataToSendParticicipants: [DataToSendParticipantsType!]
    dataToSendParticicipantsOther: String
    dataToSendParticicipantsNote: String
    shareCclfData: Boolean
    shareCclfDataNote: String
    #Page 7
    sendFilesBetweenCcw: Boolean
    sendFilesBetweenCcwNote: String
    appToSendFilesToKnown: Boolean
    appToSendFilesToWhich: String
    appToSendFilesToNote: String
    useCcwForFileDistribiutionToParticipants: Boolean
    useCcwForFileDistribiutionToParticipantsNote: String
    developNewQualityMeasures: Boolean
    developNewQualityMeasuresNote: String
    qualityPerformanceImpactsPayment: YesNoOtherType
    qualityPerformanceImpactsPaymentOther: String
    qualityPerformanceImpactsPaymentNote: String
    #Page 8
    dataSharingStarts: DataStartsType
    dataSharingStartsOther: String
    dataSharingFrequency: [FrequencyType!]
    dataSharingFrequencyContinually: String
    dataSharingFrequencyOther: String
    dataSharingStartsNote: String
    dataCollectionStarts: DataStartsType
    dataCollectionStartsOther: String
    dataCollectionFrequency: [FrequencyType!]
    dataCollectionFrequencyContinually: String
    dataCollectionFrequencyOther: String
    dataCollectionFrequencyNote: String
    qualityReportingStarts: DataStartsType
    qualityReportingStartsOther: String
    qualityReportingStartsNote: String
    qualityReportingFrequency: [FrequencyType!]
    qualityReportingFrequencyContinually: String
    qualityReportingFrequencyOther: String
    #Page 9
    modelLearningSystems: [ModelLearningSystemType!]
    modelLearningSystemsOther: String
    modelLearningSystemsNote: String
    anticipatedChallenges: String

    status: TaskStatusInput
}
"""
NDAInfo represents whether a user has agreed to an NDA or not. If agreed to previously, there will be a datestamp visible
"""
type NDAInfo {
  agreed: Boolean!
  agreedDts: Time
}

input ReportAProblemInput {
  isAnonymousSubmission: Boolean!
  allowContact: Boolean
  section: ReportAProblemSection
  sectionOther: String
  whatDoing: String
  whatWentWrong: String
  severity: ReportAProblemSeverity
  severityOther: String
}

enum ExisitingModelLinkFieldType {
  GEN_CHAR_RESEMBLES_EXISTING_MODEL_WHICH
  GEN_CHAR_PARTICIPATION_EXISTING_MODEL_WHICH
}

enum ReportAProblemSection {
  READ_VIEW
  TASK_LIST
  IT_SOLUTIONS
  HELP_CENTER
  OTHER
}

enum ReportAProblemSeverity {
  PREVENTED_TASK
  DELAYED_TASK
  MINOR
  OTHER
}

type PlanFavorite {
    id: UUID!
    modelPlanID: UUID!
    userID: UUID!
    userAccount: UserAccount!

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time

}

type PlanCR {
    id: UUID!
    modelPlanID: UUID!

    idNumber: String!
    dateInitiated: Time!
    dateImplemented: Time # Required in the API, but can be nullable for historical entries before we migrated CRs and TDLs as different types
    title: String!
    note: String

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}

type PlanTDL {
    id: UUID!
    modelPlanID: UUID!

    idNumber: String!
    dateInitiated: Time!
    title: String!
    note: String

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}

input PlanCRCreateInput {
    modelPlanID: UUID!

    idNumber: String!
    dateInitiated: Time!
    dateImplemented: Time!
    title: String!
    note: String
}

input PlanCRChanges @goModel(model: "map[string]interface{}") {
    idNumber: String
    dateInitiated: Time
    dateImplemented: Time
    title: String
    note: String
}

input PlanTDLCreateInput {
    modelPlanID: UUID!

    idNumber: String!
    dateInitiated: Time!
    title: String!
    note: String
}

input PlanTDLChanges @goModel(model: "map[string]interface{}") {
    idNumber: String
    dateInitiated: Time
    title: String
    note: String
}

type PrepareForClearance {
  status: PrepareForClearanceStatus!
  latestClearanceDts: Time
}

type AuditChange {
  id: Int!
  primaryKey: UUID!
  foreignKey: UUID
  tableName: String!
  action: String!
  fields: Map!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}


type OperationalSolution {
    id: UUID!
    operationalNeedID: UUID!

    solutionType: Int
    needed: Boolean # if null, it has not been selected
    name: String
    key: OperationalSolutionKey
    nameOther: String

    pocName: String
    pocEmail: String
    mustStartDts: Time
    mustFinishDts: Time
    isOther: Boolean!
    isCommonSolution: Boolean!
    otherHeader: String
    status: OpSolutionStatus!

    documents: [PlanDocument!]!
    operationalSolutionSubtasks: [OperationalSolutionSubtask!]!

    createdBy: UUID!
    createdByUserAccount: UserAccount!
    createdDts: Time!
    modifiedBy: UUID
    modifiedByUserAccount: UserAccount
    modifiedDts: Time
}

input OperationalSolutionChanges @goModel(model: "map[string]interface{}"){
    needed: Boolean
    nameOther: String # Only valid for when solution type is null

    pocName: String
    pocEmail: String
    mustStartDts: Time
    mustFinishDts: Time
    otherHeader: String
    status: OpSolutionStatus
}

type PlanDocumentSolutionLink {
id: UUID!
solutionID: UUID!
documentID: UUID!

createdBy: UUID!
createdByUserAccount: UserAccount!
createdDts: Time!
modifiedBy: UUID
modifiedByUserAccount: UserAccount
modifiedDts: Time
}

input CreateOperationalSolutionSubtaskInput {
  name: String!
  status: OperationalSolutionSubtaskStatus!
}

input UpdateOperationalSolutionSubtaskInput {
  id: UUID!
  changes: UpdateOperationalSolutionSubtaskChangesInput!
}

input UpdateOperationalSolutionSubtaskChangesInput @goModel(model: "map[string]interface{}") {
  name: String!
  status: OperationalSolutionSubtaskStatus!
}

type OperationalSolutionSubtask {
  id: UUID!
  solutionID: UUID!
  name: String!
  status: OperationalSolutionSubtaskStatus!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time
}

type DiscussionRoleSelection {
  userRole: DiscussionUserRole!
  userRoleDescription: String
}
"""
The inputs to the user feedback form
"""
input SendFeedbackEmailInput {
  isAnonymousSubmission: Boolean!
  allowContact: Boolean
  cmsRole: String
  mintUsedFor: [MintUses!]
  mintUsedForOther: String
  systemEasyToUse: EaseOfUse
  systemEasyToUseOther: String
  howSatisfied: SatisfactionLevel
  howCanWeImprove: String
}

enum EaseOfUse {
  AGREE
  DISAGREE
  UNSURE
}

enum MintUses {
  VIEW_MODEL
  EDIT_MODEL
  SHARE_MODEL
  TRACK_SOLUTIONS
  CONTRIBUTE_DISCUSSIONS
  VIEW_HELP
  OTHER
}
enum SatisfactionLevel {
  VERY_SATISFIED
  SATISFIED
  NEUTRAL
  DISSATISFIED
  VERY_DISSATISFIED
}

"""
ActivityType represents the possible activities that happen in application that might result in a notification
"""
enum ActivityType {
  DAILY_DIGEST_COMPLETE
  ADDED_AS_COLLABORATOR
  TAGGED_IN_DISCUSSION
  TAGGED_IN_DISCUSSION_REPLY
  NEW_DISCUSSION_REPLY
  MODEL_PLAN_SHARED
}

"""
ActivityMetaData is a type that represents all the data that can be captured in an Activity
"""
union ActivityMetaData = ActivityMetaBaseStruct | TaggedInPlanDiscussionActivityMeta  | TaggedInDiscussionReplyActivityMeta

type TaggedInPlanDiscussionActivityMeta {
  version: Int!
  type: ActivityType!
  discussionID: UUID!
  content: String! # //TODO: EASI-3925 Should this be the tagged Content Type? That might be better.. 
}

type TaggedInDiscussionReplyActivityMeta {
  version: Int!
  type: ActivityType!
  discussionID: UUID!
  replyID: UUID!
  content: String! # //TODO: EASI-3925 Should this be the tagged Content Type? That might be better.. 
}


type ActivityMetaBaseStruct {
  version: Int!
  type: ActivityType!
}


"""
Activity represents an event that happened in the application that could result in a notification.
"""
type Activity {
  id: UUID!
	actorID: UUID! #TODO: return the actor? DataLoader?
	entityID: UUID! #TODO: return the entity?
	activityType: ActivityType!
  metaData: ActivityMetaData!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

}
"""
User Notification Content represents the possible data associated with a User Notification
"""
union UserNotificationContent = PlanDiscussion | DiscussionReply
"""
UserNotification represents a notification about a specific Activity
"""
type UserNotification {
  id: UUID!
	activityID: UUID!
  # activityType: ActivityType #Maybe add this on this level so the FE doesn't need to query it?
	userID: UUID! #probably not needed, it should be only visible for the user
  isRead: Boolean!
  isArchived: Boolean!
  emailSent: Boolean!
  activity: Activity! # should we nest this?
  content: UserNotificationContent!

  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

}

"""
This is a wrapper for all information for a user 
"""
type UserNotifications {
"""
This returns the number of unread notifications
"""
numUnreadNotifications: Int!
"""
This includes all notifications
"""
notifications: [UserNotification!]!
"""
This renders only the unread notifications
"""
unreadNotifications: [UserNotification!]!
}

enum UserNotificationPreferenceFlag {
  ALL,
  IN_APP_ONLY,
  EMAIL_ONLY,
  NONE
}
"""
UserNotificationPreferences represents a users preferences about what type and where to receive a notification
"""
type UserNotificationPreferences {
  id: UUID!
	userID: UUID!

  dailyDigestComplete: UserNotificationPreferenceFlag!

  addedAsCollaborator: UserNotificationPreferenceFlag!
  
  taggedInDiscussion: UserNotificationPreferenceFlag!
 
  taggedInDiscussionReply: UserNotificationPreferenceFlag!

  newDiscussionReply: UserNotificationPreferenceFlag!

  modelPlanShared: UserNotificationPreferenceFlag!

  
  createdBy: UUID!
  createdByUserAccount: UserAccount!
  createdDts: Time!
  modifiedBy: UUID
  modifiedByUserAccount: UserAccount
  modifiedDts: Time

}


"""
UserNotificationPreferencesChanges represents the ways that a UserNotifications Preferences object can be updated
"""
input UserNotificationPreferencesChanges @goModel(model: "map[string]interface{}")  {

  dailyDigestComplete: UserNotificationPreferenceFlag

  addedAsCollaborator: UserNotificationPreferenceFlag
  
  taggedInDiscussion: UserNotificationPreferenceFlag
 
  taggedInDiscussionReply: UserNotificationPreferenceFlag

  newDiscussionReply: UserNotificationPreferenceFlag

  modelPlanShared: UserNotificationPreferenceFlag

  newPlanDiscussion: UserNotificationPreferenceFlag #TODO: EASI-3925 this is not explicitly requested

}

"""
Query definition for the schema
"""
type Query {
  currentUser: CurrentUser!
  modelPlan(id: UUID!): ModelPlan!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planDocument(id: UUID!): PlanDocument!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  modelPlanCollection(filter: ModelPlanFilter! = COLLAB_ONLY): [ModelPlan!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  existingModelCollection: [ExistingModel!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  searchOktaUsers(searchTerm: String!): [UserInfo!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planCollaboratorByID(id: UUID!): PlanCollaborator!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  taskListSectionLocks(modelPlanID: UUID!): [TaskListSectionLockStatus!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planPayments(id: UUID!): PlanPayments!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  ndaInfo: NDAInfo!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planCR(id: UUID!): PlanCR!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  planTDL(id: UUID!): PlanTDL!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  operationalSolutions(operationalNeedID: UUID!, includeNotNeeded: Boolean! = false): [OperationalSolution!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  operationalSolution(id: UUID!): OperationalSolution!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  operationalNeed(id: UUID!): OperationalNeed!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  auditChanges(tableName: String!, primaryKey: UUID!): [AuditChange!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  possibleOperationalNeeds: [PossibleOperationalNeed!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  possibleOperationalSolutions: [PossibleOperationalSolution!]!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  userAccount(username: String!): UserAccount!
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
  existingModelLink(id: UUID!): ExistingModelLink!
  @hasAnyRole(roles:[MINT_USER, MINT_MAC])
  mostRecentDiscussionRoleSelection: DiscussionRoleSelection
  @hasAnyRole(roles: [MINT_USER, MINT_MAC])
}

enum ModelPlanFilter {
  INCLUDE_ALL,
  COLLAB_ONLY,
  WITH_CR_TDLS,
}

"""
Mutations definition for the schema
"""
type Mutation {
createModelPlan(modelName: String!): ModelPlan!
@hasRole(role: MINT_USER)

updateModelPlan(id: UUID!, changes: ModelPlanChanges!): ModelPlan!
@hasRole(role: MINT_USER)

createPlanCollaborator(input: PlanCollaboratorCreateInput!): PlanCollaborator!
@hasRole(role: MINT_USER)

updatePlanCollaborator(id: UUID!, newRoles: [TeamRole!]!): PlanCollaborator!
@hasRole(role: MINT_USER)

deletePlanCollaborator(id: UUID!): PlanCollaborator!
@hasRole(role: MINT_USER)

updatePlanBasics(id: UUID!, changes: PlanBasicsChanges!): PlanBasics!
@hasRole(role: MINT_USER)

updatePlanGeneralCharacteristics(id: UUID!, changes: PlanGeneralCharacteristicsChanges!): PlanGeneralCharacteristics!
@hasRole(role: MINT_USER)

updatePlanBeneficiaries(id: UUID!, changes: PlanBeneficiariesChanges!): PlanBeneficiaries!
@hasRole(role: MINT_USER)

updatePlanParticipantsAndProviders(id: UUID!, changes: PlanParticipantsAndProvidersChanges!): PlanParticipantsAndProviders!
@hasRole(role: MINT_USER)

updatePlanOpsEvalAndLearning(id: UUID!, changes: PlanOpsEvalAndLearningChanges!): PlanOpsEvalAndLearning!
@hasRole(role: MINT_USER)

uploadNewPlanDocument(input: PlanDocumentInput!): PlanDocument!
@hasRole(role: MINT_USER)

linkNewPlanDocument(input: PlanDocumentLinkInput!): PlanDocument!
@hasRole(role: MINT_USER)

deletePlanDocument(id: UUID!): Int!
@hasRole(role: MINT_USER)

createPlanDiscussion(input: PlanDiscussionCreateInput!): PlanDiscussion!
@hasAnyRole(roles: [MINT_USER, MINT_MAC])

createDiscussionReply(input: DiscussionReplyCreateInput!): DiscussionReply!
@hasAnyRole(roles: [MINT_USER, MINT_MAC])

lockTaskListSection(modelPlanID: UUID!, section: TaskListSection!): Boolean!
@hasRole(role: MINT_USER)

unlockTaskListSection(modelPlanID: UUID!, section: TaskListSection!): Boolean!
@hasRole(role: MINT_USER)

unlockAllTaskListSections(modelPlanID: UUID!): [TaskListSectionLockStatus!]!
@hasRole(role: MINT_ASSESSMENT)

updatePlanPayments(id: UUID!, changes: PlanPaymentsChanges!): PlanPayments!
@hasRole(role: MINT_USER)

agreeToNDA(agree: Boolean! = true): NDAInfo!
@hasAnyRole(roles: [MINT_USER, MINT_MAC])

addPlanFavorite(modelPlanID: UUID!): PlanFavorite!
@hasAnyRole(roles: [MINT_USER, MINT_MAC])

deletePlanFavorite(modelPlanID: UUID!): PlanFavorite!
@hasAnyRole(roles: [MINT_USER, MINT_MAC])

createPlanCR(input: PlanCRCreateInput!): PlanCR!
@hasRole(role: MINT_USER)

createPlanTDL(input: PlanTDLCreateInput!): PlanTDL!
@hasRole(role: MINT_USER)

updatePlanCR(id: UUID!, changes: PlanCRChanges!): PlanCR!
@hasRole(role: MINT_USER)

updatePlanTDL(id: UUID!, changes: PlanTDLChanges!): PlanTDL!
@hasRole(role: MINT_USER)

deletePlanCR(id: UUID!): PlanCR!
@hasRole(role: MINT_USER)

deletePlanTDL(id: UUID!): PlanTDL!
@hasRole(role: MINT_USER)

addOrUpdateCustomOperationalNeed(modelPlanID: UUID!, customNeedType: String! needed: Boolean!): OperationalNeed!
@hasRole(role: MINT_USER)

updateCustomOperationalNeedByID(id: UUID!, customNeedType: String needed: Boolean!): OperationalNeed!
@hasRole(role: MINT_USER)

createOperationalSolution(operationalNeedID: UUID!, solutionType: OperationalSolutionKey, changes: OperationalSolutionChanges!): OperationalSolution!
@hasRole(role: MINT_USER)

updateOperationalSolution(id: UUID!, changes: OperationalSolutionChanges!): OperationalSolution!
@hasRole(role: MINT_USER)

createPlanDocumentSolutionLinks(solutionID: UUID!, documentIDs: [UUID!]!): [PlanDocumentSolutionLink!]
@hasRole(role: MINT_USER)

removePlanDocumentSolutionLinks(solutionID: UUID!, documentIDs: [UUID!]!): Boolean!
@hasRole(role: MINT_USER)

createOperationalSolutionSubtasks(solutionID: UUID!, inputs: [CreateOperationalSolutionSubtaskInput!]!): [OperationalSolutionSubtask!]
@hasRole(role: MINT_USER)

updateOperationalSolutionSubtasks(inputs: [UpdateOperationalSolutionSubtaskInput!]!): [OperationalSolutionSubtask!]
@hasRole(role: MINT_USER)

deleteOperationalSolutionSubtask(id: UUID!): Int!
@hasRole(role: MINT_USER)

"""
This will update linked existing models, and related model plans for given model plan and fieldName.
The fieldName allows it so you can create links for multiple sections of the model plan
"""
updateExistingModelLinks(modelPlanID: UUID!,fieldName: ExisitingModelLinkFieldType!,  existingModelIDs: [Int!],currentModelPlanIDs: [UUID!]): ExistingModelLinks!
@hasRole(role: MINT_USER)

shareModelPlan(modelPlanID: UUID!, viewFilter: ModelViewFilter, usernames: [String!]!, optionalMessage: String): Boolean!
@hasRole(role: MINT_USER)

reportAProblem(input: ReportAProblemInput!): Boolean!
@hasAnyRole(roles: [MINT_USER, MINT_MAC])
"""
This mutation sends feedback about the MINT product to the MINT team
"""
sendFeedbackEmail(input: SendFeedbackEmailInput!): Boolean!
"""
Marks a single notification as read. It requires that the notification be owned by the context of the user sending this request, or it will fail
"""
markNotificationAsRead(notificationID: UUID!): UserNotification!
"""
Marks all notifications for the current user as read, and returns the updated notifications
"""
markAllNotificationsAsRead: [UserNotification!]!

updateUserNotificationPreferences(changes: UserNotificationPreferencesChanges!): UserNotificationPreferences!
}

type Subscription {
  onTaskListSectionLocksChanged(modelPlanID: UUID!): TaskListSectionLockStatusChanged!
  @hasRole(role: MINT_USER)

  onLockTaskListSectionContext(modelPlanID: UUID!): TaskListSectionLockStatusChanged!
  @hasRole(role: MINT_USER)
}

enum ChangeType {
  ADDED
  UPDATED
  REMOVED
}

enum TaskStatus {
  READY
  IN_PROGRESS
  READY_FOR_REVIEW
  READY_FOR_CLEARANCE
}

enum PrepareForClearanceStatus {
  CANNOT_START
  READY
  IN_PROGRESS
  READY_FOR_CLEARANCE
}

enum TaskStatusInput {
  IN_PROGRESS
  READY_FOR_REVIEW
  READY_FOR_CLEARANCE
}

enum TaskListSection {
  BASICS,
  GENERAL_CHARACTERISTICS,
  PARTICIPANTS_AND_PROVIDERS,
  BENEFICIARIES,
  OPERATIONS_EVALUATION_AND_LEARNING,
  PAYMENT,
  PREPARE_FOR_CLEARANCE
}

enum TeamRole {
  MODEL_LEAD
  MODEL_TEAM
  LEADERSHIP
  LEARNING
  EVALUATION
  IT_LEAD
  QUALITY
  OACT
  PAYMENT
  CM_FFS_COUNTERPART
  COR
}

enum ModelType
{
  VOLUNTARY
  MANDATORY_REGIONAL_OR_STATE
  MANDATORY_NATIONAL
  OTHER
}

enum ModelCategory {
  ACCOUNTABLE_CARE
  DISEASE_SPECIFIC_AND_EPISODIC
  HEALTH_PLAN
  PRESCRIPTION_DRUG
  STATE_BASED
  STATUTORY
  TO_BE_DETERMINED
}

enum ModelStatus {
	PLAN_DRAFT
	PLAN_COMPLETE
	ICIP_COMPLETE
	INTERNAL_CMMI_CLEARANCE
	CMS_CLEARANCE
	HHS_CLEARANCE
	OMB_ASRF_CLEARANCE
	CLEARED
	ANNOUNCED
  PAUSED
  CANCELED
  ACTIVE
  ENDED
}

enum CMSCenter {
  CMMI
  CENTER_FOR_MEDICARE
  FEDERAL_COORDINATED_HEALTH_CARE_OFFICE
  CENTER_FOR_MEDICAID_AND_CHIP_SERVICES
  CENTER_FOR_CLINICAL_STANDARDS_AND_QUALITY
  CENTER_FOR_PROGRAM_INTEGRITY
  }

enum CMMIGroup {
  PATIENT_CARE_MODELS_GROUP
  POLICY_AND_PROGRAMS_GROUP
  SEAMLESS_CARE_MODELS_GROUP
  STATE_AND_POPULATION_HEALTH_GROUP
  TBD
}

enum DocumentType {
  CONCEPT_PAPER,
  POLICY_PAPER,
  ICIP_DRAFT,
  MARKET_RESEARCH,
  DESIGN_PARAMETERS_MEMO,
  OFFICE_OF_THE_ADMINISTRATOR_PRESENTATION,
  OTHER
}

enum AlternativePaymentModelType {
  REGULAR
  MIPS
  ADVANCED
  NOT_APM
}

enum KeyCharacteristic {
  EPISODE_BASED
  PART_C
  PART_D
  PAYMENT
  POPULATION_BASED
  PREVENTATIVE
  SERVICE_DELIVERY
  SHARED_SAVINGS
  OTHER
  MEDICAID_MODEL
  MEDICARE_FFS_MODEL
}

enum GeographyType {
  STATE
  REGION
  OTHER
}

enum GeographyApplication {
  PARTICIPANTS
  PROVIDERS
  BENEFICIARIES
  OTHER
}

enum AgreementType {
  PARTICIPATION
  COOPERATIVE
  OTHER
}

enum AuthorityAllowance {
  ACA
  CONGRESSIONALLY_MANDATED
  SSA_PART_B
  OTHER
}

enum WaiverType {
  FRAUD_ABUSE
  PROGRAM_PAYMENT
  MEDICAID
}

enum BeneficiariesType {
  MEDICARE_FFS
  MEDICARE_ADVANTAGE
  MEDICARE_PART_D
  MEDICAID
  DUALLY_ELIGIBLE
  DISEASE_SPECIFIC
  UNDERSERVED
  OTHER
  NA
}
enum SelectionMethodType {
  HISTORICAL
  PROSPECTIVE
  RETROSPECTIVE
  VOLUNTARY
  PROVIDER_SIGN_UP
  OTHER
  NA
}
enum OverlapType {
  YES_NEED_POLICIES
  YES_NO_ISSUES
  NO
}
enum ConfidenceType {
  NOT_AT_ALL
  SLIGHTLY
  FAIRLY
  COMPLETELY
}

enum FrequencyType {
  ANNUALLY
  SEMIANNUALLY
  QUARTERLY
  MONTHLY
  CONTINUALLY
  OTHER
}

enum TriStateAnswer {
  YES
  NO
  TBD
}
enum ParticipantsType {
  MEDICARE_PROVIDERS
  ENTITIES
  CONVENER
  MEDICARE_ADVANTAGE_PLANS
  STANDALONE_PART_D_PLANS
  MEDICARE_ADVANTAGE_PRESCRIPTION_DRUG_PLANS
  STATE_MEDICAID_AGENCIES
  MEDICAID_MANAGED_CARE_ORGANIZATIONS
  MEDICAID_PROVIDERS
  STATES
  COMMUNITY_BASED_ORGANIZATIONS
  NON_PROFIT_ORGANIZATIONS
  COMMERCIAL_PAYERS
  ACCOUNTABLE_CARE_ORGANIZATION
  OTHER
}

enum RecruitmentType {
  LOI
  APPLICATION_COLLECTION_TOOL
  NOFO
  OTHER
  NA
}
enum ParticipantSelectionType {
  MODEL_TEAM_REVIEW_APPLICATIONS
  SUPPORT_FROM_CMMI
  CMS_COMPONENT_OR_PROCESS
  APPLICATION_REVIEW_AND_SCORING_TOOL
  APPLICATION_SUPPORT_CONTRACTOR
  BASIC_CRITERIA
  OTHER
  NO_SELECTING_PARTICIPANTS
}
enum ParticipantCommunicationType {
  MASS_EMAIL
  IT_TOOL
  OTHER
  NO_COMMUNICATION
}

enum ParticipantRiskType {
  TWO_SIDED
  ONE_SIDED
  CAPITATION
  NOT_RISK_BASED
  OTHER
}

enum ParticipantsIDType{
  TINS
  NPIS
  CCNS
  OTHER
  NO_IDENTIFIERS
}

enum ProviderAddType {
  PROSPECTIVELY
  RETROSPECTIVELY
  VOLUNTARILY
  MANDATORILY
  ONLINE_TOOLS
  OTHER
  NA
}

enum ProviderLeaveType {

VOLUNTARILY_WITHOUT_IMPLICATIONS
AFTER_A_CERTAIN_WITH_IMPLICATIONS
VARIES_BY_TYPE_OF_PROVIDER
NOT_ALLOWED_TO_LEAVE
OTHER
NOT_APPLICABLE
}


#Ops Eval and Learning types begin

enum AgencyOrStateHelpType {
    YES_STATE
    YES_AGENCY_IDEAS
    YES_AGENCY_IAA
    NO
    OTHER
}

enum StakeholdersType {
    BENEFICIARIES
    COMMUNITY_ORGANIZATIONS
    PARTICIPANTS
    PROFESSIONAL_ORGANIZATIONS
    PROVIDERS
    STATES
    OTHER
}


enum ContractorSupportType {
    ONE
    MULTIPLE
    NONE
    OTHER
}

enum MonitoringFileType {
    BENEFICIARY
    PROVIDER
    PART_A
    PART_B
    OTHER
}

enum EvaluationApproachType {
    CONTROL_INTERVENTION
    COMPARISON_MATCH
    INTERRUPTED_TIME
    NON_MEDICARE_DATA
    OTHER
}

enum CcmInvolvmentType {
    YES_EVALUATION
    YES__IMPLEMENTATION
    NO
    OTHER
}

enum DataForMonitoringType {
    SITE_VISITS
    MEDICARE_CLAIMS
    MEDICAID_CLAIMS
    ENCOUNTER_DATA
    NO_PAY_CLAIMS
    QUALITY_CLAIMS_BASED_MEASURES
    QUALITY_REPORTED_MEASURES
    CLINICAL_DATA
    NON_CLINICAL_DATA
    NON_MEDICAL_DATA
    OTHER
    NOT_PLANNING_TO_COLLECT_DATA
}

enum DataToSendParticipantsType {
    BASELINE_HISTORICAL_DATA
    CLAIMS_LEVEL_DATA
    BENEFICIARY_LEVEL_DATA
    PARTICIPANT_LEVEL_DATA
    PROVIDER_LEVEL_DATA
    OTHER_MIPS_DATA
    NOT_PLANNING_TO_SEND_DATA
}

enum YesNoOtherType {
    YES
    NO
    OTHER
}

enum ModelLearningSystemType {
    LEARNING_CONTRACTOR
    IT_PLATFORM_CONNECT
    PARTICIPANT_COLLABORATION
    EDUCATE_BENEFICIARIES
    OTHER
    NO_LEARNING_SYSTEM
}


enum DataFullTimeOrIncrementalType {
    FULL_TIME
    INCREMENTAL
}

enum BenchmarkForPerformanceType {
    YES_RECONCILE
    YES_NO_RECONCILE
    NO
}

enum DataStartsType {
    DURING_APPLICATION_PERIOD
    SHORTLY_BEFORE_THE_START_DATE
    EARLY_IN_THE_FIRST_PERFORMANCE_YEAR
    LATER_IN_THE_FIRST_PERFORMANCE_YEAR
    IN_THE_SUBSEQUENT_PERFORMANCE_YEAR
    AT_SOME_OTHER_POINT_IN_TIME
    NOT_PLANNING_TO_DO_THIS
    OTHER
}
#Ops Eval and Learning types end

enum FundingSource {
  PATIENT_PROTECTION_AFFORDABLE_CARE_ACT
  MEDICARE_PART_A_HI_TRUST_FUND
  MEDICARE_PART_B_SMI_TRUST_FUND
  OTHER
}

enum PayRecipient {
  PROVIDERS
  BENEFICIARIES
  PARTICIPANTS
  STATES
  OTHER
}

enum PayType {
  CLAIMS_BASED_PAYMENTS
  NON_CLAIMS_BASED_PAYMENTS
  GRANTS
}

enum ClaimsBasedPayType {
  ADJUSTMENTS_TO_FFS_PAYMENTS
  CARE_MANAGEMENT_HOME_VISITS
  REDUCTIONS_TO_BENEFICIARY_COST_SHARING
  SNF_CLAIMS_WITHOUT_3DAY_HOSPITAL_ADMISSIONS
  TELEHEALTH_SERVICES_NOT_TRADITIONAL_MEDICARE
  SERVICES_NOT_COVERED_THROUGH_TRADITIONAL_MEDICARE
  PAYMENTS_FOR_POST_DISCHARGE_HOME_VISITS
  OTHER
}

enum NonClaimsBasedPayType {
  ADVANCED_PAYMENT
  BUNDLED_EPISODE_OF_CARE
  CAPITATION_POPULATION_BASED_FULL
  CAPITATION_POPULATION_BASED_PARTIAL
  CARE_COORDINATION_MANAGEMENT_FEE
  GLOBAL_BUDGET
  INCENTIVE_PAYMENT
  MAPD_SHARED_SAVINGS
  SHARED_SAVINGS
  OTHER
}

enum ComplexityCalculationLevelType {
  LOW
  MIDDLE
  HIGH
}

enum OpSolutionStatus {
  NOT_STARTED
  ONBOARDING
  BACKLOG
  IN_PROGRESS
  COMPLETED
  AT_RISK
}

enum OperationalNeedKey{
  MANAGE_CD
  REV_COL_BIDS
  UPDATE_CONTRACT
  RECRUIT_PARTICIPANTS
  REV_SCORE_APP
  APP_SUPPORT_CON
  COMM_W_PART
  MANAGE_PROV_OVERLAP
  MANAGE_BEN_OVERLAP
  HELPDESK_SUPPORT
  IDDOC_SUPPORT
  ESTABLISH_BENCH
  PROCESS_PART_APPEALS
  ACQUIRE_AN_EVAL_CONT
  DATA_TO_MONITOR
  DATA_TO_SUPPORT_EVAL
  CLAIMS_BASED_MEASURES
  QUALITY_PERFORMANCE_SCORES
  SEND_REPDATA_TO_PART
  ACQUIRE_A_LEARN_CONT
  PART_TO_PART_COLLAB
  EDUCATE_BENEF
  ADJUST_FFS_CLAIMS
  MANAGE_FFS_EXCL_PAYMENTS
  MAKE_NON_CLAIMS_BASED_PAYMENTS
  COMPUTE_SHARED_SAVINGS_PAYMENT
  RECOVER_PAYMENTS
  SIGN_PARTICIPATION_AGREEMENTS
  VET_PROVIDERS_FOR_PROGRAM_INTEGRITY
  UTILIZE_QUALITY_MEASURES_DEVELOPMENT_CONTRACTOR
  IT_PLATFORM_FOR_LEARNING
}

enum OperationalSolutionKey{
  INNOVATION
  ACO_OS
  APPS
  CDX
  CCW
  CMS_BOX
  CMS_QUALTRICS
  CBOSC
  CONTRACTOR
  CPI_VETTING
  CROSS_MODEL_CONTRACT
  EFT
  EXISTING_CMS_DATA_AND_PROCESS
  EDFR
  GOVDELIVERY
  GS
  HDR
  HPMS
  HIGLAS
  IPC
  IDR
  INTERNAL_STAFF
  LDG
  LV
  MDM
  MARX
  OTHER_NEW_PROCESS
  OUTLOOK_MAILBOX
  QV
  RMADA
  ARS
  CONNECT
  LOI
  POST_PORTAL
  RFA
  SHARED_SYSTEMS
  BCDA
  ISP
  MIDS
}

enum OperationalSolutionSubtaskStatus {
  TODO,
  IN_PROGRESS,
  DONE
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

directive @hasAnyRole(roles: [Role!]!) on FIELD_DEFINITION

# https://gqlgen.com/config/#inline-config-with-directives
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

type UserAccount {
	id: UUID!
	username: String!
	isEUAID: Boolean
	commonName: String!
	locale: String!
	email: String!
	givenName: String!
	familyName: String!
	zoneInfo: String!
	hasLoggedIn: Boolean
}


"""
A user role associated with a job code
"""
enum Role {
  """
  A basic MINT user
  """
  MINT_USER

  """
  A MINT assessment team user
  """
  MINT_ASSESSMENT

  """
  A MINT MAC user
  """
  MINT_MAC
}

enum ActionType {
  """
  A normal flow action
  """
  NORMAL

  """
  An administrative action
  """
  ADMIN
}

enum DiscussionUserRole {
  CMS_SYSTEM_SERVICE_TEAM,
  IT_ARCHITECT,
  LEADERSHIP,
  MEDICARE_ADMINISTRATIVE_CONTRACTOR,
  MINT_TEAM,
  MODEL_IT_LEAD,
  MODEL_TEAM,
  SHARED_SYSTEM_MAINTAINER,
  NONE_OF_THE_ABOVE,
}

enum ModelViewFilter {
  CCW, # CHRONIC_CONDITIONS_WAREHOUSE
  CMMI, # CMMI_COST_ESTIMATE
  CBOSC, # CONSOLIDATED_BUSINESS_OPERATIONS_SUPPORT_CENTER
  DFSDM, # DIVISION_OF_FINANCIAL_SERVICES_AND_DEBT_MANAGEMENT
  IPC, # INNOVATION_PAYMENT_CONTRACTOR
  IDDOC, # INNOVATIVE_DESIGN_DEVELOPMENT_AND_OPERATIONS_CONTRACT
  MDM, # MASTER_DATA_MANAGEMENT
  OACT, # OFFICE_OF_THE_ACTUARY
  PBG, # PROVIDER_BILLING_GROUP
}

enum GainshareArrangementEligibility {
  ALL_PROVIDERS,
  SOME_PROVIDERS,
  OTHER,
  NO
}

enum YesNoType {
  YES,
  NO
}

enum StatesAndTerritories {
  AL,
  AK,
  AZ,
  AR,
  CA,
  CO,
  CT,
  DE,
  DC,
  FL,
  GA,
  HI,
  ID,
  IL,
  IN,
  IA,
  KS,
  KY,
  LA,
  ME,
  MD,
  MA,
  MI,
  MN,
  MS,
  MO,
  MT,
  NE,
  NV,
  NH,
  NJ,
  NM,
  NY,
  NC,
  ND,
  OH,
  OK,
  OR,
  PA,
  RI,
  SC,
  SD,
  TN,
  TX,
  UT,
  VT,
  VA,
  WA,
  WV,
  WI,
  WY,
  AS,
  GU,
  MP,
  PR,
  UM,
  VI
}

enum GeographyRegionType {
  CBSA,
  HRR,
  MSA
}
