// Code generated by MockGen. DO NOT EDIT.
// Source: email_service.go

// Package oddmail is a generated GoMock package.
package oddmail

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailService is a mock of EmailService interface.
type MockEmailService struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceMockRecorder
}

// MockEmailServiceMockRecorder is the mock recorder for MockEmailService.
type MockEmailServiceMockRecorder struct {
	mock *MockEmailService
}

// NewMockEmailService creates a new mock instance.
func NewMockEmailService(ctrl *gomock.Controller) *MockEmailService {
	mock := &MockEmailService{ctrl: ctrl}
	mock.recorder = &MockEmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailService) EXPECT() *MockEmailServiceMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockEmailService) GetConfig() EmailServiceConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(EmailServiceConfig)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockEmailServiceMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockEmailService)(nil).GetConfig))
}

// Send mocks base method.
func (m *MockEmailService) Send(from string, toAddresses, ccAddresses []string, subject, contentType, body string, opts ...EmailOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{from, toAddresses, ccAddresses, subject, contentType, body}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEmailServiceMockRecorder) Send(from, toAddresses, ccAddresses, subject, contentType, body interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{from, toAddresses, ccAddresses, subject, contentType, body}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmailService)(nil).Send), varargs...)
}
