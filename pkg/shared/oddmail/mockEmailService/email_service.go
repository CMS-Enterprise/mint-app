// Code generated by MockGen. DO NOT EDIT.
// Source: email_service.go

// Package mockoddmailservice is a generated GoMock package.
package mockemailservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	oddmail "github.com/cmsgov/mint-app/pkg/shared/oddmail"
)

// MockemailService is a mock of emailService interface.
type MockemailService struct {
	ctrl     *gomock.Controller
	recorder *MockemailServiceMockRecorder
}

// MockemailServiceMockRecorder is the mock recorder for MockemailService.
type MockemailServiceMockRecorder struct {
	mock *MockemailService
}

// NewMockemailService creates a new mock instance.
func NewMockemailService(ctrl *gomock.Controller) *MockemailService {
	mock := &MockemailService{ctrl: ctrl}
	mock.recorder = &MockemailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockemailService) EXPECT() *MockemailServiceMockRecorder {
	return m.recorder
}

// init mocks base method.
func (m *MockemailService) init(config oddmail.EmailServiceConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "init", config)
}

// init indicates an expected call of init.
func (mr *MockemailServiceMockRecorder) init(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "init", reflect.TypeOf((*MockemailService)(nil).init), config)
}

// send mocks base method.
func (m *MockemailService) send(from string, toAddresses, ccAddresses []string, subject, contentType, body string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "send", from, toAddresses, ccAddresses, subject, contentType, body)
}

// send indicates an expected call of send.
func (mr *MockemailServiceMockRecorder) send(from, toAddresses, ccAddresses, subject, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "send", reflect.TypeOf((*MockemailService)(nil).send), from, toAddresses, ccAddresses, subject, contentType, body)
}
