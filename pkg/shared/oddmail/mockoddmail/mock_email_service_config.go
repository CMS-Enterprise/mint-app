// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/shared/oddmail/email_service_config.go

// Package mockoddmail is a generated GoMock package.
package mockoddmail

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailServiceConfig is a mock of EmailServiceConfig interface.
type MockEmailServiceConfig struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceConfigMockRecorder
}

// MockEmailServiceConfigMockRecorder is the mock recorder for MockEmailServiceConfig.
type MockEmailServiceConfigMockRecorder struct {
	mock *MockEmailServiceConfig
}

// NewMockEmailServiceConfig creates a new mock instance.
func NewMockEmailServiceConfig(ctrl *gomock.Controller) *MockEmailServiceConfig {
	mock := &MockEmailServiceConfig{ctrl: ctrl}
	mock.recorder = &MockEmailServiceConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServiceConfig) EXPECT() *MockEmailServiceConfigMockRecorder {
	return m.recorder
}

// GetClientAddress mocks base method.
func (m *MockEmailServiceConfig) GetClientAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetClientAddress indicates an expected call of GetClientAddress.
func (mr *MockEmailServiceConfigMockRecorder) GetClientAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientAddress", reflect.TypeOf((*MockEmailServiceConfig)(nil).GetClientAddress))
}

// GetEnabled mocks base method.
func (m *MockEmailServiceConfig) GetEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetEnabled indicates an expected call of GetEnabled.
func (mr *MockEmailServiceConfigMockRecorder) GetEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabled", reflect.TypeOf((*MockEmailServiceConfig)(nil).GetEnabled))
}

// GetHost mocks base method.
func (m *MockEmailServiceConfig) GetHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *MockEmailServiceConfigMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockEmailServiceConfig)(nil).GetHost))
}

// GetPassword mocks base method.
func (m *MockEmailServiceConfig) GetPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockEmailServiceConfigMockRecorder) GetPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockEmailServiceConfig)(nil).GetPassword))
}

// GetPort mocks base method.
func (m *MockEmailServiceConfig) GetPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPort indicates an expected call of GetPort.
func (mr *MockEmailServiceConfigMockRecorder) GetPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockEmailServiceConfig)(nil).GetPort))
}

// GetSendTaggedPOCEmails mocks base method.
func (m *MockEmailServiceConfig) GetSendTaggedPOCEmails() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendTaggedPOCEmails")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetSendTaggedPOCEmails indicates an expected call of GetSendTaggedPOCEmails.
func (mr *MockEmailServiceConfigMockRecorder) GetSendTaggedPOCEmails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendTaggedPOCEmails", reflect.TypeOf((*MockEmailServiceConfig)(nil).GetSendTaggedPOCEmails))
}

// GetUsername mocks base method.
func (m *MockEmailServiceConfig) GetUsername() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsername")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUsername indicates an expected call of GetUsername.
func (mr *MockEmailServiceConfigMockRecorder) GetUsername() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsername", reflect.TypeOf((*MockEmailServiceConfig)(nil).GetUsername))
}
