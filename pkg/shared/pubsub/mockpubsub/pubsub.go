// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cms-enterprise/mint-app/pkg/shared/pubsub (interfaces: PubSub)

// Package mockpubsub is a generated GoMock package.
package mockpubsub

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	pubsub "github.com/cms-enterprise/mint-app/pkg/shared/pubsub"
)

// MockPubSub is a mock of PubSub interface.
type MockPubSub struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubMockRecorder
}

// MockPubSubMockRecorder is the mock recorder for MockPubSub.
type MockPubSubMockRecorder struct {
	mock *MockPubSub
}

// NewMockPubSub creates a new mock instance.
func NewMockPubSub(ctrl *gomock.Controller) *MockPubSub {
	mock := &MockPubSub{ctrl: ctrl}
	mock.recorder = &MockPubSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSub) EXPECT() *MockPubSubMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPubSub) Publish(arg0 uuid.UUID, arg1 pubsub.EventType, arg2 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", arg0, arg1, arg2)
}

// Publish indicates an expected call of Publish.
func (mr *MockPubSubMockRecorder) Publish(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubSub)(nil).Publish), arg0, arg1, arg2)
}

// Subscribe mocks base method.
func (m *MockPubSub) Subscribe(arg0 uuid.UUID, arg1 pubsub.EventType, arg2 pubsub.Subscriber, arg3 <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0, arg1, arg2, arg3)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPubSubMockRecorder) Subscribe(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPubSub)(nil).Subscribe), arg0, arg1, arg2, arg3)
}

// Unsubscribe mocks base method.
func (m *MockPubSub) Unsubscribe(arg0 uuid.UUID, arg1 pubsub.EventType, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0, arg1, arg2)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockPubSubMockRecorder) Unsubscribe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockPubSub)(nil).Unsubscribe), arg0, arg1, arg2)
}
