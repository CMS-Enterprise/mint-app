// Code generated by MockGen. DO NOT EDIT.
// Source: subscriber.go

// Package mockpubsub is a generated GoMock package.
package mockpubsub

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	pubsub "github.com/cmsgov/mint-app/pkg/shared/pubsub"
)

// MockSubscriber is a mock of Subscriber interface.
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber.
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance.
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockSubscriber) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockSubscriberMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockSubscriber)(nil).GetID))
}

// GetPrincipal mocks base method.
func (m *MockSubscriber) GetPrincipal() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrincipal")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPrincipal indicates an expected call of GetPrincipal.
func (mr *MockSubscriberMockRecorder) GetPrincipal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrincipal", reflect.TypeOf((*MockSubscriber)(nil).GetPrincipal))
}

// Notify mocks base method.
func (m *MockSubscriber) Notify(payload interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify", payload)
}

// Notify indicates an expected call of Notify.
func (mr *MockSubscriberMockRecorder) Notify(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockSubscriber)(nil).Notify), payload)
}

// NotifyUnsubscribed mocks base method.
func (m *MockSubscriber) NotifyUnsubscribed(ps *pubsub.ServicePubSub, sessionID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyUnsubscribed", ps, sessionID)
}

// NotifyUnsubscribed indicates an expected call of NotifyUnsubscribed.
func (mr *MockSubscriberMockRecorder) NotifyUnsubscribed(ps, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyUnsubscribed", reflect.TypeOf((*MockSubscriber)(nil).NotifyUnsubscribed), ps, sessionID)
}
