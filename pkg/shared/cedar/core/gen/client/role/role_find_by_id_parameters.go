// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRoleFindByIDParams creates a new RoleFindByIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRoleFindByIDParams() *RoleFindByIDParams {
	return &RoleFindByIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRoleFindByIDParamsWithTimeout creates a new RoleFindByIDParams object
// with the ability to set a timeout on a request.
func NewRoleFindByIDParamsWithTimeout(timeout time.Duration) *RoleFindByIDParams {
	return &RoleFindByIDParams{
		timeout: timeout,
	}
}

// NewRoleFindByIDParamsWithContext creates a new RoleFindByIDParams object
// with the ability to set a context for a request.
func NewRoleFindByIDParamsWithContext(ctx context.Context) *RoleFindByIDParams {
	return &RoleFindByIDParams{
		Context: ctx,
	}
}

// NewRoleFindByIDParamsWithHTTPClient creates a new RoleFindByIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewRoleFindByIDParamsWithHTTPClient(client *http.Client) *RoleFindByIDParams {
	return &RoleFindByIDParams{
		HTTPClient: client,
	}
}

/* RoleFindByIDParams contains all the parameters to send to the API endpoint
   for the role find by Id operation.

   Typically these are written to a http.Request.
*/
type RoleFindByIDParams struct {

	/* Application.

	   Application where the object or role exists.
	*/
	Application string

	/* ObjectID.

	   ID of the object that roles are assigned to.
	*/
	ObjectID *string

	/* RoleID.

	   ID of a specific role assignment.
	*/
	RoleID *string

	/* RoleTypeID.

	   ID of a specific role type to be returned. Used with objectId to limit search results.
	*/
	RoleTypeID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the role find by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RoleFindByIDParams) WithDefaults() *RoleFindByIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the role find by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RoleFindByIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the role find by Id params
func (o *RoleFindByIDParams) WithTimeout(timeout time.Duration) *RoleFindByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the role find by Id params
func (o *RoleFindByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the role find by Id params
func (o *RoleFindByIDParams) WithContext(ctx context.Context) *RoleFindByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the role find by Id params
func (o *RoleFindByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the role find by Id params
func (o *RoleFindByIDParams) WithHTTPClient(client *http.Client) *RoleFindByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the role find by Id params
func (o *RoleFindByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplication adds the application to the role find by Id params
func (o *RoleFindByIDParams) WithApplication(application string) *RoleFindByIDParams {
	o.SetApplication(application)
	return o
}

// SetApplication adds the application to the role find by Id params
func (o *RoleFindByIDParams) SetApplication(application string) {
	o.Application = application
}

// WithObjectID adds the objectID to the role find by Id params
func (o *RoleFindByIDParams) WithObjectID(objectID *string) *RoleFindByIDParams {
	o.SetObjectID(objectID)
	return o
}

// SetObjectID adds the objectId to the role find by Id params
func (o *RoleFindByIDParams) SetObjectID(objectID *string) {
	o.ObjectID = objectID
}

// WithRoleID adds the roleID to the role find by Id params
func (o *RoleFindByIDParams) WithRoleID(roleID *string) *RoleFindByIDParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the role find by Id params
func (o *RoleFindByIDParams) SetRoleID(roleID *string) {
	o.RoleID = roleID
}

// WithRoleTypeID adds the roleTypeID to the role find by Id params
func (o *RoleFindByIDParams) WithRoleTypeID(roleTypeID *string) *RoleFindByIDParams {
	o.SetRoleTypeID(roleTypeID)
	return o
}

// SetRoleTypeID adds the roleTypeId to the role find by Id params
func (o *RoleFindByIDParams) SetRoleTypeID(roleTypeID *string) {
	o.RoleTypeID = roleTypeID
}

// WriteToRequest writes these params to a swagger request
func (o *RoleFindByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param application
	qrApplication := o.Application
	qApplication := qrApplication
	if qApplication != "" {

		if err := r.SetQueryParam("application", qApplication); err != nil {
			return err
		}
	}

	if o.ObjectID != nil {

		// query param objectId
		var qrObjectID string

		if o.ObjectID != nil {
			qrObjectID = *o.ObjectID
		}
		qObjectID := qrObjectID
		if qObjectID != "" {

			if err := r.SetQueryParam("objectId", qObjectID); err != nil {
				return err
			}
		}
	}

	if o.RoleID != nil {

		// query param roleId
		var qrRoleID string

		if o.RoleID != nil {
			qrRoleID = *o.RoleID
		}
		qRoleID := qrRoleID
		if qRoleID != "" {

			if err := r.SetQueryParam("roleId", qRoleID); err != nil {
				return err
			}
		}
	}

	if o.RoleTypeID != nil {

		// query param roleTypeId
		var qrRoleTypeID string

		if o.RoleTypeID != nil {
			qrRoleTypeID = *o.RoleTypeID
		}
		qRoleTypeID := qrRoleTypeID
		if qRoleTypeID != "" {

			if err := r.SetQueryParam("roleTypeId", qRoleTypeID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
