// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new role API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for role API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RoleAdd(params *RoleAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoleAddOK, error)

	RoleDeleteList(params *RoleDeleteListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoleDeleteListOK, error)

	RoleFindByID(params *RoleFindByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoleFindByIDOK, error)

	RoleTypeFind(params *RoleTypeFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoleTypeFindOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RoleAdd adds role assignments to a c e d a r application this interface takes in object Id role type Id a n d either assignee Id assignee user name or assignee org Id are required

  Add role assignments to a CEDAR application. This interface takes in objectId, roleTypeId AND either assigneeId, assigneeUserName or assigneeOrgId are required.
*/
func (a *Client) RoleAdd(params *RoleAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoleAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoleAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "roleAdd",
		Method:             "POST",
		PathPattern:        "/role",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RoleAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoleAddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for roleAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RoleDeleteList deletes a list of role assignments by ID this interface takes an application name and an array of role ids

  Deletes a list of role assignments by ID. This interface takes an application name and an array of roleIds.
*/
func (a *Client) RoleDeleteList(params *RoleDeleteListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoleDeleteListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoleDeleteListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "roleDeleteList",
		Method:             "DELETE",
		PathPattern:        "/role",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RoleDeleteListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoleDeleteListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for roleDeleteList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RoleFindByID finds a list of role assignments based on an object s ID and or role type

  Finds a list of role assignments based on an object's ID. If objectId and roleTypeId are both provided, a list of role assignments for only those specific role type IDs are returned. If roleId is provided, then objectId and roleTypeId should not be provided and a specific role assignment is returned.
*/
func (a *Client) RoleFindByID(params *RoleFindByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoleFindByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoleFindByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "roleFindById",
		Method:             "GET",
		PathPattern:        "/role",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RoleFindByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoleFindByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for roleFindById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RoleTypeFind finds a list of role types available within an application this interface takes in application

  Finds a list of role types available within an application. This interface takes in application.
*/
func (a *Client) RoleTypeFind(params *RoleTypeFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoleTypeFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoleTypeFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "roleTypeFind",
		Method:             "GET",
		PathPattern:        "/role/type/{application}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RoleTypeFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoleTypeFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for roleTypeFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
