// Code generated by go-swagger; DO NOT EDIT.

package contract

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new contract API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contract API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ContractAdd(params *ContractAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ContractAddOK, error)

	ContractDeleteList(params *ContractDeleteListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ContractDeleteListOK, error)

	ContractFind(params *ContractFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ContractFindOK, error)

	ContractUpdate(params *ContractUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ContractUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ContractAdd adds a new contract s to the alfabet system this interface takes an arrary of contract documents

  Add a new contract(s) to the Alfabet system. This interface takes an arrary of Contract documents.
*/
func (a *Client) ContractAdd(params *ContractAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ContractAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contractAdd",
		Method:             "POST",
		PathPattern:        "/contract",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContractAddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contractAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContractDeleteList deletes a list of contracts based on an array of contarct ids

  Delete a list of contracts based on an array of contarct ids.
*/
func (a *Client) ContractDeleteList(params *ContractDeleteListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ContractDeleteListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractDeleteListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contractDeleteList",
		Method:             "DELETE",
		PathPattern:        "/contract",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractDeleteListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContractDeleteListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contractDeleteList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContractFind retrieves a list of contracts based on query criteria if a system Id is passed the contract s for that system are returned if no query data is passed in all contracts for the current year are returned

  Retrieve a list of contracts based on query criteria. If a SystemId is passed, the contract(s) for that system are returned. If no query data is passed in, all contracts for the current year are returned.
*/
func (a *Client) ContractFind(params *ContractFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ContractFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contractFind",
		Method:             "GET",
		PathPattern:        "/contract",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContractFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contractFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContractUpdate updates an array of contract s in the alfabet system this interface takes an arrary of contract documents if the input budgets only is set to false this interface will also update any associated contract deliverable records

  Update an array of contract(s) in the Alfabet system. This interface takes an arrary of Contract documents. If the input budgetsOnly is set to false, this interface will also update any associated Contract Deliverable records.
*/
func (a *Client) ContractUpdate(params *ContractUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ContractUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "contractUpdate",
		Method:             "PUT",
		PathPattern:        "/contract",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContractUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for contractUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
