// Code generated by go-swagger; DO NOT EDIT.

package data_center

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDataCenterFindListParams creates a new DataCenterFindListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDataCenterFindListParams() *DataCenterFindListParams {
	return &DataCenterFindListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDataCenterFindListParamsWithTimeout creates a new DataCenterFindListParams object
// with the ability to set a timeout on a request.
func NewDataCenterFindListParamsWithTimeout(timeout time.Duration) *DataCenterFindListParams {
	return &DataCenterFindListParams{
		timeout: timeout,
	}
}

// NewDataCenterFindListParamsWithContext creates a new DataCenterFindListParams object
// with the ability to set a context for a request.
func NewDataCenterFindListParamsWithContext(ctx context.Context) *DataCenterFindListParams {
	return &DataCenterFindListParams{
		Context: ctx,
	}
}

// NewDataCenterFindListParamsWithHTTPClient creates a new DataCenterFindListParams object
// with the ability to set a custom HTTPClient for a request.
func NewDataCenterFindListParamsWithHTTPClient(client *http.Client) *DataCenterFindListParams {
	return &DataCenterFindListParams{
		HTTPClient: client,
	}
}

/* DataCenterFindListParams contains all the parameters to send to the API endpoint
   for the data center find list operation.

   Typically these are written to a http.Request.
*/
type DataCenterFindListParams struct {

	/* ID.

	   Data center ID.
	*/
	ID *string

	/* IdsOnly.

	   Return only data center ids and names.
	*/
	IdsOnly *bool

	/* Name.

	   Data center name.
	*/
	Name *string

	/* State.

	   Data center state.
	*/
	State *string

	/* Status.

	   Data center status.
	*/
	Status *string

	/* Version.

	   Data center version.
	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the data center find list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DataCenterFindListParams) WithDefaults() *DataCenterFindListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the data center find list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DataCenterFindListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the data center find list params
func (o *DataCenterFindListParams) WithTimeout(timeout time.Duration) *DataCenterFindListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the data center find list params
func (o *DataCenterFindListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the data center find list params
func (o *DataCenterFindListParams) WithContext(ctx context.Context) *DataCenterFindListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the data center find list params
func (o *DataCenterFindListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the data center find list params
func (o *DataCenterFindListParams) WithHTTPClient(client *http.Client) *DataCenterFindListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the data center find list params
func (o *DataCenterFindListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the data center find list params
func (o *DataCenterFindListParams) WithID(id *string) *DataCenterFindListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the data center find list params
func (o *DataCenterFindListParams) SetID(id *string) {
	o.ID = id
}

// WithIdsOnly adds the idsOnly to the data center find list params
func (o *DataCenterFindListParams) WithIdsOnly(idsOnly *bool) *DataCenterFindListParams {
	o.SetIdsOnly(idsOnly)
	return o
}

// SetIdsOnly adds the idsOnly to the data center find list params
func (o *DataCenterFindListParams) SetIdsOnly(idsOnly *bool) {
	o.IdsOnly = idsOnly
}

// WithName adds the name to the data center find list params
func (o *DataCenterFindListParams) WithName(name *string) *DataCenterFindListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the data center find list params
func (o *DataCenterFindListParams) SetName(name *string) {
	o.Name = name
}

// WithState adds the state to the data center find list params
func (o *DataCenterFindListParams) WithState(state *string) *DataCenterFindListParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the data center find list params
func (o *DataCenterFindListParams) SetState(state *string) {
	o.State = state
}

// WithStatus adds the status to the data center find list params
func (o *DataCenterFindListParams) WithStatus(status *string) *DataCenterFindListParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the data center find list params
func (o *DataCenterFindListParams) SetStatus(status *string) {
	o.Status = status
}

// WithVersion adds the version to the data center find list params
func (o *DataCenterFindListParams) WithVersion(version *string) *DataCenterFindListParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the data center find list params
func (o *DataCenterFindListParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *DataCenterFindListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.IdsOnly != nil {

		// query param idsOnly
		var qrIdsOnly bool

		if o.IdsOnly != nil {
			qrIdsOnly = *o.IdsOnly
		}
		qIdsOnly := swag.FormatBool(qrIdsOnly)
		if qIdsOnly != "" {

			if err := r.SetQueryParam("idsOnly", qIdsOnly); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.Version != nil {

		// query param version
		var qrVersion string

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
