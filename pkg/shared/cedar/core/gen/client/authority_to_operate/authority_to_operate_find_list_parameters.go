// Code generated by go-swagger; DO NOT EDIT.

package authority_to_operate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAuthorityToOperateFindListParams creates a new AuthorityToOperateFindListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAuthorityToOperateFindListParams() *AuthorityToOperateFindListParams {
	return &AuthorityToOperateFindListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAuthorityToOperateFindListParamsWithTimeout creates a new AuthorityToOperateFindListParams object
// with the ability to set a timeout on a request.
func NewAuthorityToOperateFindListParamsWithTimeout(timeout time.Duration) *AuthorityToOperateFindListParams {
	return &AuthorityToOperateFindListParams{
		timeout: timeout,
	}
}

// NewAuthorityToOperateFindListParamsWithContext creates a new AuthorityToOperateFindListParams object
// with the ability to set a context for a request.
func NewAuthorityToOperateFindListParamsWithContext(ctx context.Context) *AuthorityToOperateFindListParams {
	return &AuthorityToOperateFindListParams{
		Context: ctx,
	}
}

// NewAuthorityToOperateFindListParamsWithHTTPClient creates a new AuthorityToOperateFindListParams object
// with the ability to set a custom HTTPClient for a request.
func NewAuthorityToOperateFindListParamsWithHTTPClient(client *http.Client) *AuthorityToOperateFindListParams {
	return &AuthorityToOperateFindListParams{
		HTTPClient: client,
	}
}

/* AuthorityToOperateFindListParams contains all the parameters to send to the API endpoint
   for the authority to operate find list operation.

   Typically these are written to a http.Request.
*/
type AuthorityToOperateFindListParams struct {

	/* ContainsPersonallyIdentifiableInformation.

	   Does the system collect, maintain, use or share Personally Identifiable Information (PII)?
	*/
	ContainsPersonallyIdentifiableInformation *bool

	/* DispositionDateAfter.

	   ATO's with a retirement or disposition date after the date provided

	   Format: date
	*/
	DispositionDateAfter *strfmt.Date

	/* DispositionDateBefore.

	   ATO's with a retirement or disposition date before the date provided

	   Format: date
	*/
	DispositionDateBefore *strfmt.Date

	/* FismaSystemAcronym.

	   The system's FISMA acronym.
	*/
	FismaSystemAcronym *string

	/* IsProtectedHealthInformation.

	   Is the data maintained in this FISMA system considered electronic Protected Health Information (PHI)?
	*/
	IsProtectedHealthInformation *bool

	/* TlcPhase.

	   A system's lifecycle phase.
	*/
	TlcPhase *string

	/* UUID.

	   UUID of the ATO
	*/
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the authority to operate find list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AuthorityToOperateFindListParams) WithDefaults() *AuthorityToOperateFindListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the authority to operate find list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AuthorityToOperateFindListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) WithTimeout(timeout time.Duration) *AuthorityToOperateFindListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) WithContext(ctx context.Context) *AuthorityToOperateFindListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) WithHTTPClient(client *http.Client) *AuthorityToOperateFindListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContainsPersonallyIdentifiableInformation adds the containsPersonallyIdentifiableInformation to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) WithContainsPersonallyIdentifiableInformation(containsPersonallyIdentifiableInformation *bool) *AuthorityToOperateFindListParams {
	o.SetContainsPersonallyIdentifiableInformation(containsPersonallyIdentifiableInformation)
	return o
}

// SetContainsPersonallyIdentifiableInformation adds the containsPersonallyIdentifiableInformation to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) SetContainsPersonallyIdentifiableInformation(containsPersonallyIdentifiableInformation *bool) {
	o.ContainsPersonallyIdentifiableInformation = containsPersonallyIdentifiableInformation
}

// WithDispositionDateAfter adds the dispositionDateAfter to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) WithDispositionDateAfter(dispositionDateAfter *strfmt.Date) *AuthorityToOperateFindListParams {
	o.SetDispositionDateAfter(dispositionDateAfter)
	return o
}

// SetDispositionDateAfter adds the dispositionDateAfter to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) SetDispositionDateAfter(dispositionDateAfter *strfmt.Date) {
	o.DispositionDateAfter = dispositionDateAfter
}

// WithDispositionDateBefore adds the dispositionDateBefore to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) WithDispositionDateBefore(dispositionDateBefore *strfmt.Date) *AuthorityToOperateFindListParams {
	o.SetDispositionDateBefore(dispositionDateBefore)
	return o
}

// SetDispositionDateBefore adds the dispositionDateBefore to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) SetDispositionDateBefore(dispositionDateBefore *strfmt.Date) {
	o.DispositionDateBefore = dispositionDateBefore
}

// WithFismaSystemAcronym adds the fismaSystemAcronym to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) WithFismaSystemAcronym(fismaSystemAcronym *string) *AuthorityToOperateFindListParams {
	o.SetFismaSystemAcronym(fismaSystemAcronym)
	return o
}

// SetFismaSystemAcronym adds the fismaSystemAcronym to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) SetFismaSystemAcronym(fismaSystemAcronym *string) {
	o.FismaSystemAcronym = fismaSystemAcronym
}

// WithIsProtectedHealthInformation adds the isProtectedHealthInformation to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) WithIsProtectedHealthInformation(isProtectedHealthInformation *bool) *AuthorityToOperateFindListParams {
	o.SetIsProtectedHealthInformation(isProtectedHealthInformation)
	return o
}

// SetIsProtectedHealthInformation adds the isProtectedHealthInformation to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) SetIsProtectedHealthInformation(isProtectedHealthInformation *bool) {
	o.IsProtectedHealthInformation = isProtectedHealthInformation
}

// WithTlcPhase adds the tlcPhase to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) WithTlcPhase(tlcPhase *string) *AuthorityToOperateFindListParams {
	o.SetTlcPhase(tlcPhase)
	return o
}

// SetTlcPhase adds the tlcPhase to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) SetTlcPhase(tlcPhase *string) {
	o.TlcPhase = tlcPhase
}

// WithUUID adds the uuid to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) WithUUID(uuid *string) *AuthorityToOperateFindListParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the authority to operate find list params
func (o *AuthorityToOperateFindListParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *AuthorityToOperateFindListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContainsPersonallyIdentifiableInformation != nil {

		// query param containsPersonallyIdentifiableInformation
		var qrContainsPersonallyIdentifiableInformation bool

		if o.ContainsPersonallyIdentifiableInformation != nil {
			qrContainsPersonallyIdentifiableInformation = *o.ContainsPersonallyIdentifiableInformation
		}
		qContainsPersonallyIdentifiableInformation := swag.FormatBool(qrContainsPersonallyIdentifiableInformation)
		if qContainsPersonallyIdentifiableInformation != "" {

			if err := r.SetQueryParam("containsPersonallyIdentifiableInformation", qContainsPersonallyIdentifiableInformation); err != nil {
				return err
			}
		}
	}

	if o.DispositionDateAfter != nil {

		// query param dispositionDateAfter
		var qrDispositionDateAfter strfmt.Date

		if o.DispositionDateAfter != nil {
			qrDispositionDateAfter = *o.DispositionDateAfter
		}
		qDispositionDateAfter := qrDispositionDateAfter.String()
		if qDispositionDateAfter != "" {

			if err := r.SetQueryParam("dispositionDateAfter", qDispositionDateAfter); err != nil {
				return err
			}
		}
	}

	if o.DispositionDateBefore != nil {

		// query param dispositionDateBefore
		var qrDispositionDateBefore strfmt.Date

		if o.DispositionDateBefore != nil {
			qrDispositionDateBefore = *o.DispositionDateBefore
		}
		qDispositionDateBefore := qrDispositionDateBefore.String()
		if qDispositionDateBefore != "" {

			if err := r.SetQueryParam("dispositionDateBefore", qDispositionDateBefore); err != nil {
				return err
			}
		}
	}

	if o.FismaSystemAcronym != nil {

		// query param fismaSystemAcronym
		var qrFismaSystemAcronym string

		if o.FismaSystemAcronym != nil {
			qrFismaSystemAcronym = *o.FismaSystemAcronym
		}
		qFismaSystemAcronym := qrFismaSystemAcronym
		if qFismaSystemAcronym != "" {

			if err := r.SetQueryParam("fismaSystemAcronym", qFismaSystemAcronym); err != nil {
				return err
			}
		}
	}

	if o.IsProtectedHealthInformation != nil {

		// query param isProtectedHealthInformation
		var qrIsProtectedHealthInformation bool

		if o.IsProtectedHealthInformation != nil {
			qrIsProtectedHealthInformation = *o.IsProtectedHealthInformation
		}
		qIsProtectedHealthInformation := swag.FormatBool(qrIsProtectedHealthInformation)
		if qIsProtectedHealthInformation != "" {

			if err := r.SetQueryParam("isProtectedHealthInformation", qIsProtectedHealthInformation); err != nil {
				return err
			}
		}
	}

	if o.TlcPhase != nil {

		// query param tlcPhase
		var qrTlcPhase string

		if o.TlcPhase != nil {
			qrTlcPhase = *o.TlcPhase
		}
		qTlcPhase := qrTlcPhase
		if qTlcPhase != "" {

			if err := r.SetQueryParam("tlcPhase", qTlcPhase); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
