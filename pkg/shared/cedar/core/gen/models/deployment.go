// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Deployment deployment
//
// swagger:model Deployment
type Deployment struct {

	// data center
	DataCenter *DataCenter `json:"DataCenter,omitempty"`

	// contractor name
	// Example: Acumen
	ContractorName string `json:"contractorName,omitempty"`

	// deployment element Id
	// Example: 69-1-0
	DeploymentElementID string `json:"deploymentElementId,omitempty"`

	// deployment type
	// Enum: [COOP DR Development Implementation Integration Production Testing Training Validation Other]
	DeploymentType string `json:"deploymentType,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// end date
	// Format: date
	EndDate strfmt.Date `json:"endDate,omitempty"`

	// has production data
	// Example: true
	HasProductionData string `json:"hasProductionData,omitempty"`

	// id
	// Example: 351-1-0
	// Required: true
	ID *string `json:"id"`

	// is hot site
	// Example: true
	IsHotSite string `json:"isHotSite,omitempty"`

	// name
	// Example: Accountable Care Organization Management System v.1.0 (COOP DR)
	// Required: true
	Name *string `json:"name"`

	// replicated system elements
	ReplicatedSystemElements []string `json:"replicatedSystemElements"`

	// start date
	// Format: date
	StartDate strfmt.Date `json:"startDate,omitempty"`

	// state
	// Enum: [active planned retired]
	State string `json:"state,omitempty"`

	// status
	// Enum: [approved draft]
	Status string `json:"status,omitempty"`

	// system Id
	// Example: 326-1-0
	// Required: true
	SystemID *string `json:"systemId"`

	// system name
	// Example: Health Insurance and Oversight System
	SystemName string `json:"systemName,omitempty"`

	// system version
	// Example: 1
	SystemVersion string `json:"systemVersion,omitempty"`

	// wan type
	// Example: Internet - Contractor
	WanType string `json:"wanType,omitempty"`
}

// Validate validates this deployment
func (m *Deployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataCenter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Deployment) validateDataCenter(formats strfmt.Registry) error {
	if swag.IsZero(m.DataCenter) { // not required
		return nil
	}

	if m.DataCenter != nil {
		if err := m.DataCenter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DataCenter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DataCenter")
			}
			return err
		}
	}

	return nil
}

var deploymentTypeDeploymentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COOP DR","Development","Implementation","Integration","Production","Testing","Training","Validation","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentTypeDeploymentTypePropEnum = append(deploymentTypeDeploymentTypePropEnum, v)
	}
}

const (

	// DeploymentDeploymentTypeCOOPDR captures enum value "COOP DR"
	DeploymentDeploymentTypeCOOPDR string = "COOP DR"

	// DeploymentDeploymentTypeDevelopment captures enum value "Development"
	DeploymentDeploymentTypeDevelopment string = "Development"

	// DeploymentDeploymentTypeImplementation captures enum value "Implementation"
	DeploymentDeploymentTypeImplementation string = "Implementation"

	// DeploymentDeploymentTypeIntegration captures enum value "Integration"
	DeploymentDeploymentTypeIntegration string = "Integration"

	// DeploymentDeploymentTypeProduction captures enum value "Production"
	DeploymentDeploymentTypeProduction string = "Production"

	// DeploymentDeploymentTypeTesting captures enum value "Testing"
	DeploymentDeploymentTypeTesting string = "Testing"

	// DeploymentDeploymentTypeTraining captures enum value "Training"
	DeploymentDeploymentTypeTraining string = "Training"

	// DeploymentDeploymentTypeValidation captures enum value "Validation"
	DeploymentDeploymentTypeValidation string = "Validation"

	// DeploymentDeploymentTypeOther captures enum value "Other"
	DeploymentDeploymentTypeOther string = "Other"
)

// prop value enum
func (m *Deployment) validateDeploymentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentTypeDeploymentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Deployment) validateDeploymentType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDeploymentTypeEnum("deploymentType", "body", m.DeploymentType); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var deploymentTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","planned","retired"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentTypeStatePropEnum = append(deploymentTypeStatePropEnum, v)
	}
}

const (

	// DeploymentStateActive captures enum value "active"
	DeploymentStateActive string = "active"

	// DeploymentStatePlanned captures enum value "planned"
	DeploymentStatePlanned string = "planned"

	// DeploymentStateRetired captures enum value "retired"
	DeploymentStateRetired string = "retired"
)

// prop value enum
func (m *Deployment) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Deployment) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var deploymentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["approved","draft"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentTypeStatusPropEnum = append(deploymentTypeStatusPropEnum, v)
	}
}

const (

	// DeploymentStatusApproved captures enum value "approved"
	DeploymentStatusApproved string = "approved"

	// DeploymentStatusDraft captures enum value "draft"
	DeploymentStatusDraft string = "draft"
)

// prop value enum
func (m *Deployment) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deploymentTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Deployment) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Deployment) validateSystemID(formats strfmt.Registry) error {

	if err := validate.Required("systemId", "body", m.SystemID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this deployment based on the context it is used
func (m *Deployment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataCenter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Deployment) contextValidateDataCenter(ctx context.Context, formats strfmt.Registry) error {

	if m.DataCenter != nil {
		if err := m.DataCenter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DataCenter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DataCenter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Deployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Deployment) UnmarshalBinary(b []byte) error {
	var res Deployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
