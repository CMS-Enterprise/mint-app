import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /**
   * https://gqlgen.com/reference/scalars/#any
   * Maps an arbitrary GraphQL value to a interface{} Go type.
   */
  Any: { input: any; output: any; }
  /** Maps an arbitrary GraphQL value to a map[string]interface{} Go type. */
  Map: { input: any; output: any; }
  /** TaggedHTML represents an input type for HTML that could also include tags that reference another entity */
  TaggedHTML: { input: any; output: any; }
  /** Time values are represented as strings using RFC3339 format, for example 2019-10-12T07:20:50G.52Z */
  Time: { input: Time; output: Time; }
  /** UUIDs are represented using 36 ASCII characters, for example B0511859-ADE6-4A67-8969-16EC280C0E1A */
  UUID: { input: UUID; output: UUID; }
  /**
   * https://gqlgen.com/reference/file-upload/
   * Represents a multipart file upload
   */
  Upload: { input: Upload; output: Upload; }
};

export enum ActionType {
  /** An administrative action */
  ADMIN = 'ADMIN',
  /** A normal flow action */
  NORMAL = 'NORMAL'
}

/** Activity represents an event that happened in the application that could result in a notification. */
export type Activity = {
  __typename: 'Activity';
  activityType: ActivityType;
  actorID: Scalars['UUID']['output'];
  actorUserAccount: UserAccount;
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  entityID: Scalars['UUID']['output'];
  id: Scalars['UUID']['output'];
  metaData: ActivityMetaData;
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
};

/** ActivityMetaData is a type that represents all the data that can be captured in an Activity */
export type ActivityMetaData = AddedAsCollaboratorMeta | DailyDigestCompleteActivityMeta | DatesChangedActivityMeta | ModelPlanSharedActivityMeta | NewDiscussionRepliedActivityMeta | NewModelPlanActivityMeta | TaggedInDiscussionReplyActivityMeta | TaggedInPlanDiscussionActivityMeta;

/** ActivityType represents the possible activities that happen in application that might result in a notification */
export enum ActivityType {
  ADDED_AS_COLLABORATOR = 'ADDED_AS_COLLABORATOR',
  DAILY_DIGEST_COMPLETE = 'DAILY_DIGEST_COMPLETE',
  DATES_CHANGED = 'DATES_CHANGED',
  MODEL_PLAN_SHARED = 'MODEL_PLAN_SHARED',
  NEW_DISCUSSION_REPLY = 'NEW_DISCUSSION_REPLY',
  NEW_MODEL_PLAN = 'NEW_MODEL_PLAN',
  TAGGED_IN_DISCUSSION = 'TAGGED_IN_DISCUSSION',
  TAGGED_IN_DISCUSSION_REPLY = 'TAGGED_IN_DISCUSSION_REPLY'
}

export type AddedAsCollaboratorMeta = {
  __typename: 'AddedAsCollaboratorMeta';
  collaborator: PlanCollaborator;
  collaboratorID: Scalars['UUID']['output'];
  modelPlan: ModelPlan;
  modelPlanID: Scalars['UUID']['output'];
  type: ActivityType;
  version: Scalars['Int']['output'];
};

export enum AgencyOrStateHelpType {
  NO = 'NO',
  OTHER = 'OTHER',
  YES_AGENCY_IAA = 'YES_AGENCY_IAA',
  YES_AGENCY_IDEAS = 'YES_AGENCY_IDEAS',
  YES_STATE = 'YES_STATE'
}

export enum AgreementType {
  COOPERATIVE = 'COOPERATIVE',
  OTHER = 'OTHER',
  PARTICIPATION = 'PARTICIPATION'
}

export enum AlternativePaymentModelType {
  ADVANCED = 'ADVANCED',
  MIPS = 'MIPS',
  NOT_APM = 'NOT_APM',
  REGULAR = 'REGULAR'
}

/** Analyzed Audit Represents data about changes that have happened in a model plan, saved in an a */
export type AnalyzedAudit = {
  __typename: 'AnalyzedAudit';
  changes: AnalyzedAuditChange;
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  date: Scalars['Time']['output'];
  id: Scalars['UUID']['output'];
  modelName: Scalars['String']['output'];
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
};

export type AnalyzedAuditChange = {
  __typename: 'AnalyzedAuditChange';
  crTdls?: Maybe<AnalyzedCrTdls>;
  documents?: Maybe<AnalyzedDocuments>;
  modelLeads?: Maybe<AnalyzedModelLeads>;
  modelPlan?: Maybe<AnalyzedModelPlan>;
  planDiscussions?: Maybe<AnalyzedPlanDiscussions>;
  planSections?: Maybe<AnalyzedPlanSections>;
};

export type AnalyzedCrTdls = {
  __typename: 'AnalyzedCrTdls';
  activity?: Maybe<Scalars['Boolean']['output']>;
};

export type AnalyzedDocuments = {
  __typename: 'AnalyzedDocuments';
  count?: Maybe<Scalars['Int']['output']>;
};

export type AnalyzedModelLeadInfo = {
  __typename: 'AnalyzedModelLeadInfo';
  commonName: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  userAccount: UserAccount;
};

export type AnalyzedModelLeads = {
  __typename: 'AnalyzedModelLeads';
  added: Array<AnalyzedModelLeadInfo>;
};

export type AnalyzedModelPlan = {
  __typename: 'AnalyzedModelPlan';
  /** This represents the oldName */
  oldName?: Maybe<Scalars['String']['output']>;
  statusChanges?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type AnalyzedPlanDiscussions = {
  __typename: 'AnalyzedPlanDiscussions';
  activity?: Maybe<Scalars['Boolean']['output']>;
};

export type AnalyzedPlanSections = {
  __typename: 'AnalyzedPlanSections';
  readyForClearance: Array<TableName>;
  readyForReview: Array<TableName>;
  updated: Array<TableName>;
};

export type AuditChange = {
  __typename: 'AuditChange';
  action: Scalars['String']['output'];
  fields: Scalars['Map']['output'];
  foreignKey?: Maybe<Scalars['UUID']['output']>;
  id: Scalars['Int']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  primaryKey: Scalars['UUID']['output'];
  tableName: TableName;
};

export enum AuditFieldChangeType {
  ANSWERED = 'ANSWERED',
  REMOVED = 'REMOVED',
  /** This type should not appear for all intents and purposes. It shows up if a value changes from null to empty array or vice versa. */
  UNCHANGED = 'UNCHANGED',
  UPDATED = 'UPDATED'
}

export enum AuthorityAllowance {
  ACA = 'ACA',
  CONGRESSIONALLY_MANDATED = 'CONGRESSIONALLY_MANDATED',
  OTHER = 'OTHER',
  SSA_PART_B = 'SSA_PART_B'
}

export enum BenchmarkForPerformanceType {
  NO = 'NO',
  YES_NO_RECONCILE = 'YES_NO_RECONCILE',
  YES_RECONCILE = 'YES_RECONCILE'
}

export enum BeneficiariesType {
  DISEASE_SPECIFIC = 'DISEASE_SPECIFIC',
  DUALLY_ELIGIBLE = 'DUALLY_ELIGIBLE',
  MEDICAID = 'MEDICAID',
  MEDICARE_ADVANTAGE = 'MEDICARE_ADVANTAGE',
  MEDICARE_FFS = 'MEDICARE_FFS',
  MEDICARE_PART_D = 'MEDICARE_PART_D',
  NA = 'NA',
  OTHER = 'OTHER',
  UNDERSERVED = 'UNDERSERVED'
}

export enum CmmiGroup {
  PATIENT_CARE_MODELS_GROUP = 'PATIENT_CARE_MODELS_GROUP',
  POLICY_AND_PROGRAMS_GROUP = 'POLICY_AND_PROGRAMS_GROUP',
  SEAMLESS_CARE_MODELS_GROUP = 'SEAMLESS_CARE_MODELS_GROUP',
  STATE_AND_POPULATION_HEALTH_GROUP = 'STATE_AND_POPULATION_HEALTH_GROUP',
  TBD = 'TBD'
}

export enum CmsCenter {
  CENTER_FOR_CLINICAL_STANDARDS_AND_QUALITY = 'CENTER_FOR_CLINICAL_STANDARDS_AND_QUALITY',
  CENTER_FOR_MEDICAID_AND_CHIP_SERVICES = 'CENTER_FOR_MEDICAID_AND_CHIP_SERVICES',
  CENTER_FOR_MEDICARE = 'CENTER_FOR_MEDICARE',
  CENTER_FOR_PROGRAM_INTEGRITY = 'CENTER_FOR_PROGRAM_INTEGRITY',
  CMMI = 'CMMI',
  FEDERAL_COORDINATED_HEALTH_CARE_OFFICE = 'FEDERAL_COORDINATED_HEALTH_CARE_OFFICE'
}

export enum CcmInvolvmentType {
  NO = 'NO',
  OTHER = 'OTHER',
  YES_EVALUATION = 'YES_EVALUATION',
  YES__IMPLEMENTATION = 'YES__IMPLEMENTATION'
}

export enum ChangeType {
  ADDED = 'ADDED',
  REMOVED = 'REMOVED',
  UPDATED = 'UPDATED'
}

export enum ClaimsBasedPayType {
  ADJUSTMENTS_TO_FFS_PAYMENTS = 'ADJUSTMENTS_TO_FFS_PAYMENTS',
  CARE_MANAGEMENT_HOME_VISITS = 'CARE_MANAGEMENT_HOME_VISITS',
  OTHER = 'OTHER',
  PAYMENTS_FOR_POST_DISCHARGE_HOME_VISITS = 'PAYMENTS_FOR_POST_DISCHARGE_HOME_VISITS',
  REDUCTIONS_TO_BENEFICIARY_COST_SHARING = 'REDUCTIONS_TO_BENEFICIARY_COST_SHARING',
  SERVICES_NOT_COVERED_THROUGH_TRADITIONAL_MEDICARE = 'SERVICES_NOT_COVERED_THROUGH_TRADITIONAL_MEDICARE',
  SNF_CLAIMS_WITHOUT_3DAY_HOSPITAL_ADMISSIONS = 'SNF_CLAIMS_WITHOUT_3DAY_HOSPITAL_ADMISSIONS',
  TELEHEALTH_SERVICES_NOT_TRADITIONAL_MEDICARE = 'TELEHEALTH_SERVICES_NOT_TRADITIONAL_MEDICARE'
}

export enum ComplexityCalculationLevelType {
  HIGH = 'HIGH',
  LOW = 'LOW',
  MIDDLE = 'MIDDLE'
}

export enum ConfidenceType {
  COMPLETELY = 'COMPLETELY',
  FAIRLY = 'FAIRLY',
  NOT_AT_ALL = 'NOT_AT_ALL',
  SLIGHTLY = 'SLIGHTLY'
}

export enum ContractorSupportType {
  MULTIPLE = 'MULTIPLE',
  NONE = 'NONE',
  ONE = 'ONE',
  OTHER = 'OTHER'
}

export type CreateOperationalSolutionSubtaskInput = {
  name: Scalars['String']['input'];
  status: OperationalSolutionSubtaskStatus;
};

/** The current user of the application */
export type CurrentUser = {
  __typename: 'CurrentUser';
  account: UserAccount;
  launchDarkly: LaunchDarklySettings;
  notificationPreferences: UserNotificationPreferences;
  notifications: UserNotifications;
};

export type DailyDigestCompleteActivityMeta = {
  __typename: 'DailyDigestCompleteActivityMeta';
  analyzedAudits: Array<AnalyzedAudit>;
  date: Scalars['Time']['output'];
  modelPlanIDs: Array<Scalars['UUID']['output']>;
  type: ActivityType;
  userID: Scalars['UUID']['output'];
  version: Scalars['Int']['output'];
};

export enum DataForMonitoringType {
  CLINICAL_DATA = 'CLINICAL_DATA',
  ENCOUNTER_DATA = 'ENCOUNTER_DATA',
  MEDICAID_CLAIMS = 'MEDICAID_CLAIMS',
  MEDICARE_CLAIMS = 'MEDICARE_CLAIMS',
  NON_CLINICAL_DATA = 'NON_CLINICAL_DATA',
  NON_MEDICAL_DATA = 'NON_MEDICAL_DATA',
  NOT_PLANNING_TO_COLLECT_DATA = 'NOT_PLANNING_TO_COLLECT_DATA',
  NO_PAY_CLAIMS = 'NO_PAY_CLAIMS',
  OTHER = 'OTHER',
  QUALITY_CLAIMS_BASED_MEASURES = 'QUALITY_CLAIMS_BASED_MEASURES',
  QUALITY_REPORTED_MEASURES = 'QUALITY_REPORTED_MEASURES',
  SITE_VISITS = 'SITE_VISITS'
}

export enum DataFullTimeOrIncrementalType {
  FULL_TIME = 'FULL_TIME',
  INCREMENTAL = 'INCREMENTAL'
}

export enum DataStartsType {
  AT_SOME_OTHER_POINT_IN_TIME = 'AT_SOME_OTHER_POINT_IN_TIME',
  DURING_APPLICATION_PERIOD = 'DURING_APPLICATION_PERIOD',
  EARLY_IN_THE_FIRST_PERFORMANCE_YEAR = 'EARLY_IN_THE_FIRST_PERFORMANCE_YEAR',
  IN_THE_SUBSEQUENT_PERFORMANCE_YEAR = 'IN_THE_SUBSEQUENT_PERFORMANCE_YEAR',
  LATER_IN_THE_FIRST_PERFORMANCE_YEAR = 'LATER_IN_THE_FIRST_PERFORMANCE_YEAR',
  NOT_PLANNING_TO_DO_THIS = 'NOT_PLANNING_TO_DO_THIS',
  OTHER = 'OTHER',
  SHORTLY_BEFORE_THE_START_DATE = 'SHORTLY_BEFORE_THE_START_DATE'
}

export enum DataToSendParticipantsType {
  BASELINE_HISTORICAL_DATA = 'BASELINE_HISTORICAL_DATA',
  BENEFICIARY_LEVEL_DATA = 'BENEFICIARY_LEVEL_DATA',
  CLAIMS_LEVEL_DATA = 'CLAIMS_LEVEL_DATA',
  NOT_PLANNING_TO_SEND_DATA = 'NOT_PLANNING_TO_SEND_DATA',
  OTHER_MIPS_DATA = 'OTHER_MIPS_DATA',
  PARTICIPANT_LEVEL_DATA = 'PARTICIPANT_LEVEL_DATA',
  PROVIDER_LEVEL_DATA = 'PROVIDER_LEVEL_DATA'
}

export enum DatabaseOperation {
  DELETE = 'DELETE',
  INSERT = 'INSERT',
  TRUNCATE = 'TRUNCATE',
  UPDATE = 'UPDATE'
}

export type DateChange = {
  __typename: 'DateChange';
  field: DateChangeFieldType;
  isChanged: Scalars['Boolean']['output'];
  isRange: Scalars['Boolean']['output'];
  newDate?: Maybe<Scalars['Time']['output']>;
  newRangeEnd?: Maybe<Scalars['Time']['output']>;
  newRangeStart?: Maybe<Scalars['Time']['output']>;
  oldDate?: Maybe<Scalars['Time']['output']>;
  oldRangeEnd?: Maybe<Scalars['Time']['output']>;
  oldRangeStart?: Maybe<Scalars['Time']['output']>;
};

export enum DateChangeFieldType {
  ANNOUNCED = 'ANNOUNCED',
  APPLICATIONS = 'APPLICATIONS',
  CLEARANCE = 'CLEARANCE',
  COMPLETE_ICIP = 'COMPLETE_ICIP',
  PERFORMANCE_PERIOD = 'PERFORMANCE_PERIOD',
  WRAP_UP_ENDS = 'WRAP_UP_ENDS'
}

export type DatesChangedActivityMeta = {
  __typename: 'DatesChangedActivityMeta';
  dateChanges: Array<DateChange>;
  modelPlan: ModelPlan;
  modelPlanID: Scalars['UUID']['output'];
  type: ActivityType;
  version: Scalars['Int']['output'];
};

export enum DatesChangedNotificationType {
  ALL_MODELS = 'ALL_MODELS',
  FOLLOWED_MODELS = 'FOLLOWED_MODELS',
  MY_MODELS = 'MY_MODELS'
}

/** DiscussionReply represents a discussion reply */
export type DiscussionReply = {
  __typename: 'DiscussionReply';
  content?: Maybe<TaggedContent>;
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  discussionID: Scalars['UUID']['output'];
  id: Scalars['UUID']['output'];
  isAssessment: Scalars['Boolean']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  userRole?: Maybe<DiscussionUserRole>;
  userRoleDescription?: Maybe<Scalars['String']['output']>;
};

/** DiscussionReplyCreateInput represents the necessary fields to create a discussion reply */
export type DiscussionReplyCreateInput = {
  content: Scalars['TaggedHTML']['input'];
  discussionID: Scalars['UUID']['input'];
  userRole?: InputMaybe<DiscussionUserRole>;
  userRoleDescription?: InputMaybe<Scalars['String']['input']>;
};

/** Represents discussion reply translation data */
export type DiscussionReplyTranslation = {
  __typename: 'DiscussionReplyTranslation';
  content: TranslationField;
  isAssessment: TranslationFieldWithOptions;
  userRole: TranslationFieldWithOptions;
  userRoleDescription: TranslationField;
};

export type DiscussionRoleSelection = {
  __typename: 'DiscussionRoleSelection';
  userRole: DiscussionUserRole;
  userRoleDescription?: Maybe<Scalars['String']['output']>;
};

export enum DiscussionUserRole {
  CMS_SYSTEM_SERVICE_TEAM = 'CMS_SYSTEM_SERVICE_TEAM',
  IT_LEAD = 'IT_LEAD',
  LEADERSHIP = 'LEADERSHIP',
  MEDICARE_ADMINISTRATIVE_CONTRACTOR = 'MEDICARE_ADMINISTRATIVE_CONTRACTOR',
  MINT_TEAM = 'MINT_TEAM',
  MODEL_LEAD = 'MODEL_LEAD',
  MODEL_TEAM = 'MODEL_TEAM',
  NONE_OF_THE_ABOVE = 'NONE_OF_THE_ABOVE',
  SHARED_SYSTEM_MAINTAINER = 'SHARED_SYSTEM_MAINTAINER',
  SOLUTION_ARCHITECT = 'SOLUTION_ARCHITECT'
}

export enum DocumentType {
  CONCEPT_PAPER = 'CONCEPT_PAPER',
  DESIGN_PARAMETERS_MEMO = 'DESIGN_PARAMETERS_MEMO',
  ICIP_DRAFT = 'ICIP_DRAFT',
  MARKET_RESEARCH = 'MARKET_RESEARCH',
  OFFICE_OF_THE_ADMINISTRATOR_PRESENTATION = 'OFFICE_OF_THE_ADMINISTRATOR_PRESENTATION',
  OTHER = 'OTHER',
  POLICY_PAPER = 'POLICY_PAPER'
}

export type EChimpCr = {
  __typename: 'EChimpCR';
  associatedModelUids?: Maybe<Scalars['UUID']['output']>;
  crStatus?: Maybe<Scalars['String']['output']>;
  /**
   * CRSummary is rich text in HTML format, in practice, the data is not tagged.
   * We use the TaggedContent type as we don't have another use for a plain HTML type.
   */
  crSummary?: Maybe<TaggedContent>;
  emergencyCrFlag?: Maybe<Scalars['Boolean']['output']>;
  firstName?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  implementationDate?: Maybe<Scalars['String']['output']>;
  initiator?: Maybe<Scalars['String']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  relatedCrNumbers?: Maybe<Scalars['String']['output']>;
  relatedCrTdlNumbers?: Maybe<Scalars['String']['output']>;
  sensitiveFlag?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  versionNum: Scalars['String']['output'];
};

export type EChimpCrAndTdls = EChimpCr | EChimpTdl;

export type EChimpTdl = {
  __typename: 'EChimpTDL';
  associatedModelUids?: Maybe<Scalars['UUID']['output']>;
  firstName?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  initiator?: Maybe<Scalars['String']['output']>;
  issuedDate?: Maybe<Scalars['String']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  versionNum: Scalars['String']['output'];
};

export enum EaseOfUse {
  AGREE = 'AGREE',
  DISAGREE = 'DISAGREE',
  UNSURE = 'UNSURE'
}

/** Represents a translation of enum values.  generalName is the human readable name of the enum value, groupedName is an optional field if usually referenced by a difference table/name */
export type EnumTranslation = {
  __typename: 'EnumTranslation';
  generalName: Scalars['String']['output'];
  groupedName?: Maybe<Scalars['String']['output']>;
};

export enum EvaluationApproachType {
  COMPARISON_MATCH = 'COMPARISON_MATCH',
  CONTROL_INTERVENTION = 'CONTROL_INTERVENTION',
  INTERRUPTED_TIME = 'INTERRUPTED_TIME',
  NON_MEDICARE_DATA = 'NON_MEDICARE_DATA',
  OTHER = 'OTHER'
}

export enum ExisitingModelLinkFieldType {
  GEN_CHAR_PARTICIPATION_EXISTING_MODEL_WHICH = 'GEN_CHAR_PARTICIPATION_EXISTING_MODEL_WHICH',
  GEN_CHAR_RESEMBLES_EXISTING_MODEL_WHICH = 'GEN_CHAR_RESEMBLES_EXISTING_MODEL_WHICH'
}

/** ExistingModel represents a model that already exists outside of the scope of MINT */
export type ExistingModel = {
  __typename: 'ExistingModel';
  authority?: Maybe<Scalars['String']['output']>;
  category?: Maybe<Scalars['String']['output']>;
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  dateBegan?: Maybe<Scalars['Time']['output']>;
  dateEnded?: Maybe<Scalars['Time']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  displayModelSummary?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  keywords?: Maybe<Scalars['String']['output']>;
  modelName: Scalars['String']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  numberOfBeneficiariesImpacted?: Maybe<Scalars['Int']['output']>;
  numberOfParticipants?: Maybe<Scalars['String']['output']>;
  numberOfPhysiciansImpacted?: Maybe<Scalars['Int']['output']>;
  stage: Scalars['String']['output'];
  states?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type ExistingModelLink = {
  __typename: 'ExistingModelLink';
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  currentModelPlanID?: Maybe<Scalars['UUID']['output']>;
  existingModelID?: Maybe<Scalars['Int']['output']>;
  fieldName: ExisitingModelLinkFieldType;
  id?: Maybe<Scalars['UUID']['output']>;
  model: LinkedExistingModel;
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
};

/** Represents existing model link translation data */
export type ExistingModelLinkTranslation = {
  __typename: 'ExistingModelLinkTranslation';
  currentModelPlanID: TranslationField;
  existingModelID: TranslationField;
  fieldName: TranslationFieldWithOptions;
};

export type ExistingModelLinks = {
  __typename: 'ExistingModelLinks';
  fieldName: ExisitingModelLinkFieldType;
  links: Array<ExistingModelLink>;
  modelPlanID: Scalars['UUID']['output'];
  names: Array<Scalars['String']['output']>;
};

export enum FrequencyType {
  ANNUALLY = 'ANNUALLY',
  CONTINUALLY = 'CONTINUALLY',
  MONTHLY = 'MONTHLY',
  OTHER = 'OTHER',
  QUARTERLY = 'QUARTERLY',
  SEMIANNUALLY = 'SEMIANNUALLY'
}

export enum FundingSource {
  MEDICARE_PART_A_HI_TRUST_FUND = 'MEDICARE_PART_A_HI_TRUST_FUND',
  MEDICARE_PART_B_SMI_TRUST_FUND = 'MEDICARE_PART_B_SMI_TRUST_FUND',
  OTHER = 'OTHER',
  PATIENT_PROTECTION_AFFORDABLE_CARE_ACT = 'PATIENT_PROTECTION_AFFORDABLE_CARE_ACT'
}

export enum GainshareArrangementEligibility {
  ALL_PROVIDERS = 'ALL_PROVIDERS',
  NO = 'NO',
  OTHER = 'OTHER',
  SOME_PROVIDERS = 'SOME_PROVIDERS'
}

export enum GeographyApplication {
  BENEFICIARIES = 'BENEFICIARIES',
  OTHER = 'OTHER',
  PARTICIPANTS = 'PARTICIPANTS',
  PROVIDERS = 'PROVIDERS'
}

export enum GeographyRegionType {
  CBSA = 'CBSA',
  HRR = 'HRR',
  MSA = 'MSA'
}

export enum GeographyType {
  OTHER = 'OTHER',
  REGION = 'REGION',
  STATE = 'STATE'
}

export enum KeyCharacteristic {
  EPISODE_BASED = 'EPISODE_BASED',
  MEDICAID_MODEL = 'MEDICAID_MODEL',
  MEDICARE_FFS_MODEL = 'MEDICARE_FFS_MODEL',
  OTHER = 'OTHER',
  PART_C = 'PART_C',
  PART_D = 'PART_D',
  PAYMENT = 'PAYMENT',
  POPULATION_BASED = 'POPULATION_BASED',
  PREVENTATIVE = 'PREVENTATIVE',
  SERVICE_DELIVERY = 'SERVICE_DELIVERY',
  SHARED_SAVINGS = 'SHARED_SAVINGS'
}

/** The current user's Launch Darkly key */
export type LaunchDarklySettings = {
  __typename: 'LaunchDarklySettings';
  signedHash: Scalars['String']['output'];
  userKey: Scalars['String']['output'];
};

/** LinkedExistingModel is a union type that returns either an Existing Model, or a Model plan from the database */
export type LinkedExistingModel = ExistingModel | ModelPlan;

export enum MintUses {
  CONTRIBUTE_DISCUSSIONS = 'CONTRIBUTE_DISCUSSIONS',
  EDIT_MODEL = 'EDIT_MODEL',
  OTHER = 'OTHER',
  SHARE_MODEL = 'SHARE_MODEL',
  TRACK_SOLUTIONS = 'TRACK_SOLUTIONS',
  VIEW_HELP = 'VIEW_HELP',
  VIEW_MODEL = 'VIEW_MODEL'
}

export enum ModelBySolutionStatus {
  ACTIVE = 'ACTIVE',
  ENDED = 'ENDED',
  OTHER = 'OTHER',
  PLANNED = 'PLANNED'
}

export enum ModelCategory {
  ACCOUNTABLE_CARE = 'ACCOUNTABLE_CARE',
  DISEASE_SPECIFIC_AND_EPISODIC = 'DISEASE_SPECIFIC_AND_EPISODIC',
  HEALTH_PLAN = 'HEALTH_PLAN',
  PRESCRIPTION_DRUG = 'PRESCRIPTION_DRUG',
  STATE_BASED = 'STATE_BASED',
  STATUTORY = 'STATUTORY',
  TO_BE_DETERMINED = 'TO_BE_DETERMINED'
}

export enum ModelLearningSystemType {
  EDUCATE_BENEFICIARIES = 'EDUCATE_BENEFICIARIES',
  IT_PLATFORM_CONNECT = 'IT_PLATFORM_CONNECT',
  LEARNING_CONTRACTOR = 'LEARNING_CONTRACTOR',
  NO_LEARNING_SYSTEM = 'NO_LEARNING_SYSTEM',
  OTHER = 'OTHER',
  PARTICIPANT_COLLABORATION = 'PARTICIPANT_COLLABORATION'
}

export enum ModelPhase {
  ACTIVE = 'ACTIVE',
  ANNOUNCED = 'ANNOUNCED',
  CLEARED = 'CLEARED',
  ENDED = 'ENDED',
  ICIP_COMPLETE = 'ICIP_COMPLETE',
  IN_CLEARANCE = 'IN_CLEARANCE'
}

/** ModelPlan represent the data point for plans about a model. It is the central data type in the application */
export type ModelPlan = {
  __typename: 'ModelPlan';
  abbreviation?: Maybe<Scalars['String']['output']>;
  archived: Scalars['Boolean']['output'];
  basics: PlanBasics;
  beneficiaries: PlanBeneficiaries;
  collaborators: Array<PlanCollaborator>;
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  crs: Array<PlanCr>;
  discussions: Array<PlanDiscussion>;
  documents: Array<PlanDocument>;
  echimpCRs: Array<EChimpCr>;
  echimpCRsAndTDLs: Array<EChimpCrAndTdls>;
  echimpTDLs: Array<EChimpTdl>;
  generalCharacteristics: PlanGeneralCharacteristics;
  id: Scalars['UUID']['output'];
  isCollaborator: Scalars['Boolean']['output'];
  isFavorite: Scalars['Boolean']['output'];
  modelBySolutionStatus: ModelBySolutionStatus;
  modelName: Scalars['String']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  nameHistory: Array<Scalars['String']['output']>;
  opSolutionLastModifiedDts: Scalars['Time']['output'];
  operationalNeeds: Array<OperationalNeed>;
  opsEvalAndLearning: PlanOpsEvalAndLearning;
  participantsAndProviders: PlanParticipantsAndProviders;
  payments: PlanPayments;
  prepareForClearance: PrepareForClearance;
  previousSuggestedPhase?: Maybe<ModelPhase>;
  status: ModelStatus;
  suggestedPhase?: Maybe<PhaseSuggestion>;
  taskListStatus: TaskStatus;
  tdls: Array<PlanTdl>;
};


/** ModelPlan represent the data point for plans about a model. It is the central data type in the application */
export type ModelPlanNameHistoryArgs = {
  sort?: SortDirection;
};

export type ModelPlanAndPossibleOperationalSolution = {
  __typename: 'ModelPlanAndPossibleOperationalSolution';
  key: OperationalSolutionKey;
  modelPlan: ModelPlan;
  modelPlanID: Scalars['UUID']['output'];
  possibleOperationalSolution: PossibleOperationalSolution;
  possibleOperationalSolutionID: Scalars['Int']['output'];
};

/**
 * ModelPlanChanges represents the possible changes you can make to a model plan when updating it.
 * Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
 * https://gqlgen.com/reference/changesets/
 */
export type ModelPlanChanges = {
  abbreviation?: InputMaybe<Scalars['String']['input']>;
  archived?: InputMaybe<Scalars['Boolean']['input']>;
  modelName?: InputMaybe<Scalars['String']['input']>;
  someNumbers?: InputMaybe<Array<Scalars['Int']['input']>>;
  status?: InputMaybe<ModelStatus>;
};

export enum ModelPlanFilter {
  APPROACHING_CLEARANCE = 'APPROACHING_CLEARANCE',
  COLLAB_ONLY = 'COLLAB_ONLY',
  FAVORITED = 'FAVORITED',
  INCLUDE_ALL = 'INCLUDE_ALL',
  WITH_CR_TDLS = 'WITH_CR_TDLS'
}

export type ModelPlanSharedActivityMeta = {
  __typename: 'ModelPlanSharedActivityMeta';
  modelPlan: ModelPlan;
  modelPlanID: Scalars['UUID']['output'];
  optionalMessage?: Maybe<Scalars['String']['output']>;
  type: ActivityType;
  version: Scalars['Int']['output'];
};

/** Represents model plan base translation data */
export type ModelPlanTranslation = {
  __typename: 'ModelPlanTranslation';
  abbreviation: TranslationField;
  archived: TranslationFieldWithOptions;
  modelName: TranslationField;
  nameHistory: TranslationField;
  previousName: TranslationField;
  status: TranslationFieldWithOptions;
};

export enum ModelStatus {
  ACTIVE = 'ACTIVE',
  ANNOUNCED = 'ANNOUNCED',
  CANCELED = 'CANCELED',
  CLEARED = 'CLEARED',
  CMS_CLEARANCE = 'CMS_CLEARANCE',
  ENDED = 'ENDED',
  HHS_CLEARANCE = 'HHS_CLEARANCE',
  ICIP_COMPLETE = 'ICIP_COMPLETE',
  INTERNAL_CMMI_CLEARANCE = 'INTERNAL_CMMI_CLEARANCE',
  OMB_ASRF_CLEARANCE = 'OMB_ASRF_CLEARANCE',
  PAUSED = 'PAUSED',
  PLAN_COMPLETE = 'PLAN_COMPLETE',
  PLAN_DRAFT = 'PLAN_DRAFT'
}

export enum ModelType {
  MANDATORY_NATIONAL = 'MANDATORY_NATIONAL',
  MANDATORY_REGIONAL_OR_STATE = 'MANDATORY_REGIONAL_OR_STATE',
  OTHER = 'OTHER',
  VOLUNTARY = 'VOLUNTARY'
}

export enum ModelViewFilter {
  CBOSC = 'CBOSC',
  CCW = 'CCW',
  CMMI = 'CMMI',
  DFSDM = 'DFSDM',
  IDDOC = 'IDDOC',
  IPC = 'IPC',
  MDM = 'MDM',
  OACT = 'OACT',
  PBG = 'PBG'
}

export enum MonitoringFileType {
  BENEFICIARY = 'BENEFICIARY',
  OTHER = 'OTHER',
  PART_A = 'PART_A',
  PART_B = 'PART_B',
  PROVIDER = 'PROVIDER'
}

/** Mutations definition for the schema */
export type Mutation = {
  __typename: 'Mutation';
  addOrUpdateCustomOperationalNeed: OperationalNeed;
  addPlanFavorite: PlanFavorite;
  agreeToNDA: NdaInfo;
  createDiscussionReply: DiscussionReply;
  createModelPlan: ModelPlan;
  createOperationalSolution: OperationalSolution;
  createOperationalSolutionSubtasks?: Maybe<Array<OperationalSolutionSubtask>>;
  createPlanCR: PlanCr;
  createPlanCollaborator: PlanCollaborator;
  createPlanDiscussion: PlanDiscussion;
  createPlanDocumentSolutionLinks?: Maybe<Array<PlanDocumentSolutionLink>>;
  createPlanTDL: PlanTdl;
  deleteOperationalSolutionSubtask: Scalars['Int']['output'];
  deletePlanCR: PlanCr;
  deletePlanCollaborator: PlanCollaborator;
  deletePlanDocument: Scalars['Int']['output'];
  deletePlanFavorite: PlanFavorite;
  deletePlanTDL: PlanTdl;
  linkNewPlanDocument: PlanDocument;
  lockTaskListSection: Scalars['Boolean']['output'];
  /** Marks all notifications for the current user as read, and returns the updated notifications */
  markAllNotificationsAsRead: Array<UserNotification>;
  /** Marks a single notification as read. It requires that the notification be owned by the context of the user sending this request, or it will fail */
  markNotificationAsRead: UserNotification;
  removePlanDocumentSolutionLinks: Scalars['Boolean']['output'];
  reportAProblem: Scalars['Boolean']['output'];
  /** This mutation sends feedback about the MINT product to the MINT team */
  sendFeedbackEmail: Scalars['Boolean']['output'];
  shareModelPlan: Scalars['Boolean']['output'];
  unlockAllTaskListSections: Array<TaskListSectionLockStatus>;
  unlockTaskListSection: Scalars['Boolean']['output'];
  updateCustomOperationalNeedByID: OperationalNeed;
  /**
   * This will update linked existing models, and relatede model plans for given model plan and fieldName.
   * The fieldName allows it so you can create links for multiple sections of the model plan
   */
  updateExistingModelLinks: ExistingModelLinks;
  updateModelPlan: ModelPlan;
  updateOperationalSolution: OperationalSolution;
  updateOperationalSolutionSubtasks?: Maybe<Array<OperationalSolutionSubtask>>;
  updatePlanBasics: PlanBasics;
  updatePlanBeneficiaries: PlanBeneficiaries;
  updatePlanCR: PlanCr;
  updatePlanCollaborator: PlanCollaborator;
  updatePlanGeneralCharacteristics: PlanGeneralCharacteristics;
  updatePlanOpsEvalAndLearning: PlanOpsEvalAndLearning;
  updatePlanParticipantsAndProviders: PlanParticipantsAndProviders;
  updatePlanPayments: PlanPayments;
  updatePlanTDL: PlanTdl;
  /** Sets the notification preferences of a user. */
  updateUserNotificationPreferences: UserNotificationPreferences;
  updateUserViewCustomization: UserViewCustomization;
  uploadNewPlanDocument: PlanDocument;
};


/** Mutations definition for the schema */
export type MutationAddOrUpdateCustomOperationalNeedArgs = {
  customNeedType: Scalars['String']['input'];
  modelPlanID: Scalars['UUID']['input'];
  needed: Scalars['Boolean']['input'];
};


/** Mutations definition for the schema */
export type MutationAddPlanFavoriteArgs = {
  modelPlanID: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationAgreeToNdaArgs = {
  agree?: Scalars['Boolean']['input'];
};


/** Mutations definition for the schema */
export type MutationCreateDiscussionReplyArgs = {
  input: DiscussionReplyCreateInput;
};


/** Mutations definition for the schema */
export type MutationCreateModelPlanArgs = {
  modelName: Scalars['String']['input'];
};


/** Mutations definition for the schema */
export type MutationCreateOperationalSolutionArgs = {
  changes: OperationalSolutionChanges;
  operationalNeedID: Scalars['UUID']['input'];
  solutionType?: InputMaybe<OperationalSolutionKey>;
};


/** Mutations definition for the schema */
export type MutationCreateOperationalSolutionSubtasksArgs = {
  inputs: Array<CreateOperationalSolutionSubtaskInput>;
  solutionID: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationCreatePlanCrArgs = {
  input: PlanCrCreateInput;
};


/** Mutations definition for the schema */
export type MutationCreatePlanCollaboratorArgs = {
  input: PlanCollaboratorCreateInput;
};


/** Mutations definition for the schema */
export type MutationCreatePlanDiscussionArgs = {
  input: PlanDiscussionCreateInput;
};


/** Mutations definition for the schema */
export type MutationCreatePlanDocumentSolutionLinksArgs = {
  documentIDs: Array<Scalars['UUID']['input']>;
  solutionID: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationCreatePlanTdlArgs = {
  input: PlanTdlCreateInput;
};


/** Mutations definition for the schema */
export type MutationDeleteOperationalSolutionSubtaskArgs = {
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationDeletePlanCrArgs = {
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationDeletePlanCollaboratorArgs = {
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationDeletePlanDocumentArgs = {
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationDeletePlanFavoriteArgs = {
  modelPlanID: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationDeletePlanTdlArgs = {
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationLinkNewPlanDocumentArgs = {
  input: PlanDocumentLinkInput;
};


/** Mutations definition for the schema */
export type MutationLockTaskListSectionArgs = {
  modelPlanID: Scalars['UUID']['input'];
  section: TaskListSection;
};


/** Mutations definition for the schema */
export type MutationMarkNotificationAsReadArgs = {
  notificationID: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationRemovePlanDocumentSolutionLinksArgs = {
  documentIDs: Array<Scalars['UUID']['input']>;
  solutionID: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationReportAProblemArgs = {
  input: ReportAProblemInput;
};


/** Mutations definition for the schema */
export type MutationSendFeedbackEmailArgs = {
  input: SendFeedbackEmailInput;
};


/** Mutations definition for the schema */
export type MutationShareModelPlanArgs = {
  modelPlanID: Scalars['UUID']['input'];
  optionalMessage?: InputMaybe<Scalars['String']['input']>;
  usernames: Array<Scalars['String']['input']>;
  viewFilter?: InputMaybe<ModelViewFilter>;
};


/** Mutations definition for the schema */
export type MutationUnlockAllTaskListSectionsArgs = {
  modelPlanID: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationUnlockTaskListSectionArgs = {
  modelPlanID: Scalars['UUID']['input'];
  section: TaskListSection;
};


/** Mutations definition for the schema */
export type MutationUpdateCustomOperationalNeedByIdArgs = {
  customNeedType?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['UUID']['input'];
  needed: Scalars['Boolean']['input'];
};


/** Mutations definition for the schema */
export type MutationUpdateExistingModelLinksArgs = {
  currentModelPlanIDs?: InputMaybe<Array<Scalars['UUID']['input']>>;
  existingModelIDs?: InputMaybe<Array<Scalars['Int']['input']>>;
  fieldName: ExisitingModelLinkFieldType;
  modelPlanID: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationUpdateModelPlanArgs = {
  changes: ModelPlanChanges;
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationUpdateOperationalSolutionArgs = {
  changes: OperationalSolutionChanges;
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationUpdateOperationalSolutionSubtasksArgs = {
  inputs: Array<UpdateOperationalSolutionSubtaskInput>;
};


/** Mutations definition for the schema */
export type MutationUpdatePlanBasicsArgs = {
  changes: PlanBasicsChanges;
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationUpdatePlanBeneficiariesArgs = {
  changes: PlanBeneficiariesChanges;
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationUpdatePlanCrArgs = {
  changes: PlanCrChanges;
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationUpdatePlanCollaboratorArgs = {
  id: Scalars['UUID']['input'];
  newRoles: Array<TeamRole>;
};


/** Mutations definition for the schema */
export type MutationUpdatePlanGeneralCharacteristicsArgs = {
  changes: PlanGeneralCharacteristicsChanges;
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationUpdatePlanOpsEvalAndLearningArgs = {
  changes: PlanOpsEvalAndLearningChanges;
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationUpdatePlanParticipantsAndProvidersArgs = {
  changes: PlanParticipantsAndProvidersChanges;
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationUpdatePlanPaymentsArgs = {
  changes: PlanPaymentsChanges;
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationUpdatePlanTdlArgs = {
  changes: PlanTdlChanges;
  id: Scalars['UUID']['input'];
};


/** Mutations definition for the schema */
export type MutationUpdateUserNotificationPreferencesArgs = {
  changes: UserNotificationPreferencesChanges;
};


/** Mutations definition for the schema */
export type MutationUpdateUserViewCustomizationArgs = {
  changes: UserViewCustomizationChanges;
};


/** Mutations definition for the schema */
export type MutationUploadNewPlanDocumentArgs = {
  input: PlanDocumentInput;
};

/** NDAInfo represents whether a user has agreed to an NDA or not. If agreed to previously, there will be a datestamp visible */
export type NdaInfo = {
  __typename: 'NDAInfo';
  agreed: Scalars['Boolean']['output'];
  agreedDts?: Maybe<Scalars['Time']['output']>;
};

export type NewDiscussionRepliedActivityMeta = {
  __typename: 'NewDiscussionRepliedActivityMeta';
  content: Scalars['String']['output'];
  discussion: PlanDiscussion;
  discussionID: Scalars['UUID']['output'];
  modelPlan: ModelPlan;
  modelPlanID: Scalars['UUID']['output'];
  reply: DiscussionReply;
  replyID: Scalars['UUID']['output'];
  type: ActivityType;
  version: Scalars['Int']['output'];
};

export type NewModelPlanActivityMeta = {
  __typename: 'NewModelPlanActivityMeta';
  modelPlan: ModelPlan;
  modelPlanID: Scalars['UUID']['output'];
  type: ActivityType;
  version: Scalars['Int']['output'];
};

export enum NonClaimsBasedPayType {
  ADVANCED_PAYMENT = 'ADVANCED_PAYMENT',
  BUNDLED_EPISODE_OF_CARE = 'BUNDLED_EPISODE_OF_CARE',
  CAPITATION_POPULATION_BASED_FULL = 'CAPITATION_POPULATION_BASED_FULL',
  CAPITATION_POPULATION_BASED_PARTIAL = 'CAPITATION_POPULATION_BASED_PARTIAL',
  CARE_COORDINATION_MANAGEMENT_FEE = 'CARE_COORDINATION_MANAGEMENT_FEE',
  GLOBAL_BUDGET = 'GLOBAL_BUDGET',
  INCENTIVE_PAYMENT = 'INCENTIVE_PAYMENT',
  MAPD_SHARED_SAVINGS = 'MAPD_SHARED_SAVINGS',
  OTHER = 'OTHER',
  SHARED_SAVINGS = 'SHARED_SAVINGS'
}

export enum OpSolutionStatus {
  AT_RISK = 'AT_RISK',
  BACKLOG = 'BACKLOG',
  COMPLETED = 'COMPLETED',
  IN_PROGRESS = 'IN_PROGRESS',
  NOT_STARTED = 'NOT_STARTED',
  ONBOARDING = 'ONBOARDING'
}

export type OperationalNeed = {
  __typename: 'OperationalNeed';
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  id: Scalars['UUID']['output'];
  key?: Maybe<OperationalNeedKey>;
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  nameOther?: Maybe<Scalars['String']['output']>;
  needed?: Maybe<Scalars['Boolean']['output']>;
  section?: Maybe<TaskListSection>;
  solutions: Array<OperationalSolution>;
};


export type OperationalNeedSolutionsArgs = {
  includeNotNeeded?: Scalars['Boolean']['input'];
};

export enum OperationalNeedKey {
  ACQUIRE_AN_EVAL_CONT = 'ACQUIRE_AN_EVAL_CONT',
  ACQUIRE_A_LEARN_CONT = 'ACQUIRE_A_LEARN_CONT',
  ADJUST_FFS_CLAIMS = 'ADJUST_FFS_CLAIMS',
  APP_SUPPORT_CON = 'APP_SUPPORT_CON',
  CLAIMS_BASED_MEASURES = 'CLAIMS_BASED_MEASURES',
  COMM_W_PART = 'COMM_W_PART',
  COMPUTE_SHARED_SAVINGS_PAYMENT = 'COMPUTE_SHARED_SAVINGS_PAYMENT',
  DATA_TO_MONITOR = 'DATA_TO_MONITOR',
  DATA_TO_SUPPORT_EVAL = 'DATA_TO_SUPPORT_EVAL',
  EDUCATE_BENEF = 'EDUCATE_BENEF',
  ESTABLISH_BENCH = 'ESTABLISH_BENCH',
  HELPDESK_SUPPORT = 'HELPDESK_SUPPORT',
  IDDOC_SUPPORT = 'IDDOC_SUPPORT',
  IT_PLATFORM_FOR_LEARNING = 'IT_PLATFORM_FOR_LEARNING',
  MAKE_NON_CLAIMS_BASED_PAYMENTS = 'MAKE_NON_CLAIMS_BASED_PAYMENTS',
  MANAGE_BEN_OVERLAP = 'MANAGE_BEN_OVERLAP',
  MANAGE_CD = 'MANAGE_CD',
  MANAGE_FFS_EXCL_PAYMENTS = 'MANAGE_FFS_EXCL_PAYMENTS',
  MANAGE_PROV_OVERLAP = 'MANAGE_PROV_OVERLAP',
  PART_TO_PART_COLLAB = 'PART_TO_PART_COLLAB',
  PROCESS_PART_APPEALS = 'PROCESS_PART_APPEALS',
  QUALITY_PERFORMANCE_SCORES = 'QUALITY_PERFORMANCE_SCORES',
  RECOVER_PAYMENTS = 'RECOVER_PAYMENTS',
  RECRUIT_PARTICIPANTS = 'RECRUIT_PARTICIPANTS',
  REV_COL_BIDS = 'REV_COL_BIDS',
  REV_SCORE_APP = 'REV_SCORE_APP',
  SEND_REPDATA_TO_PART = 'SEND_REPDATA_TO_PART',
  SIGN_PARTICIPATION_AGREEMENTS = 'SIGN_PARTICIPATION_AGREEMENTS',
  UPDATE_CONTRACT = 'UPDATE_CONTRACT',
  UTILIZE_QUALITY_MEASURES_DEVELOPMENT_CONTRACTOR = 'UTILIZE_QUALITY_MEASURES_DEVELOPMENT_CONTRACTOR',
  VET_PROVIDERS_FOR_PROGRAM_INTEGRITY = 'VET_PROVIDERS_FOR_PROGRAM_INTEGRITY'
}

/** Represents operational need translation data */
export type OperationalNeedTranslation = {
  __typename: 'OperationalNeedTranslation';
  /** Key comes from the possible operational need table. It is not returned in an audit */
  key: TranslationFieldWithOptions;
  /** Name comes from the possible operational need table. It is not returned in an audit */
  name: TranslationField;
  nameOther: TranslationField;
  needed: TranslationFieldWithOptions;
  section: TranslationFieldWithOptions;
};

export type OperationalSolution = {
  __typename: 'OperationalSolution';
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  documents: Array<PlanDocument>;
  id: Scalars['UUID']['output'];
  isCommonSolution: Scalars['Boolean']['output'];
  isOther: Scalars['Boolean']['output'];
  key?: Maybe<OperationalSolutionKey>;
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  mustFinishDts?: Maybe<Scalars['Time']['output']>;
  mustStartDts?: Maybe<Scalars['Time']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  nameOther?: Maybe<Scalars['String']['output']>;
  needed?: Maybe<Scalars['Boolean']['output']>;
  operationalNeedID: Scalars['UUID']['output'];
  operationalSolutionSubtasks: Array<OperationalSolutionSubtask>;
  otherHeader?: Maybe<Scalars['String']['output']>;
  pocEmail?: Maybe<Scalars['String']['output']>;
  pocName?: Maybe<Scalars['String']['output']>;
  solutionType?: Maybe<Scalars['Int']['output']>;
  status: OpSolutionStatus;
};

export type OperationalSolutionChanges = {
  mustFinishDts?: InputMaybe<Scalars['Time']['input']>;
  mustStartDts?: InputMaybe<Scalars['Time']['input']>;
  nameOther?: InputMaybe<Scalars['String']['input']>;
  needed?: InputMaybe<Scalars['Boolean']['input']>;
  otherHeader?: InputMaybe<Scalars['String']['input']>;
  pocEmail?: InputMaybe<Scalars['String']['input']>;
  pocName?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<OpSolutionStatus>;
};

export enum OperationalSolutionKey {
  ACO_OS = 'ACO_OS',
  APPS = 'APPS',
  ARS = 'ARS',
  BCDA = 'BCDA',
  CBOSC = 'CBOSC',
  CCW = 'CCW',
  CDX = 'CDX',
  CMS_BOX = 'CMS_BOX',
  CMS_QUALTRICS = 'CMS_QUALTRICS',
  CONNECT = 'CONNECT',
  CONTRACTOR = 'CONTRACTOR',
  CPI_VETTING = 'CPI_VETTING',
  CROSS_MODEL_CONTRACT = 'CROSS_MODEL_CONTRACT',
  EDFR = 'EDFR',
  EFT = 'EFT',
  EXISTING_CMS_DATA_AND_PROCESS = 'EXISTING_CMS_DATA_AND_PROCESS',
  GOVDELIVERY = 'GOVDELIVERY',
  GS = 'GS',
  HDR = 'HDR',
  HIGLAS = 'HIGLAS',
  HPMS = 'HPMS',
  IDR = 'IDR',
  INNOVATION = 'INNOVATION',
  INTERNAL_STAFF = 'INTERNAL_STAFF',
  IPC = 'IPC',
  ISP = 'ISP',
  LDG = 'LDG',
  LOI = 'LOI',
  LV = 'LV',
  MARX = 'MARX',
  MDM_NCBP = 'MDM_NCBP',
  MDM_POR = 'MDM_POR',
  MIDS = 'MIDS',
  OTHER_NEW_PROCESS = 'OTHER_NEW_PROCESS',
  OUTLOOK_MAILBOX = 'OUTLOOK_MAILBOX',
  POST_PORTAL = 'POST_PORTAL',
  QV = 'QV',
  RFA = 'RFA',
  RMADA = 'RMADA',
  SHARED_SYSTEMS = 'SHARED_SYSTEMS'
}

export type OperationalSolutionSubtask = {
  __typename: 'OperationalSolutionSubtask';
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  id: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  name: Scalars['String']['output'];
  solutionID: Scalars['UUID']['output'];
  status: OperationalSolutionSubtaskStatus;
};

export enum OperationalSolutionSubtaskStatus {
  DONE = 'DONE',
  IN_PROGRESS = 'IN_PROGRESS',
  TODO = 'TODO'
}

/** Represents operational solution subtask translation data */
export type OperationalSolutionSubtaskTranslation = {
  __typename: 'OperationalSolutionSubtaskTranslation';
  name: TranslationField;
  status: TranslationFieldWithOptions;
};

/** Represents operational solution translation data */
export type OperationalSolutionTranslation = {
  __typename: 'OperationalSolutionTranslation';
  isOther: TranslationFieldWithOptions;
  /** Key comes from the possible operational solution table. It is not returned in an audit */
  key: TranslationFieldWithOptions;
  mustFinishDts: TranslationField;
  mustStartDts: TranslationField;
  /** Name comes from the possible operational solution table. It is not returned in an audit */
  name: TranslationField;
  nameOther: TranslationField;
  needed: TranslationFieldWithOptions;
  otherHeader: TranslationField;
  pocEmail: TranslationField;
  pocName: TranslationField;
  status: TranslationFieldWithOptions;
};

export enum OverlapType {
  NO = 'NO',
  YES_NEED_POLICIES = 'YES_NEED_POLICIES',
  YES_NO_ISSUES = 'YES_NO_ISSUES'
}

export enum ParticipantCommunicationType {
  IT_TOOL = 'IT_TOOL',
  MASS_EMAIL = 'MASS_EMAIL',
  NO_COMMUNICATION = 'NO_COMMUNICATION',
  OTHER = 'OTHER'
}

export enum ParticipantRequireFinancialGuaranteeType {
  ESCROW = 'ESCROW',
  LETTER_OF_CREDIT = 'LETTER_OF_CREDIT',
  OTHER = 'OTHER',
  SURETY_BOND = 'SURETY_BOND'
}

export enum ParticipantRiskType {
  CAPITATION = 'CAPITATION',
  NOT_RISK_BASED = 'NOT_RISK_BASED',
  ONE_SIDED = 'ONE_SIDED',
  OTHER = 'OTHER',
  TWO_SIDED = 'TWO_SIDED'
}

export enum ParticipantSelectionType {
  APPLICATION_REVIEW_AND_SCORING_TOOL = 'APPLICATION_REVIEW_AND_SCORING_TOOL',
  APPLICATION_SUPPORT_CONTRACTOR = 'APPLICATION_SUPPORT_CONTRACTOR',
  BASIC_CRITERIA = 'BASIC_CRITERIA',
  CMS_COMPONENT_OR_PROCESS = 'CMS_COMPONENT_OR_PROCESS',
  MODEL_TEAM_REVIEW_APPLICATIONS = 'MODEL_TEAM_REVIEW_APPLICATIONS',
  NO_SELECTING_PARTICIPANTS = 'NO_SELECTING_PARTICIPANTS',
  OTHER = 'OTHER',
  SUPPORT_FROM_CMMI = 'SUPPORT_FROM_CMMI'
}

export enum ParticipantsIdType {
  CCNS = 'CCNS',
  NO_IDENTIFIERS = 'NO_IDENTIFIERS',
  NPIS = 'NPIS',
  OTHER = 'OTHER',
  TINS = 'TINS'
}

export enum ParticipantsType {
  ACCOUNTABLE_CARE_ORGANIZATION = 'ACCOUNTABLE_CARE_ORGANIZATION',
  COMMERCIAL_PAYERS = 'COMMERCIAL_PAYERS',
  COMMUNITY_BASED_ORGANIZATIONS = 'COMMUNITY_BASED_ORGANIZATIONS',
  CONVENER = 'CONVENER',
  ENTITIES = 'ENTITIES',
  MEDICAID_MANAGED_CARE_ORGANIZATIONS = 'MEDICAID_MANAGED_CARE_ORGANIZATIONS',
  MEDICAID_PROVIDERS = 'MEDICAID_PROVIDERS',
  MEDICARE_ADVANTAGE_PLANS = 'MEDICARE_ADVANTAGE_PLANS',
  MEDICARE_ADVANTAGE_PRESCRIPTION_DRUG_PLANS = 'MEDICARE_ADVANTAGE_PRESCRIPTION_DRUG_PLANS',
  MEDICARE_PROVIDERS = 'MEDICARE_PROVIDERS',
  NON_PROFIT_ORGANIZATIONS = 'NON_PROFIT_ORGANIZATIONS',
  OTHER = 'OTHER',
  STANDALONE_PART_D_PLANS = 'STANDALONE_PART_D_PLANS',
  STATES = 'STATES',
  STATE_MEDICAID_AGENCIES = 'STATE_MEDICAID_AGENCIES'
}

export enum PayRecipient {
  BENEFICIARIES = 'BENEFICIARIES',
  OTHER = 'OTHER',
  PARTICIPANTS = 'PARTICIPANTS',
  PROVIDERS = 'PROVIDERS',
  STATES = 'STATES'
}

export enum PayType {
  CLAIMS_BASED_PAYMENTS = 'CLAIMS_BASED_PAYMENTS',
  GRANTS = 'GRANTS',
  NON_CLAIMS_BASED_PAYMENTS = 'NON_CLAIMS_BASED_PAYMENTS'
}

/** PhaseSuggestion is a suggestion response for a potential next phase and corresponding statuses for a model plan */
export type PhaseSuggestion = {
  __typename: 'PhaseSuggestion';
  phase: ModelPhase;
  suggestedStatuses: Array<ModelStatus>;
};

/** Represents plan basics */
export type PlanBasics = {
  __typename: 'PlanBasics';
  additionalModelCategories: Array<ModelCategory>;
  amsModelID?: Maybe<Scalars['String']['output']>;
  announced?: Maybe<Scalars['Time']['output']>;
  applicationsEnd?: Maybe<Scalars['Time']['output']>;
  applicationsStart?: Maybe<Scalars['Time']['output']>;
  clearanceEnds?: Maybe<Scalars['Time']['output']>;
  clearanceStarts?: Maybe<Scalars['Time']['output']>;
  cmmiGroups: Array<CmmiGroup>;
  cmsCenters: Array<CmsCenter>;
  completeICIP?: Maybe<Scalars['Time']['output']>;
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  demoCode?: Maybe<Scalars['String']['output']>;
  goal?: Maybe<Scalars['String']['output']>;
  highLevelNote?: Maybe<Scalars['String']['output']>;
  id: Scalars['UUID']['output'];
  modelCategory?: Maybe<ModelCategory>;
  modelPlanID: Scalars['UUID']['output'];
  modelType: Array<ModelType>;
  modelTypeOther?: Maybe<Scalars['String']['output']>;
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  note?: Maybe<Scalars['String']['output']>;
  performancePeriodEnds?: Maybe<Scalars['Time']['output']>;
  performancePeriodStarts?: Maybe<Scalars['Time']['output']>;
  phasedIn?: Maybe<Scalars['Boolean']['output']>;
  phasedInNote?: Maybe<Scalars['String']['output']>;
  problem?: Maybe<Scalars['String']['output']>;
  readyForClearanceBy?: Maybe<Scalars['UUID']['output']>;
  readyForClearanceByUserAccount?: Maybe<UserAccount>;
  readyForClearanceDts?: Maybe<Scalars['Time']['output']>;
  readyForReviewBy?: Maybe<Scalars['UUID']['output']>;
  readyForReviewByUserAccount?: Maybe<UserAccount>;
  readyForReviewDts?: Maybe<Scalars['Time']['output']>;
  status: TaskStatus;
  testInterventions?: Maybe<Scalars['String']['output']>;
  wrapUpEnds?: Maybe<Scalars['Time']['output']>;
};

/**
 * PlanBasicsChanges represents the possible changes you can make to a Plan Basics object when updating it.
 * Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
 * https://gqlgen.com/reference/changesets/
 */
export type PlanBasicsChanges = {
  additionalModelCategories?: InputMaybe<Array<ModelCategory>>;
  amsModelID?: InputMaybe<Scalars['String']['input']>;
  announced?: InputMaybe<Scalars['Time']['input']>;
  applicationsEnd?: InputMaybe<Scalars['Time']['input']>;
  applicationsStart?: InputMaybe<Scalars['Time']['input']>;
  clearanceEnds?: InputMaybe<Scalars['Time']['input']>;
  clearanceStarts?: InputMaybe<Scalars['Time']['input']>;
  cmmiGroups?: InputMaybe<Array<CmmiGroup>>;
  cmsCenters?: InputMaybe<Array<CmsCenter>>;
  completeICIP?: InputMaybe<Scalars['Time']['input']>;
  demoCode?: InputMaybe<Scalars['String']['input']>;
  goal?: InputMaybe<Scalars['String']['input']>;
  highLevelNote?: InputMaybe<Scalars['String']['input']>;
  modelCategory?: InputMaybe<ModelCategory>;
  modelType?: InputMaybe<Array<ModelType>>;
  modelTypeOther?: InputMaybe<Scalars['String']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  performancePeriodEnds?: InputMaybe<Scalars['Time']['input']>;
  performancePeriodStarts?: InputMaybe<Scalars['Time']['input']>;
  phasedIn?: InputMaybe<Scalars['Boolean']['input']>;
  phasedInNote?: InputMaybe<Scalars['String']['input']>;
  problem?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<TaskStatusInput>;
  testInterventions?: InputMaybe<Scalars['String']['input']>;
  wrapUpEnds?: InputMaybe<Scalars['Time']['input']>;
};

/** Represents plan basics translation data */
export type PlanBasicsTranslation = {
  __typename: 'PlanBasicsTranslation';
  additionalModelCategories: TranslationFieldWithOptions;
  amsModelID: TranslationField;
  announced: TranslationField;
  applicationsEnd: TranslationField;
  applicationsStart: TranslationField;
  clearanceEnds: TranslationField;
  clearanceStarts: TranslationField;
  cmmiGroups: TranslationFieldWithOptions;
  cmsCenters: TranslationFieldWithOptions;
  completeICIP: TranslationField;
  demoCode: TranslationField;
  goal: TranslationField;
  highLevelNote: TranslationField;
  modelCategory: TranslationFieldWithOptions;
  modelType: TranslationFieldWithOptions;
  modelTypeOther: TranslationField;
  note: TranslationField;
  performancePeriodEnds: TranslationField;
  performancePeriodStarts: TranslationField;
  phasedIn: TranslationFieldWithOptions;
  phasedInNote: TranslationField;
  problem: TranslationField;
  readyForClearanceBy: TranslationField;
  readyForClearanceDts: TranslationField;
  readyForReviewBy: TranslationField;
  readyForReviewDts: TranslationField;
  status: TranslationFieldWithOptions;
  testInterventions: TranslationField;
  wrapUpEnds: TranslationField;
};

/** Plan Beneficiaries represents the the beneficiaries section of the task list */
export type PlanBeneficiaries = {
  __typename: 'PlanBeneficiaries';
  beneficiaries: Array<BeneficiariesType>;
  beneficiariesNote?: Maybe<Scalars['String']['output']>;
  beneficiariesOther?: Maybe<Scalars['String']['output']>;
  beneficiaryOverlap?: Maybe<OverlapType>;
  beneficiaryOverlapNote?: Maybe<Scalars['String']['output']>;
  beneficiaryRemovalFrequency: Array<FrequencyType>;
  beneficiaryRemovalFrequencyContinually?: Maybe<Scalars['String']['output']>;
  beneficiaryRemovalFrequencyNote?: Maybe<Scalars['String']['output']>;
  beneficiaryRemovalFrequencyOther?: Maybe<Scalars['String']['output']>;
  beneficiarySelectionFrequency: Array<FrequencyType>;
  beneficiarySelectionFrequencyContinually?: Maybe<Scalars['String']['output']>;
  beneficiarySelectionFrequencyNote?: Maybe<Scalars['String']['output']>;
  beneficiarySelectionFrequencyOther?: Maybe<Scalars['String']['output']>;
  beneficiarySelectionMethod: Array<SelectionMethodType>;
  beneficiarySelectionNote?: Maybe<Scalars['String']['output']>;
  beneficiarySelectionOther?: Maybe<Scalars['String']['output']>;
  confidenceNote?: Maybe<Scalars['String']['output']>;
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  diseaseSpecificGroup?: Maybe<Scalars['String']['output']>;
  estimateConfidence?: Maybe<ConfidenceType>;
  excludeCertainCharacteristics?: Maybe<TriStateAnswer>;
  excludeCertainCharacteristicsCriteria?: Maybe<Scalars['String']['output']>;
  excludeCertainCharacteristicsNote?: Maybe<Scalars['String']['output']>;
  id: Scalars['UUID']['output'];
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  numberPeopleImpacted?: Maybe<Scalars['Int']['output']>;
  precedenceRules: Array<YesNoType>;
  precedenceRulesNo?: Maybe<Scalars['String']['output']>;
  precedenceRulesNote?: Maybe<Scalars['String']['output']>;
  precedenceRulesYes?: Maybe<Scalars['String']['output']>;
  readyForClearanceBy?: Maybe<Scalars['UUID']['output']>;
  readyForClearanceByUserAccount?: Maybe<UserAccount>;
  readyForClearanceDts?: Maybe<Scalars['Time']['output']>;
  readyForReviewBy?: Maybe<Scalars['UUID']['output']>;
  readyForReviewByUserAccount?: Maybe<UserAccount>;
  readyForReviewDts?: Maybe<Scalars['Time']['output']>;
  status: TaskStatus;
  treatDualElligibleDifferent?: Maybe<TriStateAnswer>;
  treatDualElligibleDifferentHow?: Maybe<Scalars['String']['output']>;
  treatDualElligibleDifferentNote?: Maybe<Scalars['String']['output']>;
};

export type PlanBeneficiariesChanges = {
  beneficiaries?: InputMaybe<Array<BeneficiariesType>>;
  beneficiariesNote?: InputMaybe<Scalars['String']['input']>;
  beneficiariesOther?: InputMaybe<Scalars['String']['input']>;
  beneficiaryOverlap?: InputMaybe<OverlapType>;
  beneficiaryOverlapNote?: InputMaybe<Scalars['String']['input']>;
  beneficiaryRemovalFrequency?: InputMaybe<Array<FrequencyType>>;
  beneficiaryRemovalFrequencyContinually?: InputMaybe<Scalars['String']['input']>;
  beneficiaryRemovalFrequencyNote?: InputMaybe<Scalars['String']['input']>;
  beneficiaryRemovalFrequencyOther?: InputMaybe<Scalars['String']['input']>;
  beneficiarySelectionFrequency?: InputMaybe<Array<FrequencyType>>;
  beneficiarySelectionFrequencyContinually?: InputMaybe<Scalars['String']['input']>;
  beneficiarySelectionFrequencyNote?: InputMaybe<Scalars['String']['input']>;
  beneficiarySelectionFrequencyOther?: InputMaybe<Scalars['String']['input']>;
  beneficiarySelectionMethod?: InputMaybe<Array<SelectionMethodType>>;
  beneficiarySelectionNote?: InputMaybe<Scalars['String']['input']>;
  beneficiarySelectionOther?: InputMaybe<Scalars['String']['input']>;
  confidenceNote?: InputMaybe<Scalars['String']['input']>;
  diseaseSpecificGroup?: InputMaybe<Scalars['String']['input']>;
  estimateConfidence?: InputMaybe<ConfidenceType>;
  excludeCertainCharacteristics?: InputMaybe<TriStateAnswer>;
  excludeCertainCharacteristicsCriteria?: InputMaybe<Scalars['String']['input']>;
  excludeCertainCharacteristicsNote?: InputMaybe<Scalars['String']['input']>;
  numberPeopleImpacted?: InputMaybe<Scalars['Int']['input']>;
  precedenceRules?: InputMaybe<Array<YesNoType>>;
  precedenceRulesNo?: InputMaybe<Scalars['String']['input']>;
  precedenceRulesNote?: InputMaybe<Scalars['String']['input']>;
  precedenceRulesYes?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<TaskStatusInput>;
  treatDualElligibleDifferent?: InputMaybe<TriStateAnswer>;
  treatDualElligibleDifferentHow?: InputMaybe<Scalars['String']['input']>;
  treatDualElligibleDifferentNote?: InputMaybe<Scalars['String']['input']>;
};

/** Represents plan beneficiaries translation data */
export type PlanBeneficiariesTranslation = {
  __typename: 'PlanBeneficiariesTranslation';
  beneficiaries: TranslationFieldWithOptions;
  beneficiariesNote: TranslationField;
  beneficiariesOther: TranslationField;
  beneficiaryOverlap: TranslationFieldWithOptions;
  beneficiaryOverlapNote: TranslationField;
  beneficiaryRemovalFrequency: TranslationFieldWithOptions;
  beneficiaryRemovalFrequencyContinually: TranslationField;
  beneficiaryRemovalFrequencyNote: TranslationField;
  beneficiaryRemovalFrequencyOther: TranslationField;
  beneficiarySelectionFrequency: TranslationFieldWithOptions;
  beneficiarySelectionFrequencyContinually: TranslationField;
  beneficiarySelectionFrequencyNote: TranslationField;
  beneficiarySelectionFrequencyOther: TranslationField;
  beneficiarySelectionMethod: TranslationFieldWithOptions;
  beneficiarySelectionNote: TranslationField;
  beneficiarySelectionOther: TranslationField;
  confidenceNote: TranslationField;
  diseaseSpecificGroup: TranslationField;
  estimateConfidence: TranslationFieldWithOptions;
  excludeCertainCharacteristics: TranslationFieldWithOptions;
  excludeCertainCharacteristicsCriteria: TranslationField;
  excludeCertainCharacteristicsNote: TranslationField;
  numberPeopleImpacted: TranslationField;
  precedenceRules: TranslationFieldWithOptions;
  precedenceRulesNo: TranslationField;
  precedenceRulesNote: TranslationField;
  precedenceRulesYes: TranslationField;
  readyForClearanceBy: TranslationField;
  readyForClearanceDts: TranslationField;
  readyForReviewBy: TranslationField;
  readyForReviewDts: TranslationField;
  status: TranslationFieldWithOptions;
  treatDualElligibleDifferent: TranslationFieldWithOptions;
  treatDualElligibleDifferentHow: TranslationField;
  treatDualElligibleDifferentNote: TranslationField;
};

export type PlanCr = {
  __typename: 'PlanCR';
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  dateImplemented?: Maybe<Scalars['Time']['output']>;
  dateInitiated: Scalars['Time']['output'];
  id: Scalars['UUID']['output'];
  idNumber: Scalars['String']['output'];
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  note?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
};

export type PlanCrChanges = {
  dateImplemented?: InputMaybe<Scalars['Time']['input']>;
  dateInitiated?: InputMaybe<Scalars['Time']['input']>;
  idNumber?: InputMaybe<Scalars['String']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type PlanCrCreateInput = {
  dateImplemented: Scalars['Time']['input'];
  dateInitiated: Scalars['Time']['input'];
  idNumber: Scalars['String']['input'];
  modelPlanID: Scalars['UUID']['input'];
  note?: InputMaybe<Scalars['String']['input']>;
  title: Scalars['String']['input'];
};

/** Represents plan cr translation data */
export type PlanCrTranslation = {
  __typename: 'PlanCRTranslation';
  dateImplemented: TranslationField;
  dateInitiated: TranslationField;
  idNumber: TranslationField;
  note: TranslationField;
  title: TranslationField;
};

/** PlanCollaborator represents a collaborator on a plan */
export type PlanCollaborator = {
  __typename: 'PlanCollaborator';
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  id: Scalars['UUID']['output'];
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  teamRoles: Array<TeamRole>;
  userAccount: UserAccount;
  userID: Scalars['UUID']['output'];
};

/** PlanCollaboratorCreateInput represents the data required to create a collaborator on a plan */
export type PlanCollaboratorCreateInput = {
  modelPlanID: Scalars['UUID']['input'];
  teamRoles: Array<TeamRole>;
  userName: Scalars['String']['input'];
};

/** Represents plan collaborator translation data */
export type PlanCollaboratorTranslation = {
  __typename: 'PlanCollaboratorTranslation';
  teamRoles: TranslationFieldWithOptions;
  userID: TranslationField;
  username: TranslationField;
};

/** PlanDiscussion represents plan discussion */
export type PlanDiscussion = {
  __typename: 'PlanDiscussion';
  content?: Maybe<TaggedContent>;
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  id: Scalars['UUID']['output'];
  isAssessment: Scalars['Boolean']['output'];
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  replies: Array<DiscussionReply>;
  userRole?: Maybe<DiscussionUserRole>;
  userRoleDescription?: Maybe<Scalars['String']['output']>;
};

/** PlanDiscussionCreateInput represents the necessary fields to create a plan discussion */
export type PlanDiscussionCreateInput = {
  content: Scalars['TaggedHTML']['input'];
  modelPlanID: Scalars['UUID']['input'];
  userRole?: InputMaybe<DiscussionUserRole>;
  userRoleDescription?: InputMaybe<Scalars['String']['input']>;
};

/** Represents plan discussion translation data */
export type PlanDiscussionTranslation = {
  __typename: 'PlanDiscussionTranslation';
  content: TranslationField;
  isAssessment: TranslationField;
  userRole: TranslationFieldWithOptions;
  userRoleDescription: TranslationField;
};

/** PlanDocument represents a document on a plan */
export type PlanDocument = {
  __typename: 'PlanDocument';
  bucket: Scalars['String']['output'];
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  deletedAt?: Maybe<Scalars['Time']['output']>;
  documentType: DocumentType;
  downloadUrl?: Maybe<Scalars['String']['output']>;
  fileKey: Scalars['String']['output'];
  fileName: Scalars['String']['output'];
  fileSize: Scalars['Int']['output'];
  fileType: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  /** If isLink = true, then this is a URL to a linked document, not an uploaded document */
  isLink: Scalars['Boolean']['output'];
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  numLinkedSolutions: Scalars['Int']['output'];
  optionalNotes?: Maybe<Scalars['String']['output']>;
  otherType?: Maybe<Scalars['String']['output']>;
  restricted: Scalars['Boolean']['output'];
  /** URL is the link that must be provided if this is a link instead of an uploaded document */
  url?: Maybe<Scalars['String']['output']>;
  virusClean: Scalars['Boolean']['output'];
  virusScanned: Scalars['Boolean']['output'];
};

/** PlanDocumentInput */
export type PlanDocumentInput = {
  documentType: DocumentType;
  fileData: Scalars['Upload']['input'];
  modelPlanID: Scalars['UUID']['input'];
  optionalNotes?: InputMaybe<Scalars['String']['input']>;
  otherTypeDescription?: InputMaybe<Scalars['String']['input']>;
  restricted: Scalars['Boolean']['input'];
};

/** PlanDocumentLinkInput */
export type PlanDocumentLinkInput = {
  documentType: DocumentType;
  modelPlanID: Scalars['UUID']['input'];
  name: Scalars['String']['input'];
  optionalNotes?: InputMaybe<Scalars['String']['input']>;
  otherTypeDescription?: InputMaybe<Scalars['String']['input']>;
  restricted: Scalars['Boolean']['input'];
  url: Scalars['String']['input'];
};

export type PlanDocumentSolutionLink = {
  __typename: 'PlanDocumentSolutionLink';
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  documentID: Scalars['UUID']['output'];
  id: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  solutionID: Scalars['UUID']['output'];
};

/** Represents document solution link translation data */
export type PlanDocumentSolutionLinkTranslation = {
  __typename: 'PlanDocumentSolutionLinkTranslation';
  documentID: TranslationField;
  solutionID: TranslationField;
};

/** Represents plan document translation data */
export type PlanDocumentTranslation = {
  __typename: 'PlanDocumentTranslation';
  documentType: TranslationFieldWithOptions;
  fileName: TranslationField;
  fileType: TranslationField;
  isLink: TranslationField;
  optionalNotes: TranslationField;
  otherType: TranslationField;
  restricted: TranslationFieldWithOptions;
  url: TranslationField;
};

export type PlanFavorite = {
  __typename: 'PlanFavorite';
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  id: Scalars['UUID']['output'];
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  userAccount: UserAccount;
  userID: Scalars['UUID']['output'];
};

/** PlanGeneralCharacteristics represents a plan general characteristics object */
export type PlanGeneralCharacteristics = {
  __typename: 'PlanGeneralCharacteristics';
  additionalServicesInvolved?: Maybe<Scalars['Boolean']['output']>;
  additionalServicesInvolvedDescription?: Maybe<Scalars['String']['output']>;
  additionalServicesInvolvedNote?: Maybe<Scalars['String']['output']>;
  agencyOrStateHelp: Array<AgencyOrStateHelpType>;
  agencyOrStateHelpNote?: Maybe<Scalars['String']['output']>;
  agencyOrStateHelpOther?: Maybe<Scalars['String']['output']>;
  agreementTypes: Array<AgreementType>;
  agreementTypesOther?: Maybe<Scalars['String']['output']>;
  alternativePaymentModelNote?: Maybe<Scalars['String']['output']>;
  alternativePaymentModelTypes: Array<AlternativePaymentModelType>;
  authorityAllowances: Array<AuthorityAllowance>;
  authorityAllowancesNote?: Maybe<Scalars['String']['output']>;
  authorityAllowancesOther?: Maybe<Scalars['String']['output']>;
  careCoordinationInvolved?: Maybe<Scalars['Boolean']['output']>;
  careCoordinationInvolvedDescription?: Maybe<Scalars['String']['output']>;
  careCoordinationInvolvedNote?: Maybe<Scalars['String']['output']>;
  collectPlanBids?: Maybe<Scalars['Boolean']['output']>;
  collectPlanBidsNote?: Maybe<Scalars['String']['output']>;
  communityPartnersInvolved?: Maybe<Scalars['Boolean']['output']>;
  communityPartnersInvolvedDescription?: Maybe<Scalars['String']['output']>;
  communityPartnersInvolvedNote?: Maybe<Scalars['String']['output']>;
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  currentModelPlan?: Maybe<ModelPlan>;
  currentModelPlanID?: Maybe<Scalars['UUID']['output']>;
  existingModel?: Maybe<Scalars['String']['output']>;
  existingModelID?: Maybe<Scalars['Int']['output']>;
  existingModelPlan?: Maybe<ExistingModel>;
  geographiesRegionTypes: Array<GeographyRegionType>;
  geographiesStatesAndTerritories: Array<StatesAndTerritories>;
  geographiesTargeted?: Maybe<Scalars['Boolean']['output']>;
  geographiesTargetedAppliedTo: Array<GeographyApplication>;
  geographiesTargetedAppliedToOther?: Maybe<Scalars['String']['output']>;
  geographiesTargetedNote?: Maybe<Scalars['String']['output']>;
  geographiesTargetedTypes: Array<GeographyType>;
  geographiesTargetedTypesOther?: Maybe<Scalars['String']['output']>;
  hasComponentsOrTracks?: Maybe<Scalars['Boolean']['output']>;
  hasComponentsOrTracksDiffer?: Maybe<Scalars['String']['output']>;
  hasComponentsOrTracksNote?: Maybe<Scalars['String']['output']>;
  id: Scalars['UUID']['output'];
  isNewModel?: Maybe<Scalars['Boolean']['output']>;
  keyCharacteristics: Array<KeyCharacteristic>;
  keyCharacteristicsNote?: Maybe<Scalars['String']['output']>;
  keyCharacteristicsOther?: Maybe<Scalars['String']['output']>;
  managePartCDEnrollment?: Maybe<Scalars['Boolean']['output']>;
  managePartCDEnrollmentNote?: Maybe<Scalars['String']['output']>;
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  multiplePatricipationAgreementsNeeded?: Maybe<Scalars['Boolean']['output']>;
  multiplePatricipationAgreementsNeededNote?: Maybe<Scalars['String']['output']>;
  /** For answering if participation in other models is a precondition for participating in this model */
  participationInModelPrecondition?: Maybe<YesNoOtherType>;
  /** A note field for participationInModelPrecondition */
  participationInModelPreconditionNote?: Maybe<Scalars['String']['output']>;
  /** For denoting the name of the other existing model */
  participationInModelPreconditionOtherOption?: Maybe<Scalars['String']['output']>;
  /** For denoting if there is an other model that this model refers to. */
  participationInModelPreconditionOtherSelected?: Maybe<Scalars['Boolean']['output']>;
  /** For providing clarifying comments if Other is selected for participationInModelPrecondition */
  participationInModelPreconditionOtherSpecify?: Maybe<Scalars['String']['output']>;
  /** The collection of existing model links relevant to the participationInModelPrecondition question */
  participationInModelPreconditionWhich?: Maybe<ExistingModelLinks>;
  /** For providing clarifying comments if Yes or No is selected for participationInModelPrecondition */
  participationInModelPreconditionWhyHow?: Maybe<Scalars['String']['output']>;
  participationOptions?: Maybe<Scalars['Boolean']['output']>;
  participationOptionsNote?: Maybe<Scalars['String']['output']>;
  planContractUpdated?: Maybe<Scalars['Boolean']['output']>;
  planContractUpdatedNote?: Maybe<Scalars['String']['output']>;
  readyForClearanceBy?: Maybe<Scalars['UUID']['output']>;
  readyForClearanceByUserAccount?: Maybe<UserAccount>;
  readyForClearanceDts?: Maybe<Scalars['Time']['output']>;
  readyForReviewBy?: Maybe<Scalars['UUID']['output']>;
  readyForReviewByUserAccount?: Maybe<UserAccount>;
  readyForReviewDts?: Maybe<Scalars['Time']['output']>;
  resemblesExistingModel?: Maybe<YesNoOtherType>;
  resemblesExistingModelHow?: Maybe<Scalars['String']['output']>;
  resemblesExistingModelNote?: Maybe<Scalars['String']['output']>;
  /** For denoting the name of the other existing model that this model resembles */
  resemblesExistingModelOtherOption?: Maybe<Scalars['String']['output']>;
  /** For denoting if there is an other model that this model resembles if it's true that it resembles existing models. */
  resemblesExistingModelOtherSelected?: Maybe<Scalars['Boolean']['output']>;
  /** For providing clarifying comments if Other is selected for resemblesExistingModel */
  resemblesExistingModelOtherSpecify?: Maybe<Scalars['String']['output']>;
  resemblesExistingModelWhich?: Maybe<ExistingModelLinks>;
  /** For providing clarifying comments if Yes or No is selected for resemblesExistingModel */
  resemblesExistingModelWhyHow?: Maybe<Scalars['String']['output']>;
  rulemakingRequired?: Maybe<Scalars['Boolean']['output']>;
  rulemakingRequiredDescription?: Maybe<Scalars['String']['output']>;
  rulemakingRequiredNote?: Maybe<Scalars['String']['output']>;
  status: TaskStatus;
  waiversRequired?: Maybe<Scalars['Boolean']['output']>;
  waiversRequiredNote?: Maybe<Scalars['String']['output']>;
  waiversRequiredTypes: Array<WaiverType>;
};

/**
 * PlanGeneralCharacteristicsChanges represents the possible changes you can make to a
 * general characteristics object when updating it.
 * Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
 * https://gqlgen.com/reference/changesets/
 */
export type PlanGeneralCharacteristicsChanges = {
  additionalServicesInvolved?: InputMaybe<Scalars['Boolean']['input']>;
  additionalServicesInvolvedDescription?: InputMaybe<Scalars['String']['input']>;
  additionalServicesInvolvedNote?: InputMaybe<Scalars['String']['input']>;
  agencyOrStateHelp?: InputMaybe<Array<AgencyOrStateHelpType>>;
  agencyOrStateHelpNote?: InputMaybe<Scalars['String']['input']>;
  agencyOrStateHelpOther?: InputMaybe<Scalars['String']['input']>;
  agreementTypes?: InputMaybe<Array<AgreementType>>;
  agreementTypesOther?: InputMaybe<Scalars['String']['input']>;
  alternativePaymentModelNote?: InputMaybe<Scalars['String']['input']>;
  alternativePaymentModelTypes?: InputMaybe<Array<AlternativePaymentModelType>>;
  authorityAllowances?: InputMaybe<Array<AuthorityAllowance>>;
  authorityAllowancesNote?: InputMaybe<Scalars['String']['input']>;
  authorityAllowancesOther?: InputMaybe<Scalars['String']['input']>;
  careCoordinationInvolved?: InputMaybe<Scalars['Boolean']['input']>;
  careCoordinationInvolvedDescription?: InputMaybe<Scalars['String']['input']>;
  careCoordinationInvolvedNote?: InputMaybe<Scalars['String']['input']>;
  collectPlanBids?: InputMaybe<Scalars['Boolean']['input']>;
  collectPlanBidsNote?: InputMaybe<Scalars['String']['input']>;
  communityPartnersInvolved?: InputMaybe<Scalars['Boolean']['input']>;
  communityPartnersInvolvedDescription?: InputMaybe<Scalars['String']['input']>;
  communityPartnersInvolvedNote?: InputMaybe<Scalars['String']['input']>;
  currentModelPlanID?: InputMaybe<Scalars['UUID']['input']>;
  existingModelID?: InputMaybe<Scalars['Int']['input']>;
  geographiesRegionTypes?: InputMaybe<Array<GeographyRegionType>>;
  geographiesStatesAndTerritories?: InputMaybe<Array<StatesAndTerritories>>;
  geographiesTargeted?: InputMaybe<Scalars['Boolean']['input']>;
  geographiesTargetedAppliedTo?: InputMaybe<Array<GeographyApplication>>;
  geographiesTargetedAppliedToOther?: InputMaybe<Scalars['String']['input']>;
  geographiesTargetedNote?: InputMaybe<Scalars['String']['input']>;
  geographiesTargetedTypes?: InputMaybe<Array<GeographyType>>;
  geographiesTargetedTypesOther?: InputMaybe<Scalars['String']['input']>;
  hasComponentsOrTracks?: InputMaybe<Scalars['Boolean']['input']>;
  hasComponentsOrTracksDiffer?: InputMaybe<Scalars['String']['input']>;
  hasComponentsOrTracksNote?: InputMaybe<Scalars['String']['input']>;
  isNewModel?: InputMaybe<Scalars['Boolean']['input']>;
  keyCharacteristics?: InputMaybe<Array<KeyCharacteristic>>;
  keyCharacteristicsNote?: InputMaybe<Scalars['String']['input']>;
  keyCharacteristicsOther?: InputMaybe<Scalars['String']['input']>;
  managePartCDEnrollment?: InputMaybe<Scalars['Boolean']['input']>;
  managePartCDEnrollmentNote?: InputMaybe<Scalars['String']['input']>;
  multiplePatricipationAgreementsNeeded?: InputMaybe<Scalars['Boolean']['input']>;
  multiplePatricipationAgreementsNeededNote?: InputMaybe<Scalars['String']['input']>;
  /** For answering if participation in other models is a precondition for participating in this model */
  participationInModelPrecondition?: InputMaybe<YesNoOtherType>;
  /** A note field for participationInModelPrecondition */
  participationInModelPreconditionNote?: InputMaybe<Scalars['String']['input']>;
  /** For denoting the name of the other existing model */
  participationInModelPreconditionOtherOption?: InputMaybe<Scalars['String']['input']>;
  /** For denoting if there is an other model that this model refers to. */
  participationInModelPreconditionOtherSelected?: InputMaybe<Scalars['Boolean']['input']>;
  /** For providing clarifying comments if Other is selected for participationInModelPrecondition */
  participationInModelPreconditionOtherSpecify?: InputMaybe<Scalars['String']['input']>;
  /** For providing clarifying comments if Yes or No is selected for participationInModelPrecondition */
  participationInModelPreconditionWhyHow?: InputMaybe<Scalars['String']['input']>;
  participationOptions?: InputMaybe<Scalars['Boolean']['input']>;
  participationOptionsNote?: InputMaybe<Scalars['String']['input']>;
  planContractUpdated?: InputMaybe<Scalars['Boolean']['input']>;
  planContractUpdatedNote?: InputMaybe<Scalars['String']['input']>;
  resemblesExistingModel?: InputMaybe<YesNoOtherType>;
  resemblesExistingModelHow?: InputMaybe<Scalars['String']['input']>;
  resemblesExistingModelNote?: InputMaybe<Scalars['String']['input']>;
  /** For denoting the name of the other existing model that this model resembles */
  resemblesExistingModelOtherOption?: InputMaybe<Scalars['String']['input']>;
  /** For denoting if there is an other model that this model resembles if it's true that it resembles existing models. */
  resemblesExistingModelOtherSelected?: InputMaybe<Scalars['Boolean']['input']>;
  /** For providing clarifying comments if Other is selected for resemblesExistingModel */
  resemblesExistingModelOtherSpecify?: InputMaybe<Scalars['String']['input']>;
  /** For providing clarifying comments if Yes or No is selected for resemblesExistingModel */
  resemblesExistingModelWhyHow?: InputMaybe<Scalars['String']['input']>;
  rulemakingRequired?: InputMaybe<Scalars['Boolean']['input']>;
  rulemakingRequiredDescription?: InputMaybe<Scalars['String']['input']>;
  rulemakingRequiredNote?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<TaskStatusInput>;
  waiversRequired?: InputMaybe<Scalars['Boolean']['input']>;
  waiversRequiredNote?: InputMaybe<Scalars['String']['input']>;
  waiversRequiredTypes?: InputMaybe<Array<WaiverType>>;
};

/** Represents plan general characteristics translation data */
export type PlanGeneralCharacteristicsTranslation = {
  __typename: 'PlanGeneralCharacteristicsTranslation';
  additionalServicesInvolved: TranslationFieldWithOptions;
  additionalServicesInvolvedDescription: TranslationField;
  additionalServicesInvolvedNote: TranslationField;
  agencyOrStateHelp: TranslationFieldWithOptions;
  agencyOrStateHelpNote: TranslationField;
  agencyOrStateHelpOther: TranslationField;
  agreementTypes: TranslationFieldWithOptionsAndChildren;
  agreementTypesOther: TranslationField;
  alternativePaymentModelNote: TranslationField;
  alternativePaymentModelTypes: TranslationFieldWithOptions;
  authorityAllowances: TranslationFieldWithOptions;
  authorityAllowancesNote: TranslationField;
  authorityAllowancesOther: TranslationField;
  careCoordinationInvolved: TranslationFieldWithOptions;
  careCoordinationInvolvedDescription: TranslationField;
  careCoordinationInvolvedNote: TranslationField;
  collectPlanBids: TranslationFieldWithOptionsAndParent;
  collectPlanBidsNote: TranslationField;
  communityPartnersInvolved: TranslationFieldWithOptions;
  communityPartnersInvolvedDescription: TranslationField;
  communityPartnersInvolvedNote: TranslationField;
  currentModelPlanID: TranslationField;
  /** Existing model doesn't exist in the database, it is returned based on if there is a current model plan ID or current model plan ID returned */
  existingModel: TranslationFieldWithParent;
  existingModelID: TranslationField;
  geographiesRegionTypes: TranslationFieldWithOptionsAndParent;
  geographiesStatesAndTerritories: TranslationFieldWithOptionsAndParent;
  geographiesTargeted: TranslationFieldWithOptionsAndChildren;
  geographiesTargetedAppliedTo: TranslationFieldWithOptionsAndParent;
  geographiesTargetedAppliedToOther: TranslationField;
  geographiesTargetedNote: TranslationField;
  geographiesTargetedTypes: TranslationFieldWithParentAndChildren;
  geographiesTargetedTypesOther: TranslationField;
  hasComponentsOrTracks: TranslationFieldWithOptions;
  hasComponentsOrTracksDiffer: TranslationField;
  hasComponentsOrTracksNote: TranslationField;
  isNewModel: TranslationFieldWithOptionsAndChildren;
  keyCharacteristics: TranslationFieldWithOptionsAndChildren;
  keyCharacteristicsNote: TranslationField;
  keyCharacteristicsOther: TranslationField;
  managePartCDEnrollment: TranslationFieldWithOptionsAndParent;
  managePartCDEnrollmentNote: TranslationField;
  multiplePatricipationAgreementsNeeded: TranslationFieldWithOptionsAndParent;
  multiplePatricipationAgreementsNeededNote: TranslationField;
  participationInModelPrecondition: TranslationFieldWithOptionsAndChildren;
  participationInModelPreconditionNote: TranslationField;
  participationInModelPreconditionOtherOption: TranslationField;
  participationInModelPreconditionOtherSpecify: TranslationField;
  participationInModelPreconditionWhich: TranslationFieldWithOptionsAndParent;
  participationInModelPreconditionWhyHow: TranslationFieldWithParent;
  participationOptions: TranslationFieldWithOptions;
  participationOptionsNote: TranslationField;
  planContractUpdated: TranslationFieldWithOptionsAndParent;
  planContractUpdatedNote: TranslationField;
  readyForClearanceBy: TranslationField;
  readyForClearanceDts: TranslationField;
  readyForReviewBy: TranslationField;
  readyForReviewDts: TranslationField;
  resemblesExistingModel: TranslationFieldWithOptionsAndChildren;
  resemblesExistingModelHow: TranslationFieldWithParent;
  resemblesExistingModelNote: TranslationField;
  resemblesExistingModelOtherOption: TranslationField;
  resemblesExistingModelOtherSpecify: TranslationField;
  resemblesExistingModelWhich: TranslationFieldWithOptionsAndParent;
  resemblesExistingModelWhyHow: TranslationField;
  rulemakingRequired: TranslationFieldWithOptions;
  rulemakingRequiredDescription: TranslationField;
  rulemakingRequiredNote: TranslationField;
  status: TranslationFieldWithOptions;
  waiversRequired: TranslationFieldWithOptions;
  waiversRequiredNote: TranslationField;
  waiversRequiredTypes: TranslationFieldWithOptions;
};

/** PlanOpsEvalAndLearning represents the task list section that deals with information regarding the Ops Eval and Learning */
export type PlanOpsEvalAndLearning = {
  __typename: 'PlanOpsEvalAndLearning';
  anticipatedChallenges?: Maybe<Scalars['String']['output']>;
  appToSendFilesToKnown?: Maybe<Scalars['Boolean']['output']>;
  appToSendFilesToNote?: Maybe<Scalars['String']['output']>;
  appToSendFilesToWhich?: Maybe<Scalars['String']['output']>;
  appealFeedback?: Maybe<Scalars['Boolean']['output']>;
  appealNote?: Maybe<Scalars['String']['output']>;
  appealOther?: Maybe<Scalars['Boolean']['output']>;
  appealPayments?: Maybe<Scalars['Boolean']['output']>;
  appealPerformance?: Maybe<Scalars['Boolean']['output']>;
  benchmarkForPerformance?: Maybe<BenchmarkForPerformanceType>;
  benchmarkForPerformanceNote?: Maybe<Scalars['String']['output']>;
  captureParticipantInfo?: Maybe<Scalars['Boolean']['output']>;
  captureParticipantInfoNote?: Maybe<Scalars['String']['output']>;
  ccmInvolvment: Array<CcmInvolvmentType>;
  ccmInvolvmentNote?: Maybe<Scalars['String']['output']>;
  ccmInvolvmentOther?: Maybe<Scalars['String']['output']>;
  computePerformanceScores?: Maybe<Scalars['Boolean']['output']>;
  computePerformanceScoresNote?: Maybe<Scalars['String']['output']>;
  contractorSupport: Array<ContractorSupportType>;
  contractorSupportHow?: Maybe<Scalars['String']['output']>;
  contractorSupportNote?: Maybe<Scalars['String']['output']>;
  contractorSupportOther?: Maybe<Scalars['String']['output']>;
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  dataCollectionFrequency: Array<FrequencyType>;
  dataCollectionFrequencyContinually?: Maybe<Scalars['String']['output']>;
  dataCollectionFrequencyNote?: Maybe<Scalars['String']['output']>;
  dataCollectionFrequencyOther?: Maybe<Scalars['String']['output']>;
  dataCollectionStarts?: Maybe<DataStartsType>;
  dataCollectionStartsOther?: Maybe<Scalars['String']['output']>;
  dataFlowDiagramsNeeded?: Maybe<Scalars['Boolean']['output']>;
  dataFullTimeOrIncremental?: Maybe<DataFullTimeOrIncrementalType>;
  dataMonitoringFileOther?: Maybe<Scalars['String']['output']>;
  dataMonitoringFileTypes: Array<MonitoringFileType>;
  dataMonitoringNote?: Maybe<Scalars['String']['output']>;
  dataNeededForMonitoring: Array<DataForMonitoringType>;
  dataNeededForMonitoringNote?: Maybe<Scalars['String']['output']>;
  dataNeededForMonitoringOther?: Maybe<Scalars['String']['output']>;
  dataResponseFileFrequency?: Maybe<Scalars['String']['output']>;
  dataResponseType?: Maybe<Scalars['String']['output']>;
  dataSharingFrequency: Array<FrequencyType>;
  dataSharingFrequencyContinually?: Maybe<Scalars['String']['output']>;
  dataSharingFrequencyOther?: Maybe<Scalars['String']['output']>;
  dataSharingStarts?: Maybe<DataStartsType>;
  dataSharingStartsNote?: Maybe<Scalars['String']['output']>;
  dataSharingStartsOther?: Maybe<Scalars['String']['output']>;
  dataToSendParticicipants: Array<DataToSendParticipantsType>;
  dataToSendParticicipantsNote?: Maybe<Scalars['String']['output']>;
  dataToSendParticicipantsOther?: Maybe<Scalars['String']['output']>;
  developNewQualityMeasures?: Maybe<Scalars['Boolean']['output']>;
  developNewQualityMeasuresNote?: Maybe<Scalars['String']['output']>;
  draftIcdDueDate?: Maybe<Scalars['Time']['output']>;
  eftSetUp?: Maybe<Scalars['Boolean']['output']>;
  evaluationApproachOther?: Maybe<Scalars['String']['output']>;
  evaluationApproaches: Array<EvaluationApproachType>;
  evalutaionApproachNote?: Maybe<Scalars['String']['output']>;
  fileNamingConventions?: Maybe<Scalars['String']['output']>;
  helpdeskUse?: Maybe<Scalars['Boolean']['output']>;
  helpdeskUseNote?: Maybe<Scalars['String']['output']>;
  icdNote?: Maybe<Scalars['String']['output']>;
  icdOwner?: Maybe<Scalars['String']['output']>;
  id: Scalars['UUID']['output'];
  iddocSupport?: Maybe<Scalars['Boolean']['output']>;
  iddocSupportNote?: Maybe<Scalars['String']['output']>;
  modelLearningSystems: Array<ModelLearningSystemType>;
  modelLearningSystemsNote?: Maybe<Scalars['String']['output']>;
  modelLearningSystemsOther?: Maybe<Scalars['String']['output']>;
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  produceBenefitEnhancementFiles?: Maybe<Scalars['Boolean']['output']>;
  qualityPerformanceImpactsPayment?: Maybe<YesNoOtherType>;
  qualityPerformanceImpactsPaymentNote?: Maybe<Scalars['String']['output']>;
  qualityPerformanceImpactsPaymentOther?: Maybe<Scalars['String']['output']>;
  qualityReportingFrequency: Array<FrequencyType>;
  qualityReportingFrequencyContinually?: Maybe<Scalars['String']['output']>;
  qualityReportingFrequencyOther?: Maybe<Scalars['String']['output']>;
  qualityReportingStarts?: Maybe<DataStartsType>;
  qualityReportingStartsNote?: Maybe<Scalars['String']['output']>;
  qualityReportingStartsOther?: Maybe<Scalars['String']['output']>;
  readyForClearanceBy?: Maybe<Scalars['UUID']['output']>;
  readyForClearanceByUserAccount?: Maybe<UserAccount>;
  readyForClearanceDts?: Maybe<Scalars['Time']['output']>;
  readyForReviewBy?: Maybe<Scalars['UUID']['output']>;
  readyForReviewByUserAccount?: Maybe<UserAccount>;
  readyForReviewDts?: Maybe<Scalars['Time']['output']>;
  riskAdjustFeedback?: Maybe<Scalars['Boolean']['output']>;
  riskAdjustNote?: Maybe<Scalars['String']['output']>;
  riskAdjustOther?: Maybe<Scalars['Boolean']['output']>;
  riskAdjustPayments?: Maybe<Scalars['Boolean']['output']>;
  riskAdjustPerformance?: Maybe<Scalars['Boolean']['output']>;
  sendFilesBetweenCcw?: Maybe<Scalars['Boolean']['output']>;
  sendFilesBetweenCcwNote?: Maybe<Scalars['String']['output']>;
  shareCclfData?: Maybe<Scalars['Boolean']['output']>;
  shareCclfDataNote?: Maybe<Scalars['String']['output']>;
  stakeholders: Array<StakeholdersType>;
  stakeholdersNote?: Maybe<Scalars['String']['output']>;
  stakeholdersOther?: Maybe<Scalars['String']['output']>;
  status: TaskStatus;
  stcNeeds?: Maybe<Scalars['String']['output']>;
  technicalContactsIdentified?: Maybe<Scalars['Boolean']['output']>;
  technicalContactsIdentifiedDetail?: Maybe<Scalars['String']['output']>;
  technicalContactsIdentifiedNote?: Maybe<Scalars['String']['output']>;
  testingNote?: Maybe<Scalars['String']['output']>;
  testingTimelines?: Maybe<Scalars['String']['output']>;
  uatNeeds?: Maybe<Scalars['String']['output']>;
  unsolicitedAdjustmentsIncluded?: Maybe<Scalars['Boolean']['output']>;
  useCcwForFileDistribiutionToParticipants?: Maybe<Scalars['Boolean']['output']>;
  useCcwForFileDistribiutionToParticipantsNote?: Maybe<Scalars['String']['output']>;
};

/**
 * PlanOpsEvalAndLearningChanges represents the possible changes you can make to a
 * ops, eval and learning object when updating it.
 * Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
 * https://gqlgen.com/reference/changesets/
 */
export type PlanOpsEvalAndLearningChanges = {
  anticipatedChallenges?: InputMaybe<Scalars['String']['input']>;
  appToSendFilesToKnown?: InputMaybe<Scalars['Boolean']['input']>;
  appToSendFilesToNote?: InputMaybe<Scalars['String']['input']>;
  appToSendFilesToWhich?: InputMaybe<Scalars['String']['input']>;
  appealFeedback?: InputMaybe<Scalars['Boolean']['input']>;
  appealNote?: InputMaybe<Scalars['String']['input']>;
  appealOther?: InputMaybe<Scalars['Boolean']['input']>;
  appealPayments?: InputMaybe<Scalars['Boolean']['input']>;
  appealPerformance?: InputMaybe<Scalars['Boolean']['input']>;
  benchmarkForPerformance?: InputMaybe<BenchmarkForPerformanceType>;
  benchmarkForPerformanceNote?: InputMaybe<Scalars['String']['input']>;
  captureParticipantInfo?: InputMaybe<Scalars['Boolean']['input']>;
  captureParticipantInfoNote?: InputMaybe<Scalars['String']['input']>;
  ccmInvolvment?: InputMaybe<Array<CcmInvolvmentType>>;
  ccmInvolvmentNote?: InputMaybe<Scalars['String']['input']>;
  ccmInvolvmentOther?: InputMaybe<Scalars['String']['input']>;
  computePerformanceScores?: InputMaybe<Scalars['Boolean']['input']>;
  computePerformanceScoresNote?: InputMaybe<Scalars['String']['input']>;
  contractorSupport?: InputMaybe<Array<ContractorSupportType>>;
  contractorSupportHow?: InputMaybe<Scalars['String']['input']>;
  contractorSupportNote?: InputMaybe<Scalars['String']['input']>;
  contractorSupportOther?: InputMaybe<Scalars['String']['input']>;
  dataCollectionFrequency?: InputMaybe<Array<FrequencyType>>;
  dataCollectionFrequencyContinually?: InputMaybe<Scalars['String']['input']>;
  dataCollectionFrequencyNote?: InputMaybe<Scalars['String']['input']>;
  dataCollectionFrequencyOther?: InputMaybe<Scalars['String']['input']>;
  dataCollectionStarts?: InputMaybe<DataStartsType>;
  dataCollectionStartsOther?: InputMaybe<Scalars['String']['input']>;
  dataFlowDiagramsNeeded?: InputMaybe<Scalars['Boolean']['input']>;
  dataFullTimeOrIncremental?: InputMaybe<DataFullTimeOrIncrementalType>;
  dataMonitoringFileOther?: InputMaybe<Scalars['String']['input']>;
  dataMonitoringFileTypes?: InputMaybe<Array<MonitoringFileType>>;
  dataMonitoringNote?: InputMaybe<Scalars['String']['input']>;
  dataNeededForMonitoring?: InputMaybe<Array<DataForMonitoringType>>;
  dataNeededForMonitoringNote?: InputMaybe<Scalars['String']['input']>;
  dataNeededForMonitoringOther?: InputMaybe<Scalars['String']['input']>;
  dataResponseFileFrequency?: InputMaybe<Scalars['String']['input']>;
  dataResponseType?: InputMaybe<Scalars['String']['input']>;
  dataSharingFrequency?: InputMaybe<Array<FrequencyType>>;
  dataSharingFrequencyContinually?: InputMaybe<Scalars['String']['input']>;
  dataSharingFrequencyOther?: InputMaybe<Scalars['String']['input']>;
  dataSharingStarts?: InputMaybe<DataStartsType>;
  dataSharingStartsNote?: InputMaybe<Scalars['String']['input']>;
  dataSharingStartsOther?: InputMaybe<Scalars['String']['input']>;
  dataToSendParticicipants?: InputMaybe<Array<DataToSendParticipantsType>>;
  dataToSendParticicipantsNote?: InputMaybe<Scalars['String']['input']>;
  dataToSendParticicipantsOther?: InputMaybe<Scalars['String']['input']>;
  developNewQualityMeasures?: InputMaybe<Scalars['Boolean']['input']>;
  developNewQualityMeasuresNote?: InputMaybe<Scalars['String']['input']>;
  draftIcdDueDate?: InputMaybe<Scalars['Time']['input']>;
  eftSetUp?: InputMaybe<Scalars['Boolean']['input']>;
  evaluationApproachOther?: InputMaybe<Scalars['String']['input']>;
  evaluationApproaches?: InputMaybe<Array<EvaluationApproachType>>;
  evalutaionApproachNote?: InputMaybe<Scalars['String']['input']>;
  fileNamingConventions?: InputMaybe<Scalars['String']['input']>;
  helpdeskUse?: InputMaybe<Scalars['Boolean']['input']>;
  helpdeskUseNote?: InputMaybe<Scalars['String']['input']>;
  icdNote?: InputMaybe<Scalars['String']['input']>;
  icdOwner?: InputMaybe<Scalars['String']['input']>;
  iddocSupport?: InputMaybe<Scalars['Boolean']['input']>;
  iddocSupportNote?: InputMaybe<Scalars['String']['input']>;
  modelLearningSystems?: InputMaybe<Array<ModelLearningSystemType>>;
  modelLearningSystemsNote?: InputMaybe<Scalars['String']['input']>;
  modelLearningSystemsOther?: InputMaybe<Scalars['String']['input']>;
  produceBenefitEnhancementFiles?: InputMaybe<Scalars['Boolean']['input']>;
  qualityPerformanceImpactsPayment?: InputMaybe<YesNoOtherType>;
  qualityPerformanceImpactsPaymentNote?: InputMaybe<Scalars['String']['input']>;
  qualityPerformanceImpactsPaymentOther?: InputMaybe<Scalars['String']['input']>;
  qualityReportingFrequency?: InputMaybe<Array<FrequencyType>>;
  qualityReportingFrequencyContinually?: InputMaybe<Scalars['String']['input']>;
  qualityReportingFrequencyOther?: InputMaybe<Scalars['String']['input']>;
  qualityReportingStarts?: InputMaybe<DataStartsType>;
  qualityReportingStartsNote?: InputMaybe<Scalars['String']['input']>;
  qualityReportingStartsOther?: InputMaybe<Scalars['String']['input']>;
  riskAdjustFeedback?: InputMaybe<Scalars['Boolean']['input']>;
  riskAdjustNote?: InputMaybe<Scalars['String']['input']>;
  riskAdjustOther?: InputMaybe<Scalars['Boolean']['input']>;
  riskAdjustPayments?: InputMaybe<Scalars['Boolean']['input']>;
  riskAdjustPerformance?: InputMaybe<Scalars['Boolean']['input']>;
  sendFilesBetweenCcw?: InputMaybe<Scalars['Boolean']['input']>;
  sendFilesBetweenCcwNote?: InputMaybe<Scalars['String']['input']>;
  shareCclfData?: InputMaybe<Scalars['Boolean']['input']>;
  shareCclfDataNote?: InputMaybe<Scalars['String']['input']>;
  stakeholders?: InputMaybe<Array<StakeholdersType>>;
  stakeholdersNote?: InputMaybe<Scalars['String']['input']>;
  stakeholdersOther?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<TaskStatusInput>;
  stcNeeds?: InputMaybe<Scalars['String']['input']>;
  technicalContactsIdentified?: InputMaybe<Scalars['Boolean']['input']>;
  technicalContactsIdentifiedDetail?: InputMaybe<Scalars['String']['input']>;
  technicalContactsIdentifiedNote?: InputMaybe<Scalars['String']['input']>;
  testingNote?: InputMaybe<Scalars['String']['input']>;
  testingTimelines?: InputMaybe<Scalars['String']['input']>;
  uatNeeds?: InputMaybe<Scalars['String']['input']>;
  unsolicitedAdjustmentsIncluded?: InputMaybe<Scalars['Boolean']['input']>;
  useCcwForFileDistribiutionToParticipants?: InputMaybe<Scalars['Boolean']['input']>;
  useCcwForFileDistribiutionToParticipantsNote?: InputMaybe<Scalars['String']['input']>;
};

/** Represents plan ops eval and learning translation data */
export type PlanOpsEvalAndLearningTranslation = {
  __typename: 'PlanOpsEvalAndLearningTranslation';
  anticipatedChallenges: TranslationField;
  appToSendFilesToKnown: TranslationFieldWithOptionsAndParent;
  appToSendFilesToNote: TranslationField;
  appToSendFilesToWhich: TranslationField;
  appealFeedback: TranslationFieldWithOptions;
  appealNote: TranslationField;
  appealOther: TranslationFieldWithOptions;
  appealPayments: TranslationFieldWithOptions;
  appealPerformance: TranslationFieldWithOptions;
  benchmarkForPerformance: TranslationFieldWithOptions;
  benchmarkForPerformanceNote: TranslationField;
  captureParticipantInfo: TranslationFieldWithOptionsAndParent;
  captureParticipantInfoNote: TranslationField;
  ccmInvolvment: TranslationFieldWithOptionsAndChildren;
  ccmInvolvmentNote: TranslationField;
  ccmInvolvmentOther: TranslationField;
  computePerformanceScores: TranslationFieldWithOptions;
  computePerformanceScoresNote: TranslationField;
  contractorSupport: TranslationFieldWithOptionsAndChildren;
  contractorSupportHow: TranslationFieldWithParent;
  contractorSupportNote: TranslationField;
  contractorSupportOther: TranslationField;
  dataCollectionFrequency: TranslationFieldWithOptions;
  dataCollectionFrequencyContinually: TranslationField;
  dataCollectionFrequencyNote: TranslationField;
  dataCollectionFrequencyOther: TranslationField;
  dataCollectionStarts: TranslationFieldWithOptions;
  dataCollectionStartsOther: TranslationField;
  dataFlowDiagramsNeeded: TranslationFieldWithOptionsAndParent;
  dataFullTimeOrIncremental: TranslationFieldWithOptionsAndParent;
  dataMonitoringFileOther: TranslationField;
  dataMonitoringFileTypes: TranslationFieldWithOptionsAndParent;
  dataMonitoringNote: TranslationField;
  dataNeededForMonitoring: TranslationFieldWithOptionsAndChildren;
  dataNeededForMonitoringNote: TranslationField;
  dataNeededForMonitoringOther: TranslationField;
  dataResponseFileFrequency: TranslationFieldWithParent;
  dataResponseType: TranslationFieldWithParent;
  dataSharingFrequency: TranslationFieldWithOptions;
  dataSharingFrequencyContinually: TranslationField;
  dataSharingFrequencyOther: TranslationField;
  dataSharingStarts: TranslationFieldWithOptions;
  dataSharingStartsNote: TranslationField;
  dataSharingStartsOther: TranslationField;
  dataToSendParticicipants: TranslationFieldWithOptions;
  dataToSendParticicipantsNote: TranslationField;
  dataToSendParticicipantsOther: TranslationField;
  developNewQualityMeasures: TranslationFieldWithOptionsAndParent;
  developNewQualityMeasuresNote: TranslationField;
  draftIcdDueDate: TranslationFieldWithParent;
  eftSetUp: TranslationFieldWithOptionsAndParent;
  evaluationApproachOther: TranslationField;
  evaluationApproaches: TranslationFieldWithOptions;
  evalutaionApproachNote: TranslationField;
  fileNamingConventions: TranslationFieldWithParent;
  helpdeskUse: TranslationFieldWithOptions;
  helpdeskUseNote: TranslationField;
  icdNote: TranslationFieldWithParent;
  icdOwner: TranslationFieldWithParent;
  iddocSupport: TranslationFieldWithOptionsAndChildren;
  iddocSupportNote: TranslationField;
  modelLearningSystems: TranslationFieldWithOptions;
  modelLearningSystemsNote: TranslationField;
  modelLearningSystemsOther: TranslationField;
  produceBenefitEnhancementFiles: TranslationFieldWithOptionsAndParent;
  qualityPerformanceImpactsPayment: TranslationFieldWithOptionsAndParent;
  qualityPerformanceImpactsPaymentNote: TranslationField;
  qualityPerformanceImpactsPaymentOther: TranslationField;
  qualityReportingFrequency: TranslationFieldWithOptions;
  qualityReportingFrequencyContinually: TranslationField;
  qualityReportingFrequencyOther: TranslationField;
  qualityReportingStarts: TranslationFieldWithOptions;
  qualityReportingStartsNote: TranslationField;
  qualityReportingStartsOther: TranslationField;
  readyForClearanceBy: TranslationField;
  readyForClearanceDts: TranslationField;
  readyForReviewBy: TranslationField;
  readyForReviewDts: TranslationField;
  riskAdjustFeedback: TranslationFieldWithOptions;
  riskAdjustNote: TranslationField;
  riskAdjustOther: TranslationFieldWithOptions;
  riskAdjustPayments: TranslationFieldWithOptions;
  riskAdjustPerformance: TranslationFieldWithOptions;
  sendFilesBetweenCcw: TranslationFieldWithOptionsAndParent;
  sendFilesBetweenCcwNote: TranslationField;
  shareCclfData: TranslationFieldWithOptions;
  shareCclfDataNote: TranslationField;
  stakeholders: TranslationFieldWithOptions;
  stakeholdersNote: TranslationField;
  stakeholdersOther: TranslationField;
  status: TranslationFieldWithOptions;
  stcNeeds: TranslationFieldWithParent;
  technicalContactsIdentified: TranslationFieldWithOptionsAndParent;
  technicalContactsIdentifiedDetail: TranslationField;
  technicalContactsIdentifiedNote: TranslationField;
  testingNote: TranslationField;
  testingTimelines: TranslationFieldWithParent;
  uatNeeds: TranslationFieldWithParent;
  unsolicitedAdjustmentsIncluded: TranslationFieldWithOptionsAndParent;
  useCcwForFileDistribiutionToParticipants: TranslationFieldWithOptionsAndParent;
  useCcwForFileDistribiutionToParticipantsNote: TranslationField;
};

/** PlanParticipantsAndProviders is the task list section that deals with information regarding all Providers and Participants */
export type PlanParticipantsAndProviders = {
  __typename: 'PlanParticipantsAndProviders';
  communicationMethod: Array<ParticipantCommunicationType>;
  communicationMethodOther?: Maybe<Scalars['String']['output']>;
  communicationNote?: Maybe<Scalars['String']['output']>;
  confidenceNote?: Maybe<Scalars['String']['output']>;
  coordinateWork?: Maybe<Scalars['Boolean']['output']>;
  coordinateWorkNote?: Maybe<Scalars['String']['output']>;
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  estimateConfidence?: Maybe<ConfidenceType>;
  expectedNumberOfParticipants?: Maybe<Scalars['Int']['output']>;
  gainsharePayments?: Maybe<Scalars['Boolean']['output']>;
  gainsharePaymentsEligibility: Array<GainshareArrangementEligibility>;
  gainsharePaymentsEligibilityOther?: Maybe<Scalars['String']['output']>;
  gainsharePaymentsNote?: Maybe<Scalars['String']['output']>;
  gainsharePaymentsTrack?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['UUID']['output'];
  isNewTypeOfProvidersOrSuppliers?: Maybe<Scalars['Boolean']['output']>;
  medicareProviderType?: Maybe<Scalars['String']['output']>;
  modelApplicationLevel?: Maybe<Scalars['String']['output']>;
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  participantAddedFrequency: Array<FrequencyType>;
  participantAddedFrequencyContinually?: Maybe<Scalars['String']['output']>;
  participantAddedFrequencyNote?: Maybe<Scalars['String']['output']>;
  participantAddedFrequencyOther?: Maybe<Scalars['String']['output']>;
  participantRemovedFrequency: Array<FrequencyType>;
  participantRemovedFrequencyContinually?: Maybe<Scalars['String']['output']>;
  participantRemovedFrequencyNote?: Maybe<Scalars['String']['output']>;
  participantRemovedFrequencyOther?: Maybe<Scalars['String']['output']>;
  participantRequireFinancialGuarantee?: Maybe<Scalars['Boolean']['output']>;
  participantRequireFinancialGuaranteeNote?: Maybe<Scalars['String']['output']>;
  participantRequireFinancialGuaranteeOther?: Maybe<Scalars['String']['output']>;
  participantRequireFinancialGuaranteeType: Array<ParticipantRequireFinancialGuaranteeType>;
  participants: Array<ParticipantsType>;
  participantsCurrentlyInModels?: Maybe<Scalars['Boolean']['output']>;
  participantsCurrentlyInModelsNote?: Maybe<Scalars['String']['output']>;
  participantsIDSNote?: Maybe<Scalars['String']['output']>;
  participantsIds: Array<ParticipantsIdType>;
  participantsIdsOther?: Maybe<Scalars['String']['output']>;
  participantsNote?: Maybe<Scalars['String']['output']>;
  participantsOther?: Maybe<Scalars['String']['output']>;
  providerAddMethod: Array<ProviderAddType>;
  providerAddMethodNote?: Maybe<Scalars['String']['output']>;
  providerAddMethodOther?: Maybe<Scalars['String']['output']>;
  providerAdditionFrequency: Array<FrequencyType>;
  providerAdditionFrequencyContinually?: Maybe<Scalars['String']['output']>;
  providerAdditionFrequencyNote?: Maybe<Scalars['String']['output']>;
  providerAdditionFrequencyOther?: Maybe<Scalars['String']['output']>;
  providerLeaveMethod: Array<ProviderLeaveType>;
  providerLeaveMethodNote?: Maybe<Scalars['String']['output']>;
  providerLeaveMethodOther?: Maybe<Scalars['String']['output']>;
  providerOverlap?: Maybe<OverlapType>;
  providerOverlapHierarchy?: Maybe<Scalars['String']['output']>;
  providerOverlapNote?: Maybe<Scalars['String']['output']>;
  providerRemovalFrequency: Array<FrequencyType>;
  providerRemovalFrequencyContinually?: Maybe<Scalars['String']['output']>;
  providerRemovalFrequencyNote?: Maybe<Scalars['String']['output']>;
  providerRemovalFrequencyOther?: Maybe<Scalars['String']['output']>;
  readyForClearanceBy?: Maybe<Scalars['UUID']['output']>;
  readyForClearanceByUserAccount?: Maybe<UserAccount>;
  readyForClearanceDts?: Maybe<Scalars['Time']['output']>;
  readyForReviewBy?: Maybe<Scalars['UUID']['output']>;
  readyForReviewByUserAccount?: Maybe<UserAccount>;
  readyForReviewDts?: Maybe<Scalars['Time']['output']>;
  recruitmentMethod?: Maybe<RecruitmentType>;
  recruitmentNote?: Maybe<Scalars['String']['output']>;
  recruitmentOther?: Maybe<Scalars['String']['output']>;
  riskNote?: Maybe<Scalars['String']['output']>;
  riskOther?: Maybe<Scalars['String']['output']>;
  riskType: Array<ParticipantRiskType>;
  selectionMethod: Array<ParticipantSelectionType>;
  selectionNote?: Maybe<Scalars['String']['output']>;
  selectionOther?: Maybe<Scalars['String']['output']>;
  statesEngagement?: Maybe<Scalars['String']['output']>;
  status: TaskStatus;
  willRiskChange?: Maybe<Scalars['Boolean']['output']>;
  willRiskChangeNote?: Maybe<Scalars['String']['output']>;
};

/**
 * PlanParticipantsAndProvidersChanges represents the possible changes you can make to a
 * providers and participants object when updating it.
 * Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
 * https://gqlgen.com/reference/changesets/
 */
export type PlanParticipantsAndProvidersChanges = {
  communicationMethod?: InputMaybe<Array<ParticipantCommunicationType>>;
  communicationMethodOther?: InputMaybe<Scalars['String']['input']>;
  communicationNote?: InputMaybe<Scalars['String']['input']>;
  confidenceNote?: InputMaybe<Scalars['String']['input']>;
  coordinateWork?: InputMaybe<Scalars['Boolean']['input']>;
  coordinateWorkNote?: InputMaybe<Scalars['String']['input']>;
  estimateConfidence?: InputMaybe<ConfidenceType>;
  expectedNumberOfParticipants?: InputMaybe<Scalars['Int']['input']>;
  gainsharePayments?: InputMaybe<Scalars['Boolean']['input']>;
  gainsharePaymentsEligibility?: InputMaybe<Array<GainshareArrangementEligibility>>;
  gainsharePaymentsEligibilityOther?: InputMaybe<Scalars['String']['input']>;
  gainsharePaymentsNote?: InputMaybe<Scalars['String']['input']>;
  gainsharePaymentsTrack?: InputMaybe<Scalars['Boolean']['input']>;
  isNewTypeOfProvidersOrSuppliers?: InputMaybe<Scalars['Boolean']['input']>;
  medicareProviderType?: InputMaybe<Scalars['String']['input']>;
  modelApplicationLevel?: InputMaybe<Scalars['String']['input']>;
  participantAddedFrequency?: InputMaybe<Array<FrequencyType>>;
  participantAddedFrequencyContinually?: InputMaybe<Scalars['String']['input']>;
  participantAddedFrequencyNote?: InputMaybe<Scalars['String']['input']>;
  participantAddedFrequencyOther?: InputMaybe<Scalars['String']['input']>;
  participantRemovedFrequency?: InputMaybe<Array<FrequencyType>>;
  participantRemovedFrequencyContinually?: InputMaybe<Scalars['String']['input']>;
  participantRemovedFrequencyNote?: InputMaybe<Scalars['String']['input']>;
  participantRemovedFrequencyOther?: InputMaybe<Scalars['String']['input']>;
  participantRequireFinancialGuarantee?: InputMaybe<Scalars['Boolean']['input']>;
  participantRequireFinancialGuaranteeNote?: InputMaybe<Scalars['String']['input']>;
  participantRequireFinancialGuaranteeOther?: InputMaybe<Scalars['String']['input']>;
  participantRequireFinancialGuaranteeType?: InputMaybe<Array<ParticipantRequireFinancialGuaranteeType>>;
  participants?: InputMaybe<Array<ParticipantsType>>;
  participantsCurrentlyInModels?: InputMaybe<Scalars['Boolean']['input']>;
  participantsCurrentlyInModelsNote?: InputMaybe<Scalars['String']['input']>;
  participantsIDSNote?: InputMaybe<Scalars['String']['input']>;
  participantsIds?: InputMaybe<Array<ParticipantsIdType>>;
  participantsIdsOther?: InputMaybe<Scalars['String']['input']>;
  participantsNote?: InputMaybe<Scalars['String']['input']>;
  participantsOther?: InputMaybe<Scalars['String']['input']>;
  providerAddMethod?: InputMaybe<Array<ProviderAddType>>;
  providerAddMethodNote?: InputMaybe<Scalars['String']['input']>;
  providerAddMethodOther?: InputMaybe<Scalars['String']['input']>;
  providerAdditionFrequency?: InputMaybe<Array<FrequencyType>>;
  providerAdditionFrequencyContinually?: InputMaybe<Scalars['String']['input']>;
  providerAdditionFrequencyNote?: InputMaybe<Scalars['String']['input']>;
  providerAdditionFrequencyOther?: InputMaybe<Scalars['String']['input']>;
  providerLeaveMethod?: InputMaybe<Array<ProviderLeaveType>>;
  providerLeaveMethodNote?: InputMaybe<Scalars['String']['input']>;
  providerLeaveMethodOther?: InputMaybe<Scalars['String']['input']>;
  providerOverlap?: InputMaybe<OverlapType>;
  providerOverlapHierarchy?: InputMaybe<Scalars['String']['input']>;
  providerOverlapNote?: InputMaybe<Scalars['String']['input']>;
  providerRemovalFrequency?: InputMaybe<Array<FrequencyType>>;
  providerRemovalFrequencyContinually?: InputMaybe<Scalars['String']['input']>;
  providerRemovalFrequencyNote?: InputMaybe<Scalars['String']['input']>;
  providerRemovalFrequencyOther?: InputMaybe<Scalars['String']['input']>;
  recruitmentMethod?: InputMaybe<RecruitmentType>;
  recruitmentNote?: InputMaybe<Scalars['String']['input']>;
  recruitmentOther?: InputMaybe<Scalars['String']['input']>;
  riskNote?: InputMaybe<Scalars['String']['input']>;
  riskOther?: InputMaybe<Scalars['String']['input']>;
  riskType?: InputMaybe<Array<ParticipantRiskType>>;
  selectionMethod?: InputMaybe<Array<ParticipantSelectionType>>;
  selectionNote?: InputMaybe<Scalars['String']['input']>;
  selectionOther?: InputMaybe<Scalars['String']['input']>;
  statesEngagement?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<TaskStatusInput>;
  willRiskChange?: InputMaybe<Scalars['Boolean']['input']>;
  willRiskChangeNote?: InputMaybe<Scalars['String']['input']>;
};

/** Represents plan participants and providers translation data */
export type PlanParticipantsAndProvidersTranslation = {
  __typename: 'PlanParticipantsAndProvidersTranslation';
  communicationMethod: TranslationFieldWithOptions;
  communicationMethodOther: TranslationField;
  communicationNote: TranslationField;
  confidenceNote: TranslationField;
  coordinateWork: TranslationFieldWithOptions;
  coordinateWorkNote: TranslationField;
  estimateConfidence: TranslationFieldWithOptions;
  expectedNumberOfParticipants: TranslationField;
  gainsharePayments: TranslationFieldWithOptionsAndChildren;
  gainsharePaymentsEligibility: TranslationFieldWithOptionsAndParent;
  gainsharePaymentsEligibilityOther: TranslationField;
  gainsharePaymentsNote: TranslationField;
  gainsharePaymentsTrack: TranslationFieldWithOptionsAndParent;
  isNewTypeOfProvidersOrSuppliers: TranslationFieldWithOptionsAndParent;
  medicareProviderType: TranslationField;
  modelApplicationLevel: TranslationField;
  participantAddedFrequency: TranslationFieldWithOptions;
  participantAddedFrequencyContinually: TranslationField;
  participantAddedFrequencyNote: TranslationField;
  participantAddedFrequencyOther: TranslationField;
  participantRemovedFrequency: TranslationFieldWithOptions;
  participantRemovedFrequencyContinually: TranslationField;
  participantRemovedFrequencyNote: TranslationField;
  participantRemovedFrequencyOther: TranslationField;
  participantRequireFinancialGuarantee: TranslationFieldWithOptions;
  participantRequireFinancialGuaranteeNote: TranslationField;
  participantRequireFinancialGuaranteeOther: TranslationField;
  participantRequireFinancialGuaranteeType: TranslationFieldWithOptions;
  participants: TranslationFieldWithOptions;
  participantsCurrentlyInModels: TranslationFieldWithOptions;
  participantsCurrentlyInModelsNote: TranslationField;
  participantsIDSNote: TranslationField;
  participantsIds: TranslationFieldWithOptions;
  participantsIdsOther: TranslationField;
  participantsNote: TranslationField;
  participantsOther: TranslationField;
  providerAddMethod: TranslationFieldWithOptions;
  providerAddMethodNote: TranslationField;
  providerAddMethodOther: TranslationField;
  providerAdditionFrequency: TranslationFieldWithOptions;
  providerAdditionFrequencyContinually: TranslationField;
  providerAdditionFrequencyNote: TranslationField;
  providerAdditionFrequencyOther: TranslationField;
  providerLeaveMethod: TranslationFieldWithOptions;
  providerLeaveMethodNote: TranslationField;
  providerLeaveMethodOther: TranslationField;
  providerOverlap: TranslationFieldWithOptionsAndChildren;
  providerOverlapHierarchy: TranslationFieldWithParent;
  providerOverlapNote: TranslationField;
  providerRemovalFrequency: TranslationFieldWithOptions;
  providerRemovalFrequencyContinually: TranslationField;
  providerRemovalFrequencyNote: TranslationField;
  providerRemovalFrequencyOther: TranslationField;
  readyForClearanceBy: TranslationField;
  readyForClearanceDts: TranslationField;
  readyForReviewBy: TranslationField;
  readyForReviewDts: TranslationField;
  recruitmentMethod: TranslationFieldWithOptions;
  recruitmentNote: TranslationField;
  recruitmentOther: TranslationField;
  riskNote: TranslationField;
  riskOther: TranslationField;
  riskType: TranslationFieldWithOptions;
  selectionMethod: TranslationFieldWithOptions;
  selectionNote: TranslationField;
  selectionOther: TranslationField;
  statesEngagement: TranslationField;
  status: TranslationFieldWithOptions;
  willRiskChange: TranslationFieldWithOptions;
  willRiskChangeNote: TranslationField;
};

/** PlanPayments is the task list section that deals with information regarding Payments */
export type PlanPayments = {
  __typename: 'PlanPayments';
  affectsMedicareSecondaryPayerClaims?: Maybe<Scalars['Boolean']['output']>;
  affectsMedicareSecondaryPayerClaimsHow?: Maybe<Scalars['String']['output']>;
  affectsMedicareSecondaryPayerClaimsNote?: Maybe<Scalars['String']['output']>;
  anticipateReconcilingPaymentsRetrospectively?: Maybe<Scalars['Boolean']['output']>;
  anticipateReconcilingPaymentsRetrospectivelyNote?: Maybe<Scalars['String']['output']>;
  anticipatedPaymentFrequency: Array<FrequencyType>;
  anticipatedPaymentFrequencyContinually?: Maybe<Scalars['String']['output']>;
  anticipatedPaymentFrequencyNote?: Maybe<Scalars['String']['output']>;
  anticipatedPaymentFrequencyOther?: Maybe<Scalars['String']['output']>;
  beneficiaryCostSharingLevelAndHandling?: Maybe<Scalars['String']['output']>;
  canParticipantsSelectBetweenPaymentMechanisms?: Maybe<Scalars['Boolean']['output']>;
  canParticipantsSelectBetweenPaymentMechanismsHow?: Maybe<Scalars['String']['output']>;
  canParticipantsSelectBetweenPaymentMechanismsNote?: Maybe<Scalars['String']['output']>;
  changesMedicarePhysicianFeeSchedule?: Maybe<Scalars['Boolean']['output']>;
  changesMedicarePhysicianFeeScheduleNote?: Maybe<Scalars['String']['output']>;
  claimsProcessingPrecedence?: Maybe<Scalars['Boolean']['output']>;
  claimsProcessingPrecedenceNote?: Maybe<Scalars['String']['output']>;
  claimsProcessingPrecedenceOther?: Maybe<Scalars['String']['output']>;
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  creatingDependenciesBetweenServices?: Maybe<Scalars['Boolean']['output']>;
  creatingDependenciesBetweenServicesNote?: Maybe<Scalars['String']['output']>;
  expectedCalculationComplexityLevel?: Maybe<ComplexityCalculationLevelType>;
  expectedCalculationComplexityLevelNote?: Maybe<Scalars['String']['output']>;
  fundingSource: Array<FundingSource>;
  fundingSourceMedicareAInfo?: Maybe<Scalars['String']['output']>;
  fundingSourceMedicareBInfo?: Maybe<Scalars['String']['output']>;
  fundingSourceNote?: Maybe<Scalars['String']['output']>;
  fundingSourceOther?: Maybe<Scalars['String']['output']>;
  fundingSourcePatientProtectionInfo?: Maybe<Scalars['String']['output']>;
  fundingSourceR: Array<FundingSource>;
  fundingSourceRMedicareAInfo?: Maybe<Scalars['String']['output']>;
  fundingSourceRMedicareBInfo?: Maybe<Scalars['String']['output']>;
  fundingSourceRNote?: Maybe<Scalars['String']['output']>;
  fundingSourceROther?: Maybe<Scalars['String']['output']>;
  fundingSourceRPatientProtectionInfo?: Maybe<Scalars['String']['output']>;
  id: Scalars['UUID']['output'];
  isContractorAwareTestDataRequirements?: Maybe<Scalars['Boolean']['output']>;
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  needsClaimsDataCollection?: Maybe<Scalars['Boolean']['output']>;
  needsClaimsDataCollectionNote?: Maybe<Scalars['String']['output']>;
  nonClaimsPaymentOther?: Maybe<Scalars['String']['output']>;
  nonClaimsPayments: Array<NonClaimsBasedPayType>;
  nonClaimsPaymentsNote?: Maybe<Scalars['String']['output']>;
  numberPaymentsPerPayCycle?: Maybe<Scalars['String']['output']>;
  numberPaymentsPerPayCycleNote?: Maybe<Scalars['String']['output']>;
  payClaims: Array<ClaimsBasedPayType>;
  payClaimsNote?: Maybe<Scalars['String']['output']>;
  payClaimsOther?: Maybe<Scalars['String']['output']>;
  payModelDifferentiation?: Maybe<Scalars['String']['output']>;
  payRecipients: Array<PayRecipient>;
  payRecipientsNote?: Maybe<Scalars['String']['output']>;
  payRecipientsOtherSpecification?: Maybe<Scalars['String']['output']>;
  payType: Array<PayType>;
  payTypeNote?: Maybe<Scalars['String']['output']>;
  paymentCalculationOwner?: Maybe<Scalars['String']['output']>;
  paymentDemandRecoupmentFrequency: Array<FrequencyType>;
  paymentDemandRecoupmentFrequencyContinually?: Maybe<Scalars['String']['output']>;
  paymentDemandRecoupmentFrequencyNote?: Maybe<Scalars['String']['output']>;
  paymentDemandRecoupmentFrequencyOther?: Maybe<Scalars['String']['output']>;
  paymentReconciliationFrequency: Array<FrequencyType>;
  paymentReconciliationFrequencyContinually?: Maybe<Scalars['String']['output']>;
  paymentReconciliationFrequencyNote?: Maybe<Scalars['String']['output']>;
  paymentReconciliationFrequencyOther?: Maybe<Scalars['String']['output']>;
  paymentStartDate?: Maybe<Scalars['Time']['output']>;
  paymentStartDateNote?: Maybe<Scalars['String']['output']>;
  planningToUseInnovationPaymentContractor?: Maybe<Scalars['Boolean']['output']>;
  planningToUseInnovationPaymentContractorNote?: Maybe<Scalars['String']['output']>;
  providingThirdPartyFile?: Maybe<Scalars['Boolean']['output']>;
  readyForClearanceBy?: Maybe<Scalars['UUID']['output']>;
  readyForClearanceByUserAccount?: Maybe<UserAccount>;
  readyForClearanceDts?: Maybe<Scalars['Time']['output']>;
  readyForReviewBy?: Maybe<Scalars['UUID']['output']>;
  readyForReviewByUserAccount?: Maybe<UserAccount>;
  readyForReviewDts?: Maybe<Scalars['Time']['output']>;
  sharedSystemsInvolvedAdditionalClaimPayment?: Maybe<Scalars['Boolean']['output']>;
  sharedSystemsInvolvedAdditionalClaimPaymentNote?: Maybe<Scalars['String']['output']>;
  shouldAnyProviderExcludedFFSSystemsNote?: Maybe<Scalars['String']['output']>;
  shouldAnyProvidersExcludedFFSSystems?: Maybe<Scalars['Boolean']['output']>;
  status: TaskStatus;
  waiveBeneficiaryCostSharingForAnyServices?: Maybe<Scalars['Boolean']['output']>;
  waiveBeneficiaryCostSharingNote?: Maybe<Scalars['String']['output']>;
  waiveBeneficiaryCostSharingServiceSpecification?: Maybe<Scalars['String']['output']>;
  waiverOnlyAppliesPartOfPayment?: Maybe<Scalars['Boolean']['output']>;
  willBePaymentAdjustments?: Maybe<Scalars['Boolean']['output']>;
  willBePaymentAdjustmentsNote?: Maybe<Scalars['String']['output']>;
  willRecoverPayments?: Maybe<Scalars['Boolean']['output']>;
  willRecoverPaymentsNote?: Maybe<Scalars['String']['output']>;
};

export type PlanPaymentsChanges = {
  affectsMedicareSecondaryPayerClaims?: InputMaybe<Scalars['Boolean']['input']>;
  affectsMedicareSecondaryPayerClaimsHow?: InputMaybe<Scalars['String']['input']>;
  affectsMedicareSecondaryPayerClaimsNote?: InputMaybe<Scalars['String']['input']>;
  anticipateReconcilingPaymentsRetrospectively?: InputMaybe<Scalars['Boolean']['input']>;
  anticipateReconcilingPaymentsRetrospectivelyNote?: InputMaybe<Scalars['String']['input']>;
  anticipatedPaymentFrequency?: InputMaybe<Array<FrequencyType>>;
  anticipatedPaymentFrequencyContinually?: InputMaybe<Scalars['String']['input']>;
  anticipatedPaymentFrequencyNote?: InputMaybe<Scalars['String']['input']>;
  anticipatedPaymentFrequencyOther?: InputMaybe<Scalars['String']['input']>;
  beneficiaryCostSharingLevelAndHandling?: InputMaybe<Scalars['String']['input']>;
  canParticipantsSelectBetweenPaymentMechanisms?: InputMaybe<Scalars['Boolean']['input']>;
  canParticipantsSelectBetweenPaymentMechanismsHow?: InputMaybe<Scalars['String']['input']>;
  canParticipantsSelectBetweenPaymentMechanismsNote?: InputMaybe<Scalars['String']['input']>;
  changesMedicarePhysicianFeeSchedule?: InputMaybe<Scalars['Boolean']['input']>;
  changesMedicarePhysicianFeeScheduleNote?: InputMaybe<Scalars['String']['input']>;
  claimsProcessingPrecedence?: InputMaybe<Scalars['Boolean']['input']>;
  claimsProcessingPrecedenceNote?: InputMaybe<Scalars['String']['input']>;
  claimsProcessingPrecedenceOther?: InputMaybe<Scalars['String']['input']>;
  creatingDependenciesBetweenServices?: InputMaybe<Scalars['Boolean']['input']>;
  creatingDependenciesBetweenServicesNote?: InputMaybe<Scalars['String']['input']>;
  expectedCalculationComplexityLevel?: InputMaybe<ComplexityCalculationLevelType>;
  expectedCalculationComplexityLevelNote?: InputMaybe<Scalars['String']['input']>;
  fundingSource?: InputMaybe<Array<FundingSource>>;
  fundingSourceMedicareAInfo?: InputMaybe<Scalars['String']['input']>;
  fundingSourceMedicareBInfo?: InputMaybe<Scalars['String']['input']>;
  fundingSourceNote?: InputMaybe<Scalars['String']['input']>;
  fundingSourceOther?: InputMaybe<Scalars['String']['input']>;
  fundingSourcePatientProtectionInfo?: InputMaybe<Scalars['String']['input']>;
  fundingSourceR?: InputMaybe<Array<FundingSource>>;
  fundingSourceRMedicareAInfo?: InputMaybe<Scalars['String']['input']>;
  fundingSourceRMedicareBInfo?: InputMaybe<Scalars['String']['input']>;
  fundingSourceRNote?: InputMaybe<Scalars['String']['input']>;
  fundingSourceROther?: InputMaybe<Scalars['String']['input']>;
  fundingSourceRPatientProtectionInfo?: InputMaybe<Scalars['String']['input']>;
  isContractorAwareTestDataRequirements?: InputMaybe<Scalars['Boolean']['input']>;
  needsClaimsDataCollection?: InputMaybe<Scalars['Boolean']['input']>;
  needsClaimsDataCollectionNote?: InputMaybe<Scalars['String']['input']>;
  nonClaimsPaymentOther?: InputMaybe<Scalars['String']['input']>;
  nonClaimsPayments?: InputMaybe<Array<NonClaimsBasedPayType>>;
  nonClaimsPaymentsNote?: InputMaybe<Scalars['String']['input']>;
  numberPaymentsPerPayCycle?: InputMaybe<Scalars['String']['input']>;
  numberPaymentsPerPayCycleNote?: InputMaybe<Scalars['String']['input']>;
  payClaims?: InputMaybe<Array<ClaimsBasedPayType>>;
  payClaimsNote?: InputMaybe<Scalars['String']['input']>;
  payClaimsOther?: InputMaybe<Scalars['String']['input']>;
  payModelDifferentiation?: InputMaybe<Scalars['String']['input']>;
  payRecipients?: InputMaybe<Array<PayRecipient>>;
  payRecipientsNote?: InputMaybe<Scalars['String']['input']>;
  payRecipientsOtherSpecification?: InputMaybe<Scalars['String']['input']>;
  payType?: InputMaybe<Array<PayType>>;
  payTypeNote?: InputMaybe<Scalars['String']['input']>;
  paymentCalculationOwner?: InputMaybe<Scalars['String']['input']>;
  paymentDemandRecoupmentFrequency?: InputMaybe<Array<FrequencyType>>;
  paymentDemandRecoupmentFrequencyContinually?: InputMaybe<Scalars['String']['input']>;
  paymentDemandRecoupmentFrequencyNote?: InputMaybe<Scalars['String']['input']>;
  paymentDemandRecoupmentFrequencyOther?: InputMaybe<Scalars['String']['input']>;
  paymentReconciliationFrequency?: InputMaybe<Array<FrequencyType>>;
  paymentReconciliationFrequencyContinually?: InputMaybe<Scalars['String']['input']>;
  paymentReconciliationFrequencyNote?: InputMaybe<Scalars['String']['input']>;
  paymentReconciliationFrequencyOther?: InputMaybe<Scalars['String']['input']>;
  paymentStartDate?: InputMaybe<Scalars['Time']['input']>;
  paymentStartDateNote?: InputMaybe<Scalars['String']['input']>;
  planningToUseInnovationPaymentContractor?: InputMaybe<Scalars['Boolean']['input']>;
  planningToUseInnovationPaymentContractorNote?: InputMaybe<Scalars['String']['input']>;
  providingThirdPartyFile?: InputMaybe<Scalars['Boolean']['input']>;
  sharedSystemsInvolvedAdditionalClaimPayment?: InputMaybe<Scalars['Boolean']['input']>;
  sharedSystemsInvolvedAdditionalClaimPaymentNote?: InputMaybe<Scalars['String']['input']>;
  shouldAnyProviderExcludedFFSSystemsNote?: InputMaybe<Scalars['String']['input']>;
  shouldAnyProvidersExcludedFFSSystems?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<TaskStatusInput>;
  waiveBeneficiaryCostSharingForAnyServices?: InputMaybe<Scalars['Boolean']['input']>;
  waiveBeneficiaryCostSharingNote?: InputMaybe<Scalars['String']['input']>;
  waiveBeneficiaryCostSharingServiceSpecification?: InputMaybe<Scalars['String']['input']>;
  waiverOnlyAppliesPartOfPayment?: InputMaybe<Scalars['Boolean']['input']>;
  willBePaymentAdjustments?: InputMaybe<Scalars['Boolean']['input']>;
  willBePaymentAdjustmentsNote?: InputMaybe<Scalars['String']['input']>;
  willRecoverPayments?: InputMaybe<Scalars['Boolean']['input']>;
  willRecoverPaymentsNote?: InputMaybe<Scalars['String']['input']>;
};

/** Represents payments translation data */
export type PlanPaymentsTranslation = {
  __typename: 'PlanPaymentsTranslation';
  affectsMedicareSecondaryPayerClaims: TranslationFieldWithOptionsAndParent;
  affectsMedicareSecondaryPayerClaimsHow: TranslationField;
  affectsMedicareSecondaryPayerClaimsNote: TranslationField;
  anticipateReconcilingPaymentsRetrospectively: TranslationFieldWithOptions;
  anticipateReconcilingPaymentsRetrospectivelyNote: TranslationField;
  anticipatedPaymentFrequency: TranslationFieldWithOptions;
  anticipatedPaymentFrequencyContinually: TranslationField;
  anticipatedPaymentFrequencyNote: TranslationField;
  anticipatedPaymentFrequencyOther: TranslationField;
  beneficiaryCostSharingLevelAndHandling: TranslationFieldWithParent;
  canParticipantsSelectBetweenPaymentMechanisms: TranslationFieldWithOptions;
  canParticipantsSelectBetweenPaymentMechanismsHow: TranslationField;
  canParticipantsSelectBetweenPaymentMechanismsNote: TranslationField;
  changesMedicarePhysicianFeeSchedule: TranslationFieldWithOptionsAndParent;
  changesMedicarePhysicianFeeScheduleNote: TranslationField;
  claimsProcessingPrecedence: TranslationFieldWithOptions;
  claimsProcessingPrecedenceNote: TranslationField;
  claimsProcessingPrecedenceOther: TranslationField;
  creatingDependenciesBetweenServices: TranslationFieldWithOptionsAndParent;
  creatingDependenciesBetweenServicesNote: TranslationField;
  expectedCalculationComplexityLevel: TranslationFieldWithOptions;
  expectedCalculationComplexityLevelNote: TranslationField;
  fundingSource: TranslationFieldWithOptions;
  fundingSourceMedicareAInfo: TranslationField;
  fundingSourceMedicareBInfo: TranslationField;
  fundingSourceNote: TranslationField;
  fundingSourceOther: TranslationField;
  fundingSourcePatientProtectionInfo: TranslationField;
  fundingSourceR: TranslationFieldWithOptions;
  fundingSourceRMedicareAInfo: TranslationField;
  fundingSourceRMedicareBInfo: TranslationField;
  fundingSourceRNote: TranslationField;
  fundingSourceROther: TranslationField;
  fundingSourceRPatientProtectionInfo: TranslationField;
  isContractorAwareTestDataRequirements: TranslationFieldWithOptionsAndParent;
  needsClaimsDataCollection: TranslationFieldWithOptionsAndParent;
  needsClaimsDataCollectionNote: TranslationField;
  nonClaimsPaymentOther: TranslationField;
  nonClaimsPayments: TranslationFieldWithOptionsAndParent;
  nonClaimsPaymentsNote: TranslationField;
  numberPaymentsPerPayCycle: TranslationFieldWithParent;
  numberPaymentsPerPayCycleNote: TranslationField;
  payClaims: TranslationFieldWithOptions;
  payClaimsNote: TranslationField;
  payClaimsOther: TranslationField;
  payModelDifferentiation: TranslationFieldWithParent;
  payRecipients: TranslationFieldWithOptions;
  payRecipientsNote: TranslationField;
  payRecipientsOtherSpecification: TranslationField;
  payType: TranslationFieldWithOptionsAndChildren;
  payTypeNote: TranslationField;
  paymentCalculationOwner: TranslationFieldWithParent;
  paymentDemandRecoupmentFrequency: TranslationFieldWithOptions;
  paymentDemandRecoupmentFrequencyContinually: TranslationField;
  paymentDemandRecoupmentFrequencyNote: TranslationField;
  paymentDemandRecoupmentFrequencyOther: TranslationField;
  paymentReconciliationFrequency: TranslationFieldWithOptions;
  paymentReconciliationFrequencyContinually: TranslationField;
  paymentReconciliationFrequencyNote: TranslationField;
  paymentReconciliationFrequencyOther: TranslationField;
  paymentStartDate: TranslationField;
  paymentStartDateNote: TranslationField;
  planningToUseInnovationPaymentContractor: TranslationFieldWithOptionsAndParent;
  planningToUseInnovationPaymentContractorNote: TranslationField;
  providingThirdPartyFile: TranslationFieldWithOptionsAndParent;
  readyForClearanceBy: TranslationField;
  readyForClearanceDts: TranslationField;
  readyForReviewBy: TranslationField;
  readyForReviewDts: TranslationField;
  sharedSystemsInvolvedAdditionalClaimPayment: TranslationFieldWithOptionsAndParent;
  sharedSystemsInvolvedAdditionalClaimPaymentNote: TranslationField;
  shouldAnyProviderExcludedFFSSystemsNote: TranslationField;
  shouldAnyProvidersExcludedFFSSystems: TranslationFieldWithOptionsAndParent;
  status: TranslationFieldWithOptions;
  waiveBeneficiaryCostSharingForAnyServices: TranslationFieldWithOptionsAndParent;
  waiveBeneficiaryCostSharingNote: TranslationField;
  waiveBeneficiaryCostSharingServiceSpecification: TranslationField;
  waiverOnlyAppliesPartOfPayment: TranslationFieldWithOptionsAndParent;
  willBePaymentAdjustments: TranslationFieldWithOptionsAndParent;
  willBePaymentAdjustmentsNote: TranslationField;
  willRecoverPayments: TranslationFieldWithOptions;
  willRecoverPaymentsNote: TranslationField;
};

export type PlanTdl = {
  __typename: 'PlanTDL';
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  dateInitiated: Scalars['Time']['output'];
  id: Scalars['UUID']['output'];
  idNumber: Scalars['String']['output'];
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  note?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
};

export type PlanTdlChanges = {
  dateInitiated?: InputMaybe<Scalars['Time']['input']>;
  idNumber?: InputMaybe<Scalars['String']['input']>;
  note?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type PlanTdlCreateInput = {
  dateInitiated: Scalars['Time']['input'];
  idNumber: Scalars['String']['input'];
  modelPlanID: Scalars['UUID']['input'];
  note?: InputMaybe<Scalars['String']['input']>;
  title: Scalars['String']['input'];
};

/** Represents plan tdl translation data */
export type PlanTdlTranslation = {
  __typename: 'PlanTDLTranslation';
  dateInitiated: TranslationField;
  idNumber: TranslationField;
  note: TranslationField;
  title: TranslationField;
};

export type PossibleOperationalNeed = {
  __typename: 'PossibleOperationalNeed';
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  id: Scalars['Int']['output'];
  key: OperationalNeedKey;
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  name: Scalars['String']['output'];
  possibleSolutions: Array<PossibleOperationalSolution>;
  section?: Maybe<TaskListSection>;
};

export type PossibleOperationalSolution = {
  __typename: 'PossibleOperationalSolution';
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  filterView?: Maybe<ModelViewFilter>;
  id: Scalars['Int']['output'];
  key: OperationalSolutionKey;
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  name: Scalars['String']['output'];
  pointsOfContact: Array<PossibleOperationalSolutionContact>;
  primaryContact?: Maybe<PossibleOperationalSolutionContact>;
  treatAsOther: Scalars['Boolean']['output'];
};

/** PossibleOperationalSolutionContact represents a contact for a possible operational solution */
export type PossibleOperationalSolutionContact = {
  __typename: 'PossibleOperationalSolutionContact';
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  email: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  isPrimary: Scalars['Boolean']['output'];
  isTeam: Scalars['Boolean']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  name: Scalars['String']['output'];
  possibleOperationalSolutionID: Scalars['Int']['output'];
  role?: Maybe<Scalars['String']['output']>;
};

export type PrepareForClearance = {
  __typename: 'PrepareForClearance';
  latestClearanceDts?: Maybe<Scalars['Time']['output']>;
  status: PrepareForClearanceStatus;
};

export enum PrepareForClearanceStatus {
  CANNOT_START = 'CANNOT_START',
  IN_PROGRESS = 'IN_PROGRESS',
  READY = 'READY',
  READY_FOR_CLEARANCE = 'READY_FOR_CLEARANCE'
}

export enum ProviderAddType {
  MANDATORILY = 'MANDATORILY',
  NA = 'NA',
  ONLINE_TOOLS = 'ONLINE_TOOLS',
  OTHER = 'OTHER',
  PROSPECTIVELY = 'PROSPECTIVELY',
  RETROSPECTIVELY = 'RETROSPECTIVELY',
  VOLUNTARILY = 'VOLUNTARILY'
}

export enum ProviderLeaveType {
  AFTER_A_CERTAIN_WITH_IMPLICATIONS = 'AFTER_A_CERTAIN_WITH_IMPLICATIONS',
  NOT_ALLOWED_TO_LEAVE = 'NOT_ALLOWED_TO_LEAVE',
  NOT_APPLICABLE = 'NOT_APPLICABLE',
  OTHER = 'OTHER',
  VARIES_BY_TYPE_OF_PROVIDER = 'VARIES_BY_TYPE_OF_PROVIDER',
  VOLUNTARILY_WITHOUT_IMPLICATIONS = 'VOLUNTARILY_WITHOUT_IMPLICATIONS'
}

/** Query definition for the schema */
export type Query = {
  __typename: 'Query';
  analyzedAudits: Array<AnalyzedAudit>;
  auditChanges: Array<AuditChange>;
  currentUser: CurrentUser;
  echimpCR: EChimpCr;
  echimpCRAndTDLS: Array<EChimpCrAndTdls>;
  echimpCRs: Array<EChimpCr>;
  echimpTDL: EChimpTdl;
  echimpTDLs: Array<EChimpTdl>;
  existingModelCollection: Array<ExistingModel>;
  existingModelLink: ExistingModelLink;
  modelPlan: ModelPlan;
  modelPlanCollection: Array<ModelPlan>;
  modelPlansByOperationalSolutionKey: Array<ModelPlanAndPossibleOperationalSolution>;
  mostRecentDiscussionRoleSelection?: Maybe<DiscussionRoleSelection>;
  ndaInfo: NdaInfo;
  operationalNeed: OperationalNeed;
  operationalSolution: OperationalSolution;
  operationalSolutions: Array<OperationalSolution>;
  planCR: PlanCr;
  planCollaboratorByID: PlanCollaborator;
  planDocument: PlanDocument;
  planPayments: PlanPayments;
  planTDL: PlanTdl;
  possibleOperationalNeeds: Array<PossibleOperationalNeed>;
  possibleOperationalSolutions: Array<PossibleOperationalSolution>;
  searchOktaUsers: Array<UserInfo>;
  taskListSectionLocks: Array<TaskListSectionLockStatus>;
  /**
   * TranslatedAuditCollection returns a collection of translated audits, with access dependant on who is viewing the audits.
   * if a user has privileged access, they will see audit changes that are restricted, otherwise only unrestricted
   * Optional Params
   *     limit: this controls how many records will be returned at once. A null entry will return all records
   *     offset: how many records to skip before returning results. If null, no records will be skipped.
   */
  translatedAuditCollection?: Maybe<Array<TranslatedAudit>>;
  userAccount: UserAccount;
  userViewCustomization: UserViewCustomization;
};


/** Query definition for the schema */
export type QueryAnalyzedAuditsArgs = {
  dateAnalyzed: Scalars['Time']['input'];
};


/** Query definition for the schema */
export type QueryAuditChangesArgs = {
  primaryKey: Scalars['UUID']['input'];
  tableName: TableName;
};


/** Query definition for the schema */
export type QueryEchimpCrArgs = {
  id: Scalars['String']['input'];
};


/** Query definition for the schema */
export type QueryEchimpTdlArgs = {
  id: Scalars['String']['input'];
};


/** Query definition for the schema */
export type QueryExistingModelLinkArgs = {
  id: Scalars['UUID']['input'];
};


/** Query definition for the schema */
export type QueryModelPlanArgs = {
  id: Scalars['UUID']['input'];
};


/** Query definition for the schema */
export type QueryModelPlanCollectionArgs = {
  filter?: ModelPlanFilter;
};


/** Query definition for the schema */
export type QueryModelPlansByOperationalSolutionKeyArgs = {
  operationalSolutionKey: OperationalSolutionKey;
};


/** Query definition for the schema */
export type QueryOperationalNeedArgs = {
  id: Scalars['UUID']['input'];
};


/** Query definition for the schema */
export type QueryOperationalSolutionArgs = {
  id: Scalars['UUID']['input'];
};


/** Query definition for the schema */
export type QueryOperationalSolutionsArgs = {
  includeNotNeeded?: Scalars['Boolean']['input'];
  operationalNeedID: Scalars['UUID']['input'];
};


/** Query definition for the schema */
export type QueryPlanCrArgs = {
  id: Scalars['UUID']['input'];
};


/** Query definition for the schema */
export type QueryPlanCollaboratorByIdArgs = {
  id: Scalars['UUID']['input'];
};


/** Query definition for the schema */
export type QueryPlanDocumentArgs = {
  id: Scalars['UUID']['input'];
};


/** Query definition for the schema */
export type QueryPlanPaymentsArgs = {
  id: Scalars['UUID']['input'];
};


/** Query definition for the schema */
export type QueryPlanTdlArgs = {
  id: Scalars['UUID']['input'];
};


/** Query definition for the schema */
export type QuerySearchOktaUsersArgs = {
  searchTerm: Scalars['String']['input'];
};


/** Query definition for the schema */
export type QueryTaskListSectionLocksArgs = {
  modelPlanID: Scalars['UUID']['input'];
};


/** Query definition for the schema */
export type QueryTranslatedAuditCollectionArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  modelPlanID: Scalars['UUID']['input'];
  offset?: InputMaybe<Scalars['Int']['input']>;
};


/** Query definition for the schema */
export type QueryUserAccountArgs = {
  username: Scalars['String']['input'];
};

export enum RecruitmentType {
  APPLICATION_COLLECTION_TOOL = 'APPLICATION_COLLECTION_TOOL',
  LOI = 'LOI',
  NA = 'NA',
  NOFO = 'NOFO',
  OTHER = 'OTHER'
}

export type ReportAProblemInput = {
  allowContact?: InputMaybe<Scalars['Boolean']['input']>;
  isAnonymousSubmission: Scalars['Boolean']['input'];
  section?: InputMaybe<ReportAProblemSection>;
  sectionOther?: InputMaybe<Scalars['String']['input']>;
  severity?: InputMaybe<ReportAProblemSeverity>;
  severityOther?: InputMaybe<Scalars['String']['input']>;
  whatDoing?: InputMaybe<Scalars['String']['input']>;
  whatWentWrong?: InputMaybe<Scalars['String']['input']>;
};

export enum ReportAProblemSection {
  HELP_CENTER = 'HELP_CENTER',
  IT_SOLUTIONS = 'IT_SOLUTIONS',
  OTHER = 'OTHER',
  READ_VIEW = 'READ_VIEW',
  TASK_LIST = 'TASK_LIST'
}

export enum ReportAProblemSeverity {
  DELAYED_TASK = 'DELAYED_TASK',
  MINOR = 'MINOR',
  OTHER = 'OTHER',
  PREVENTED_TASK = 'PREVENTED_TASK'
}

/** A user role associated with a job code */
export enum Role {
  /** A MINT assessment team user */
  MINT_ASSESSMENT = 'MINT_ASSESSMENT',
  /** A MINT MAC user */
  MINT_MAC = 'MINT_MAC',
  /** A basic MINT user */
  MINT_USER = 'MINT_USER'
}

export enum SatisfactionLevel {
  DISSATISFIED = 'DISSATISFIED',
  NEUTRAL = 'NEUTRAL',
  SATISFIED = 'SATISFIED',
  VERY_DISSATISFIED = 'VERY_DISSATISFIED',
  VERY_SATISFIED = 'VERY_SATISFIED'
}

export enum SelectionMethodType {
  HISTORICAL = 'HISTORICAL',
  NA = 'NA',
  OTHER = 'OTHER',
  PROSPECTIVE = 'PROSPECTIVE',
  PROVIDER_SIGN_UP = 'PROVIDER_SIGN_UP',
  RETROSPECTIVE = 'RETROSPECTIVE',
  VOLUNTARY = 'VOLUNTARY'
}

/** The inputs to the user feedback form */
export type SendFeedbackEmailInput = {
  allowContact?: InputMaybe<Scalars['Boolean']['input']>;
  cmsRole?: InputMaybe<Scalars['String']['input']>;
  howCanWeImprove?: InputMaybe<Scalars['String']['input']>;
  howSatisfied?: InputMaybe<SatisfactionLevel>;
  isAnonymousSubmission: Scalars['Boolean']['input'];
  mintUsedFor?: InputMaybe<Array<MintUses>>;
  mintUsedForOther?: InputMaybe<Scalars['String']['input']>;
  systemEasyToUse?: InputMaybe<EaseOfUse>;
  systemEasyToUseOther?: InputMaybe<Scalars['String']['input']>;
};

export enum SortDirection {
  ASC = 'ASC',
  DESC = 'DESC'
}

export enum StakeholdersType {
  BENEFICIARIES = 'BENEFICIARIES',
  COMMUNITY_ORGANIZATIONS = 'COMMUNITY_ORGANIZATIONS',
  OTHER = 'OTHER',
  PARTICIPANTS = 'PARTICIPANTS',
  PROFESSIONAL_ORGANIZATIONS = 'PROFESSIONAL_ORGANIZATIONS',
  PROVIDERS = 'PROVIDERS',
  STATES = 'STATES'
}

export enum StatesAndTerritories {
  AK = 'AK',
  AL = 'AL',
  AR = 'AR',
  AS = 'AS',
  AZ = 'AZ',
  CA = 'CA',
  CO = 'CO',
  CT = 'CT',
  DC = 'DC',
  DE = 'DE',
  FL = 'FL',
  GA = 'GA',
  GU = 'GU',
  HI = 'HI',
  IA = 'IA',
  ID = 'ID',
  IL = 'IL',
  IN = 'IN',
  KS = 'KS',
  KY = 'KY',
  LA = 'LA',
  MA = 'MA',
  MD = 'MD',
  ME = 'ME',
  MI = 'MI',
  MN = 'MN',
  MO = 'MO',
  MP = 'MP',
  MS = 'MS',
  MT = 'MT',
  NC = 'NC',
  ND = 'ND',
  NE = 'NE',
  NH = 'NH',
  NJ = 'NJ',
  NM = 'NM',
  NV = 'NV',
  NY = 'NY',
  OH = 'OH',
  OK = 'OK',
  OR = 'OR',
  PA = 'PA',
  PR = 'PR',
  RI = 'RI',
  SC = 'SC',
  SD = 'SD',
  TN = 'TN',
  TX = 'TX',
  UM = 'UM',
  UT = 'UT',
  VA = 'VA',
  VI = 'VI',
  VT = 'VT',
  WA = 'WA',
  WI = 'WI',
  WV = 'WV',
  WY = 'WY'
}

export type Subscription = {
  __typename: 'Subscription';
  onLockTaskListSectionContext: TaskListSectionLockStatusChanged;
  onTaskListSectionLocksChanged: TaskListSectionLockStatusChanged;
};


export type SubscriptionOnLockTaskListSectionContextArgs = {
  modelPlanID: Scalars['UUID']['input'];
};


export type SubscriptionOnTaskListSectionLocksChangedArgs = {
  modelPlanID: Scalars['UUID']['input'];
};

/** These represent all the possible tables in the database, in the public schema. */
export enum TableName {
  ACTIVITY = 'activity',
  ANALYZED_AUDIT = 'analyzed_audit',
  DISCUSSION_REPLY = 'discussion_reply',
  EXISTING_MODEL = 'existing_model',
  EXISTING_MODEL_LINK = 'existing_model_link',
  MODEL_PLAN = 'model_plan',
  NDA_AGREEMENT = 'nda_agreement',
  OPERATIONAL_NEED = 'operational_need',
  OPERATIONAL_SOLUTION = 'operational_solution',
  OPERATIONAL_SOLUTION_SUBTASK = 'operational_solution_subtask',
  PLAN_BASICS = 'plan_basics',
  PLAN_BENEFICIARIES = 'plan_beneficiaries',
  PLAN_COLLABORATOR = 'plan_collaborator',
  PLAN_CR = 'plan_cr',
  PLAN_DISCUSSION = 'plan_discussion',
  PLAN_DOCUMENT = 'plan_document',
  PLAN_DOCUMENT_SOLUTION_LINK = 'plan_document_solution_link',
  PLAN_FAVORITE = 'plan_favorite',
  PLAN_GENERAL_CHARACTERISTICS = 'plan_general_characteristics',
  PLAN_OPS_EVAL_AND_LEARNING = 'plan_ops_eval_and_learning',
  PLAN_PARTICIPANTS_AND_PROVIDERS = 'plan_participants_and_providers',
  PLAN_PAYMENTS = 'plan_payments',
  PLAN_TDL = 'plan_tdl',
  POSSIBLE_NEED_SOLUTION_LINK = 'possible_need_solution_link',
  POSSIBLE_OPERATIONAL_NEED = 'possible_operational_need',
  POSSIBLE_OPERATIONAL_SOLUTION = 'possible_operational_solution',
  POSSIBLE_OPERATIONAL_SOLUTION_CONTACT = 'possible_operational_solution_contact',
  TAG = 'tag',
  TRANSLATED_AUDIT = 'translated_audit',
  TRANSLATED_AUDIT_FIELD = 'translated_audit_field',
  TRANSLATED_AUDIT_QUEUE = 'translated_audit_queue',
  USER_ACCOUNT = 'user_account',
  USER_NOTIFICATION = 'user_notification',
  USER_NOTIFICATION_PREFERENCES = 'user_notification_preferences',
  USER_VIEW_CUSTOMIZATION = 'user_view_customization'
}

/** Tag represents an entity tagged in the database */
export type Tag = {
  __typename: 'Tag';
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  entity?: Maybe<TaggedEntity>;
  entityIntID?: Maybe<Scalars['Int']['output']>;
  entityUUID?: Maybe<Scalars['UUID']['output']>;
  id: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  tagType: TagType;
  taggedContentID: Scalars['UUID']['output'];
  taggedContentTable: Scalars['String']['output'];
  taggedField: Scalars['String']['output'];
};

export enum TagType {
  POSSIBLE_SOLUTION = 'POSSIBLE_SOLUTION',
  USER_ACCOUNT = 'USER_ACCOUNT'
}

/** TaggedContent represents content that has a tag in it. It is composed of the raw tag text, as well as the array of possible tags */
export type TaggedContent = {
  __typename: 'TaggedContent';
  /** RawContent is HTML. It is sanitized on the backend */
  rawContent: Scalars['String']['output'];
  tags: Array<Tag>;
};

/** TaggedEntity is the actual object represented by a tag in the data base. */
export type TaggedEntity = PossibleOperationalSolution | UserAccount;

export type TaggedInDiscussionReplyActivityMeta = {
  __typename: 'TaggedInDiscussionReplyActivityMeta';
  content: Scalars['String']['output'];
  discussion: PlanDiscussion;
  discussionID: Scalars['UUID']['output'];
  modelPlan: ModelPlan;
  modelPlanID: Scalars['UUID']['output'];
  reply: DiscussionReply;
  replyID: Scalars['UUID']['output'];
  type: ActivityType;
  version: Scalars['Int']['output'];
};

export type TaggedInPlanDiscussionActivityMeta = {
  __typename: 'TaggedInPlanDiscussionActivityMeta';
  content: Scalars['String']['output'];
  discussion: PlanDiscussion;
  discussionID: Scalars['UUID']['output'];
  modelPlan: ModelPlan;
  modelPlanID: Scalars['UUID']['output'];
  type: ActivityType;
  version: Scalars['Int']['output'];
};

export enum TaskListSection {
  BASICS = 'BASICS',
  BENEFICIARIES = 'BENEFICIARIES',
  GENERAL_CHARACTERISTICS = 'GENERAL_CHARACTERISTICS',
  OPERATIONS_EVALUATION_AND_LEARNING = 'OPERATIONS_EVALUATION_AND_LEARNING',
  PARTICIPANTS_AND_PROVIDERS = 'PARTICIPANTS_AND_PROVIDERS',
  PAYMENT = 'PAYMENT',
  PREPARE_FOR_CLEARANCE = 'PREPARE_FOR_CLEARANCE'
}

export type TaskListSectionLockStatus = {
  __typename: 'TaskListSectionLockStatus';
  isAssessment: Scalars['Boolean']['output'];
  lockedByUserAccount: UserAccount;
  modelPlanID: Scalars['UUID']['output'];
  section: TaskListSection;
};

export type TaskListSectionLockStatusChanged = {
  __typename: 'TaskListSectionLockStatusChanged';
  actionType: ActionType;
  changeType: ChangeType;
  lockStatus: TaskListSectionLockStatus;
};

export enum TaskStatus {
  IN_PROGRESS = 'IN_PROGRESS',
  READY = 'READY',
  READY_FOR_CLEARANCE = 'READY_FOR_CLEARANCE',
  READY_FOR_REVIEW = 'READY_FOR_REVIEW'
}

export enum TaskStatusInput {
  IN_PROGRESS = 'IN_PROGRESS',
  READY_FOR_CLEARANCE = 'READY_FOR_CLEARANCE',
  READY_FOR_REVIEW = 'READY_FOR_REVIEW'
}

export enum TeamRole {
  CM_FFS_COUNTERPART = 'CM_FFS_COUNTERPART',
  COR = 'COR',
  EVALUATION = 'EVALUATION',
  IT_LEAD = 'IT_LEAD',
  LEADERSHIP = 'LEADERSHIP',
  LEARNING = 'LEARNING',
  MODEL_LEAD = 'MODEL_LEAD',
  MODEL_TEAM = 'MODEL_TEAM',
  OACT = 'OACT',
  PAYMENT = 'PAYMENT',
  QUALITY = 'QUALITY',
  SOLUTION_ARCHITECT = 'SOLUTION_ARCHITECT'
}

/** TranslatedAudit represent a point in time change made to part of application. */
export type TranslatedAudit = {
  __typename: 'TranslatedAudit';
  action: DatabaseOperation;
  actorID: Scalars['UUID']['output'];
  /** The Common name of the actor who made the changes. This comes from the user account table. */
  actorName: Scalars['String']['output'];
  /** The id of the audit.Change record that was translated. */
  changeID: Scalars['Int']['output'];
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  date: Scalars['Time']['output'];
  id: Scalars['UUID']['output'];
  /** The actual meta data stored for this record */
  metaData?: Maybe<TranslatedAuditMetaData>;
  /** The type of meta data that is stored for this record */
  metaDataType?: Maybe<TranslatedAuditMetaDataType>;
  modelPlanID: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  primaryKey: Scalars['UUID']['output'];
  /** Restricted denotes if this audit should only be visible to users with specific permissions. Currently, that means they are a collaborator or an assessment user */
  restricted: Scalars['Boolean']['output'];
  tableID: Scalars['Int']['output'];
  tableName: TableName;
  /** The specific fields that were changed by the transaction */
  translatedFields: Array<TranslatedAuditField>;
};

export type TranslatedAuditField = {
  __typename: 'TranslatedAuditField';
  /** This represents whether a field was answered, updated, or had the answer removed */
  changeType: AuditFieldChangeType;
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  dataType: TranslationDataType;
  fieldName: Scalars['String']['output'];
  fieldNameTranslated: Scalars['String']['output'];
  /** Designates the order of the question in the form.  Uses integer as page and question order uses hundreths place.  Ex: 1.01, 1.02, 2.01, 2.02 */
  fieldOrder: Scalars['Float']['output'];
  formType: TranslationFormType;
  id: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  new?: Maybe<Scalars['Any']['output']>;
  newTranslated?: Maybe<Scalars['Any']['output']>;
  /** Translated Label for questions that are no longer applicable  */
  notApplicableQuestions?: Maybe<Array<Scalars['String']['output']>>;
  old?: Maybe<Scalars['Any']['output']>;
  oldTranslated?: Maybe<Scalars['Any']['output']>;
  /** Specifies if this is a specific category of question. Needed for conditionally rendering note details etc */
  questionType?: Maybe<TranslationQuestionType>;
  /** The label for the parent question that this question refers to */
  referenceLabel?: Maybe<Scalars['String']['output']>;
  translatedAuditID: Scalars['UUID']['output'];
};

export type TranslatedAuditMetaBaseStruct = {
  __typename: 'TranslatedAuditMetaBaseStruct';
  tableName: TableName;
  version: Scalars['Int']['output'];
};

/** TranslatedAuditMetaData is a type that represents all the data that can be captured in a Translated audit */
export type TranslatedAuditMetaData = TranslatedAuditMetaBaseStruct | TranslatedAuditMetaDiscussionReply | TranslatedAuditMetaDocumentSolutionLink | TranslatedAuditMetaGeneric | TranslatedAuditMetaOperationalNeed | TranslatedAuditMetaOperationalSolution | TranslatedAuditMetaOperationalSolutionSubtask;

export enum TranslatedAuditMetaDataType {
  BASE = 'BASE',
  DISCUSSION_REPLY = 'DISCUSSION_REPLY',
  DOCUMENT_SOLUTION_LINK = 'DOCUMENT_SOLUTION_LINK',
  GENERIC = 'GENERIC',
  OPERATIONAL_NEED = 'OPERATIONAL_NEED',
  OPERATIONAL_SOLUTION = 'OPERATIONAL_SOLUTION',
  OPERATIONAL_SOLUTION_SUBTASK = 'OPERATIONAL_SOLUTION_SUBTASK'
}

/** TranslatedAuditMetaDiscussionReply is the meta data type that is provided when a translated audit is for a discussion reply */
export type TranslatedAuditMetaDiscussionReply = {
  __typename: 'TranslatedAuditMetaDiscussionReply';
  discussionContent: Scalars['String']['output'];
  discussionID: Scalars['UUID']['output'];
  numberOfReplies: Scalars['Int']['output'];
  tableName: TableName;
  version: Scalars['Int']['output'];
};

/** TranslatedAuditMetaDocumentSolutionLink is the meta data type for a document solution link */
export type TranslatedAuditMetaDocumentSolutionLink = {
  __typename: 'TranslatedAuditMetaDocumentSolutionLink';
  /** Document ID  will always be present, regardless of if a document was deleted or not */
  documentID: Scalars['UUID']['output'];
  /** Document Name will be present if the document is still present and not deleted */
  documentName?: Maybe<Scalars['String']['output']>;
  documentNote?: Maybe<Scalars['String']['output']>;
  documentOtherType?: Maybe<Scalars['String']['output']>;
  documentRestricted?: Maybe<Scalars['Boolean']['output']>;
  /** Document type is the translated value of the document type enum */
  documentType?: Maybe<Scalars['String']['output']>;
  /** Document URL will only be visible if the user is a collaborator, or has assessment permission */
  documentURL?: Maybe<Scalars['String']['output']>;
  /** Document Visibility is the translated value of the restricted bool for a document */
  documentVisibility?: Maybe<Scalars['String']['output']>;
  needIsOther: Scalars['Boolean']['output'];
  needName: Scalars['String']['output'];
  solutionIsOther: Scalars['Boolean']['output'];
  solutionName: Scalars['String']['output'];
  solutionOtherHeader?: Maybe<Scalars['String']['output']>;
  tableName: TableName;
  version: Scalars['Int']['output'];
};

export type TranslatedAuditMetaGeneric = {
  __typename: 'TranslatedAuditMetaGeneric';
  relation: Scalars['String']['output'];
  /** Relation content can be nil under certain situations, for example if a record was deleted before the audit was translated */
  relationContent?: Maybe<Scalars['String']['output']>;
  tableName: TableName;
  version: Scalars['Int']['output'];
};

/** TranslatedAuditMetaDiscussionReply is the meta data type that is provided when a translated audit is for an operational need */
export type TranslatedAuditMetaOperationalNeed = {
  __typename: 'TranslatedAuditMetaOperationalNeed';
  isOther: Scalars['Boolean']['output'];
  needName: Scalars['String']['output'];
  tableName: TableName;
  version: Scalars['Int']['output'];
};

/** TranslatedAuditMetaOperationalSolution is the meta data type that is provided when a translated audit is for an operational solution */
export type TranslatedAuditMetaOperationalSolution = {
  __typename: 'TranslatedAuditMetaOperationalSolution';
  needIsOther: Scalars['Boolean']['output'];
  needName: Scalars['String']['output'];
  numberOfSubtasks: Scalars['Int']['output'];
  solutionIsOther: Scalars['Boolean']['output'];
  solutionMustFinish?: Maybe<Scalars['Time']['output']>;
  solutionMustStart?: Maybe<Scalars['Time']['output']>;
  solutionName: Scalars['String']['output'];
  solutionOtherHeader?: Maybe<Scalars['String']['output']>;
  /** SolutionStatus is the translated value for the type of solution */
  solutionStatus: Scalars['String']['output'];
  tableName: TableName;
  version: Scalars['Int']['output'];
};

/** TranslatedAuditMetaOperationalSolutionSubtask is the meta data type that is provided when a translated audit is for an operational solution subtask */
export type TranslatedAuditMetaOperationalSolutionSubtask = {
  __typename: 'TranslatedAuditMetaOperationalSolutionSubtask';
  needIsOther: Scalars['Boolean']['output'];
  needName: Scalars['String']['output'];
  numberOfSubtasks: Scalars['Int']['output'];
  solutionIsOther: Scalars['Boolean']['output'];
  solutionName: Scalars['String']['output'];
  solutionOtherHeader?: Maybe<Scalars['String']['output']>;
  /** The name of the subtask. If a subtask is updated, and then deleted before being translated, it is possible for this field to be nil. */
  subtaskName?: Maybe<Scalars['String']['output']>;
  tableName: TableName;
  version: Scalars['Int']['output'];
};

/** Represents the data type of the translation field */
export enum TranslationDataType {
  BOOLEAN = 'BOOLEAN',
  DATE = 'DATE',
  ENUM = 'ENUM',
  NUMBER = 'NUMBER',
  OBJECT = 'OBJECT',
  STRING = 'STRING',
  UUID = 'UUID'
}

/** Represents a translation question with no options */
export type TranslationField = {
  __typename: 'TranslationField';
  dataType: TranslationDataType;
  dbField: Scalars['String']['output'];
  /** Labels specifically for export/change history.  Takes priority over all other labels */
  exportLabel?: Maybe<Scalars['String']['output']>;
  formType: TranslationFormType;
  goField: Scalars['String']['output'];
  gqlField: Scalars['String']['output'];
  isArray?: Maybe<Scalars['Boolean']['output']>;
  isNote?: Maybe<Scalars['Boolean']['output']>;
  /** Is a question a followup to another that doesn't designate it's own readonly question/line */
  isOtherType?: Maybe<Scalars['Boolean']['output']>;
  label: Scalars['String']['output'];
  multiSelectLabel?: Maybe<Scalars['String']['output']>;
  /** Designates the order of the question in the form.  Uses integer as page and question order uses hundreths place.  Ex: 1.01, 1.02, 2.01, 2.02.  Uses integer as page and question order uses hundreths place.  Ex: 1.01, 1.02, 2.01, 2.02 */
  order: Scalars['Float']['output'];
  /** Field name for the parent question for fields that represent Other, Please specify, etc.  Used in change history to render parent question for context */
  otherParentField?: Maybe<Scalars['String']['output']>;
  /** Label for fields that reference more than one parent - Ex: Notes - 'Note for Model Basics' */
  parentReferencesLabel?: Maybe<Scalars['String']['output']>;
  readonlyLabel?: Maybe<Scalars['String']['output']>;
  sublabel?: Maybe<Scalars['String']['output']>;
  /** Table reference for fields that are of dataType UUID and reference a table in the database */
  tableReference?: Maybe<TableName>;
};

/** Represents a translation question with options */
export type TranslationFieldWithOptions = {
  __typename: 'TranslationFieldWithOptions';
  dataType: TranslationDataType;
  dbField: Scalars['String']['output'];
  /** Labels specifically for export/change history.  Takes priority over all other labels */
  exportLabel?: Maybe<Scalars['String']['output']>;
  exportOptions?: Maybe<Scalars['Map']['output']>;
  formType: TranslationFormType;
  goField: Scalars['String']['output'];
  gqlField: Scalars['String']['output'];
  isArray?: Maybe<Scalars['Boolean']['output']>;
  isNote?: Maybe<Scalars['Boolean']['output']>;
  /** Is a question a followup to another that doesn't designate it's own readonly question/line */
  isOtherType?: Maybe<Scalars['Boolean']['output']>;
  label: Scalars['String']['output'];
  multiSelectLabel?: Maybe<Scalars['String']['output']>;
  options: Scalars['Map']['output'];
  /** Designates the order of the question in the form.  Uses integer as page and question order uses hundreths place.  Ex: 1.01, 1.02, 2.01, 2.02 */
  order: Scalars['Float']['output'];
  /** Field name for the parent question for fields that represent Other, Please specify, etc.  Used in change history to render parent question for context */
  otherParentField?: Maybe<Scalars['String']['output']>;
  /** Label for fields that reference more than one parent - Ex: Notes - 'Note for Model Basics' */
  parentReferencesLabel?: Maybe<Scalars['String']['output']>;
  readonlyLabel?: Maybe<Scalars['String']['output']>;
  sublabel?: Maybe<Scalars['String']['output']>;
  /** Table reference for fields that are of dataType UUID and reference a table in the database */
  tableReference?: Maybe<TableName>;
};

/** Represents a translation question with options and child/children */
export type TranslationFieldWithOptionsAndChildren = {
  __typename: 'TranslationFieldWithOptionsAndChildren';
  childRelation: Scalars['Map']['output'];
  dataType: TranslationDataType;
  dbField: Scalars['String']['output'];
  /** Labels specifically for export/change history.  Takes priority over all other labels */
  exportLabel?: Maybe<Scalars['String']['output']>;
  exportOptions?: Maybe<Scalars['Map']['output']>;
  formType: TranslationFormType;
  goField: Scalars['String']['output'];
  gqlField: Scalars['String']['output'];
  isArray?: Maybe<Scalars['Boolean']['output']>;
  isNote?: Maybe<Scalars['Boolean']['output']>;
  /** Is a question a followup to another that doesn't designate it's own readonly question/line */
  isOtherType?: Maybe<Scalars['Boolean']['output']>;
  label: Scalars['String']['output'];
  multiSelectLabel?: Maybe<Scalars['String']['output']>;
  options: Scalars['Map']['output'];
  /** Designates the order of the question in the form.  Uses integer as page and question order uses hundreths place.  Ex: 1.01, 1.02, 2.01, 2.02 */
  order: Scalars['Float']['output'];
  /** Field name for the parent question for fields that represent Other, Please specify, etc.  Used in change history to render parent question for context */
  otherParentField?: Maybe<Scalars['String']['output']>;
  /** Label for fields that reference more than one parent - Ex: Notes - 'Note for Model Basics' */
  parentReferencesLabel?: Maybe<Scalars['String']['output']>;
  readonlyLabel?: Maybe<Scalars['String']['output']>;
  sublabel?: Maybe<Scalars['String']['output']>;
  /** Table reference for fields that are of dataType UUID and reference a table in the database */
  tableReference?: Maybe<TableName>;
};

/** Represents a translation question with options and parent */
export type TranslationFieldWithOptionsAndParent = {
  __typename: 'TranslationFieldWithOptionsAndParent';
  dataType: TranslationDataType;
  dbField: Scalars['String']['output'];
  /** Labels specifically for export/change history.  Takes priority over all other labels */
  exportLabel?: Maybe<Scalars['String']['output']>;
  exportOptions?: Maybe<Scalars['Map']['output']>;
  formType: TranslationFormType;
  goField: Scalars['String']['output'];
  gqlField: Scalars['String']['output'];
  isArray?: Maybe<Scalars['Boolean']['output']>;
  isNote?: Maybe<Scalars['Boolean']['output']>;
  /** Is a question a followup to another that doesn't designate it's own readonly question/line */
  isOtherType?: Maybe<Scalars['Boolean']['output']>;
  label: Scalars['String']['output'];
  multiSelectLabel?: Maybe<Scalars['String']['output']>;
  options: Scalars['Map']['output'];
  /** Designates the order of the question in the form.  Uses integer as page and question order uses hundreths place.  Ex: 1.01, 1.02, 2.01, 2.02 */
  order: Scalars['Float']['output'];
  /** Field name for the parent question for fields that represent Other, Please specify, etc.  Used in change history to render parent question for context */
  otherParentField?: Maybe<Scalars['String']['output']>;
  /** Label for fields that reference more than one parent - Ex: Notes - 'Note for Model Basics' */
  parentReferencesLabel?: Maybe<Scalars['String']['output']>;
  parentRelation: TranslationFieldWithOptionsAndChildren;
  readonlyLabel?: Maybe<Scalars['String']['output']>;
  sublabel?: Maybe<Scalars['String']['output']>;
  /** Table reference for fields that are of dataType UUID and reference a table in the database */
  tableReference?: Maybe<TableName>;
};

/** Represents a translation question with no options and a parent */
export type TranslationFieldWithParent = {
  __typename: 'TranslationFieldWithParent';
  dataType: TranslationDataType;
  dbField: Scalars['String']['output'];
  /** Labels specifically for export/change history.  Takes priority over all other labels */
  exportLabel?: Maybe<Scalars['String']['output']>;
  formType: TranslationFormType;
  goField: Scalars['String']['output'];
  gqlField: Scalars['String']['output'];
  isArray?: Maybe<Scalars['Boolean']['output']>;
  isNote?: Maybe<Scalars['Boolean']['output']>;
  /** Is a question a followup to another that doesn't designate it's own readonly question/line */
  isOtherType?: Maybe<Scalars['Boolean']['output']>;
  label: Scalars['String']['output'];
  multiSelectLabel?: Maybe<Scalars['String']['output']>;
  /** Designates the order of the question in the form.  Uses integer as page and question order uses hundreths place.  Ex: 1.01, 1.02, 2.01, 2.02 */
  order: Scalars['Float']['output'];
  /** Field name for the parent question for fields that represent Other, Please specify, etc.  Used in change history to render parent question for context */
  otherParentField?: Maybe<Scalars['String']['output']>;
  /** Label for fields that reference more than one parent - Ex: Notes - 'Note for Model Basics' */
  parentReferencesLabel?: Maybe<Scalars['String']['output']>;
  parentRelation: TranslationField;
  readonlyLabel?: Maybe<Scalars['String']['output']>;
  sublabel?: Maybe<Scalars['String']['output']>;
  /** Table reference for fields that are of dataType UUID and reference a table in the database */
  tableReference?: Maybe<TableName>;
};

/** Represents a translation question with options and parent and children */
export type TranslationFieldWithParentAndChildren = {
  __typename: 'TranslationFieldWithParentAndChildren';
  childRelation: Scalars['Map']['output'];
  dataType: TranslationDataType;
  dbField: Scalars['String']['output'];
  /** Labels specifically for export/change history.  Takes priority over all other labels */
  exportLabel?: Maybe<Scalars['String']['output']>;
  exportOptions?: Maybe<Scalars['Map']['output']>;
  formType: TranslationFormType;
  goField: Scalars['String']['output'];
  gqlField: Scalars['String']['output'];
  isArray?: Maybe<Scalars['Boolean']['output']>;
  isNote?: Maybe<Scalars['Boolean']['output']>;
  /** Is a question a followup to another that doesn't designate it's own readonly question/line */
  isOtherType?: Maybe<Scalars['Boolean']['output']>;
  label: Scalars['String']['output'];
  multiSelectLabel?: Maybe<Scalars['String']['output']>;
  options: Scalars['Map']['output'];
  /** Designates the order of the question in the form.  Uses integer as page and question order uses hundreths place.  Ex: 1.01, 1.02, 2.01, 2.02 */
  order: Scalars['Float']['output'];
  /** Field name for the parent question for fields that represent Other, Please specify, etc.  Used in change history to render parent question for context */
  otherParentField?: Maybe<Scalars['String']['output']>;
  /** Label for fields that reference more than one parent - Ex: Notes - 'Note for Model Basics' */
  parentReferencesLabel?: Maybe<Scalars['String']['output']>;
  parentRelation: TranslationFieldWithOptionsAndChildren;
  readonlyLabel?: Maybe<Scalars['String']['output']>;
  sublabel?: Maybe<Scalars['String']['output']>;
  /** Table reference for fields that are of dataType UUID and reference a table in the database */
  tableReference?: Maybe<TableName>;
};

/** Represents the FORM type of the translation field */
export enum TranslationFormType {
  BOOLEAN = 'BOOLEAN',
  CHECKBOX = 'CHECKBOX',
  DATEPICKER = 'DATEPICKER',
  MULTISELECT = 'MULTISELECT',
  NUMBER = 'NUMBER',
  RADIO = 'RADIO',
  RANGEINPUT = 'RANGEINPUT',
  SELECT = 'SELECT',
  TEXT = 'TEXT',
  TEXTAREA = 'TEXTAREA'
}

export enum TranslationQuestionType {
  NOTE = 'NOTE',
  OTHER = 'OTHER'
}

export enum TriStateAnswer {
  NO = 'NO',
  TBD = 'TBD',
  YES = 'YES'
}

export type UpdateOperationalSolutionSubtaskChangesInput = {
  name: Scalars['String']['input'];
  status: OperationalSolutionSubtaskStatus;
};

export type UpdateOperationalSolutionSubtaskInput = {
  changes: UpdateOperationalSolutionSubtaskChangesInput;
  id: Scalars['UUID']['input'];
};

export type UserAccount = {
  __typename: 'UserAccount';
  commonName: Scalars['String']['output'];
  email: Scalars['String']['output'];
  familyName: Scalars['String']['output'];
  givenName: Scalars['String']['output'];
  hasLoggedIn?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['UUID']['output'];
  isEUAID?: Maybe<Scalars['Boolean']['output']>;
  locale: Scalars['String']['output'];
  username: Scalars['String']['output'];
  zoneInfo: Scalars['String']['output'];
};

/** Represents a person response from the Okta API */
export type UserInfo = {
  __typename: 'UserInfo';
  displayName: Scalars['String']['output'];
  email: Scalars['String']['output'];
  firstName: Scalars['String']['output'];
  lastName: Scalars['String']['output'];
  username: Scalars['String']['output'];
};

/** UserNotification represents a notification about a specific Activity */
export type UserNotification = {
  __typename: 'UserNotification';
  activity: Activity;
  activityID: Scalars['UUID']['output'];
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  emailSent: Scalars['Boolean']['output'];
  id: Scalars['UUID']['output'];
  inAppSent: Scalars['Boolean']['output'];
  isRead: Scalars['Boolean']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  userID: Scalars['UUID']['output'];
};

export enum UserNotificationPreferenceFlag {
  EMAIL = 'EMAIL',
  IN_APP = 'IN_APP'
}

/** UserNotificationPreferences represents a users preferences about what type and where to receive a notification */
export type UserNotificationPreferences = {
  __typename: 'UserNotificationPreferences';
  addedAsCollaborator: Array<UserNotificationPreferenceFlag>;
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  dailyDigestComplete: Array<UserNotificationPreferenceFlag>;
  datesChanged: Array<UserNotificationPreferenceFlag>;
  datesChangedNotificationType?: Maybe<DatesChangedNotificationType>;
  id: Scalars['UUID']['output'];
  modelPlanShared: Array<UserNotificationPreferenceFlag>;
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  newDiscussionReply: Array<UserNotificationPreferenceFlag>;
  newModelPlan: Array<UserNotificationPreferenceFlag>;
  taggedInDiscussion: Array<UserNotificationPreferenceFlag>;
  taggedInDiscussionReply: Array<UserNotificationPreferenceFlag>;
  userID: Scalars['UUID']['output'];
};

/** UserNotificationPreferencesChanges represents the ways that a UserNotifications Preferences object can be updated */
export type UserNotificationPreferencesChanges = {
  addedAsCollaborator?: InputMaybe<Array<UserNotificationPreferenceFlag>>;
  dailyDigestComplete?: InputMaybe<Array<UserNotificationPreferenceFlag>>;
  datesChanged?: InputMaybe<Array<UserNotificationPreferenceFlag>>;
  datesChangedNotificationType?: InputMaybe<DatesChangedNotificationType>;
  modelPlanShared?: InputMaybe<Array<UserNotificationPreferenceFlag>>;
  newDiscussionReply?: InputMaybe<Array<UserNotificationPreferenceFlag>>;
  newModelPlan?: InputMaybe<Array<UserNotificationPreferenceFlag>>;
  taggedInDiscussion?: InputMaybe<Array<UserNotificationPreferenceFlag>>;
  taggedInDiscussionReply?: InputMaybe<Array<UserNotificationPreferenceFlag>>;
};

/** This is a wrapper for all information for a user  */
export type UserNotifications = {
  __typename: 'UserNotifications';
  /** This includes all notifications */
  notifications: Array<UserNotification>;
  /** This returns the number of unread notifications */
  numUnreadNotifications: Scalars['Int']['output'];
  /** This renders only the unread notifications */
  unreadNotifications: Array<UserNotification>;
};

export type UserViewCustomization = {
  __typename: 'UserViewCustomization';
  createdBy: Scalars['UUID']['output'];
  createdByUserAccount: UserAccount;
  createdDts: Scalars['Time']['output'];
  id: Scalars['UUID']['output'];
  modifiedBy?: Maybe<Scalars['UUID']['output']>;
  modifiedByUserAccount?: Maybe<UserAccount>;
  modifiedDts?: Maybe<Scalars['Time']['output']>;
  possibleOperationalSolutions: Array<OperationalSolutionKey>;
  userAccount: UserAccount;
  userId: Scalars['UUID']['output'];
  viewCustomization: Array<ViewCustomizationType>;
};

export type UserViewCustomizationChanges = {
  possibleOperationalSolutions?: InputMaybe<Array<OperationalSolutionKey>>;
  viewCustomization?: InputMaybe<Array<ViewCustomizationType>>;
};

export enum ViewCustomizationType {
  ALL_MODEL_PLANS = 'ALL_MODEL_PLANS',
  FOLLOWED_MODELS = 'FOLLOWED_MODELS',
  MODELS_APPROACHING_CLEARANCE = 'MODELS_APPROACHING_CLEARANCE',
  MODELS_BY_OPERATIONAL_SOLUTION = 'MODELS_BY_OPERATIONAL_SOLUTION',
  MODELS_WITH_CR_TDL = 'MODELS_WITH_CR_TDL',
  MY_MODEL_PLANS = 'MY_MODEL_PLANS'
}

export enum WaiverType {
  FRAUD_ABUSE = 'FRAUD_ABUSE',
  MEDICAID = 'MEDICAID',
  PROGRAM_PAYMENT = 'PROGRAM_PAYMENT'
}

export enum YesNoOtherType {
  NO = 'NO',
  OTHER = 'OTHER',
  YES = 'YES'
}

export enum YesNoType {
  NO = 'NO',
  YES = 'YES'
}

export type GetAllBasicsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetAllBasicsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, nameHistory: Array<string>, isCollaborator: boolean, basics: { __typename: 'PlanBasics', id: UUID, demoCode?: string | null, amsModelID?: string | null, modelCategory?: ModelCategory | null, additionalModelCategories: Array<ModelCategory>, cmsCenters: Array<CmsCenter>, cmmiGroups: Array<CmmiGroup>, modelType: Array<ModelType>, modelTypeOther?: string | null, problem?: string | null, goal?: string | null, testInterventions?: string | null, note?: string | null, completeICIP?: Time | null, clearanceStarts?: Time | null, clearanceEnds?: Time | null, announced?: Time | null, applicationsStart?: Time | null, applicationsEnd?: Time | null, performancePeriodStarts?: Time | null, performancePeriodEnds?: Time | null, wrapUpEnds?: Time | null, highLevelNote?: string | null, phasedIn?: boolean | null, phasedInNote?: string | null, createdDts: Time, modifiedDts?: Time | null, status: TaskStatus } } };

export type GetBasicsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetBasicsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, abbreviation?: string | null, nameHistory: Array<string>, basics: { __typename: 'PlanBasics', id: UUID, demoCode?: string | null, amsModelID?: string | null, modelCategory?: ModelCategory | null, additionalModelCategories: Array<ModelCategory>, cmsCenters: Array<CmsCenter>, cmmiGroups: Array<CmmiGroup> } } };

export type GetMilestonesQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetMilestonesQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, basics: { __typename: 'PlanBasics', id: UUID, completeICIP?: Time | null, clearanceStarts?: Time | null, clearanceEnds?: Time | null, announced?: Time | null, applicationsStart?: Time | null, applicationsEnd?: Time | null, performancePeriodStarts?: Time | null, performancePeriodEnds?: Time | null, highLevelNote?: string | null, wrapUpEnds?: Time | null, phasedIn?: boolean | null, phasedInNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null } } };

export type GetOverviewQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetOverviewQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, basics: { __typename: 'PlanBasics', id: UUID, modelType: Array<ModelType>, modelTypeOther?: string | null, problem?: string | null, goal?: string | null, testInterventions?: string | null, note?: string | null } } };

export type UpdateBasicsMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: PlanBasicsChanges;
}>;


export type UpdateBasicsMutation = { __typename: 'Mutation', updatePlanBasics: { __typename: 'PlanBasics', id: UUID } };

export type UpdateModelPlanAndBasicsMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: ModelPlanChanges;
  basicsId: Scalars['UUID']['input'];
  basicsChanges: PlanBasicsChanges;
}>;


export type UpdateModelPlanAndBasicsMutation = { __typename: 'Mutation', updateModelPlan: { __typename: 'ModelPlan', id: UUID }, updatePlanBasics: { __typename: 'PlanBasics', id: UUID } };

export type GetAllBeneficiariesQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetAllBeneficiariesQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, beneficiaries: { __typename: 'PlanBeneficiaries', id: UUID, modelPlanID: UUID, beneficiaries: Array<BeneficiariesType>, diseaseSpecificGroup?: string | null, beneficiariesOther?: string | null, beneficiariesNote?: string | null, treatDualElligibleDifferent?: TriStateAnswer | null, treatDualElligibleDifferentHow?: string | null, treatDualElligibleDifferentNote?: string | null, excludeCertainCharacteristics?: TriStateAnswer | null, excludeCertainCharacteristicsCriteria?: string | null, excludeCertainCharacteristicsNote?: string | null, numberPeopleImpacted?: number | null, estimateConfidence?: ConfidenceType | null, confidenceNote?: string | null, beneficiarySelectionMethod: Array<SelectionMethodType>, beneficiarySelectionOther?: string | null, beneficiarySelectionNote?: string | null, beneficiarySelectionFrequency: Array<FrequencyType>, beneficiarySelectionFrequencyContinually?: string | null, beneficiarySelectionFrequencyOther?: string | null, beneficiarySelectionFrequencyNote?: string | null, beneficiaryRemovalFrequency: Array<FrequencyType>, beneficiaryRemovalFrequencyContinually?: string | null, beneficiaryRemovalFrequencyNote?: string | null, beneficiaryRemovalFrequencyOther?: string | null, beneficiaryOverlap?: OverlapType | null, beneficiaryOverlapNote?: string | null, precedenceRules: Array<YesNoType>, precedenceRulesYes?: string | null, precedenceRulesNo?: string | null, precedenceRulesNote?: string | null, createdDts: Time, modifiedDts?: Time | null, status: TaskStatus } } };

export type GetBeneficiaryIdentificationQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetBeneficiaryIdentificationQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, beneficiaries: { __typename: 'PlanBeneficiaries', id: UUID, beneficiaries: Array<BeneficiariesType>, diseaseSpecificGroup?: string | null, beneficiariesOther?: string | null, beneficiariesNote?: string | null, treatDualElligibleDifferent?: TriStateAnswer | null, treatDualElligibleDifferentHow?: string | null, treatDualElligibleDifferentNote?: string | null, excludeCertainCharacteristics?: TriStateAnswer | null, excludeCertainCharacteristicsCriteria?: string | null, excludeCertainCharacteristicsNote?: string | null } } };

export type GetFrequencyQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetFrequencyQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, beneficiaries: { __typename: 'PlanBeneficiaries', id: UUID, beneficiarySelectionFrequency: Array<FrequencyType>, beneficiarySelectionFrequencyContinually?: string | null, beneficiarySelectionFrequencyNote?: string | null, beneficiarySelectionFrequencyOther?: string | null, beneficiaryRemovalFrequency: Array<FrequencyType>, beneficiaryRemovalFrequencyContinually?: string | null, beneficiaryRemovalFrequencyNote?: string | null, beneficiaryRemovalFrequencyOther?: string | null, beneficiaryOverlap?: OverlapType | null, beneficiaryOverlapNote?: string | null, precedenceRules: Array<YesNoType>, precedenceRulesYes?: string | null, precedenceRulesNo?: string | null, precedenceRulesNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type GetPeopleImpactedQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetPeopleImpactedQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, beneficiaries: { __typename: 'PlanBeneficiaries', id: UUID, numberPeopleImpacted?: number | null, estimateConfidence?: ConfidenceType | null, confidenceNote?: string | null, beneficiarySelectionNote?: string | null, beneficiarySelectionOther?: string | null, beneficiarySelectionMethod: Array<SelectionMethodType> } } };

export type UpdateModelPlanBeneficiariesMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: PlanBeneficiariesChanges;
}>;


export type UpdateModelPlanBeneficiariesMutation = { __typename: 'Mutation', updatePlanBeneficiaries: { __typename: 'PlanBeneficiaries', id: UUID } };

export type CreateCrMutationVariables = Exact<{
  input: PlanCrCreateInput;
}>;


export type CreateCrMutation = { __typename: 'Mutation', createPlanCR: { __typename: 'PlanCR', id: UUID, modelPlanID: UUID, idNumber: string, dateInitiated: Time, dateImplemented?: Time | null, title: string, note?: string | null } };

export type CreateTdlMutationVariables = Exact<{
  input: PlanTdlCreateInput;
}>;


export type CreateTdlMutation = { __typename: 'Mutation', createPlanTDL: { __typename: 'PlanTDL', id: UUID, modelPlanID: UUID, idNumber: string, dateInitiated: Time, title: string, note?: string | null } };

export type DeleteCrMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type DeleteCrMutation = { __typename: 'Mutation', deletePlanCR: { __typename: 'PlanCR', id: UUID, modelPlanID: UUID, idNumber: string, dateInitiated: Time, title: string, note?: string | null } };

export type DeleteTdlMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type DeleteTdlMutation = { __typename: 'Mutation', deletePlanTDL: { __typename: 'PlanTDL', id: UUID, modelPlanID: UUID, idNumber: string, dateInitiated: Time, title: string, note?: string | null } };

export type GetCrQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetCrQuery = { __typename: 'Query', planCR: { __typename: 'PlanCR', id: UUID, title: string, idNumber: string, dateInitiated: Time, dateImplemented?: Time | null, note?: string | null } };

export type GetCrtdLsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetCrtdLsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, isCollaborator: boolean, crs: Array<{ __typename: 'PlanCR', id: UUID, modelPlanID: UUID, title: string, idNumber: string, dateInitiated: Time, dateImplemented?: Time | null, note?: string | null }>, tdls: Array<{ __typename: 'PlanTDL', id: UUID, modelPlanID: UUID, title: string, idNumber: string, dateInitiated: Time, note?: string | null }> } };

export type GetTdlQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetTdlQuery = { __typename: 'Query', planTDL: { __typename: 'PlanTDL', id: UUID, title: string, idNumber: string, dateInitiated: Time, note?: string | null } };

export type UpdateCrMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: PlanCrChanges;
}>;


export type UpdateCrMutation = { __typename: 'Mutation', updatePlanCR: { __typename: 'PlanCR', id: UUID, modelPlanID: UUID, idNumber: string, dateInitiated: Time, dateImplemented?: Time | null, title: string, note?: string | null } };

export type UpdateTdlMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: PlanTdlChanges;
}>;


export type UpdateTdlMutation = { __typename: 'Mutation', updatePlanTDL: { __typename: 'PlanTDL', id: UUID, modelPlanID: UUID, idNumber: string, dateInitiated: Time, title: string, note?: string | null } };

export type GetChangeHistoryQueryVariables = Exact<{
  modelPlanID: Scalars['UUID']['input'];
}>;


export type GetChangeHistoryQuery = { __typename: 'Query', translatedAuditCollection?: Array<{ __typename: 'TranslatedAudit', id: UUID, tableName: TableName, date: Time, action: DatabaseOperation, actorName: string, translatedFields: Array<{ __typename: 'TranslatedAuditField', id: UUID, changeType: AuditFieldChangeType, dataType: TranslationDataType, fieldName: string, fieldNameTranslated: string, referenceLabel?: string | null, questionType?: TranslationQuestionType | null, notApplicableQuestions?: Array<string> | null, old?: any | null, oldTranslated?: any | null, new?: any | null, newTranslated?: any | null }>, metaData?: { __typename: 'TranslatedAuditMetaBaseStruct', version: number, tableName: TableName } | { __typename: 'TranslatedAuditMetaDiscussionReply', version: number, tableName: TableName, discussionID: UUID, discussionContent: string, numberOfReplies: number } | { __typename: 'TranslatedAuditMetaDocumentSolutionLink', version: number, tableName: TableName, solutionName: string, solutionOtherHeader?: string | null, solutionIsOther: boolean, needName: string, needIsOther: boolean, documentName?: string | null, documentType?: string | null, documentOtherType?: string | null, documentVisibility?: string | null, documentNote?: string | null, documentURL?: string | null, documentID: UUID } | { __typename: 'TranslatedAuditMetaGeneric', version: number, tableName: TableName, relation: string, relationContent?: string | null } | { __typename: 'TranslatedAuditMetaOperationalNeed', version: number, tableName: TableName, needName: string, isOther: boolean } | { __typename: 'TranslatedAuditMetaOperationalSolution', version: number, tableName: TableName, needName: string, needIsOther: boolean, solutionName: string, solutionOtherHeader?: string | null, solutionIsOther: boolean, solutionStatus: string, solutionMustStart?: Time | null, solutionMustFinish?: Time | null, numberOfSubtasks: number } | { __typename: 'TranslatedAuditMetaOperationalSolutionSubtask', version: number, tableName: TableName, needName: string, needIsOther: boolean, solutionName: string, solutionOtherHeader?: string | null, solutionIsOther: boolean, subtaskName?: string | null, numberOfSubtasks: number } | null }> | null };

export type CreateModelPlanCollaboratorMutationVariables = Exact<{
  input: PlanCollaboratorCreateInput;
}>;


export type CreateModelPlanCollaboratorMutation = { __typename: 'Mutation', createPlanCollaborator: { __typename: 'PlanCollaborator', teamRoles: Array<TeamRole>, userID: UUID, modelPlanID: UUID, userAccount: { __typename: 'UserAccount', id: UUID, commonName: string, email: string } } };

export type DeleteModelPlanCollaboratorMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type DeleteModelPlanCollaboratorMutation = { __typename: 'Mutation', deletePlanCollaborator: { __typename: 'PlanCollaborator', id: UUID, teamRoles: Array<TeamRole>, userID: UUID, modelPlanID: UUID, userAccount: { __typename: 'UserAccount', id: UUID, commonName: string, email: string, username: string } } };

export type GetIndividualModelPlanCollaboratorQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetIndividualModelPlanCollaboratorQuery = { __typename: 'Query', planCollaboratorByID: { __typename: 'PlanCollaborator', id: UUID, userID: UUID, teamRoles: Array<TeamRole>, userAccount: { __typename: 'UserAccount', id: UUID, commonName: string, email: string, username: string } } };

export type GetIsCollaboratorQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetIsCollaboratorQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, isCollaborator: boolean } };

export type GetModelCollaboratorsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetModelCollaboratorsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, collaborators: Array<{ __typename: 'PlanCollaborator', id: UUID, userID: UUID, teamRoles: Array<TeamRole>, modelPlanID: UUID, createdDts: Time, userAccount: { __typename: 'UserAccount', id: UUID, commonName: string, email: string, username: string } }> } };

export type UpdateModelPlanCollaboratorMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  newRole: Array<TeamRole> | TeamRole;
}>;


export type UpdateModelPlanCollaboratorMutation = { __typename: 'Mutation', updatePlanCollaborator: { __typename: 'PlanCollaborator', teamRoles: Array<TeamRole>, userID: UUID, modelPlanID: UUID, userAccount: { __typename: 'UserAccount', commonName: string, email: string, username: string } } };

export type CreateModelPlanDiscussionMutationVariables = Exact<{
  input: PlanDiscussionCreateInput;
}>;


export type CreateModelPlanDiscussionMutation = { __typename: 'Mutation', createPlanDiscussion: { __typename: 'PlanDiscussion', id: UUID, createdBy: UUID, createdDts: Time, content?: { __typename: 'TaggedContent', rawContent: string } | null } };

export type GetModelPlanDiscussionsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetModelPlanDiscussionsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, isCollaborator: boolean, discussions: Array<{ __typename: 'PlanDiscussion', id: UUID, createdBy: UUID, createdDts: Time, userRole?: DiscussionUserRole | null, userRoleDescription?: string | null, isAssessment: boolean, content?: { __typename: 'TaggedContent', rawContent: string } | null, createdByUserAccount: { __typename: 'UserAccount', commonName: string }, replies: Array<{ __typename: 'DiscussionReply', id: UUID, discussionID: UUID, userRole?: DiscussionUserRole | null, userRoleDescription?: string | null, isAssessment: boolean, createdBy: UUID, createdDts: Time, content?: { __typename: 'TaggedContent', rawContent: string } | null, createdByUserAccount: { __typename: 'UserAccount', commonName: string } }> }> } };

export type GetMostRecentRoleSelectionQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMostRecentRoleSelectionQuery = { __typename: 'Query', mostRecentDiscussionRoleSelection?: { __typename: 'DiscussionRoleSelection', userRole: DiscussionUserRole, userRoleDescription?: string | null } | null };

export type DeleteModelPlanDocumentMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type DeleteModelPlanDocumentMutation = { __typename: 'Mutation', deletePlanDocument: number };

export type GetModelPlanDocumentQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetModelPlanDocumentQuery = { __typename: 'Query', planDocument: { __typename: 'PlanDocument', id: UUID, modelPlanID: UUID, fileType: string, bucket: string, fileKey: string, virusScanned: boolean, virusClean: boolean, fileName: string, fileSize: number, restricted: boolean, documentType: DocumentType, otherType?: string | null, createdDts: Time } };

export type GetModelPlanDocumentsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetModelPlanDocumentsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, isCollaborator: boolean, documents: Array<{ __typename: 'PlanDocument', id: UUID, virusScanned: boolean, virusClean: boolean, fileName: string, fileType: string, downloadUrl?: string | null, restricted: boolean, documentType: DocumentType, createdDts: Time, optionalNotes?: string | null, otherType?: string | null, numLinkedSolutions: number, isLink: boolean, url?: string | null }> } };

export type LinkNewPlanDocumentMutationVariables = Exact<{
  input: PlanDocumentLinkInput;
}>;


export type LinkNewPlanDocumentMutation = { __typename: 'Mutation', linkNewPlanDocument: { __typename: 'PlanDocument', id: UUID } };

export type UploadNewPlanDocumentMutationVariables = Exact<{
  input: PlanDocumentInput;
}>;


export type UploadNewPlanDocumentMutation = { __typename: 'Mutation', uploadNewPlanDocument: { __typename: 'PlanDocument', id: UUID } };

export type AddPlanFavoriteMutationVariables = Exact<{
  modelPlanID: Scalars['UUID']['input'];
}>;


export type AddPlanFavoriteMutation = { __typename: 'Mutation', addPlanFavorite: { __typename: 'PlanFavorite', modelPlanID: UUID, userID: UUID } };

export type DeletePlanFavoriteMutationVariables = Exact<{
  modelPlanID: Scalars['UUID']['input'];
}>;


export type DeletePlanFavoriteMutation = { __typename: 'Mutation', deletePlanFavorite: { __typename: 'PlanFavorite', modelPlanID: UUID, userID: UUID } };

export type CreatReportAProblemMutationVariables = Exact<{
  input: ReportAProblemInput;
}>;


export type CreatReportAProblemMutation = { __typename: 'Mutation', reportAProblem: boolean };

export type CreatSendFeedbackMutationVariables = Exact<{
  input: SendFeedbackEmailInput;
}>;


export type CreatSendFeedbackMutation = { __typename: 'Mutation', sendFeedbackEmail: boolean };

export type ReadyForReviewUserFragmentFragment = { __typename: 'UserAccount', id: UUID, commonName: string };

export type GetAllGeneralCharacteristicsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetAllGeneralCharacteristicsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, generalCharacteristics: { __typename: 'PlanGeneralCharacteristics', id: UUID, isNewModel?: boolean | null, existingModel?: string | null, resemblesExistingModel?: YesNoOtherType | null, resemblesExistingModelWhyHow?: string | null, resemblesExistingModelHow?: string | null, resemblesExistingModelNote?: string | null, resemblesExistingModelOtherSpecify?: string | null, resemblesExistingModelOtherSelected?: boolean | null, resemblesExistingModelOtherOption?: string | null, participationInModelPrecondition?: YesNoOtherType | null, participationInModelPreconditionOtherSpecify?: string | null, participationInModelPreconditionOtherSelected?: boolean | null, participationInModelPreconditionOtherOption?: string | null, participationInModelPreconditionWhyHow?: string | null, participationInModelPreconditionNote?: string | null, hasComponentsOrTracks?: boolean | null, hasComponentsOrTracksDiffer?: string | null, hasComponentsOrTracksNote?: string | null, agencyOrStateHelp: Array<AgencyOrStateHelpType>, agencyOrStateHelpOther?: string | null, agencyOrStateHelpNote?: string | null, alternativePaymentModelTypes: Array<AlternativePaymentModelType>, alternativePaymentModelNote?: string | null, keyCharacteristics: Array<KeyCharacteristic>, keyCharacteristicsOther?: string | null, keyCharacteristicsNote?: string | null, collectPlanBids?: boolean | null, collectPlanBidsNote?: string | null, managePartCDEnrollment?: boolean | null, managePartCDEnrollmentNote?: string | null, planContractUpdated?: boolean | null, planContractUpdatedNote?: string | null, careCoordinationInvolved?: boolean | null, careCoordinationInvolvedDescription?: string | null, careCoordinationInvolvedNote?: string | null, additionalServicesInvolved?: boolean | null, additionalServicesInvolvedDescription?: string | null, additionalServicesInvolvedNote?: string | null, communityPartnersInvolved?: boolean | null, communityPartnersInvolvedDescription?: string | null, communityPartnersInvolvedNote?: string | null, geographiesTargeted?: boolean | null, geographiesTargetedTypes: Array<GeographyType>, geographiesStatesAndTerritories: Array<StatesAndTerritories>, geographiesRegionTypes: Array<GeographyRegionType>, geographiesTargetedTypesOther?: string | null, geographiesTargetedAppliedTo: Array<GeographyApplication>, geographiesTargetedAppliedToOther?: string | null, geographiesTargetedNote?: string | null, participationOptions?: boolean | null, participationOptionsNote?: string | null, agreementTypes: Array<AgreementType>, agreementTypesOther?: string | null, multiplePatricipationAgreementsNeeded?: boolean | null, multiplePatricipationAgreementsNeededNote?: string | null, rulemakingRequired?: boolean | null, rulemakingRequiredDescription?: string | null, rulemakingRequiredNote?: string | null, authorityAllowances: Array<AuthorityAllowance>, authorityAllowancesOther?: string | null, authorityAllowancesNote?: string | null, waiversRequired?: boolean | null, waiversRequiredTypes: Array<WaiverType>, waiversRequiredNote?: string | null, createdDts: Time, modifiedDts?: Time | null, status: TaskStatus, resemblesExistingModelWhich?: { __typename: 'ExistingModelLinks', names: Array<string> } | null, participationInModelPreconditionWhich?: { __typename: 'ExistingModelLinks', names: Array<string> } | null } } };

export type GetAuthorityQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetAuthorityQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, generalCharacteristics: { __typename: 'PlanGeneralCharacteristics', id: UUID, rulemakingRequired?: boolean | null, rulemakingRequiredDescription?: string | null, rulemakingRequiredNote?: string | null, authorityAllowances: Array<AuthorityAllowance>, authorityAllowancesOther?: string | null, authorityAllowancesNote?: string | null, waiversRequired?: boolean | null, waiversRequiredTypes: Array<WaiverType>, waiversRequiredNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null } } };

export type GetGeneralCharacteristicsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetGeneralCharacteristicsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, generalCharacteristics: { __typename: 'PlanGeneralCharacteristics', id: UUID, isNewModel?: boolean | null, currentModelPlanID?: UUID | null, existingModelID?: number | null, resemblesExistingModel?: YesNoOtherType | null, resemblesExistingModelWhyHow?: string | null, resemblesExistingModelHow?: string | null, resemblesExistingModelNote?: string | null, resemblesExistingModelOtherSpecify?: string | null, resemblesExistingModelOtherSelected?: boolean | null, resemblesExistingModelOtherOption?: string | null, participationInModelPrecondition?: YesNoOtherType | null, participationInModelPreconditionOtherSpecify?: string | null, participationInModelPreconditionOtherSelected?: boolean | null, participationInModelPreconditionOtherOption?: string | null, participationInModelPreconditionWhyHow?: string | null, participationInModelPreconditionNote?: string | null, hasComponentsOrTracks?: boolean | null, hasComponentsOrTracksDiffer?: string | null, hasComponentsOrTracksNote?: string | null, resemblesExistingModelWhich?: { __typename: 'ExistingModelLinks', links: Array<{ __typename: 'ExistingModelLink', id?: UUID | null, existingModelID?: number | null, currentModelPlanID?: UUID | null }> } | null, participationInModelPreconditionWhich?: { __typename: 'ExistingModelLinks', links: Array<{ __typename: 'ExistingModelLink', id?: UUID | null, existingModelID?: number | null, currentModelPlanID?: UUID | null }> } | null } } };

export type GetInvolvementsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetInvolvementsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, generalCharacteristics: { __typename: 'PlanGeneralCharacteristics', id: UUID, careCoordinationInvolved?: boolean | null, careCoordinationInvolvedDescription?: string | null, careCoordinationInvolvedNote?: string | null, additionalServicesInvolved?: boolean | null, additionalServicesInvolvedDescription?: string | null, additionalServicesInvolvedNote?: string | null, communityPartnersInvolved?: boolean | null, communityPartnersInvolvedDescription?: string | null, communityPartnersInvolvedNote?: string | null } } };

export type GetKeyCharacteristicsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetKeyCharacteristicsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, generalCharacteristics: { __typename: 'PlanGeneralCharacteristics', id: UUID, agencyOrStateHelp: Array<AgencyOrStateHelpType>, agencyOrStateHelpOther?: string | null, agencyOrStateHelpNote?: string | null, alternativePaymentModelTypes: Array<AlternativePaymentModelType>, alternativePaymentModelNote?: string | null, keyCharacteristics: Array<KeyCharacteristic>, keyCharacteristicsNote?: string | null, keyCharacteristicsOther?: string | null, collectPlanBids?: boolean | null, collectPlanBidsNote?: string | null, managePartCDEnrollment?: boolean | null, managePartCDEnrollmentNote?: string | null, planContractUpdated?: boolean | null, planContractUpdatedNote?: string | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type GetTargetsAndOptionsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetTargetsAndOptionsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, generalCharacteristics: { __typename: 'PlanGeneralCharacteristics', id: UUID, geographiesTargeted?: boolean | null, geographiesTargetedTypes: Array<GeographyType>, geographiesStatesAndTerritories: Array<StatesAndTerritories>, geographiesRegionTypes: Array<GeographyRegionType>, geographiesTargetedTypesOther?: string | null, geographiesTargetedAppliedTo: Array<GeographyApplication>, geographiesTargetedAppliedToOther?: string | null, geographiesTargetedNote?: string | null, participationOptions?: boolean | null, participationOptionsNote?: string | null, agreementTypes: Array<AgreementType>, agreementTypesOther?: string | null, multiplePatricipationAgreementsNeeded?: boolean | null, multiplePatricipationAgreementsNeededNote?: string | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type UpdateExistingModelLinksMutationVariables = Exact<{
  modelPlanID: Scalars['UUID']['input'];
  fieldName: ExisitingModelLinkFieldType;
  existingModelIDs?: InputMaybe<Array<Scalars['Int']['input']> | Scalars['Int']['input']>;
  currentModelPlanIDs?: InputMaybe<Array<Scalars['UUID']['input']> | Scalars['UUID']['input']>;
}>;


export type UpdateExistingModelLinksMutation = { __typename: 'Mutation', updateExistingModelLinks: { __typename: 'ExistingModelLinks', links: Array<{ __typename: 'ExistingModelLink', id?: UUID | null, existingModelID?: number | null, model: { __typename: 'ExistingModel', modelName: string, stage: string, numberOfParticipants?: string | null, keywords?: string | null } | { __typename: 'ModelPlan', modelName: string, abbreviation?: string | null } }> } };

export type UpdatePlanGeneralCharacteristicsMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: PlanGeneralCharacteristicsChanges;
}>;


export type UpdatePlanGeneralCharacteristicsMutation = { __typename: 'Mutation', updatePlanGeneralCharacteristics: { __typename: 'PlanGeneralCharacteristics', id: UUID } };

export type GetHomepageSettingsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetHomepageSettingsQuery = { __typename: 'Query', userViewCustomization: { __typename: 'UserViewCustomization', id: UUID, viewCustomization: Array<ViewCustomizationType>, possibleOperationalSolutions: Array<OperationalSolutionKey> } };

export type UpdateHomepageSettingsMutationVariables = Exact<{
  changes: UserViewCustomizationChanges;
}>;


export type UpdateHomepageSettingsMutation = { __typename: 'Mutation', updateUserViewCustomization: { __typename: 'UserViewCustomization', id: UUID } };

export type CreateDocumentSolutionLinksMutationVariables = Exact<{
  solutionID: Scalars['UUID']['input'];
  documentIDs: Array<Scalars['UUID']['input']> | Scalars['UUID']['input'];
}>;


export type CreateDocumentSolutionLinksMutation = { __typename: 'Mutation', createPlanDocumentSolutionLinks?: Array<{ __typename: 'PlanDocumentSolutionLink', id: UUID }> | null };

export type CreateOperationalSolutionMutationVariables = Exact<{
  operationalNeedID: Scalars['UUID']['input'];
  solutionType?: InputMaybe<OperationalSolutionKey>;
  changes: OperationalSolutionChanges;
}>;


export type CreateOperationalSolutionMutation = { __typename: 'Mutation', createOperationalSolution: { __typename: 'OperationalSolution', id: UUID, nameOther?: string | null, needed?: boolean | null, key?: OperationalSolutionKey | null } };

export type CreateOperationalSolutionSubtasksMutationVariables = Exact<{
  solutionID: Scalars['UUID']['input'];
  inputs: Array<CreateOperationalSolutionSubtaskInput> | CreateOperationalSolutionSubtaskInput;
}>;


export type CreateOperationalSolutionSubtasksMutation = { __typename: 'Mutation', createOperationalSolutionSubtasks?: Array<{ __typename: 'OperationalSolutionSubtask', name: string, status: OperationalSolutionSubtaskStatus }> | null };

export type DeleteDocumentSolutionLinkMutationVariables = Exact<{
  solutionID: Scalars['UUID']['input'];
  documentIDs: Array<Scalars['UUID']['input']> | Scalars['UUID']['input'];
}>;


export type DeleteDocumentSolutionLinkMutation = { __typename: 'Mutation', removePlanDocumentSolutionLinks: boolean };

export type DeleteOperationalSolutionSubtaskMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type DeleteOperationalSolutionSubtaskMutation = { __typename: 'Mutation', deleteOperationalSolutionSubtask: number };

export type GetModelsBySolutionQueryVariables = Exact<{
  operationalSolutionKey: OperationalSolutionKey;
}>;


export type GetModelsBySolutionQuery = { __typename: 'Query', modelPlansByOperationalSolutionKey: Array<{ __typename: 'ModelPlanAndPossibleOperationalSolution', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, abbreviation?: string | null, status: ModelStatus, modelBySolutionStatus: ModelBySolutionStatus, basics: { __typename: 'PlanBasics', id: UUID, modelCategory?: ModelCategory | null, performancePeriodStarts?: Time | null, performancePeriodEnds?: Time | null } } }> };

export type GetOperationalNeedQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
  includeNotNeeded?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type GetOperationalNeedQuery = { __typename: 'Query', operationalNeed: { __typename: 'OperationalNeed', id: UUID, modelPlanID: UUID, name?: string | null, key?: OperationalNeedKey | null, nameOther?: string | null, needed?: boolean | null, solutions: Array<{ __typename: 'OperationalSolution', id: UUID, name?: string | null, key?: OperationalSolutionKey | null, pocName?: string | null, pocEmail?: string | null, needed?: boolean | null, nameOther?: string | null, isOther: boolean, isCommonSolution: boolean, otherHeader?: string | null, mustStartDts?: Time | null, mustFinishDts?: Time | null, status: OpSolutionStatus }> } };

export type GetOperationalNeedAnswerQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
  generalCharacteristics: Scalars['Boolean']['input'];
  participantsAndProviders: Scalars['Boolean']['input'];
  beneficiaries: Scalars['Boolean']['input'];
  opsEvalAndLearning: Scalars['Boolean']['input'];
  payments: Scalars['Boolean']['input'];
  managePartCDEnrollment: Scalars['Boolean']['input'];
  collectPlanBids: Scalars['Boolean']['input'];
  planContractUpdated: Scalars['Boolean']['input'];
  agreementTypes: Scalars['Boolean']['input'];
  recruitmentMethod: Scalars['Boolean']['input'];
  selectionMethod: Scalars['Boolean']['input'];
  communicationMethod: Scalars['Boolean']['input'];
  providerOverlap: Scalars['Boolean']['input'];
  participantsIds: Scalars['Boolean']['input'];
  beneficiaryOverlap: Scalars['Boolean']['input'];
  helpdeskUse: Scalars['Boolean']['input'];
  iddocSupport: Scalars['Boolean']['input'];
  benchmarkForPerformance: Scalars['Boolean']['input'];
  appealPerformance: Scalars['Boolean']['input'];
  appealFeedback: Scalars['Boolean']['input'];
  appealPayments: Scalars['Boolean']['input'];
  appealOther: Scalars['Boolean']['input'];
  evaluationApproaches: Scalars['Boolean']['input'];
  dataNeededForMonitoring: Scalars['Boolean']['input'];
  dataToSendParticicipants: Scalars['Boolean']['input'];
  modelLearningSystems: Scalars['Boolean']['input'];
  developNewQualityMeasures: Scalars['Boolean']['input'];
  payType: Scalars['Boolean']['input'];
  shouldAnyProvidersExcludedFFSSystems: Scalars['Boolean']['input'];
  nonClaimsPayments: Scalars['Boolean']['input'];
  willRecoverPayments: Scalars['Boolean']['input'];
}>;


export type GetOperationalNeedAnswerQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, generalCharacteristics?: { __typename: 'PlanGeneralCharacteristics', managePartCDEnrollment?: boolean | null, collectPlanBids?: boolean | null, planContractUpdated?: boolean | null, agreementTypes?: Array<AgreementType> }, participantsAndProviders?: { __typename: 'PlanParticipantsAndProviders', recruitmentMethod?: RecruitmentType | null, selectionMethod?: Array<ParticipantSelectionType>, communicationMethod?: Array<ParticipantCommunicationType>, providerOverlap?: OverlapType | null, participantsIds?: Array<ParticipantsIdType> }, beneficiaries?: { __typename: 'PlanBeneficiaries', beneficiaryOverlap?: OverlapType | null }, opsEvalAndLearning?: { __typename: 'PlanOpsEvalAndLearning', helpdeskUse?: boolean | null, iddocSupport?: boolean | null, benchmarkForPerformance?: BenchmarkForPerformanceType | null, appealPerformance?: boolean | null, appealFeedback?: boolean | null, appealPayments?: boolean | null, appealOther?: boolean | null, evaluationApproaches?: Array<EvaluationApproachType>, dataNeededForMonitoring?: Array<DataForMonitoringType>, dataToSendParticicipants?: Array<DataToSendParticipantsType>, modelLearningSystems?: Array<ModelLearningSystemType>, developNewQualityMeasures?: boolean | null }, payments?: { __typename: 'PlanPayments', payType?: Array<PayType>, shouldAnyProvidersExcludedFFSSystems?: boolean | null, nonClaimsPayments?: Array<NonClaimsBasedPayType>, willRecoverPayments?: boolean | null } } };

export type GetOperationalNeedsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetOperationalNeedsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, isCollaborator: boolean, opSolutionLastModifiedDts: Time, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modelPlanID: UUID, name?: string | null, key?: OperationalNeedKey | null, nameOther?: string | null, needed?: boolean | null, modifiedDts?: Time | null, solutions: Array<{ __typename: 'OperationalSolution', id: UUID, status: OpSolutionStatus, name?: string | null, mustStartDts?: Time | null, mustFinishDts?: Time | null, needed?: boolean | null, nameOther?: string | null, key?: OperationalSolutionKey | null, otherHeader?: string | null, pocEmail?: string | null, pocName?: string | null, createdBy: UUID, createdDts: Time, operationalSolutionSubtasks: Array<{ __typename: 'OperationalSolutionSubtask', id: UUID }> }> }> } };

export type GetOperationalSolutionQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetOperationalSolutionQuery = { __typename: 'Query', operationalSolution: { __typename: 'OperationalSolution', id: UUID, key?: OperationalSolutionKey | null, needed?: boolean | null, name?: string | null, nameOther?: string | null, pocName?: string | null, pocEmail?: string | null, status: OpSolutionStatus, isOther: boolean, isCommonSolution: boolean, otherHeader?: string | null, mustFinishDts?: Time | null, mustStartDts?: Time | null, documents: Array<{ __typename: 'PlanDocument', id: UUID, virusScanned: boolean, virusClean: boolean, fileName: string, fileType: string, downloadUrl?: string | null, restricted: boolean, documentType: DocumentType, createdDts: Time, optionalNotes?: string | null, otherType?: string | null, numLinkedSolutions: number, isLink: boolean, url?: string | null }>, operationalSolutionSubtasks: Array<{ __typename: 'OperationalSolutionSubtask', id: UUID, name: string, status: OperationalSolutionSubtaskStatus }> } };

export type GetOperationalSolutionSubtasksQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetOperationalSolutionSubtasksQuery = { __typename: 'Query', operationalSolution: { __typename: 'OperationalSolution', id: UUID, operationalSolutionSubtasks: Array<{ __typename: 'OperationalSolutionSubtask', id: UUID, solutionID: UUID, name: string, status: OperationalSolutionSubtaskStatus }> } };

export type GetPossibleOperationalSolutionsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPossibleOperationalSolutionsQuery = { __typename: 'Query', possibleOperationalSolutions: Array<{ __typename: 'PossibleOperationalSolution', id: number, name: string, key: OperationalSolutionKey }> };

export type UpdateCustomOperationalNeedMutationVariables = Exact<{
  modelPlanID: Scalars['UUID']['input'];
  customNeedType: Scalars['String']['input'];
  needed: Scalars['Boolean']['input'];
}>;


export type UpdateCustomOperationalNeedMutation = { __typename: 'Mutation', addOrUpdateCustomOperationalNeed: { __typename: 'OperationalNeed', id: UUID, nameOther?: string | null, needed?: boolean | null, key?: OperationalNeedKey | null } };

export type UpdateCustomOperationalNeedByIdMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  customNeedType: Scalars['String']['input'];
  needed: Scalars['Boolean']['input'];
}>;


export type UpdateCustomOperationalNeedByIdMutation = { __typename: 'Mutation', updateCustomOperationalNeedByID: { __typename: 'OperationalNeed', id: UUID, nameOther?: string | null, needed?: boolean | null, key?: OperationalNeedKey | null } };

export type UpdateOperationalSolutionMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: OperationalSolutionChanges;
}>;


export type UpdateOperationalSolutionMutation = { __typename: 'Mutation', updateOperationalSolution: { __typename: 'OperationalSolution', id: UUID, nameOther?: string | null, needed?: boolean | null, key?: OperationalSolutionKey | null } };

export type UpdateOperationalSolutionSubtasksMutationVariables = Exact<{
  inputs: Array<UpdateOperationalSolutionSubtaskInput> | UpdateOperationalSolutionSubtaskInput;
}>;


export type UpdateOperationalSolutionSubtasksMutation = { __typename: 'Mutation', updateOperationalSolutionSubtasks?: Array<{ __typename: 'OperationalSolutionSubtask', id: UUID, solutionID: UUID, name: string, status: OperationalSolutionSubtaskStatus }> | null };

export type GetExistingModelPlansQueryVariables = Exact<{ [key: string]: never; }>;


export type GetExistingModelPlansQuery = { __typename: 'Query', existingModelCollection: Array<{ __typename: 'ExistingModel', id?: number | null, modelName: string }> };

export type GetModelPlansBaseQueryVariables = Exact<{
  filter: ModelPlanFilter;
}>;


export type GetModelPlansBaseQuery = { __typename: 'Query', modelPlanCollection: Array<{ __typename: 'ModelPlan', id: UUID, modelName: string }> };

export type GetNdaQueryVariables = Exact<{ [key: string]: never; }>;


export type GetNdaQuery = { __typename: 'Query', ndaInfo: { __typename: 'NDAInfo', agreed: boolean, agreedDts?: Time | null } };

export type ArchiveModelPlanMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  archived: Scalars['Boolean']['input'];
}>;


export type ArchiveModelPlanMutation = { __typename: 'Mutation', updateModelPlan: { __typename: 'ModelPlan', id: UUID } };

export type CreateModelPlanMutationVariables = Exact<{
  modelName: Scalars['String']['input'];
}>;


export type CreateModelPlanMutation = { __typename: 'Mutation', createModelPlan: { __typename: 'ModelPlan', id: UUID, createdBy: UUID, modelName: string, basics: { __typename: 'PlanBasics', id: UUID, modelPlanID: UUID, modelCategory?: ModelCategory | null, cmsCenters: Array<CmsCenter>, cmmiGroups: Array<CmmiGroup>, modelType: Array<ModelType>, problem?: string | null, goal?: string | null, testInterventions?: string | null, note?: string | null, completeICIP?: Time | null, clearanceStarts?: Time | null, clearanceEnds?: Time | null, announced?: Time | null, applicationsStart?: Time | null, applicationsEnd?: Time | null, performancePeriodStarts?: Time | null, performancePeriodEnds?: Time | null, wrapUpEnds?: Time | null, highLevelNote?: string | null, phasedIn?: boolean | null, phasedInNote?: string | null, createdBy: UUID, createdDts: Time, modifiedBy?: UUID | null, modifiedDts?: Time | null, status: TaskStatus }, collaborators: Array<{ __typename: 'PlanCollaborator', id: UUID, userID: UUID, teamRoles: Array<TeamRole>, userAccount: { __typename: 'UserAccount', id: UUID, commonName: string, email: string, username: string } }> } };

export type CreateModelPlanReplyMutationVariables = Exact<{
  input: DiscussionReplyCreateInput;
}>;


export type CreateModelPlanReplyMutation = { __typename: 'Mutation', createDiscussionReply: { __typename: 'DiscussionReply', id: UUID, discussionID: UUID, createdBy: UUID, createdDts: Time, content?: { __typename: 'TaggedContent', rawContent: string } | null } };

export type GetAllModelDataQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllModelDataQuery = { __typename: 'Query', modelPlanCollection: Array<{ __typename: 'ModelPlan', id: UUID, modelName: string, nameHistory: Array<string>, abbreviation?: string | null, archived: boolean, createdDts: Time, status: ModelStatus, createdByUserAccount: { __typename: 'UserAccount', commonName: string }, basics: { __typename: 'PlanBasics', id: UUID, modelCategory?: ModelCategory | null, amsModelID?: string | null, demoCode?: string | null, cmsCenters: Array<CmsCenter>, cmmiGroups: Array<CmmiGroup>, modelType: Array<ModelType>, modelTypeOther?: string | null, problem?: string | null, goal?: string | null, testInterventions?: string | null, note?: string | null, completeICIP?: Time | null, clearanceStarts?: Time | null, clearanceEnds?: Time | null, announced?: Time | null, applicationsStart?: Time | null, applicationsEnd?: Time | null, performancePeriodStarts?: Time | null, performancePeriodEnds?: Time | null, highLevelNote?: string | null, wrapUpEnds?: Time | null, phasedIn?: boolean | null, phasedInNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, generalCharacteristics: { __typename: 'PlanGeneralCharacteristics', id: UUID, rulemakingRequired?: boolean | null, rulemakingRequiredDescription?: string | null, rulemakingRequiredNote?: string | null, authorityAllowances: Array<AuthorityAllowance>, authorityAllowancesOther?: string | null, authorityAllowancesNote?: string | null, waiversRequired?: boolean | null, waiversRequiredTypes: Array<WaiverType>, waiversRequiredNote?: string | null, isNewModel?: boolean | null, existingModel?: string | null, resemblesExistingModel?: YesNoOtherType | null, resemblesExistingModelWhyHow?: string | null, resemblesExistingModelHow?: string | null, resemblesExistingModelNote?: string | null, resemblesExistingModelOtherSpecify?: string | null, resemblesExistingModelOtherOption?: string | null, participationInModelPrecondition?: YesNoOtherType | null, participationInModelPreconditionOtherSpecify?: string | null, participationInModelPreconditionOtherOption?: string | null, participationInModelPreconditionWhyHow?: string | null, participationInModelPreconditionNote?: string | null, hasComponentsOrTracks?: boolean | null, hasComponentsOrTracksDiffer?: string | null, hasComponentsOrTracksNote?: string | null, careCoordinationInvolved?: boolean | null, careCoordinationInvolvedDescription?: string | null, careCoordinationInvolvedNote?: string | null, additionalServicesInvolved?: boolean | null, additionalServicesInvolvedDescription?: string | null, additionalServicesInvolvedNote?: string | null, communityPartnersInvolved?: boolean | null, communityPartnersInvolvedDescription?: string | null, communityPartnersInvolvedNote?: string | null, agencyOrStateHelp: Array<AgencyOrStateHelpType>, agencyOrStateHelpOther?: string | null, agencyOrStateHelpNote?: string | null, alternativePaymentModelTypes: Array<AlternativePaymentModelType>, alternativePaymentModelNote?: string | null, keyCharacteristics: Array<KeyCharacteristic>, keyCharacteristicsNote?: string | null, keyCharacteristicsOther?: string | null, collectPlanBids?: boolean | null, collectPlanBidsNote?: string | null, managePartCDEnrollment?: boolean | null, managePartCDEnrollmentNote?: string | null, planContractUpdated?: boolean | null, planContractUpdatedNote?: string | null, geographiesTargeted?: boolean | null, geographiesTargetedTypes: Array<GeographyType>, geographiesStatesAndTerritories: Array<StatesAndTerritories>, geographiesRegionTypes: Array<GeographyRegionType>, geographiesTargetedTypesOther?: string | null, geographiesTargetedAppliedTo: Array<GeographyApplication>, geographiesTargetedAppliedToOther?: string | null, geographiesTargetedNote?: string | null, participationOptions?: boolean | null, participationOptionsNote?: string | null, agreementTypes: Array<AgreementType>, agreementTypesOther?: string | null, multiplePatricipationAgreementsNeeded?: boolean | null, multiplePatricipationAgreementsNeededNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, resemblesExistingModelWhich?: { __typename: 'ExistingModelLinks', names: Array<string> } | null, participationInModelPreconditionWhich?: { __typename: 'ExistingModelLinks', names: Array<string> } | null, readyForReviewByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, participantsAndProviders: { __typename: 'PlanParticipantsAndProviders', id: UUID, participantAddedFrequency: Array<FrequencyType>, participantAddedFrequencyContinually?: string | null, participantAddedFrequencyOther?: string | null, participantAddedFrequencyNote?: string | null, participantRemovedFrequency: Array<FrequencyType>, participantRemovedFrequencyContinually?: string | null, participantRemovedFrequencyOther?: string | null, participantRemovedFrequencyNote?: string | null, communicationMethod: Array<ParticipantCommunicationType>, communicationMethodOther?: string | null, communicationNote?: string | null, riskType: Array<ParticipantRiskType>, riskOther?: string | null, riskNote?: string | null, willRiskChange?: boolean | null, willRiskChangeNote?: string | null, participantRequireFinancialGuarantee?: boolean | null, participantRequireFinancialGuaranteeType: Array<ParticipantRequireFinancialGuaranteeType>, participantRequireFinancialGuaranteeOther?: string | null, participantRequireFinancialGuaranteeNote?: string | null, coordinateWork?: boolean | null, coordinateWorkNote?: string | null, gainsharePayments?: boolean | null, gainsharePaymentsTrack?: boolean | null, gainsharePaymentsEligibility: Array<GainshareArrangementEligibility>, gainsharePaymentsEligibilityOther?: string | null, gainsharePaymentsNote?: string | null, participantsIds: Array<ParticipantsIdType>, participantsIdsOther?: string | null, participantsIDSNote?: string | null, expectedNumberOfParticipants?: number | null, estimateConfidence?: ConfidenceType | null, confidenceNote?: string | null, recruitmentMethod?: RecruitmentType | null, recruitmentOther?: string | null, recruitmentNote?: string | null, selectionMethod: Array<ParticipantSelectionType>, selectionOther?: string | null, selectionNote?: string | null, participants: Array<ParticipantsType>, medicareProviderType?: string | null, isNewTypeOfProvidersOrSuppliers?: boolean | null, statesEngagement?: string | null, participantsOther?: string | null, participantsNote?: string | null, participantsCurrentlyInModels?: boolean | null, participantsCurrentlyInModelsNote?: string | null, modelApplicationLevel?: string | null, providerAdditionFrequency: Array<FrequencyType>, providerAdditionFrequencyContinually?: string | null, providerAdditionFrequencyOther?: string | null, providerAdditionFrequencyNote?: string | null, providerAddMethod: Array<ProviderAddType>, providerAddMethodOther?: string | null, providerAddMethodNote?: string | null, providerLeaveMethod: Array<ProviderLeaveType>, providerLeaveMethodOther?: string | null, providerLeaveMethodNote?: string | null, providerRemovalFrequency: Array<FrequencyType>, providerRemovalFrequencyContinually?: string | null, providerRemovalFrequencyOther?: string | null, providerRemovalFrequencyNote?: string | null, providerOverlap?: OverlapType | null, providerOverlapHierarchy?: string | null, providerOverlapNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, beneficiaries: { __typename: 'PlanBeneficiaries', id: UUID, beneficiaries: Array<BeneficiariesType>, beneficiariesNote?: string | null, beneficiariesOther?: string | null, beneficiaryOverlap?: OverlapType | null, beneficiaryOverlapNote?: string | null, beneficiarySelectionNote?: string | null, beneficiarySelectionOther?: string | null, beneficiarySelectionMethod: Array<SelectionMethodType>, treatDualElligibleDifferent?: TriStateAnswer | null, treatDualElligibleDifferentHow?: string | null, treatDualElligibleDifferentNote?: string | null, excludeCertainCharacteristics?: TriStateAnswer | null, excludeCertainCharacteristicsCriteria?: string | null, excludeCertainCharacteristicsNote?: string | null, beneficiarySelectionFrequency: Array<FrequencyType>, beneficiarySelectionFrequencyContinually?: string | null, beneficiarySelectionFrequencyNote?: string | null, beneficiarySelectionFrequencyOther?: string | null, beneficiaryRemovalFrequency: Array<FrequencyType>, beneficiaryRemovalFrequencyContinually?: string | null, beneficiaryRemovalFrequencyNote?: string | null, beneficiaryRemovalFrequencyOther?: string | null, precedenceRules: Array<YesNoType>, precedenceRulesYes?: string | null, precedenceRulesNo?: string | null, precedenceRulesNote?: string | null, numberPeopleImpacted?: number | null, estimateConfidence?: ConfidenceType | null, confidenceNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, opsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID, ccmInvolvment: Array<CcmInvolvmentType>, ccmInvolvmentOther?: string | null, ccmInvolvmentNote?: string | null, iddocSupport?: boolean | null, iddocSupportNote?: string | null, sendFilesBetweenCcw?: boolean | null, sendFilesBetweenCcwNote?: string | null, appToSendFilesToKnown?: boolean | null, appToSendFilesToWhich?: string | null, appToSendFilesToNote?: string | null, useCcwForFileDistribiutionToParticipants?: boolean | null, useCcwForFileDistribiutionToParticipantsNote?: string | null, developNewQualityMeasures?: boolean | null, developNewQualityMeasuresNote?: string | null, qualityPerformanceImpactsPayment?: YesNoOtherType | null, qualityPerformanceImpactsPaymentOther?: string | null, qualityPerformanceImpactsPaymentNote?: string | null, dataSharingStarts?: DataStartsType | null, dataSharingStartsOther?: string | null, dataSharingFrequency: Array<FrequencyType>, dataSharingFrequencyContinually?: string | null, dataSharingFrequencyOther?: string | null, dataSharingStartsNote?: string | null, dataCollectionStarts?: DataStartsType | null, dataCollectionStartsOther?: string | null, dataCollectionFrequency: Array<FrequencyType>, dataCollectionFrequencyContinually?: string | null, dataCollectionFrequencyOther?: string | null, dataCollectionFrequencyNote?: string | null, qualityReportingStarts?: DataStartsType | null, qualityReportingStartsOther?: string | null, qualityReportingStartsNote?: string | null, qualityReportingFrequency: Array<FrequencyType>, qualityReportingFrequencyContinually?: string | null, qualityReportingFrequencyOther?: string | null, evaluationApproaches: Array<EvaluationApproachType>, evaluationApproachOther?: string | null, evalutaionApproachNote?: string | null, dataNeededForMonitoring: Array<DataForMonitoringType>, dataNeededForMonitoringOther?: string | null, dataNeededForMonitoringNote?: string | null, dataToSendParticicipants: Array<DataToSendParticipantsType>, dataToSendParticicipantsOther?: string | null, dataToSendParticicipantsNote?: string | null, shareCclfData?: boolean | null, shareCclfDataNote?: string | null, technicalContactsIdentified?: boolean | null, technicalContactsIdentifiedDetail?: string | null, technicalContactsIdentifiedNote?: string | null, captureParticipantInfo?: boolean | null, captureParticipantInfoNote?: string | null, icdOwner?: string | null, draftIcdDueDate?: Time | null, icdNote?: string | null, dataFullTimeOrIncremental?: DataFullTimeOrIncrementalType | null, eftSetUp?: boolean | null, unsolicitedAdjustmentsIncluded?: boolean | null, dataFlowDiagramsNeeded?: boolean | null, produceBenefitEnhancementFiles?: boolean | null, fileNamingConventions?: string | null, dataMonitoringNote?: string | null, uatNeeds?: string | null, stcNeeds?: string | null, testingTimelines?: string | null, testingNote?: string | null, dataMonitoringFileTypes: Array<MonitoringFileType>, dataMonitoringFileOther?: string | null, dataResponseType?: string | null, dataResponseFileFrequency?: string | null, modelLearningSystems: Array<ModelLearningSystemType>, modelLearningSystemsOther?: string | null, modelLearningSystemsNote?: string | null, anticipatedChallenges?: string | null, stakeholders: Array<StakeholdersType>, stakeholdersOther?: string | null, stakeholdersNote?: string | null, helpdeskUse?: boolean | null, helpdeskUseNote?: string | null, contractorSupport: Array<ContractorSupportType>, contractorSupportOther?: string | null, contractorSupportHow?: string | null, contractorSupportNote?: string | null, benchmarkForPerformance?: BenchmarkForPerformanceType | null, benchmarkForPerformanceNote?: string | null, computePerformanceScores?: boolean | null, computePerformanceScoresNote?: string | null, riskAdjustPerformance?: boolean | null, riskAdjustFeedback?: boolean | null, riskAdjustPayments?: boolean | null, riskAdjustOther?: boolean | null, riskAdjustNote?: string | null, appealPerformance?: boolean | null, appealFeedback?: boolean | null, appealPayments?: boolean | null, appealOther?: boolean | null, appealNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, payments: { __typename: 'PlanPayments', id: UUID, payType: Array<PayType>, payClaims: Array<ClaimsBasedPayType>, creatingDependenciesBetweenServices?: boolean | null, creatingDependenciesBetweenServicesNote?: string | null, needsClaimsDataCollection?: boolean | null, needsClaimsDataCollectionNote?: string | null, providingThirdPartyFile?: boolean | null, isContractorAwareTestDataRequirements?: boolean | null, beneficiaryCostSharingLevelAndHandling?: string | null, waiveBeneficiaryCostSharingForAnyServices?: boolean | null, waiveBeneficiaryCostSharingServiceSpecification?: string | null, waiverOnlyAppliesPartOfPayment?: boolean | null, waiveBeneficiaryCostSharingNote?: string | null, payClaimsNote?: string | null, payClaimsOther?: string | null, shouldAnyProvidersExcludedFFSSystems?: boolean | null, shouldAnyProviderExcludedFFSSystemsNote?: string | null, changesMedicarePhysicianFeeSchedule?: boolean | null, changesMedicarePhysicianFeeScheduleNote?: string | null, affectsMedicareSecondaryPayerClaims?: boolean | null, affectsMedicareSecondaryPayerClaimsHow?: string | null, affectsMedicareSecondaryPayerClaimsNote?: string | null, payModelDifferentiation?: string | null, willBePaymentAdjustments?: boolean | null, willBePaymentAdjustmentsNote?: string | null, expectedCalculationComplexityLevel?: ComplexityCalculationLevelType | null, expectedCalculationComplexityLevelNote?: string | null, claimsProcessingPrecedence?: boolean | null, claimsProcessingPrecedenceOther?: string | null, claimsProcessingPrecedenceNote?: string | null, canParticipantsSelectBetweenPaymentMechanisms?: boolean | null, canParticipantsSelectBetweenPaymentMechanismsHow?: string | null, canParticipantsSelectBetweenPaymentMechanismsNote?: string | null, anticipatedPaymentFrequency: Array<FrequencyType>, anticipatedPaymentFrequencyContinually?: string | null, anticipatedPaymentFrequencyOther?: string | null, anticipatedPaymentFrequencyNote?: string | null, fundingSource: Array<FundingSource>, fundingSourcePatientProtectionInfo?: string | null, fundingSourceMedicareAInfo?: string | null, fundingSourceMedicareBInfo?: string | null, fundingSourceOther?: string | null, fundingSourceNote?: string | null, fundingSourceR: Array<FundingSource>, fundingSourceRPatientProtectionInfo?: string | null, fundingSourceRMedicareAInfo?: string | null, fundingSourceRMedicareBInfo?: string | null, fundingSourceROther?: string | null, fundingSourceRNote?: string | null, payRecipients: Array<PayRecipient>, payRecipientsOtherSpecification?: string | null, payRecipientsNote?: string | null, payTypeNote?: string | null, nonClaimsPayments: Array<NonClaimsBasedPayType>, nonClaimsPaymentOther?: string | null, paymentCalculationOwner?: string | null, numberPaymentsPerPayCycle?: string | null, numberPaymentsPerPayCycleNote?: string | null, sharedSystemsInvolvedAdditionalClaimPayment?: boolean | null, sharedSystemsInvolvedAdditionalClaimPaymentNote?: string | null, planningToUseInnovationPaymentContractor?: boolean | null, planningToUseInnovationPaymentContractorNote?: string | null, willRecoverPayments?: boolean | null, willRecoverPaymentsNote?: string | null, anticipateReconcilingPaymentsRetrospectively?: boolean | null, anticipateReconcilingPaymentsRetrospectivelyNote?: string | null, paymentReconciliationFrequency: Array<FrequencyType>, paymentReconciliationFrequencyContinually?: string | null, paymentReconciliationFrequencyOther?: string | null, paymentReconciliationFrequencyNote?: string | null, paymentDemandRecoupmentFrequency: Array<FrequencyType>, paymentDemandRecoupmentFrequencyContinually?: string | null, paymentDemandRecoupmentFrequencyOther?: string | null, paymentDemandRecoupmentFrequencyNote?: string | null, paymentStartDate?: Time | null, paymentStartDateNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, collaborators: Array<{ __typename: 'PlanCollaborator', id: UUID, userID: UUID, teamRoles: Array<TeamRole>, modelPlanID: UUID, createdDts: Time, userAccount: { __typename: 'UserAccount', id: UUID, commonName: string, email: string, username: string } }>, discussions: Array<{ __typename: 'PlanDiscussion', id: UUID, userRole?: DiscussionUserRole | null, userRoleDescription?: string | null, createdDts: Time, content?: { __typename: 'TaggedContent', rawContent: string } | null, createdByUserAccount: { __typename: 'UserAccount', commonName: string }, replies: Array<{ __typename: 'DiscussionReply', id: UUID, discussionID: UUID, userRole?: DiscussionUserRole | null, userRoleDescription?: string | null, createdDts: Time, content?: { __typename: 'TaggedContent', rawContent: string } | null, createdByUserAccount: { __typename: 'UserAccount', commonName: string } }> }> }> };

export type GetAllSingleModelDataQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetAllSingleModelDataQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, nameHistory: Array<string>, abbreviation?: string | null, archived: boolean, createdDts: Time, status: ModelStatus, createdByUserAccount: { __typename: 'UserAccount', commonName: string }, basics: { __typename: 'PlanBasics', id: UUID, modelCategory?: ModelCategory | null, amsModelID?: string | null, demoCode?: string | null, cmsCenters: Array<CmsCenter>, cmmiGroups: Array<CmmiGroup>, modelType: Array<ModelType>, modelTypeOther?: string | null, problem?: string | null, goal?: string | null, testInterventions?: string | null, note?: string | null, completeICIP?: Time | null, clearanceStarts?: Time | null, clearanceEnds?: Time | null, announced?: Time | null, applicationsStart?: Time | null, applicationsEnd?: Time | null, performancePeriodStarts?: Time | null, performancePeriodEnds?: Time | null, highLevelNote?: string | null, wrapUpEnds?: Time | null, phasedIn?: boolean | null, phasedInNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, generalCharacteristics: { __typename: 'PlanGeneralCharacteristics', id: UUID, rulemakingRequired?: boolean | null, rulemakingRequiredDescription?: string | null, rulemakingRequiredNote?: string | null, authorityAllowances: Array<AuthorityAllowance>, authorityAllowancesOther?: string | null, authorityAllowancesNote?: string | null, waiversRequired?: boolean | null, waiversRequiredTypes: Array<WaiverType>, waiversRequiredNote?: string | null, isNewModel?: boolean | null, existingModel?: string | null, resemblesExistingModel?: YesNoOtherType | null, resemblesExistingModelWhyHow?: string | null, resemblesExistingModelHow?: string | null, resemblesExistingModelNote?: string | null, resemblesExistingModelOtherSpecify?: string | null, resemblesExistingModelOtherOption?: string | null, participationInModelPrecondition?: YesNoOtherType | null, participationInModelPreconditionOtherSpecify?: string | null, participationInModelPreconditionOtherOption?: string | null, participationInModelPreconditionWhyHow?: string | null, participationInModelPreconditionNote?: string | null, hasComponentsOrTracks?: boolean | null, hasComponentsOrTracksDiffer?: string | null, hasComponentsOrTracksNote?: string | null, careCoordinationInvolved?: boolean | null, careCoordinationInvolvedDescription?: string | null, careCoordinationInvolvedNote?: string | null, additionalServicesInvolved?: boolean | null, additionalServicesInvolvedDescription?: string | null, additionalServicesInvolvedNote?: string | null, communityPartnersInvolved?: boolean | null, communityPartnersInvolvedDescription?: string | null, communityPartnersInvolvedNote?: string | null, agencyOrStateHelp: Array<AgencyOrStateHelpType>, agencyOrStateHelpOther?: string | null, agencyOrStateHelpNote?: string | null, alternativePaymentModelTypes: Array<AlternativePaymentModelType>, alternativePaymentModelNote?: string | null, keyCharacteristics: Array<KeyCharacteristic>, keyCharacteristicsNote?: string | null, keyCharacteristicsOther?: string | null, collectPlanBids?: boolean | null, collectPlanBidsNote?: string | null, managePartCDEnrollment?: boolean | null, managePartCDEnrollmentNote?: string | null, planContractUpdated?: boolean | null, planContractUpdatedNote?: string | null, geographiesTargeted?: boolean | null, geographiesTargetedTypes: Array<GeographyType>, geographiesStatesAndTerritories: Array<StatesAndTerritories>, geographiesRegionTypes: Array<GeographyRegionType>, geographiesTargetedTypesOther?: string | null, geographiesTargetedAppliedTo: Array<GeographyApplication>, geographiesTargetedAppliedToOther?: string | null, geographiesTargetedNote?: string | null, participationOptions?: boolean | null, participationOptionsNote?: string | null, agreementTypes: Array<AgreementType>, agreementTypesOther?: string | null, multiplePatricipationAgreementsNeeded?: boolean | null, multiplePatricipationAgreementsNeededNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, resemblesExistingModelWhich?: { __typename: 'ExistingModelLinks', names: Array<string> } | null, participationInModelPreconditionWhich?: { __typename: 'ExistingModelLinks', names: Array<string> } | null, readyForReviewByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, participantsAndProviders: { __typename: 'PlanParticipantsAndProviders', id: UUID, participantAddedFrequency: Array<FrequencyType>, participantAddedFrequencyContinually?: string | null, participantAddedFrequencyOther?: string | null, participantAddedFrequencyNote?: string | null, participantRemovedFrequency: Array<FrequencyType>, participantRemovedFrequencyContinually?: string | null, participantRemovedFrequencyOther?: string | null, participantRemovedFrequencyNote?: string | null, communicationMethod: Array<ParticipantCommunicationType>, communicationMethodOther?: string | null, communicationNote?: string | null, riskType: Array<ParticipantRiskType>, riskOther?: string | null, riskNote?: string | null, willRiskChange?: boolean | null, willRiskChangeNote?: string | null, participantRequireFinancialGuarantee?: boolean | null, participantRequireFinancialGuaranteeType: Array<ParticipantRequireFinancialGuaranteeType>, participantRequireFinancialGuaranteeOther?: string | null, participantRequireFinancialGuaranteeNote?: string | null, coordinateWork?: boolean | null, coordinateWorkNote?: string | null, gainsharePayments?: boolean | null, gainsharePaymentsTrack?: boolean | null, gainsharePaymentsEligibility: Array<GainshareArrangementEligibility>, gainsharePaymentsEligibilityOther?: string | null, gainsharePaymentsNote?: string | null, participantsIds: Array<ParticipantsIdType>, participantsIdsOther?: string | null, participantsIDSNote?: string | null, expectedNumberOfParticipants?: number | null, estimateConfidence?: ConfidenceType | null, confidenceNote?: string | null, recruitmentMethod?: RecruitmentType | null, recruitmentOther?: string | null, recruitmentNote?: string | null, selectionMethod: Array<ParticipantSelectionType>, selectionOther?: string | null, selectionNote?: string | null, participants: Array<ParticipantsType>, medicareProviderType?: string | null, isNewTypeOfProvidersOrSuppliers?: boolean | null, statesEngagement?: string | null, participantsOther?: string | null, participantsNote?: string | null, participantsCurrentlyInModels?: boolean | null, participantsCurrentlyInModelsNote?: string | null, modelApplicationLevel?: string | null, providerAdditionFrequency: Array<FrequencyType>, providerAdditionFrequencyContinually?: string | null, providerAdditionFrequencyOther?: string | null, providerAdditionFrequencyNote?: string | null, providerAddMethod: Array<ProviderAddType>, providerAddMethodOther?: string | null, providerAddMethodNote?: string | null, providerLeaveMethod: Array<ProviderLeaveType>, providerLeaveMethodOther?: string | null, providerLeaveMethodNote?: string | null, providerRemovalFrequency: Array<FrequencyType>, providerRemovalFrequencyContinually?: string | null, providerRemovalFrequencyOther?: string | null, providerRemovalFrequencyNote?: string | null, providerOverlap?: OverlapType | null, providerOverlapHierarchy?: string | null, providerOverlapNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, beneficiaries: { __typename: 'PlanBeneficiaries', id: UUID, beneficiaries: Array<BeneficiariesType>, beneficiariesNote?: string | null, beneficiariesOther?: string | null, beneficiaryOverlap?: OverlapType | null, beneficiaryOverlapNote?: string | null, beneficiarySelectionNote?: string | null, beneficiarySelectionOther?: string | null, beneficiarySelectionMethod: Array<SelectionMethodType>, treatDualElligibleDifferent?: TriStateAnswer | null, treatDualElligibleDifferentHow?: string | null, treatDualElligibleDifferentNote?: string | null, excludeCertainCharacteristics?: TriStateAnswer | null, excludeCertainCharacteristicsCriteria?: string | null, excludeCertainCharacteristicsNote?: string | null, beneficiarySelectionFrequency: Array<FrequencyType>, beneficiarySelectionFrequencyContinually?: string | null, beneficiarySelectionFrequencyNote?: string | null, beneficiarySelectionFrequencyOther?: string | null, beneficiaryRemovalFrequency: Array<FrequencyType>, beneficiaryRemovalFrequencyContinually?: string | null, beneficiaryRemovalFrequencyNote?: string | null, beneficiaryRemovalFrequencyOther?: string | null, precedenceRules: Array<YesNoType>, precedenceRulesYes?: string | null, precedenceRulesNo?: string | null, precedenceRulesNote?: string | null, numberPeopleImpacted?: number | null, estimateConfidence?: ConfidenceType | null, confidenceNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, opsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID, ccmInvolvment: Array<CcmInvolvmentType>, ccmInvolvmentOther?: string | null, ccmInvolvmentNote?: string | null, iddocSupport?: boolean | null, iddocSupportNote?: string | null, sendFilesBetweenCcw?: boolean | null, sendFilesBetweenCcwNote?: string | null, appToSendFilesToKnown?: boolean | null, appToSendFilesToWhich?: string | null, appToSendFilesToNote?: string | null, useCcwForFileDistribiutionToParticipants?: boolean | null, useCcwForFileDistribiutionToParticipantsNote?: string | null, developNewQualityMeasures?: boolean | null, developNewQualityMeasuresNote?: string | null, qualityPerformanceImpactsPayment?: YesNoOtherType | null, qualityPerformanceImpactsPaymentOther?: string | null, qualityPerformanceImpactsPaymentNote?: string | null, dataSharingStarts?: DataStartsType | null, dataSharingStartsOther?: string | null, dataSharingFrequency: Array<FrequencyType>, dataSharingFrequencyContinually?: string | null, dataSharingFrequencyOther?: string | null, dataSharingStartsNote?: string | null, dataCollectionStarts?: DataStartsType | null, dataCollectionStartsOther?: string | null, dataCollectionFrequency: Array<FrequencyType>, dataCollectionFrequencyContinually?: string | null, dataCollectionFrequencyOther?: string | null, dataCollectionFrequencyNote?: string | null, qualityReportingStarts?: DataStartsType | null, qualityReportingStartsOther?: string | null, qualityReportingStartsNote?: string | null, qualityReportingFrequency: Array<FrequencyType>, qualityReportingFrequencyContinually?: string | null, qualityReportingFrequencyOther?: string | null, evaluationApproaches: Array<EvaluationApproachType>, evaluationApproachOther?: string | null, evalutaionApproachNote?: string | null, dataNeededForMonitoring: Array<DataForMonitoringType>, dataNeededForMonitoringOther?: string | null, dataNeededForMonitoringNote?: string | null, dataToSendParticicipants: Array<DataToSendParticipantsType>, dataToSendParticicipantsOther?: string | null, dataToSendParticicipantsNote?: string | null, shareCclfData?: boolean | null, shareCclfDataNote?: string | null, technicalContactsIdentified?: boolean | null, technicalContactsIdentifiedDetail?: string | null, technicalContactsIdentifiedNote?: string | null, captureParticipantInfo?: boolean | null, captureParticipantInfoNote?: string | null, icdOwner?: string | null, draftIcdDueDate?: Time | null, icdNote?: string | null, dataFullTimeOrIncremental?: DataFullTimeOrIncrementalType | null, eftSetUp?: boolean | null, unsolicitedAdjustmentsIncluded?: boolean | null, dataFlowDiagramsNeeded?: boolean | null, produceBenefitEnhancementFiles?: boolean | null, fileNamingConventions?: string | null, dataMonitoringNote?: string | null, uatNeeds?: string | null, stcNeeds?: string | null, testingTimelines?: string | null, testingNote?: string | null, dataMonitoringFileTypes: Array<MonitoringFileType>, dataMonitoringFileOther?: string | null, dataResponseType?: string | null, dataResponseFileFrequency?: string | null, modelLearningSystems: Array<ModelLearningSystemType>, modelLearningSystemsOther?: string | null, modelLearningSystemsNote?: string | null, anticipatedChallenges?: string | null, stakeholders: Array<StakeholdersType>, stakeholdersOther?: string | null, stakeholdersNote?: string | null, helpdeskUse?: boolean | null, helpdeskUseNote?: string | null, contractorSupport: Array<ContractorSupportType>, contractorSupportOther?: string | null, contractorSupportHow?: string | null, contractorSupportNote?: string | null, benchmarkForPerformance?: BenchmarkForPerformanceType | null, benchmarkForPerformanceNote?: string | null, computePerformanceScores?: boolean | null, computePerformanceScoresNote?: string | null, riskAdjustPerformance?: boolean | null, riskAdjustFeedback?: boolean | null, riskAdjustPayments?: boolean | null, riskAdjustOther?: boolean | null, riskAdjustNote?: string | null, appealPerformance?: boolean | null, appealFeedback?: boolean | null, appealPayments?: boolean | null, appealOther?: boolean | null, appealNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, payments: { __typename: 'PlanPayments', id: UUID, payType: Array<PayType>, payClaims: Array<ClaimsBasedPayType>, creatingDependenciesBetweenServices?: boolean | null, creatingDependenciesBetweenServicesNote?: string | null, needsClaimsDataCollection?: boolean | null, needsClaimsDataCollectionNote?: string | null, providingThirdPartyFile?: boolean | null, isContractorAwareTestDataRequirements?: boolean | null, beneficiaryCostSharingLevelAndHandling?: string | null, waiveBeneficiaryCostSharingForAnyServices?: boolean | null, waiveBeneficiaryCostSharingServiceSpecification?: string | null, waiverOnlyAppliesPartOfPayment?: boolean | null, waiveBeneficiaryCostSharingNote?: string | null, payClaimsNote?: string | null, payClaimsOther?: string | null, shouldAnyProvidersExcludedFFSSystems?: boolean | null, shouldAnyProviderExcludedFFSSystemsNote?: string | null, changesMedicarePhysicianFeeSchedule?: boolean | null, changesMedicarePhysicianFeeScheduleNote?: string | null, affectsMedicareSecondaryPayerClaims?: boolean | null, affectsMedicareSecondaryPayerClaimsHow?: string | null, affectsMedicareSecondaryPayerClaimsNote?: string | null, payModelDifferentiation?: string | null, willBePaymentAdjustments?: boolean | null, willBePaymentAdjustmentsNote?: string | null, expectedCalculationComplexityLevel?: ComplexityCalculationLevelType | null, expectedCalculationComplexityLevelNote?: string | null, claimsProcessingPrecedence?: boolean | null, claimsProcessingPrecedenceOther?: string | null, claimsProcessingPrecedenceNote?: string | null, canParticipantsSelectBetweenPaymentMechanisms?: boolean | null, canParticipantsSelectBetweenPaymentMechanismsHow?: string | null, canParticipantsSelectBetweenPaymentMechanismsNote?: string | null, anticipatedPaymentFrequency: Array<FrequencyType>, anticipatedPaymentFrequencyContinually?: string | null, anticipatedPaymentFrequencyOther?: string | null, anticipatedPaymentFrequencyNote?: string | null, fundingSource: Array<FundingSource>, fundingSourcePatientProtectionInfo?: string | null, fundingSourceMedicareAInfo?: string | null, fundingSourceMedicareBInfo?: string | null, fundingSourceOther?: string | null, fundingSourceNote?: string | null, fundingSourceR: Array<FundingSource>, fundingSourceRPatientProtectionInfo?: string | null, fundingSourceRMedicareAInfo?: string | null, fundingSourceRMedicareBInfo?: string | null, fundingSourceROther?: string | null, fundingSourceRNote?: string | null, payRecipients: Array<PayRecipient>, payRecipientsOtherSpecification?: string | null, payRecipientsNote?: string | null, payTypeNote?: string | null, nonClaimsPayments: Array<NonClaimsBasedPayType>, nonClaimsPaymentOther?: string | null, paymentCalculationOwner?: string | null, numberPaymentsPerPayCycle?: string | null, numberPaymentsPerPayCycleNote?: string | null, sharedSystemsInvolvedAdditionalClaimPayment?: boolean | null, sharedSystemsInvolvedAdditionalClaimPaymentNote?: string | null, planningToUseInnovationPaymentContractor?: boolean | null, planningToUseInnovationPaymentContractorNote?: string | null, willRecoverPayments?: boolean | null, willRecoverPaymentsNote?: string | null, anticipateReconcilingPaymentsRetrospectively?: boolean | null, anticipateReconcilingPaymentsRetrospectivelyNote?: string | null, paymentReconciliationFrequency: Array<FrequencyType>, paymentReconciliationFrequencyContinually?: string | null, paymentReconciliationFrequencyOther?: string | null, paymentReconciliationFrequencyNote?: string | null, paymentDemandRecoupmentFrequency: Array<FrequencyType>, paymentDemandRecoupmentFrequencyContinually?: string | null, paymentDemandRecoupmentFrequencyOther?: string | null, paymentDemandRecoupmentFrequencyNote?: string | null, paymentStartDate?: Time | null, paymentStartDateNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, collaborators: Array<{ __typename: 'PlanCollaborator', id: UUID, userID: UUID, teamRoles: Array<TeamRole>, modelPlanID: UUID, createdDts: Time, userAccount: { __typename: 'UserAccount', id: UUID, commonName: string, email: string, username: string } }>, discussions: Array<{ __typename: 'PlanDiscussion', id: UUID, userRole?: DiscussionUserRole | null, userRoleDescription?: string | null, createdDts: Time, content?: { __typename: 'TaggedContent', rawContent: string } | null, createdByUserAccount: { __typename: 'UserAccount', commonName: string }, replies: Array<{ __typename: 'DiscussionReply', id: UUID, discussionID: UUID, userRole?: DiscussionUserRole | null, userRoleDescription?: string | null, createdDts: Time, content?: { __typename: 'TaggedContent', rawContent: string } | null, createdByUserAccount: { __typename: 'UserAccount', commonName: string } }> }> } };

export type GetCurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCurrentUserQuery = { __typename: 'Query', currentUser: { __typename: 'CurrentUser', launchDarkly: { __typename: 'LaunchDarklySettings', userKey: string, signedHash: string } } };

export type GetEchimpCrandTdlQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetEchimpCrandTdlQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', echimpCRsAndTDLs: Array<{ __typename: 'EChimpCR', id: string, title?: string | null, emergencyCrFlag?: boolean | null, sensitiveFlag?: boolean | null, crStatus?: string | null, implementationDate?: string | null } | { __typename: 'EChimpTDL', id: string, title?: string | null, issuedDate?: string | null }> } };

export type GetFavoritesQueryVariables = Exact<{
  filter: ModelPlanFilter;
  isMAC: Scalars['Boolean']['input'];
}>;


export type GetFavoritesQuery = { __typename: 'Query', modelPlanCollection: Array<{ __typename: 'ModelPlan', id: UUID, modelName: string, isFavorite: boolean, nameHistory: Array<string>, isCollaborator: boolean, status: ModelStatus, basics: { __typename: 'PlanBasics', id: UUID, goal?: string | null, performancePeriodStarts?: Time | null }, collaborators: Array<{ __typename: 'PlanCollaborator', id: UUID, teamRoles: Array<TeamRole>, userAccount: { __typename: 'UserAccount', id: UUID, commonName: string } }>, crs?: Array<{ __typename: 'PlanCR', idNumber: string }>, tdls?: Array<{ __typename: 'PlanTDL', idNumber: string }> }> };

export type GetModelPlanQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetModelPlanQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, modifiedDts?: Time | null, opSolutionLastModifiedDts: Time, archived: boolean, status: ModelStatus, taskListStatus: TaskStatus, isFavorite: boolean, modifiedByUserAccount?: { __typename: 'UserAccount', commonName: string } | null, suggestedPhase?: { __typename: 'PhaseSuggestion', phase: ModelPhase, suggestedStatuses: Array<ModelStatus> } | null, basics: { __typename: 'PlanBasics', id: UUID, clearanceStarts?: Time | null, modifiedDts?: Time | null, readyForClearanceDts?: Time | null, status: TaskStatus, modifiedByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, collaborators: Array<{ __typename: 'PlanCollaborator', id: UUID, userID: UUID, teamRoles: Array<TeamRole>, modelPlanID: UUID, createdDts: Time, userAccount: { __typename: 'UserAccount', id: UUID, commonName: string, email: string, username: string } }>, documents: Array<{ __typename: 'PlanDocument', id: UUID, fileName: string, fileType: string }>, crs: Array<{ __typename: 'PlanCR', id: UUID, idNumber: string }>, tdls: Array<{ __typename: 'PlanTDL', id: UUID, idNumber: string }>, echimpCRsAndTDLs: Array<{ __typename: 'EChimpCR', id: string } | { __typename: 'EChimpTDL', id: string }>, discussions: Array<{ __typename: 'PlanDiscussion', id: UUID, createdBy: UUID, createdDts: Time, content?: { __typename: 'TaggedContent', rawContent: string } | null, replies: Array<{ __typename: 'DiscussionReply', id: UUID, discussionID: UUID, createdBy: UUID, createdDts: Time, content?: { __typename: 'TaggedContent', rawContent: string } | null }> }>, generalCharacteristics: { __typename: 'PlanGeneralCharacteristics', id: UUID, createdBy: UUID, createdDts: Time, modifiedBy?: UUID | null, modifiedDts?: Time | null, readyForClearanceDts?: Time | null, status: TaskStatus, modifiedByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, participantsAndProviders: { __typename: 'PlanParticipantsAndProviders', id: UUID, createdBy: UUID, createdDts: Time, modifiedBy?: UUID | null, modifiedDts?: Time | null, readyForClearanceDts?: Time | null, status: TaskStatus, modifiedByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, beneficiaries: { __typename: 'PlanBeneficiaries', id: UUID, createdBy: UUID, createdDts: Time, modifiedBy?: UUID | null, modifiedDts?: Time | null, readyForClearanceDts?: Time | null, status: TaskStatus, modifiedByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, opsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID, createdBy: UUID, createdDts: Time, modifiedBy?: UUID | null, modifiedDts?: Time | null, readyForClearanceDts?: Time | null, status: TaskStatus, modifiedByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, payments: { __typename: 'PlanPayments', id: UUID, createdBy: UUID, createdDts: Time, modifiedBy?: UUID | null, modifiedDts?: Time | null, readyForClearanceDts?: Time | null, status: TaskStatus, modifiedByUserAccount?: { __typename: 'UserAccount', commonName: string } | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }>, prepareForClearance: { __typename: 'PrepareForClearance', status: PrepareForClearanceStatus, modifiedDts?: Time | null } } };

export type GetModelPlanBaseQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetModelPlanBaseQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, modifiedDts?: Time | null, createdDts: Time, status: ModelStatus } };

export type GetModelPlansQueryVariables = Exact<{
  filter: ModelPlanFilter;
  isMAC: Scalars['Boolean']['input'];
}>;


export type GetModelPlansQuery = { __typename: 'Query', modelPlanCollection: Array<{ __typename: 'ModelPlan', id: UUID, modelName: string, status: ModelStatus, abbreviation?: string | null, nameHistory: Array<string>, createdBy: UUID, createdDts: Time, modifiedDts?: Time | null, isFavorite: boolean, isCollaborator: boolean, basics: { __typename: 'PlanBasics', id: UUID, demoCode?: string | null, amsModelID?: string | null, modelCategory?: ModelCategory | null, clearanceStarts?: Time | null, performancePeriodStarts?: Time | null, additionalModelCategories: Array<ModelCategory>, applicationsStart?: Time | null }, generalCharacteristics?: { __typename: 'PlanGeneralCharacteristics', id: UUID, keyCharacteristics: Array<KeyCharacteristic> }, payments?: { __typename: 'PlanPayments', id: UUID, paymentStartDate?: Time | null }, collaborators: Array<{ __typename: 'PlanCollaborator', id: UUID, userID: UUID, teamRoles: Array<TeamRole>, userAccount: { __typename: 'UserAccount', id: UUID, commonName: string, email: string, username: string } }>, discussions: Array<{ __typename: 'PlanDiscussion', id: UUID, replies: Array<{ __typename: 'DiscussionReply', id: UUID }> }>, crs?: Array<{ __typename: 'PlanCR', idNumber: string }>, tdls?: Array<{ __typename: 'PlanTDL', idNumber: string }> }> };

export type GetUserInfoQueryVariables = Exact<{
  username: Scalars['String']['input'];
}>;


export type GetUserInfoQuery = { __typename: 'Query', userAccount: { __typename: 'UserAccount', id: UUID, username: string, commonName: string, email: string, givenName: string, familyName: string } };

export type SearchOktaUsersQueryVariables = Exact<{
  searchTerm: Scalars['String']['input'];
}>;


export type SearchOktaUsersQuery = { __typename: 'Query', searchOktaUsers: Array<{ __typename: 'UserInfo', displayName: string, username: string, email: string }> };

export type UpdateModelPlanMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: ModelPlanChanges;
}>;


export type UpdateModelPlanMutation = { __typename: 'Mutation', updateModelPlan: { __typename: 'ModelPlan', id: UUID } };

export type UpdateNdaMutationVariables = Exact<{ [key: string]: never; }>;


export type UpdateNdaMutation = { __typename: 'Mutation', agreeToNDA: { __typename: 'NDAInfo', agreed: boolean, agreedDts?: Time | null } };

export type GetNotificationSettingsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetNotificationSettingsQuery = { __typename: 'Query', currentUser: { __typename: 'CurrentUser', notificationPreferences: { __typename: 'UserNotificationPreferences', id: UUID, dailyDigestComplete: Array<UserNotificationPreferenceFlag>, addedAsCollaborator: Array<UserNotificationPreferenceFlag>, taggedInDiscussion: Array<UserNotificationPreferenceFlag>, taggedInDiscussionReply: Array<UserNotificationPreferenceFlag>, newDiscussionReply: Array<UserNotificationPreferenceFlag>, modelPlanShared: Array<UserNotificationPreferenceFlag>, newModelPlan: Array<UserNotificationPreferenceFlag>, datesChanged: Array<UserNotificationPreferenceFlag>, datesChangedNotificationType?: DatesChangedNotificationType | null } } };

export type GetNotificationsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetNotificationsQuery = { __typename: 'Query', currentUser: { __typename: 'CurrentUser', notifications: { __typename: 'UserNotifications', numUnreadNotifications: number, notifications: Array<{ __typename: 'UserNotification', id: UUID, isRead: boolean, inAppSent: boolean, emailSent: boolean, createdDts: Time, activity: { __typename: 'Activity', activityType: ActivityType, entityID: UUID, actorID: UUID, actorUserAccount: { __typename: 'UserAccount', commonName: string }, metaData: { __typename: 'AddedAsCollaboratorMeta', version: number, type: ActivityType, modelPlanID: UUID, modelPlan: { __typename: 'ModelPlan', modelName: string } } | { __typename: 'DailyDigestCompleteActivityMeta', version: number, type: ActivityType, modelPlanIDs: Array<UUID>, date: Time, analyzedAudits: Array<{ __typename: 'AnalyzedAudit', id: UUID, modelPlanID: UUID, modelName: string, date: Time, changes: { __typename: 'AnalyzedAuditChange', modelPlan?: { __typename: 'AnalyzedModelPlan', oldName?: string | null, statusChanges?: Array<string | null> | null } | null, documents?: { __typename: 'AnalyzedDocuments', count?: number | null } | null, crTdls?: { __typename: 'AnalyzedCrTdls', activity?: boolean | null } | null, planSections?: { __typename: 'AnalyzedPlanSections', updated: Array<TableName>, readyForReview: Array<TableName>, readyForClearance: Array<TableName> } | null, modelLeads?: { __typename: 'AnalyzedModelLeads', added: Array<{ __typename: 'AnalyzedModelLeadInfo', id: UUID, commonName: string }> } | null, planDiscussions?: { __typename: 'AnalyzedPlanDiscussions', activity?: boolean | null } | null } }> } | { __typename: 'DatesChangedActivityMeta', version: number, type: ActivityType, modelPlanID: UUID, modelPlan: { __typename: 'ModelPlan', modelName: string }, dateChanges: Array<{ __typename: 'DateChange', isChanged: boolean, field: DateChangeFieldType, isRange: boolean, oldDate?: Time | null, newDate?: Time | null, oldRangeStart?: Time | null, oldRangeEnd?: Time | null, newRangeStart?: Time | null, newRangeEnd?: Time | null }> } | { __typename: 'ModelPlanSharedActivityMeta', version: number, type: ActivityType, modelPlanID: UUID, optionalMessage?: string | null, modelPlan: { __typename: 'ModelPlan', modelName: string } } | { __typename: 'NewDiscussionRepliedActivityMeta', version: number, type: ActivityType, discussionID: UUID, replyID: UUID, modelPlanID: UUID, content: string, modelPlan: { __typename: 'ModelPlan', modelName: string } } | { __typename: 'NewModelPlanActivityMeta', version: number, type: ActivityType, modelPlanID: UUID, modelPlan: { __typename: 'ModelPlan', modelName: string } } | { __typename: 'TaggedInDiscussionReplyActivityMeta', version: number, type: ActivityType, modelPlanID: UUID, discussionID: UUID, replyID: UUID, content: string, modelPlan: { __typename: 'ModelPlan', modelName: string } } | { __typename: 'TaggedInPlanDiscussionActivityMeta', version: number, type: ActivityType, modelPlanID: UUID, discussionID: UUID, content: string, modelPlan: { __typename: 'ModelPlan', modelName: string } } } }> } } };

export type GetPollNotificationsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPollNotificationsQuery = { __typename: 'Query', currentUser: { __typename: 'CurrentUser', notifications: { __typename: 'UserNotifications', numUnreadNotifications: number } } };

export type UpdateAllNotificationsAsReadMutationVariables = Exact<{ [key: string]: never; }>;


export type UpdateAllNotificationsAsReadMutation = { __typename: 'Mutation', markAllNotificationsAsRead: Array<{ __typename: 'UserNotification', id: UUID }> };

export type UpdateNotificationSettingsMutationVariables = Exact<{
  changes: UserNotificationPreferencesChanges;
}>;


export type UpdateNotificationSettingsMutation = { __typename: 'Mutation', updateUserNotificationPreferences: { __typename: 'UserNotificationPreferences', id: UUID, dailyDigestComplete: Array<UserNotificationPreferenceFlag>, addedAsCollaborator: Array<UserNotificationPreferenceFlag>, taggedInDiscussion: Array<UserNotificationPreferenceFlag>, taggedInDiscussionReply: Array<UserNotificationPreferenceFlag>, newDiscussionReply: Array<UserNotificationPreferenceFlag>, modelPlanShared: Array<UserNotificationPreferenceFlag>, newModelPlan: Array<UserNotificationPreferenceFlag>, datesChanged: Array<UserNotificationPreferenceFlag>, datesChangedNotificationType?: DatesChangedNotificationType | null } };

export type MarkNotificationAsReadMutationVariables = Exact<{
  notificationID: Scalars['UUID']['input'];
}>;


export type MarkNotificationAsReadMutation = { __typename: 'Mutation', markNotificationAsRead: { __typename: 'UserNotification', id: UUID, isRead: boolean } };

export type GetAllOpsEvalAndLearningQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetAllOpsEvalAndLearningQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, opsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID, modelPlanID: UUID, stakeholders: Array<StakeholdersType>, stakeholdersOther?: string | null, stakeholdersNote?: string | null, helpdeskUse?: boolean | null, helpdeskUseNote?: string | null, contractorSupport: Array<ContractorSupportType>, contractorSupportOther?: string | null, contractorSupportHow?: string | null, contractorSupportNote?: string | null, iddocSupport?: boolean | null, iddocSupportNote?: string | null, technicalContactsIdentified?: boolean | null, technicalContactsIdentifiedDetail?: string | null, technicalContactsIdentifiedNote?: string | null, captureParticipantInfo?: boolean | null, captureParticipantInfoNote?: string | null, icdOwner?: string | null, draftIcdDueDate?: Time | null, icdNote?: string | null, uatNeeds?: string | null, stcNeeds?: string | null, testingTimelines?: string | null, testingNote?: string | null, dataMonitoringFileTypes: Array<MonitoringFileType>, dataMonitoringFileOther?: string | null, dataResponseType?: string | null, dataResponseFileFrequency?: string | null, dataFullTimeOrIncremental?: DataFullTimeOrIncrementalType | null, eftSetUp?: boolean | null, unsolicitedAdjustmentsIncluded?: boolean | null, dataFlowDiagramsNeeded?: boolean | null, produceBenefitEnhancementFiles?: boolean | null, fileNamingConventions?: string | null, dataMonitoringNote?: string | null, benchmarkForPerformance?: BenchmarkForPerformanceType | null, benchmarkForPerformanceNote?: string | null, computePerformanceScores?: boolean | null, computePerformanceScoresNote?: string | null, riskAdjustPerformance?: boolean | null, riskAdjustFeedback?: boolean | null, riskAdjustPayments?: boolean | null, riskAdjustOther?: boolean | null, riskAdjustNote?: string | null, appealPerformance?: boolean | null, appealFeedback?: boolean | null, appealPayments?: boolean | null, appealOther?: boolean | null, appealNote?: string | null, evaluationApproaches: Array<EvaluationApproachType>, evaluationApproachOther?: string | null, evalutaionApproachNote?: string | null, ccmInvolvment: Array<CcmInvolvmentType>, ccmInvolvmentOther?: string | null, ccmInvolvmentNote?: string | null, dataNeededForMonitoring: Array<DataForMonitoringType>, dataNeededForMonitoringOther?: string | null, dataNeededForMonitoringNote?: string | null, dataToSendParticicipants: Array<DataToSendParticipantsType>, dataToSendParticicipantsOther?: string | null, dataToSendParticicipantsNote?: string | null, shareCclfData?: boolean | null, shareCclfDataNote?: string | null, sendFilesBetweenCcw?: boolean | null, sendFilesBetweenCcwNote?: string | null, appToSendFilesToKnown?: boolean | null, appToSendFilesToWhich?: string | null, appToSendFilesToNote?: string | null, useCcwForFileDistribiutionToParticipants?: boolean | null, useCcwForFileDistribiutionToParticipantsNote?: string | null, developNewQualityMeasures?: boolean | null, developNewQualityMeasuresNote?: string | null, qualityPerformanceImpactsPayment?: YesNoOtherType | null, qualityPerformanceImpactsPaymentOther?: string | null, qualityPerformanceImpactsPaymentNote?: string | null, dataSharingStarts?: DataStartsType | null, dataSharingStartsOther?: string | null, dataSharingFrequency: Array<FrequencyType>, dataSharingFrequencyContinually?: string | null, dataSharingFrequencyOther?: string | null, dataSharingStartsNote?: string | null, dataCollectionStarts?: DataStartsType | null, dataCollectionStartsOther?: string | null, dataCollectionFrequency: Array<FrequencyType>, dataCollectionFrequencyContinually?: string | null, dataCollectionFrequencyOther?: string | null, dataCollectionFrequencyNote?: string | null, qualityReportingStarts?: DataStartsType | null, qualityReportingStartsOther?: string | null, qualityReportingStartsNote?: string | null, qualityReportingFrequency: Array<FrequencyType>, qualityReportingFrequencyContinually?: string | null, qualityReportingFrequencyOther?: string | null, modelLearningSystems: Array<ModelLearningSystemType>, modelLearningSystemsOther?: string | null, modelLearningSystemsNote?: string | null, anticipatedChallenges?: string | null, createdDts: Time, modifiedDts?: Time | null, status: TaskStatus } } };

export type GetCcwAndQualityQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetCcwAndQualityQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, opsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID, ccmInvolvment: Array<CcmInvolvmentType>, dataNeededForMonitoring: Array<DataForMonitoringType>, iddocSupport?: boolean | null, sendFilesBetweenCcw?: boolean | null, sendFilesBetweenCcwNote?: string | null, appToSendFilesToKnown?: boolean | null, appToSendFilesToWhich?: string | null, appToSendFilesToNote?: string | null, useCcwForFileDistribiutionToParticipants?: boolean | null, useCcwForFileDistribiutionToParticipantsNote?: string | null, developNewQualityMeasures?: boolean | null, developNewQualityMeasuresNote?: string | null, qualityPerformanceImpactsPayment?: YesNoOtherType | null, qualityPerformanceImpactsPaymentOther?: string | null, qualityPerformanceImpactsPaymentNote?: string | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type GetDataSharingQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetDataSharingQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, opsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID, ccmInvolvment: Array<CcmInvolvmentType>, dataNeededForMonitoring: Array<DataForMonitoringType>, iddocSupport?: boolean | null, dataSharingStarts?: DataStartsType | null, dataSharingStartsOther?: string | null, dataSharingFrequency: Array<FrequencyType>, dataSharingFrequencyContinually?: string | null, dataSharingFrequencyOther?: string | null, dataSharingStartsNote?: string | null, dataCollectionStarts?: DataStartsType | null, dataCollectionStartsOther?: string | null, dataCollectionFrequency: Array<FrequencyType>, dataCollectionFrequencyContinually?: string | null, dataCollectionFrequencyOther?: string | null, dataCollectionFrequencyNote?: string | null, qualityReportingStarts?: DataStartsType | null, qualityReportingStartsOther?: string | null, qualityReportingStartsNote?: string | null, qualityReportingFrequency: Array<FrequencyType>, qualityReportingFrequencyContinually?: string | null, qualityReportingFrequencyOther?: string | null } } };

export type GetEvaluationQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetEvaluationQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, opsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID, ccmInvolvment: Array<CcmInvolvmentType>, dataNeededForMonitoring: Array<DataForMonitoringType>, iddocSupport?: boolean | null, evaluationApproaches: Array<EvaluationApproachType>, evaluationApproachOther?: string | null, evalutaionApproachNote?: string | null, ccmInvolvmentOther?: string | null, ccmInvolvmentNote?: string | null, dataNeededForMonitoringOther?: string | null, dataNeededForMonitoringNote?: string | null, dataToSendParticicipants: Array<DataToSendParticipantsType>, dataToSendParticicipantsOther?: string | null, dataToSendParticicipantsNote?: string | null, shareCclfData?: boolean | null, shareCclfDataNote?: string | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type GetIddocQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetIddocQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, opsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID, ccmInvolvment: Array<CcmInvolvmentType>, dataNeededForMonitoring: Array<DataForMonitoringType>, iddocSupport?: boolean | null, technicalContactsIdentified?: boolean | null, technicalContactsIdentifiedDetail?: string | null, technicalContactsIdentifiedNote?: string | null, captureParticipantInfo?: boolean | null, captureParticipantInfoNote?: string | null, icdOwner?: string | null, draftIcdDueDate?: Time | null, icdNote?: string | null } } };

export type GetIddocMonitoringQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetIddocMonitoringQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, opsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID, ccmInvolvment: Array<CcmInvolvmentType>, dataNeededForMonitoring: Array<DataForMonitoringType>, iddocSupport?: boolean | null, dataFullTimeOrIncremental?: DataFullTimeOrIncrementalType | null, eftSetUp?: boolean | null, unsolicitedAdjustmentsIncluded?: boolean | null, dataFlowDiagramsNeeded?: boolean | null, produceBenefitEnhancementFiles?: boolean | null, fileNamingConventions?: string | null, dataMonitoringNote?: string | null } } };

export type GetIddocTestingQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetIddocTestingQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, opsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID, ccmInvolvment: Array<CcmInvolvmentType>, dataNeededForMonitoring: Array<DataForMonitoringType>, iddocSupport?: boolean | null, uatNeeds?: string | null, stcNeeds?: string | null, testingTimelines?: string | null, testingNote?: string | null, dataMonitoringFileTypes: Array<MonitoringFileType>, dataMonitoringFileOther?: string | null, dataResponseType?: string | null, dataResponseFileFrequency?: string | null } } };

export type GetLearningQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetLearningQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, opsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID, ccmInvolvment: Array<CcmInvolvmentType>, dataNeededForMonitoring: Array<DataForMonitoringType>, iddocSupport?: boolean | null, modelLearningSystems: Array<ModelLearningSystemType>, modelLearningSystemsOther?: string | null, modelLearningSystemsNote?: string | null, anticipatedChallenges?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type GetOpsEvalAndLearningQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetOpsEvalAndLearningQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, opsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID, ccmInvolvment: Array<CcmInvolvmentType>, dataNeededForMonitoring: Array<DataForMonitoringType>, stakeholders: Array<StakeholdersType>, stakeholdersOther?: string | null, stakeholdersNote?: string | null, helpdeskUse?: boolean | null, helpdeskUseNote?: string | null, contractorSupport: Array<ContractorSupportType>, contractorSupportOther?: string | null, contractorSupportHow?: string | null, contractorSupportNote?: string | null, iddocSupport?: boolean | null, iddocSupportNote?: string | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type GetPerformanceQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetPerformanceQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, opsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID, ccmInvolvment: Array<CcmInvolvmentType>, dataNeededForMonitoring: Array<DataForMonitoringType>, iddocSupport?: boolean | null, benchmarkForPerformance?: BenchmarkForPerformanceType | null, benchmarkForPerformanceNote?: string | null, computePerformanceScores?: boolean | null, computePerformanceScoresNote?: string | null, riskAdjustPerformance?: boolean | null, riskAdjustFeedback?: boolean | null, riskAdjustPayments?: boolean | null, riskAdjustOther?: boolean | null, riskAdjustNote?: string | null, appealPerformance?: boolean | null, appealFeedback?: boolean | null, appealPayments?: boolean | null, appealOther?: boolean | null, appealNote?: string | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type UpdatePlanOpsEvalAndLearningMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: PlanOpsEvalAndLearningChanges;
}>;


export type UpdatePlanOpsEvalAndLearningMutation = { __typename: 'Mutation', updatePlanOpsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID } };

export type GetAllParticipantsAndProvidersQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetAllParticipantsAndProvidersQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, participantsAndProviders: { __typename: 'PlanParticipantsAndProviders', id: UUID, participants: Array<ParticipantsType>, medicareProviderType?: string | null, isNewTypeOfProvidersOrSuppliers?: boolean | null, statesEngagement?: string | null, participantsOther?: string | null, participantsNote?: string | null, participantsCurrentlyInModels?: boolean | null, participantsCurrentlyInModelsNote?: string | null, modelApplicationLevel?: string | null, expectedNumberOfParticipants?: number | null, estimateConfidence?: ConfidenceType | null, confidenceNote?: string | null, recruitmentMethod?: RecruitmentType | null, recruitmentOther?: string | null, recruitmentNote?: string | null, selectionMethod: Array<ParticipantSelectionType>, selectionOther?: string | null, selectionNote?: string | null, participantAddedFrequency: Array<FrequencyType>, participantAddedFrequencyContinually?: string | null, participantAddedFrequencyOther?: string | null, participantAddedFrequencyNote?: string | null, participantRemovedFrequency: Array<FrequencyType>, participantRemovedFrequencyContinually?: string | null, participantRemovedFrequencyOther?: string | null, participantRemovedFrequencyNote?: string | null, communicationMethod: Array<ParticipantCommunicationType>, communicationMethodOther?: string | null, communicationNote?: string | null, riskType: Array<ParticipantRiskType>, riskOther?: string | null, riskNote?: string | null, willRiskChange?: boolean | null, willRiskChangeNote?: string | null, participantRequireFinancialGuarantee?: boolean | null, participantRequireFinancialGuaranteeType: Array<ParticipantRequireFinancialGuaranteeType>, participantRequireFinancialGuaranteeOther?: string | null, participantRequireFinancialGuaranteeNote?: string | null, coordinateWork?: boolean | null, coordinateWorkNote?: string | null, gainsharePayments?: boolean | null, gainsharePaymentsTrack?: boolean | null, gainsharePaymentsNote?: string | null, gainsharePaymentsEligibility: Array<GainshareArrangementEligibility>, gainsharePaymentsEligibilityOther?: string | null, participantsIds: Array<ParticipantsIdType>, participantsIdsOther?: string | null, participantsIDSNote?: string | null, providerAdditionFrequency: Array<FrequencyType>, providerAdditionFrequencyContinually?: string | null, providerAdditionFrequencyOther?: string | null, providerAdditionFrequencyNote?: string | null, providerAddMethod: Array<ProviderAddType>, providerAddMethodOther?: string | null, providerAddMethodNote?: string | null, providerLeaveMethod: Array<ProviderLeaveType>, providerLeaveMethodOther?: string | null, providerLeaveMethodNote?: string | null, providerRemovalFrequency: Array<FrequencyType>, providerRemovalFrequencyContinually?: string | null, providerRemovalFrequencyOther?: string | null, providerRemovalFrequencyNote?: string | null, providerOverlap?: OverlapType | null, providerOverlapHierarchy?: string | null, providerOverlapNote?: string | null, createdDts: Time, modifiedDts?: Time | null, status: TaskStatus } } };

export type GetCommunicationQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetCommunicationQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, participantsAndProviders: { __typename: 'PlanParticipantsAndProviders', id: UUID, participantAddedFrequency: Array<FrequencyType>, participantAddedFrequencyContinually?: string | null, participantAddedFrequencyOther?: string | null, participantAddedFrequencyNote?: string | null, participantRemovedFrequency: Array<FrequencyType>, participantRemovedFrequencyContinually?: string | null, participantRemovedFrequencyOther?: string | null, participantRemovedFrequencyNote?: string | null, communicationMethod: Array<ParticipantCommunicationType>, communicationMethodOther?: string | null, communicationNote?: string | null, riskType: Array<ParticipantRiskType>, riskOther?: string | null, riskNote?: string | null, willRiskChange?: boolean | null, willRiskChangeNote?: string | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type GetCoordinationQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetCoordinationQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, participantsAndProviders: { __typename: 'PlanParticipantsAndProviders', id: UUID, participantRequireFinancialGuarantee?: boolean | null, participantRequireFinancialGuaranteeType: Array<ParticipantRequireFinancialGuaranteeType>, participantRequireFinancialGuaranteeOther?: string | null, participantRequireFinancialGuaranteeNote?: string | null, coordinateWork?: boolean | null, coordinateWorkNote?: string | null, gainsharePayments?: boolean | null, gainsharePaymentsEligibility: Array<GainshareArrangementEligibility>, gainsharePaymentsEligibilityOther?: string | null, gainsharePaymentsTrack?: boolean | null, gainsharePaymentsNote?: string | null, participantsIds: Array<ParticipantsIdType>, participantsIdsOther?: string | null, participantsIDSNote?: string | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type GetParticipantOptionsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetParticipantOptionsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, participantsAndProviders: { __typename: 'PlanParticipantsAndProviders', id: UUID, expectedNumberOfParticipants?: number | null, estimateConfidence?: ConfidenceType | null, confidenceNote?: string | null, recruitmentMethod?: RecruitmentType | null, recruitmentOther?: string | null, recruitmentNote?: string | null, selectionMethod: Array<ParticipantSelectionType>, selectionOther?: string | null, selectionNote?: string | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type GetParticipantsAndProvidersQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetParticipantsAndProvidersQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, participantsAndProviders: { __typename: 'PlanParticipantsAndProviders', id: UUID, participants: Array<ParticipantsType>, medicareProviderType?: string | null, isNewTypeOfProvidersOrSuppliers?: boolean | null, statesEngagement?: string | null, participantsOther?: string | null, participantsNote?: string | null, participantsCurrentlyInModels?: boolean | null, participantsCurrentlyInModelsNote?: string | null, modelApplicationLevel?: string | null } } };

export type GetProviderOptionsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetProviderOptionsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, participantsAndProviders: { __typename: 'PlanParticipantsAndProviders', id: UUID, providerAdditionFrequency: Array<FrequencyType>, providerAdditionFrequencyContinually?: string | null, providerAdditionFrequencyOther?: string | null, providerAdditionFrequencyNote?: string | null, providerAddMethod: Array<ProviderAddType>, providerAddMethodOther?: string | null, providerAddMethodNote?: string | null, providerLeaveMethod: Array<ProviderLeaveType>, providerLeaveMethodOther?: string | null, providerLeaveMethodNote?: string | null, providerRemovalFrequency: Array<FrequencyType>, providerRemovalFrequencyContinually?: string | null, providerRemovalFrequencyOther?: string | null, providerRemovalFrequencyNote?: string | null, providerOverlap?: OverlapType | null, providerOverlapHierarchy?: string | null, providerOverlapNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type UpdatePlanParticipantsAndProvidersMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: PlanParticipantsAndProvidersChanges;
}>;


export type UpdatePlanParticipantsAndProvidersMutation = { __typename: 'Mutation', updatePlanParticipantsAndProviders: { __typename: 'PlanParticipantsAndProviders', id: UUID } };

export type GetAllPaymentsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetAllPaymentsQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, payments: { __typename: 'PlanPayments', fundingSource: Array<FundingSource>, fundingSourcePatientProtectionInfo?: string | null, fundingSourceMedicareAInfo?: string | null, fundingSourceMedicareBInfo?: string | null, fundingSourceOther?: string | null, fundingSourceNote?: string | null, fundingSourceR: Array<FundingSource>, fundingSourceRPatientProtectionInfo?: string | null, fundingSourceRMedicareAInfo?: string | null, fundingSourceRMedicareBInfo?: string | null, fundingSourceROther?: string | null, fundingSourceRNote?: string | null, payRecipients: Array<PayRecipient>, payRecipientsOtherSpecification?: string | null, payRecipientsNote?: string | null, payType: Array<PayType>, payTypeNote?: string | null, payClaims: Array<ClaimsBasedPayType>, payClaimsOther?: string | null, payClaimsNote?: string | null, shouldAnyProvidersExcludedFFSSystems?: boolean | null, shouldAnyProviderExcludedFFSSystemsNote?: string | null, changesMedicarePhysicianFeeSchedule?: boolean | null, changesMedicarePhysicianFeeScheduleNote?: string | null, affectsMedicareSecondaryPayerClaims?: boolean | null, affectsMedicareSecondaryPayerClaimsHow?: string | null, affectsMedicareSecondaryPayerClaimsNote?: string | null, payModelDifferentiation?: string | null, willBePaymentAdjustments?: boolean | null, willBePaymentAdjustmentsNote?: string | null, creatingDependenciesBetweenServices?: boolean | null, creatingDependenciesBetweenServicesNote?: string | null, needsClaimsDataCollection?: boolean | null, needsClaimsDataCollectionNote?: string | null, providingThirdPartyFile?: boolean | null, isContractorAwareTestDataRequirements?: boolean | null, beneficiaryCostSharingLevelAndHandling?: string | null, waiveBeneficiaryCostSharingForAnyServices?: boolean | null, waiveBeneficiaryCostSharingServiceSpecification?: string | null, waiverOnlyAppliesPartOfPayment?: boolean | null, waiveBeneficiaryCostSharingNote?: string | null, nonClaimsPayments: Array<NonClaimsBasedPayType>, nonClaimsPaymentsNote?: string | null, nonClaimsPaymentOther?: string | null, paymentCalculationOwner?: string | null, numberPaymentsPerPayCycle?: string | null, numberPaymentsPerPayCycleNote?: string | null, sharedSystemsInvolvedAdditionalClaimPayment?: boolean | null, sharedSystemsInvolvedAdditionalClaimPaymentNote?: string | null, planningToUseInnovationPaymentContractor?: boolean | null, planningToUseInnovationPaymentContractorNote?: string | null, expectedCalculationComplexityLevel?: ComplexityCalculationLevelType | null, expectedCalculationComplexityLevelNote?: string | null, claimsProcessingPrecedence?: boolean | null, claimsProcessingPrecedenceOther?: string | null, claimsProcessingPrecedenceNote?: string | null, canParticipantsSelectBetweenPaymentMechanisms?: boolean | null, canParticipantsSelectBetweenPaymentMechanismsHow?: string | null, canParticipantsSelectBetweenPaymentMechanismsNote?: string | null, anticipatedPaymentFrequency: Array<FrequencyType>, anticipatedPaymentFrequencyContinually?: string | null, anticipatedPaymentFrequencyOther?: string | null, anticipatedPaymentFrequencyNote?: string | null, willRecoverPayments?: boolean | null, willRecoverPaymentsNote?: string | null, anticipateReconcilingPaymentsRetrospectively?: boolean | null, anticipateReconcilingPaymentsRetrospectivelyNote?: string | null, paymentReconciliationFrequency: Array<FrequencyType>, paymentReconciliationFrequencyContinually?: string | null, paymentReconciliationFrequencyOther?: string | null, paymentReconciliationFrequencyNote?: string | null, paymentDemandRecoupmentFrequency: Array<FrequencyType>, paymentDemandRecoupmentFrequencyContinually?: string | null, paymentDemandRecoupmentFrequencyOther?: string | null, paymentDemandRecoupmentFrequencyNote?: string | null, paymentStartDate?: Time | null, paymentStartDateNote?: string | null, createdDts: Time, modifiedDts?: Time | null, status: TaskStatus } } };

export type GetAnticipateDependenciesQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetAnticipateDependenciesQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, payments: { __typename: 'PlanPayments', id: UUID, payType: Array<PayType>, payClaims: Array<ClaimsBasedPayType>, willBePaymentAdjustments?: boolean | null, willBePaymentAdjustmentsNote?: string | null, creatingDependenciesBetweenServices?: boolean | null, creatingDependenciesBetweenServicesNote?: string | null, needsClaimsDataCollection?: boolean | null, needsClaimsDataCollectionNote?: string | null, providingThirdPartyFile?: boolean | null, isContractorAwareTestDataRequirements?: boolean | null } } };

export type GetBeneficiaryCostSharingQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetBeneficiaryCostSharingQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, payments: { __typename: 'PlanPayments', id: UUID, payType: Array<PayType>, payClaims: Array<ClaimsBasedPayType>, beneficiaryCostSharingLevelAndHandling?: string | null, waiveBeneficiaryCostSharingForAnyServices?: boolean | null, waiveBeneficiaryCostSharingServiceSpecification?: string | null, waiverOnlyAppliesPartOfPayment?: boolean | null, waiveBeneficiaryCostSharingNote?: string | null } } };

export type GetClaimsBasedPaymentQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetClaimsBasedPaymentQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, payments: { __typename: 'PlanPayments', id: UUID, payType: Array<PayType>, payClaims: Array<ClaimsBasedPayType>, payClaimsNote?: string | null, payClaimsOther?: string | null, shouldAnyProvidersExcludedFFSSystems?: boolean | null, shouldAnyProviderExcludedFFSSystemsNote?: string | null, changesMedicarePhysicianFeeSchedule?: boolean | null, changesMedicarePhysicianFeeScheduleNote?: string | null, affectsMedicareSecondaryPayerClaims?: boolean | null, affectsMedicareSecondaryPayerClaimsHow?: string | null, affectsMedicareSecondaryPayerClaimsNote?: string | null, payModelDifferentiation?: string | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type GetComplexityQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetComplexityQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, payments: { __typename: 'PlanPayments', id: UUID, payType: Array<PayType>, payClaims: Array<ClaimsBasedPayType>, expectedCalculationComplexityLevel?: ComplexityCalculationLevelType | null, expectedCalculationComplexityLevelNote?: string | null, claimsProcessingPrecedence?: boolean | null, claimsProcessingPrecedenceOther?: string | null, claimsProcessingPrecedenceNote?: string | null, canParticipantsSelectBetweenPaymentMechanisms?: boolean | null, canParticipantsSelectBetweenPaymentMechanismsHow?: string | null, canParticipantsSelectBetweenPaymentMechanismsNote?: string | null, anticipatedPaymentFrequency: Array<FrequencyType>, anticipatedPaymentFrequencyContinually?: string | null, anticipatedPaymentFrequencyOther?: string | null, anticipatedPaymentFrequencyNote?: string | null } } };

export type GetFundingQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetFundingQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, payments: { __typename: 'PlanPayments', id: UUID, fundingSource: Array<FundingSource>, fundingSourcePatientProtectionInfo?: string | null, fundingSourceMedicareAInfo?: string | null, fundingSourceMedicareBInfo?: string | null, fundingSourceOther?: string | null, fundingSourceNote?: string | null, fundingSourceR: Array<FundingSource>, fundingSourceRPatientProtectionInfo?: string | null, fundingSourceRMedicareAInfo?: string | null, fundingSourceRMedicareBInfo?: string | null, fundingSourceROther?: string | null, fundingSourceRNote?: string | null, payRecipients: Array<PayRecipient>, payRecipientsOtherSpecification?: string | null, payRecipientsNote?: string | null, payType: Array<PayType>, payTypeNote?: string | null, payClaims: Array<ClaimsBasedPayType> }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type GetNonClaimsBasedPaymentQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetNonClaimsBasedPaymentQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, payments: { __typename: 'PlanPayments', id: UUID, payType: Array<PayType>, payClaims: Array<ClaimsBasedPayType>, nonClaimsPayments: Array<NonClaimsBasedPayType>, nonClaimsPaymentsNote?: string | null, nonClaimsPaymentOther?: string | null, paymentCalculationOwner?: string | null, numberPaymentsPerPayCycle?: string | null, numberPaymentsPerPayCycleNote?: string | null, sharedSystemsInvolvedAdditionalClaimPayment?: boolean | null, sharedSystemsInvolvedAdditionalClaimPaymentNote?: string | null, planningToUseInnovationPaymentContractor?: boolean | null, planningToUseInnovationPaymentContractorNote?: string | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type GetRecoverQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetRecoverQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, payments: { __typename: 'PlanPayments', id: UUID, payType: Array<PayType>, payClaims: Array<ClaimsBasedPayType>, willRecoverPayments?: boolean | null, willRecoverPaymentsNote?: string | null, anticipateReconcilingPaymentsRetrospectively?: boolean | null, anticipateReconcilingPaymentsRetrospectivelyNote?: string | null, paymentReconciliationFrequency: Array<FrequencyType>, paymentReconciliationFrequencyContinually?: string | null, paymentReconciliationFrequencyOther?: string | null, paymentReconciliationFrequencyNote?: string | null, paymentDemandRecoupmentFrequency: Array<FrequencyType>, paymentDemandRecoupmentFrequencyContinually?: string | null, paymentDemandRecoupmentFrequencyOther?: string | null, paymentDemandRecoupmentFrequencyNote?: string | null, paymentStartDate?: Time | null, paymentStartDateNote?: string | null, readyForReviewDts?: Time | null, status: TaskStatus, readyForReviewByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, operationalNeeds: Array<{ __typename: 'OperationalNeed', id: UUID, modifiedDts?: Time | null }> } };

export type UpdatePaymentsMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: PlanPaymentsChanges;
}>;


export type UpdatePaymentsMutation = { __typename: 'Mutation', updatePlanPayments: { __typename: 'PlanPayments', id: UUID } };

export type GetClearanceStatusesQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
  includePrepareForClearance: Scalars['Boolean']['input'];
}>;


export type GetClearanceStatusesQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, basics: { __typename: 'PlanBasics', id: UUID, readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, generalCharacteristics: { __typename: 'PlanGeneralCharacteristics', id: UUID, readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, participantsAndProviders: { __typename: 'PlanParticipantsAndProviders', id: UUID, readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, beneficiaries: { __typename: 'PlanBeneficiaries', id: UUID, readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, opsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', id: UUID, readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, payments: { __typename: 'PlanPayments', id: UUID, readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, prepareForClearance?: { __typename: 'PrepareForClearance', status: PrepareForClearanceStatus } } };

export type UpdateClearanceBasicsMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: PlanBasicsChanges;
}>;


export type UpdateClearanceBasicsMutation = { __typename: 'Mutation', updatePlanBasics: { __typename: 'PlanBasics', readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null } };

export type UpdateClearanceBeneficiariesMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: PlanBeneficiariesChanges;
}>;


export type UpdateClearanceBeneficiariesMutation = { __typename: 'Mutation', updatePlanBeneficiaries: { __typename: 'PlanBeneficiaries', readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null } };

export type UpdateClearanceCharacteristicsMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: PlanGeneralCharacteristicsChanges;
}>;


export type UpdateClearanceCharacteristicsMutation = { __typename: 'Mutation', updatePlanGeneralCharacteristics: { __typename: 'PlanGeneralCharacteristics', readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null } };

export type UpdateClearanceOpsEvalAndLearningMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: PlanOpsEvalAndLearningChanges;
}>;


export type UpdateClearanceOpsEvalAndLearningMutation = { __typename: 'Mutation', updatePlanOpsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null } };

export type UpdateClearanceParticipantsAndProvidersMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: PlanParticipantsAndProvidersChanges;
}>;


export type UpdateClearanceParticipantsAndProvidersMutation = { __typename: 'Mutation', updatePlanParticipantsAndProviders: { __typename: 'PlanParticipantsAndProviders', readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null } };

export type UpdateClearancePaymentsMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  changes: PlanPaymentsChanges;
}>;


export type UpdateClearancePaymentsMutation = { __typename: 'Mutation', updatePlanPayments: { __typename: 'PlanPayments', readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null } };

export type UpdatePrepareForClearanceMutationVariables = Exact<{
  basicsID: Scalars['UUID']['input'];
  basicsChanges: PlanBasicsChanges;
  characteristicsID: Scalars['UUID']['input'];
  characteristicsChanges: PlanGeneralCharacteristicsChanges;
  participantsAndProvidersID: Scalars['UUID']['input'];
  participantsAndProvidersChanges: PlanParticipantsAndProvidersChanges;
  beneficiariesID: Scalars['UUID']['input'];
  benficiariesChanges: PlanBeneficiariesChanges;
  opsEvalAndLearningID: Scalars['UUID']['input'];
  opsEvalAndLearningChanges: PlanOpsEvalAndLearningChanges;
  paymentsID: Scalars['UUID']['input'];
  paymentsChanges: PlanPaymentsChanges;
}>;


export type UpdatePrepareForClearanceMutation = { __typename: 'Mutation', updatePlanBasics: { __typename: 'PlanBasics', readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, updatePlanGeneralCharacteristics: { __typename: 'PlanGeneralCharacteristics', readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, updatePlanParticipantsAndProviders: { __typename: 'PlanParticipantsAndProviders', readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, updatePlanBeneficiaries: { __typename: 'PlanBeneficiaries', readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, updatePlanOpsEvalAndLearning: { __typename: 'PlanOpsEvalAndLearning', readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null }, updatePlanPayments: { __typename: 'PlanPayments', readyForClearanceDts?: Time | null, status: TaskStatus, readyForClearanceByUserAccount?: { __typename: 'UserAccount', id: UUID, commonName: string } | null } };

export type GetModelSummaryQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetModelSummaryQuery = { __typename: 'Query', modelPlan: { __typename: 'ModelPlan', id: UUID, modelName: string, abbreviation?: string | null, createdDts: Time, modifiedDts?: Time | null, status: ModelStatus, isFavorite: boolean, isCollaborator: boolean, basics: { __typename: 'PlanBasics', goal?: string | null, performancePeriodStarts?: Time | null }, generalCharacteristics: { __typename: 'PlanGeneralCharacteristics', keyCharacteristics: Array<KeyCharacteristic> }, collaborators: Array<{ __typename: 'PlanCollaborator', teamRoles: Array<TeamRole>, userAccount: { __typename: 'UserAccount', id: UUID, commonName: string, email: string, username: string } }>, crs: Array<{ __typename: 'PlanCR', id: UUID, idNumber: string }>, tdls: Array<{ __typename: 'PlanTDL', id: UUID, idNumber: string }> } };

export type CreateShareModelPlanMutationVariables = Exact<{
  modelPlanID: Scalars['UUID']['input'];
  viewFilter?: InputMaybe<ModelViewFilter>;
  usernames: Array<Scalars['String']['input']> | Scalars['String']['input'];
  optionalMessage?: InputMaybe<Scalars['String']['input']>;
}>;


export type CreateShareModelPlanMutation = { __typename: 'Mutation', shareModelPlan: boolean };

export type GetPossibleSolutionsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPossibleSolutionsQuery = { __typename: 'Query', possibleOperationalSolutions: Array<{ __typename: 'PossibleOperationalSolution', id: number, key: OperationalSolutionKey, pointsOfContact: Array<{ __typename: 'PossibleOperationalSolutionContact', id: UUID, name: string, email: string, isTeam: boolean, isPrimary: boolean, role?: string | null }> }> };

export type GetTaskListSubscriptionsQueryVariables = Exact<{
  modelPlanID: Scalars['UUID']['input'];
}>;


export type GetTaskListSubscriptionsQuery = { __typename: 'Query', taskListSectionLocks: Array<{ __typename: 'TaskListSectionLockStatus', modelPlanID: UUID, section: TaskListSection, isAssessment: boolean, lockedByUserAccount: { __typename: 'UserAccount', id: UUID, username: string, commonName: string } }> };

export type LockTaskListSectionMutationVariables = Exact<{
  modelPlanID: Scalars['UUID']['input'];
  section: TaskListSection;
}>;


export type LockTaskListSectionMutation = { __typename: 'Mutation', lockTaskListSection: boolean };

export type TaskListSubscriptionSubscriptionVariables = Exact<{
  modelPlanID: Scalars['UUID']['input'];
}>;


export type TaskListSubscriptionSubscription = { __typename: 'Subscription', onLockTaskListSectionContext: { __typename: 'TaskListSectionLockStatusChanged', changeType: ChangeType, actionType: ActionType, lockStatus: { __typename: 'TaskListSectionLockStatus', modelPlanID: UUID, section: TaskListSection, isAssessment: boolean, lockedByUserAccount: { __typename: 'UserAccount', id: UUID, username: string, commonName: string } } } };

export type UnlockTaskListSectionMutationVariables = Exact<{
  modelPlanID: Scalars['UUID']['input'];
  section: TaskListSection;
}>;


export type UnlockTaskListSectionMutation = { __typename: 'Mutation', unlockTaskListSection: boolean };

export const ReadyForReviewUserFragmentFragmentDoc = gql`
    fragment ReadyForReviewUserFragment on UserAccount {
  id
  commonName
}
    `;
export const GetAllBasicsDocument = gql`
    query GetAllBasics($id: UUID!) {
  modelPlan(id: $id) {
    id
    nameHistory(sort: DESC)
    isCollaborator
    basics {
      id
      demoCode
      amsModelID
      modelCategory
      additionalModelCategories
      cmsCenters
      cmmiGroups
      modelType
      modelTypeOther
      problem
      goal
      testInterventions
      note
      completeICIP
      clearanceStarts
      clearanceEnds
      announced
      applicationsStart
      applicationsEnd
      performancePeriodStarts
      performancePeriodEnds
      wrapUpEnds
      highLevelNote
      phasedIn
      phasedInNote
      createdDts
      modifiedDts
      status
    }
  }
}
    `;

/**
 * __useGetAllBasicsQuery__
 *
 * To run a query within a React component, call `useGetAllBasicsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllBasicsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllBasicsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAllBasicsQuery(baseOptions: Apollo.QueryHookOptions<GetAllBasicsQuery, GetAllBasicsQueryVariables> & ({ variables: GetAllBasicsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllBasicsQuery, GetAllBasicsQueryVariables>(GetAllBasicsDocument, options);
      }
export function useGetAllBasicsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllBasicsQuery, GetAllBasicsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllBasicsQuery, GetAllBasicsQueryVariables>(GetAllBasicsDocument, options);
        }
export function useGetAllBasicsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAllBasicsQuery, GetAllBasicsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAllBasicsQuery, GetAllBasicsQueryVariables>(GetAllBasicsDocument, options);
        }
export type GetAllBasicsQueryHookResult = ReturnType<typeof useGetAllBasicsQuery>;
export type GetAllBasicsLazyQueryHookResult = ReturnType<typeof useGetAllBasicsLazyQuery>;
export type GetAllBasicsSuspenseQueryHookResult = ReturnType<typeof useGetAllBasicsSuspenseQuery>;
export type GetAllBasicsQueryResult = Apollo.QueryResult<GetAllBasicsQuery, GetAllBasicsQueryVariables>;
export const GetBasicsDocument = gql`
    query GetBasics($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    abbreviation
    nameHistory(sort: DESC)
    basics {
      id
      demoCode
      amsModelID
      modelCategory
      additionalModelCategories
      cmsCenters
      cmmiGroups
    }
  }
}
    `;

/**
 * __useGetBasicsQuery__
 *
 * To run a query within a React component, call `useGetBasicsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBasicsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBasicsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetBasicsQuery(baseOptions: Apollo.QueryHookOptions<GetBasicsQuery, GetBasicsQueryVariables> & ({ variables: GetBasicsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetBasicsQuery, GetBasicsQueryVariables>(GetBasicsDocument, options);
      }
export function useGetBasicsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetBasicsQuery, GetBasicsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetBasicsQuery, GetBasicsQueryVariables>(GetBasicsDocument, options);
        }
export function useGetBasicsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetBasicsQuery, GetBasicsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetBasicsQuery, GetBasicsQueryVariables>(GetBasicsDocument, options);
        }
export type GetBasicsQueryHookResult = ReturnType<typeof useGetBasicsQuery>;
export type GetBasicsLazyQueryHookResult = ReturnType<typeof useGetBasicsLazyQuery>;
export type GetBasicsSuspenseQueryHookResult = ReturnType<typeof useGetBasicsSuspenseQuery>;
export type GetBasicsQueryResult = Apollo.QueryResult<GetBasicsQuery, GetBasicsQueryVariables>;
export const GetMilestonesDocument = gql`
    query GetMilestones($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    basics {
      id
      completeICIP
      clearanceStarts
      clearanceEnds
      announced
      applicationsStart
      applicationsEnd
      performancePeriodStarts
      performancePeriodEnds
      highLevelNote
      wrapUpEnds
      phasedIn
      phasedInNote
      readyForReviewByUserAccount {
        ...ReadyForReviewUserFragment
      }
      readyForReviewDts
      status
    }
  }
}
    ${ReadyForReviewUserFragmentFragmentDoc}`;

/**
 * __useGetMilestonesQuery__
 *
 * To run a query within a React component, call `useGetMilestonesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMilestonesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMilestonesQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetMilestonesQuery(baseOptions: Apollo.QueryHookOptions<GetMilestonesQuery, GetMilestonesQueryVariables> & ({ variables: GetMilestonesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetMilestonesQuery, GetMilestonesQueryVariables>(GetMilestonesDocument, options);
      }
export function useGetMilestonesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMilestonesQuery, GetMilestonesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetMilestonesQuery, GetMilestonesQueryVariables>(GetMilestonesDocument, options);
        }
export function useGetMilestonesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetMilestonesQuery, GetMilestonesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetMilestonesQuery, GetMilestonesQueryVariables>(GetMilestonesDocument, options);
        }
export type GetMilestonesQueryHookResult = ReturnType<typeof useGetMilestonesQuery>;
export type GetMilestonesLazyQueryHookResult = ReturnType<typeof useGetMilestonesLazyQuery>;
export type GetMilestonesSuspenseQueryHookResult = ReturnType<typeof useGetMilestonesSuspenseQuery>;
export type GetMilestonesQueryResult = Apollo.QueryResult<GetMilestonesQuery, GetMilestonesQueryVariables>;
export const GetOverviewDocument = gql`
    query GetOverview($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    basics {
      id
      modelType
      modelTypeOther
      problem
      goal
      testInterventions
      note
    }
  }
}
    `;

/**
 * __useGetOverviewQuery__
 *
 * To run a query within a React component, call `useGetOverviewQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOverviewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOverviewQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetOverviewQuery(baseOptions: Apollo.QueryHookOptions<GetOverviewQuery, GetOverviewQueryVariables> & ({ variables: GetOverviewQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOverviewQuery, GetOverviewQueryVariables>(GetOverviewDocument, options);
      }
export function useGetOverviewLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOverviewQuery, GetOverviewQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOverviewQuery, GetOverviewQueryVariables>(GetOverviewDocument, options);
        }
export function useGetOverviewSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetOverviewQuery, GetOverviewQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetOverviewQuery, GetOverviewQueryVariables>(GetOverviewDocument, options);
        }
export type GetOverviewQueryHookResult = ReturnType<typeof useGetOverviewQuery>;
export type GetOverviewLazyQueryHookResult = ReturnType<typeof useGetOverviewLazyQuery>;
export type GetOverviewSuspenseQueryHookResult = ReturnType<typeof useGetOverviewSuspenseQuery>;
export type GetOverviewQueryResult = Apollo.QueryResult<GetOverviewQuery, GetOverviewQueryVariables>;
export const UpdateBasicsDocument = gql`
    mutation UpdateBasics($id: UUID!, $changes: PlanBasicsChanges!) {
  updatePlanBasics(id: $id, changes: $changes) {
    id
  }
}
    `;
export type UpdateBasicsMutationFn = Apollo.MutationFunction<UpdateBasicsMutation, UpdateBasicsMutationVariables>;

/**
 * __useUpdateBasicsMutation__
 *
 * To run a mutation, you first call `useUpdateBasicsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateBasicsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateBasicsMutation, { data, loading, error }] = useUpdateBasicsMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdateBasicsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateBasicsMutation, UpdateBasicsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateBasicsMutation, UpdateBasicsMutationVariables>(UpdateBasicsDocument, options);
      }
export type UpdateBasicsMutationHookResult = ReturnType<typeof useUpdateBasicsMutation>;
export type UpdateBasicsMutationResult = Apollo.MutationResult<UpdateBasicsMutation>;
export type UpdateBasicsMutationOptions = Apollo.BaseMutationOptions<UpdateBasicsMutation, UpdateBasicsMutationVariables>;
export const UpdateModelPlanAndBasicsDocument = gql`
    mutation UpdateModelPlanAndBasics($id: UUID!, $changes: ModelPlanChanges!, $basicsId: UUID!, $basicsChanges: PlanBasicsChanges!) {
  updateModelPlan(id: $id, changes: $changes) {
    id
  }
  updatePlanBasics(id: $basicsId, changes: $basicsChanges) {
    id
  }
}
    `;
export type UpdateModelPlanAndBasicsMutationFn = Apollo.MutationFunction<UpdateModelPlanAndBasicsMutation, UpdateModelPlanAndBasicsMutationVariables>;

/**
 * __useUpdateModelPlanAndBasicsMutation__
 *
 * To run a mutation, you first call `useUpdateModelPlanAndBasicsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateModelPlanAndBasicsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateModelPlanAndBasicsMutation, { data, loading, error }] = useUpdateModelPlanAndBasicsMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *      basicsId: // value for 'basicsId'
 *      basicsChanges: // value for 'basicsChanges'
 *   },
 * });
 */
export function useUpdateModelPlanAndBasicsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateModelPlanAndBasicsMutation, UpdateModelPlanAndBasicsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateModelPlanAndBasicsMutation, UpdateModelPlanAndBasicsMutationVariables>(UpdateModelPlanAndBasicsDocument, options);
      }
export type UpdateModelPlanAndBasicsMutationHookResult = ReturnType<typeof useUpdateModelPlanAndBasicsMutation>;
export type UpdateModelPlanAndBasicsMutationResult = Apollo.MutationResult<UpdateModelPlanAndBasicsMutation>;
export type UpdateModelPlanAndBasicsMutationOptions = Apollo.BaseMutationOptions<UpdateModelPlanAndBasicsMutation, UpdateModelPlanAndBasicsMutationVariables>;
export const GetAllBeneficiariesDocument = gql`
    query GetAllBeneficiaries($id: UUID!) {
  modelPlan(id: $id) {
    id
    beneficiaries {
      id
      modelPlanID
      beneficiaries
      diseaseSpecificGroup
      beneficiariesOther
      beneficiariesNote
      treatDualElligibleDifferent
      treatDualElligibleDifferentHow
      treatDualElligibleDifferentNote
      excludeCertainCharacteristics
      excludeCertainCharacteristicsCriteria
      excludeCertainCharacteristicsNote
      numberPeopleImpacted
      estimateConfidence
      confidenceNote
      beneficiarySelectionMethod
      beneficiarySelectionOther
      beneficiarySelectionNote
      beneficiarySelectionFrequency
      beneficiarySelectionFrequencyContinually
      beneficiarySelectionFrequencyOther
      beneficiarySelectionFrequencyNote
      beneficiaryRemovalFrequency
      beneficiaryRemovalFrequencyContinually
      beneficiaryRemovalFrequencyNote
      beneficiaryRemovalFrequencyOther
      beneficiaryOverlap
      beneficiaryOverlapNote
      precedenceRules
      precedenceRulesYes
      precedenceRulesNo
      precedenceRulesNote
      createdDts
      modifiedDts
      status
    }
  }
}
    `;

/**
 * __useGetAllBeneficiariesQuery__
 *
 * To run a query within a React component, call `useGetAllBeneficiariesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllBeneficiariesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllBeneficiariesQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAllBeneficiariesQuery(baseOptions: Apollo.QueryHookOptions<GetAllBeneficiariesQuery, GetAllBeneficiariesQueryVariables> & ({ variables: GetAllBeneficiariesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllBeneficiariesQuery, GetAllBeneficiariesQueryVariables>(GetAllBeneficiariesDocument, options);
      }
export function useGetAllBeneficiariesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllBeneficiariesQuery, GetAllBeneficiariesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllBeneficiariesQuery, GetAllBeneficiariesQueryVariables>(GetAllBeneficiariesDocument, options);
        }
export function useGetAllBeneficiariesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAllBeneficiariesQuery, GetAllBeneficiariesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAllBeneficiariesQuery, GetAllBeneficiariesQueryVariables>(GetAllBeneficiariesDocument, options);
        }
export type GetAllBeneficiariesQueryHookResult = ReturnType<typeof useGetAllBeneficiariesQuery>;
export type GetAllBeneficiariesLazyQueryHookResult = ReturnType<typeof useGetAllBeneficiariesLazyQuery>;
export type GetAllBeneficiariesSuspenseQueryHookResult = ReturnType<typeof useGetAllBeneficiariesSuspenseQuery>;
export type GetAllBeneficiariesQueryResult = Apollo.QueryResult<GetAllBeneficiariesQuery, GetAllBeneficiariesQueryVariables>;
export const GetBeneficiaryIdentificationDocument = gql`
    query GetBeneficiaryIdentification($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    beneficiaries {
      id
      beneficiaries
      diseaseSpecificGroup
      beneficiariesOther
      beneficiariesNote
      treatDualElligibleDifferent
      treatDualElligibleDifferentHow
      treatDualElligibleDifferentNote
      excludeCertainCharacteristics
      excludeCertainCharacteristicsCriteria
      excludeCertainCharacteristicsNote
    }
  }
}
    `;

/**
 * __useGetBeneficiaryIdentificationQuery__
 *
 * To run a query within a React component, call `useGetBeneficiaryIdentificationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBeneficiaryIdentificationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBeneficiaryIdentificationQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetBeneficiaryIdentificationQuery(baseOptions: Apollo.QueryHookOptions<GetBeneficiaryIdentificationQuery, GetBeneficiaryIdentificationQueryVariables> & ({ variables: GetBeneficiaryIdentificationQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetBeneficiaryIdentificationQuery, GetBeneficiaryIdentificationQueryVariables>(GetBeneficiaryIdentificationDocument, options);
      }
export function useGetBeneficiaryIdentificationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetBeneficiaryIdentificationQuery, GetBeneficiaryIdentificationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetBeneficiaryIdentificationQuery, GetBeneficiaryIdentificationQueryVariables>(GetBeneficiaryIdentificationDocument, options);
        }
export function useGetBeneficiaryIdentificationSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetBeneficiaryIdentificationQuery, GetBeneficiaryIdentificationQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetBeneficiaryIdentificationQuery, GetBeneficiaryIdentificationQueryVariables>(GetBeneficiaryIdentificationDocument, options);
        }
export type GetBeneficiaryIdentificationQueryHookResult = ReturnType<typeof useGetBeneficiaryIdentificationQuery>;
export type GetBeneficiaryIdentificationLazyQueryHookResult = ReturnType<typeof useGetBeneficiaryIdentificationLazyQuery>;
export type GetBeneficiaryIdentificationSuspenseQueryHookResult = ReturnType<typeof useGetBeneficiaryIdentificationSuspenseQuery>;
export type GetBeneficiaryIdentificationQueryResult = Apollo.QueryResult<GetBeneficiaryIdentificationQuery, GetBeneficiaryIdentificationQueryVariables>;
export const GetFrequencyDocument = gql`
    query GetFrequency($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    beneficiaries {
      id
      beneficiarySelectionFrequency
      beneficiarySelectionFrequencyContinually
      beneficiarySelectionFrequencyNote
      beneficiarySelectionFrequencyOther
      beneficiaryRemovalFrequency
      beneficiaryRemovalFrequencyContinually
      beneficiaryRemovalFrequencyNote
      beneficiaryRemovalFrequencyOther
      beneficiaryOverlap
      beneficiaryOverlapNote
      precedenceRules
      precedenceRulesYes
      precedenceRulesNo
      precedenceRulesNote
      readyForReviewByUserAccount {
        id
        commonName
      }
      readyForReviewDts
      status
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetFrequencyQuery__
 *
 * To run a query within a React component, call `useGetFrequencyQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFrequencyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFrequencyQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetFrequencyQuery(baseOptions: Apollo.QueryHookOptions<GetFrequencyQuery, GetFrequencyQueryVariables> & ({ variables: GetFrequencyQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFrequencyQuery, GetFrequencyQueryVariables>(GetFrequencyDocument, options);
      }
export function useGetFrequencyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFrequencyQuery, GetFrequencyQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFrequencyQuery, GetFrequencyQueryVariables>(GetFrequencyDocument, options);
        }
export function useGetFrequencySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetFrequencyQuery, GetFrequencyQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetFrequencyQuery, GetFrequencyQueryVariables>(GetFrequencyDocument, options);
        }
export type GetFrequencyQueryHookResult = ReturnType<typeof useGetFrequencyQuery>;
export type GetFrequencyLazyQueryHookResult = ReturnType<typeof useGetFrequencyLazyQuery>;
export type GetFrequencySuspenseQueryHookResult = ReturnType<typeof useGetFrequencySuspenseQuery>;
export type GetFrequencyQueryResult = Apollo.QueryResult<GetFrequencyQuery, GetFrequencyQueryVariables>;
export const GetPeopleImpactedDocument = gql`
    query GetPeopleImpacted($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    beneficiaries {
      id
      numberPeopleImpacted
      estimateConfidence
      confidenceNote
      beneficiarySelectionNote
      beneficiarySelectionOther
      beneficiarySelectionMethod
    }
  }
}
    `;

/**
 * __useGetPeopleImpactedQuery__
 *
 * To run a query within a React component, call `useGetPeopleImpactedQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPeopleImpactedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPeopleImpactedQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetPeopleImpactedQuery(baseOptions: Apollo.QueryHookOptions<GetPeopleImpactedQuery, GetPeopleImpactedQueryVariables> & ({ variables: GetPeopleImpactedQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPeopleImpactedQuery, GetPeopleImpactedQueryVariables>(GetPeopleImpactedDocument, options);
      }
export function useGetPeopleImpactedLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPeopleImpactedQuery, GetPeopleImpactedQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPeopleImpactedQuery, GetPeopleImpactedQueryVariables>(GetPeopleImpactedDocument, options);
        }
export function useGetPeopleImpactedSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetPeopleImpactedQuery, GetPeopleImpactedQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPeopleImpactedQuery, GetPeopleImpactedQueryVariables>(GetPeopleImpactedDocument, options);
        }
export type GetPeopleImpactedQueryHookResult = ReturnType<typeof useGetPeopleImpactedQuery>;
export type GetPeopleImpactedLazyQueryHookResult = ReturnType<typeof useGetPeopleImpactedLazyQuery>;
export type GetPeopleImpactedSuspenseQueryHookResult = ReturnType<typeof useGetPeopleImpactedSuspenseQuery>;
export type GetPeopleImpactedQueryResult = Apollo.QueryResult<GetPeopleImpactedQuery, GetPeopleImpactedQueryVariables>;
export const UpdateModelPlanBeneficiariesDocument = gql`
    mutation UpdateModelPlanBeneficiaries($id: UUID!, $changes: PlanBeneficiariesChanges!) {
  updatePlanBeneficiaries(id: $id, changes: $changes) {
    id
  }
}
    `;
export type UpdateModelPlanBeneficiariesMutationFn = Apollo.MutationFunction<UpdateModelPlanBeneficiariesMutation, UpdateModelPlanBeneficiariesMutationVariables>;

/**
 * __useUpdateModelPlanBeneficiariesMutation__
 *
 * To run a mutation, you first call `useUpdateModelPlanBeneficiariesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateModelPlanBeneficiariesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateModelPlanBeneficiariesMutation, { data, loading, error }] = useUpdateModelPlanBeneficiariesMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdateModelPlanBeneficiariesMutation(baseOptions?: Apollo.MutationHookOptions<UpdateModelPlanBeneficiariesMutation, UpdateModelPlanBeneficiariesMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateModelPlanBeneficiariesMutation, UpdateModelPlanBeneficiariesMutationVariables>(UpdateModelPlanBeneficiariesDocument, options);
      }
export type UpdateModelPlanBeneficiariesMutationHookResult = ReturnType<typeof useUpdateModelPlanBeneficiariesMutation>;
export type UpdateModelPlanBeneficiariesMutationResult = Apollo.MutationResult<UpdateModelPlanBeneficiariesMutation>;
export type UpdateModelPlanBeneficiariesMutationOptions = Apollo.BaseMutationOptions<UpdateModelPlanBeneficiariesMutation, UpdateModelPlanBeneficiariesMutationVariables>;
export const CreateCrDocument = gql`
    mutation CreateCR($input: PlanCRCreateInput!) {
  createPlanCR(input: $input) {
    id
    modelPlanID
    idNumber
    dateInitiated
    dateImplemented
    title
    note
  }
}
    `;
export type CreateCrMutationFn = Apollo.MutationFunction<CreateCrMutation, CreateCrMutationVariables>;

/**
 * __useCreateCrMutation__
 *
 * To run a mutation, you first call `useCreateCrMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCrMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCrMutation, { data, loading, error }] = useCreateCrMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCrMutation(baseOptions?: Apollo.MutationHookOptions<CreateCrMutation, CreateCrMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCrMutation, CreateCrMutationVariables>(CreateCrDocument, options);
      }
export type CreateCrMutationHookResult = ReturnType<typeof useCreateCrMutation>;
export type CreateCrMutationResult = Apollo.MutationResult<CreateCrMutation>;
export type CreateCrMutationOptions = Apollo.BaseMutationOptions<CreateCrMutation, CreateCrMutationVariables>;
export const CreateTdlDocument = gql`
    mutation CreateTDL($input: PlanTDLCreateInput!) {
  createPlanTDL(input: $input) {
    id
    modelPlanID
    idNumber
    dateInitiated
    title
    note
  }
}
    `;
export type CreateTdlMutationFn = Apollo.MutationFunction<CreateTdlMutation, CreateTdlMutationVariables>;

/**
 * __useCreateTdlMutation__
 *
 * To run a mutation, you first call `useCreateTdlMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateTdlMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createTdlMutation, { data, loading, error }] = useCreateTdlMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateTdlMutation(baseOptions?: Apollo.MutationHookOptions<CreateTdlMutation, CreateTdlMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateTdlMutation, CreateTdlMutationVariables>(CreateTdlDocument, options);
      }
export type CreateTdlMutationHookResult = ReturnType<typeof useCreateTdlMutation>;
export type CreateTdlMutationResult = Apollo.MutationResult<CreateTdlMutation>;
export type CreateTdlMutationOptions = Apollo.BaseMutationOptions<CreateTdlMutation, CreateTdlMutationVariables>;
export const DeleteCrDocument = gql`
    mutation DeleteCR($id: UUID!) {
  deletePlanCR(id: $id) {
    id
    modelPlanID
    idNumber
    dateInitiated
    title
    note
  }
}
    `;
export type DeleteCrMutationFn = Apollo.MutationFunction<DeleteCrMutation, DeleteCrMutationVariables>;

/**
 * __useDeleteCrMutation__
 *
 * To run a mutation, you first call `useDeleteCrMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCrMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCrMutation, { data, loading, error }] = useDeleteCrMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteCrMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCrMutation, DeleteCrMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteCrMutation, DeleteCrMutationVariables>(DeleteCrDocument, options);
      }
export type DeleteCrMutationHookResult = ReturnType<typeof useDeleteCrMutation>;
export type DeleteCrMutationResult = Apollo.MutationResult<DeleteCrMutation>;
export type DeleteCrMutationOptions = Apollo.BaseMutationOptions<DeleteCrMutation, DeleteCrMutationVariables>;
export const DeleteTdlDocument = gql`
    mutation DeleteTDL($id: UUID!) {
  deletePlanTDL(id: $id) {
    id
    modelPlanID
    idNumber
    dateInitiated
    title
    note
  }
}
    `;
export type DeleteTdlMutationFn = Apollo.MutationFunction<DeleteTdlMutation, DeleteTdlMutationVariables>;

/**
 * __useDeleteTdlMutation__
 *
 * To run a mutation, you first call `useDeleteTdlMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteTdlMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteTdlMutation, { data, loading, error }] = useDeleteTdlMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteTdlMutation(baseOptions?: Apollo.MutationHookOptions<DeleteTdlMutation, DeleteTdlMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteTdlMutation, DeleteTdlMutationVariables>(DeleteTdlDocument, options);
      }
export type DeleteTdlMutationHookResult = ReturnType<typeof useDeleteTdlMutation>;
export type DeleteTdlMutationResult = Apollo.MutationResult<DeleteTdlMutation>;
export type DeleteTdlMutationOptions = Apollo.BaseMutationOptions<DeleteTdlMutation, DeleteTdlMutationVariables>;
export const GetCrDocument = gql`
    query GetCR($id: UUID!) {
  planCR(id: $id) {
    id
    title
    idNumber
    dateInitiated
    dateImplemented
    note
  }
}
    `;

/**
 * __useGetCrQuery__
 *
 * To run a query within a React component, call `useGetCrQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCrQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCrQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCrQuery(baseOptions: Apollo.QueryHookOptions<GetCrQuery, GetCrQueryVariables> & ({ variables: GetCrQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCrQuery, GetCrQueryVariables>(GetCrDocument, options);
      }
export function useGetCrLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCrQuery, GetCrQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCrQuery, GetCrQueryVariables>(GetCrDocument, options);
        }
export function useGetCrSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCrQuery, GetCrQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCrQuery, GetCrQueryVariables>(GetCrDocument, options);
        }
export type GetCrQueryHookResult = ReturnType<typeof useGetCrQuery>;
export type GetCrLazyQueryHookResult = ReturnType<typeof useGetCrLazyQuery>;
export type GetCrSuspenseQueryHookResult = ReturnType<typeof useGetCrSuspenseQuery>;
export type GetCrQueryResult = Apollo.QueryResult<GetCrQuery, GetCrQueryVariables>;
export const GetCrtdLsDocument = gql`
    query GetCRTDLs($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    isCollaborator
    crs {
      id
      modelPlanID
      title
      idNumber
      dateInitiated
      dateImplemented
      note
    }
    tdls {
      id
      modelPlanID
      title
      idNumber
      dateInitiated
      note
    }
  }
}
    `;

/**
 * __useGetCrtdLsQuery__
 *
 * To run a query within a React component, call `useGetCrtdLsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCrtdLsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCrtdLsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCrtdLsQuery(baseOptions: Apollo.QueryHookOptions<GetCrtdLsQuery, GetCrtdLsQueryVariables> & ({ variables: GetCrtdLsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCrtdLsQuery, GetCrtdLsQueryVariables>(GetCrtdLsDocument, options);
      }
export function useGetCrtdLsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCrtdLsQuery, GetCrtdLsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCrtdLsQuery, GetCrtdLsQueryVariables>(GetCrtdLsDocument, options);
        }
export function useGetCrtdLsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCrtdLsQuery, GetCrtdLsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCrtdLsQuery, GetCrtdLsQueryVariables>(GetCrtdLsDocument, options);
        }
export type GetCrtdLsQueryHookResult = ReturnType<typeof useGetCrtdLsQuery>;
export type GetCrtdLsLazyQueryHookResult = ReturnType<typeof useGetCrtdLsLazyQuery>;
export type GetCrtdLsSuspenseQueryHookResult = ReturnType<typeof useGetCrtdLsSuspenseQuery>;
export type GetCrtdLsQueryResult = Apollo.QueryResult<GetCrtdLsQuery, GetCrtdLsQueryVariables>;
export const GetTdlDocument = gql`
    query GetTDL($id: UUID!) {
  planTDL(id: $id) {
    id
    title
    idNumber
    dateInitiated
    note
  }
}
    `;

/**
 * __useGetTdlQuery__
 *
 * To run a query within a React component, call `useGetTdlQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTdlQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTdlQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetTdlQuery(baseOptions: Apollo.QueryHookOptions<GetTdlQuery, GetTdlQueryVariables> & ({ variables: GetTdlQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetTdlQuery, GetTdlQueryVariables>(GetTdlDocument, options);
      }
export function useGetTdlLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTdlQuery, GetTdlQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetTdlQuery, GetTdlQueryVariables>(GetTdlDocument, options);
        }
export function useGetTdlSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetTdlQuery, GetTdlQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetTdlQuery, GetTdlQueryVariables>(GetTdlDocument, options);
        }
export type GetTdlQueryHookResult = ReturnType<typeof useGetTdlQuery>;
export type GetTdlLazyQueryHookResult = ReturnType<typeof useGetTdlLazyQuery>;
export type GetTdlSuspenseQueryHookResult = ReturnType<typeof useGetTdlSuspenseQuery>;
export type GetTdlQueryResult = Apollo.QueryResult<GetTdlQuery, GetTdlQueryVariables>;
export const UpdateCrDocument = gql`
    mutation UpdateCR($id: UUID!, $changes: PlanCRChanges!) {
  updatePlanCR(id: $id, changes: $changes) {
    id
    modelPlanID
    idNumber
    dateInitiated
    dateImplemented
    title
    note
  }
}
    `;
export type UpdateCrMutationFn = Apollo.MutationFunction<UpdateCrMutation, UpdateCrMutationVariables>;

/**
 * __useUpdateCrMutation__
 *
 * To run a mutation, you first call `useUpdateCrMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCrMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCrMutation, { data, loading, error }] = useUpdateCrMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdateCrMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCrMutation, UpdateCrMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCrMutation, UpdateCrMutationVariables>(UpdateCrDocument, options);
      }
export type UpdateCrMutationHookResult = ReturnType<typeof useUpdateCrMutation>;
export type UpdateCrMutationResult = Apollo.MutationResult<UpdateCrMutation>;
export type UpdateCrMutationOptions = Apollo.BaseMutationOptions<UpdateCrMutation, UpdateCrMutationVariables>;
export const UpdateTdlDocument = gql`
    mutation UpdateTDL($id: UUID!, $changes: PlanTDLChanges!) {
  updatePlanTDL(id: $id, changes: $changes) {
    id
    modelPlanID
    idNumber
    dateInitiated
    title
    note
  }
}
    `;
export type UpdateTdlMutationFn = Apollo.MutationFunction<UpdateTdlMutation, UpdateTdlMutationVariables>;

/**
 * __useUpdateTdlMutation__
 *
 * To run a mutation, you first call `useUpdateTdlMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTdlMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTdlMutation, { data, loading, error }] = useUpdateTdlMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdateTdlMutation(baseOptions?: Apollo.MutationHookOptions<UpdateTdlMutation, UpdateTdlMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateTdlMutation, UpdateTdlMutationVariables>(UpdateTdlDocument, options);
      }
export type UpdateTdlMutationHookResult = ReturnType<typeof useUpdateTdlMutation>;
export type UpdateTdlMutationResult = Apollo.MutationResult<UpdateTdlMutation>;
export type UpdateTdlMutationOptions = Apollo.BaseMutationOptions<UpdateTdlMutation, UpdateTdlMutationVariables>;
export const GetChangeHistoryDocument = gql`
    query GetChangeHistory($modelPlanID: UUID!) {
  translatedAuditCollection(modelPlanID: $modelPlanID) {
    id
    tableName
    date
    action
    actorName
    translatedFields {
      id
      changeType
      dataType
      fieldName
      fieldNameTranslated
      referenceLabel
      questionType
      notApplicableQuestions
      old
      oldTranslated
      new
      newTranslated
    }
    metaData {
      ... on TranslatedAuditMetaBaseStruct {
        version
        tableName
      }
      ... on TranslatedAuditMetaGeneric {
        version
        tableName
        relation
        relationContent
      }
      ... on TranslatedAuditMetaDiscussionReply {
        version
        tableName
        discussionID
        discussionContent
        numberOfReplies
      }
      ... on TranslatedAuditMetaOperationalNeed {
        version
        tableName
        needName
        isOther
      }
      ... on TranslatedAuditMetaOperationalSolution {
        version
        tableName
        needName
        needIsOther
        solutionName
        solutionOtherHeader
        solutionIsOther
        solutionStatus
        solutionMustStart
        solutionMustFinish
        numberOfSubtasks
      }
      ... on TranslatedAuditMetaOperationalSolutionSubtask {
        version
        tableName
        needName
        needIsOther
        solutionName
        solutionOtherHeader
        solutionIsOther
        subtaskName
        numberOfSubtasks
      }
      ... on TranslatedAuditMetaDocumentSolutionLink {
        version
        tableName
        solutionName
        solutionOtherHeader
        solutionIsOther
        needName
        needIsOther
        documentName
        documentType
        documentOtherType
        documentVisibility
        documentNote
        documentURL
        documentID
      }
    }
  }
}
    `;

/**
 * __useGetChangeHistoryQuery__
 *
 * To run a query within a React component, call `useGetChangeHistoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetChangeHistoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetChangeHistoryQuery({
 *   variables: {
 *      modelPlanID: // value for 'modelPlanID'
 *   },
 * });
 */
export function useGetChangeHistoryQuery(baseOptions: Apollo.QueryHookOptions<GetChangeHistoryQuery, GetChangeHistoryQueryVariables> & ({ variables: GetChangeHistoryQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetChangeHistoryQuery, GetChangeHistoryQueryVariables>(GetChangeHistoryDocument, options);
      }
export function useGetChangeHistoryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChangeHistoryQuery, GetChangeHistoryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetChangeHistoryQuery, GetChangeHistoryQueryVariables>(GetChangeHistoryDocument, options);
        }
export function useGetChangeHistorySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetChangeHistoryQuery, GetChangeHistoryQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetChangeHistoryQuery, GetChangeHistoryQueryVariables>(GetChangeHistoryDocument, options);
        }
export type GetChangeHistoryQueryHookResult = ReturnType<typeof useGetChangeHistoryQuery>;
export type GetChangeHistoryLazyQueryHookResult = ReturnType<typeof useGetChangeHistoryLazyQuery>;
export type GetChangeHistorySuspenseQueryHookResult = ReturnType<typeof useGetChangeHistorySuspenseQuery>;
export type GetChangeHistoryQueryResult = Apollo.QueryResult<GetChangeHistoryQuery, GetChangeHistoryQueryVariables>;
export const CreateModelPlanCollaboratorDocument = gql`
    mutation CreateModelPlanCollaborator($input: PlanCollaboratorCreateInput!) {
  createPlanCollaborator(input: $input) {
    teamRoles
    userAccount {
      id
      commonName
      email
    }
    userID
    modelPlanID
  }
}
    `;
export type CreateModelPlanCollaboratorMutationFn = Apollo.MutationFunction<CreateModelPlanCollaboratorMutation, CreateModelPlanCollaboratorMutationVariables>;

/**
 * __useCreateModelPlanCollaboratorMutation__
 *
 * To run a mutation, you first call `useCreateModelPlanCollaboratorMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateModelPlanCollaboratorMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createModelPlanCollaboratorMutation, { data, loading, error }] = useCreateModelPlanCollaboratorMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateModelPlanCollaboratorMutation(baseOptions?: Apollo.MutationHookOptions<CreateModelPlanCollaboratorMutation, CreateModelPlanCollaboratorMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateModelPlanCollaboratorMutation, CreateModelPlanCollaboratorMutationVariables>(CreateModelPlanCollaboratorDocument, options);
      }
export type CreateModelPlanCollaboratorMutationHookResult = ReturnType<typeof useCreateModelPlanCollaboratorMutation>;
export type CreateModelPlanCollaboratorMutationResult = Apollo.MutationResult<CreateModelPlanCollaboratorMutation>;
export type CreateModelPlanCollaboratorMutationOptions = Apollo.BaseMutationOptions<CreateModelPlanCollaboratorMutation, CreateModelPlanCollaboratorMutationVariables>;
export const DeleteModelPlanCollaboratorDocument = gql`
    mutation DeleteModelPlanCollaborator($id: UUID!) {
  deletePlanCollaborator(id: $id) {
    id
    teamRoles
    userAccount {
      id
      commonName
      email
      username
    }
    userID
    modelPlanID
  }
}
    `;
export type DeleteModelPlanCollaboratorMutationFn = Apollo.MutationFunction<DeleteModelPlanCollaboratorMutation, DeleteModelPlanCollaboratorMutationVariables>;

/**
 * __useDeleteModelPlanCollaboratorMutation__
 *
 * To run a mutation, you first call `useDeleteModelPlanCollaboratorMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteModelPlanCollaboratorMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteModelPlanCollaboratorMutation, { data, loading, error }] = useDeleteModelPlanCollaboratorMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteModelPlanCollaboratorMutation(baseOptions?: Apollo.MutationHookOptions<DeleteModelPlanCollaboratorMutation, DeleteModelPlanCollaboratorMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteModelPlanCollaboratorMutation, DeleteModelPlanCollaboratorMutationVariables>(DeleteModelPlanCollaboratorDocument, options);
      }
export type DeleteModelPlanCollaboratorMutationHookResult = ReturnType<typeof useDeleteModelPlanCollaboratorMutation>;
export type DeleteModelPlanCollaboratorMutationResult = Apollo.MutationResult<DeleteModelPlanCollaboratorMutation>;
export type DeleteModelPlanCollaboratorMutationOptions = Apollo.BaseMutationOptions<DeleteModelPlanCollaboratorMutation, DeleteModelPlanCollaboratorMutationVariables>;
export const GetIndividualModelPlanCollaboratorDocument = gql`
    query GetIndividualModelPlanCollaborator($id: UUID!) {
  planCollaboratorByID(id: $id) {
    id
    userAccount {
      id
      commonName
      email
      username
    }
    userID
    teamRoles
  }
}
    `;

/**
 * __useGetIndividualModelPlanCollaboratorQuery__
 *
 * To run a query within a React component, call `useGetIndividualModelPlanCollaboratorQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIndividualModelPlanCollaboratorQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIndividualModelPlanCollaboratorQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetIndividualModelPlanCollaboratorQuery(baseOptions: Apollo.QueryHookOptions<GetIndividualModelPlanCollaboratorQuery, GetIndividualModelPlanCollaboratorQueryVariables> & ({ variables: GetIndividualModelPlanCollaboratorQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetIndividualModelPlanCollaboratorQuery, GetIndividualModelPlanCollaboratorQueryVariables>(GetIndividualModelPlanCollaboratorDocument, options);
      }
export function useGetIndividualModelPlanCollaboratorLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetIndividualModelPlanCollaboratorQuery, GetIndividualModelPlanCollaboratorQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetIndividualModelPlanCollaboratorQuery, GetIndividualModelPlanCollaboratorQueryVariables>(GetIndividualModelPlanCollaboratorDocument, options);
        }
export function useGetIndividualModelPlanCollaboratorSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetIndividualModelPlanCollaboratorQuery, GetIndividualModelPlanCollaboratorQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetIndividualModelPlanCollaboratorQuery, GetIndividualModelPlanCollaboratorQueryVariables>(GetIndividualModelPlanCollaboratorDocument, options);
        }
export type GetIndividualModelPlanCollaboratorQueryHookResult = ReturnType<typeof useGetIndividualModelPlanCollaboratorQuery>;
export type GetIndividualModelPlanCollaboratorLazyQueryHookResult = ReturnType<typeof useGetIndividualModelPlanCollaboratorLazyQuery>;
export type GetIndividualModelPlanCollaboratorSuspenseQueryHookResult = ReturnType<typeof useGetIndividualModelPlanCollaboratorSuspenseQuery>;
export type GetIndividualModelPlanCollaboratorQueryResult = Apollo.QueryResult<GetIndividualModelPlanCollaboratorQuery, GetIndividualModelPlanCollaboratorQueryVariables>;
export const GetIsCollaboratorDocument = gql`
    query GetIsCollaborator($id: UUID!) {
  modelPlan(id: $id) {
    id
    isCollaborator
  }
}
    `;

/**
 * __useGetIsCollaboratorQuery__
 *
 * To run a query within a React component, call `useGetIsCollaboratorQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIsCollaboratorQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIsCollaboratorQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetIsCollaboratorQuery(baseOptions: Apollo.QueryHookOptions<GetIsCollaboratorQuery, GetIsCollaboratorQueryVariables> & ({ variables: GetIsCollaboratorQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetIsCollaboratorQuery, GetIsCollaboratorQueryVariables>(GetIsCollaboratorDocument, options);
      }
export function useGetIsCollaboratorLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetIsCollaboratorQuery, GetIsCollaboratorQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetIsCollaboratorQuery, GetIsCollaboratorQueryVariables>(GetIsCollaboratorDocument, options);
        }
export function useGetIsCollaboratorSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetIsCollaboratorQuery, GetIsCollaboratorQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetIsCollaboratorQuery, GetIsCollaboratorQueryVariables>(GetIsCollaboratorDocument, options);
        }
export type GetIsCollaboratorQueryHookResult = ReturnType<typeof useGetIsCollaboratorQuery>;
export type GetIsCollaboratorLazyQueryHookResult = ReturnType<typeof useGetIsCollaboratorLazyQuery>;
export type GetIsCollaboratorSuspenseQueryHookResult = ReturnType<typeof useGetIsCollaboratorSuspenseQuery>;
export type GetIsCollaboratorQueryResult = Apollo.QueryResult<GetIsCollaboratorQuery, GetIsCollaboratorQueryVariables>;
export const GetModelCollaboratorsDocument = gql`
    query GetModelCollaborators($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    collaborators {
      id
      userAccount {
        id
        commonName
        email
        username
      }
      userID
      teamRoles
      modelPlanID
      createdDts
    }
  }
}
    `;

/**
 * __useGetModelCollaboratorsQuery__
 *
 * To run a query within a React component, call `useGetModelCollaboratorsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModelCollaboratorsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModelCollaboratorsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetModelCollaboratorsQuery(baseOptions: Apollo.QueryHookOptions<GetModelCollaboratorsQuery, GetModelCollaboratorsQueryVariables> & ({ variables: GetModelCollaboratorsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModelCollaboratorsQuery, GetModelCollaboratorsQueryVariables>(GetModelCollaboratorsDocument, options);
      }
export function useGetModelCollaboratorsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModelCollaboratorsQuery, GetModelCollaboratorsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModelCollaboratorsQuery, GetModelCollaboratorsQueryVariables>(GetModelCollaboratorsDocument, options);
        }
export function useGetModelCollaboratorsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetModelCollaboratorsQuery, GetModelCollaboratorsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetModelCollaboratorsQuery, GetModelCollaboratorsQueryVariables>(GetModelCollaboratorsDocument, options);
        }
export type GetModelCollaboratorsQueryHookResult = ReturnType<typeof useGetModelCollaboratorsQuery>;
export type GetModelCollaboratorsLazyQueryHookResult = ReturnType<typeof useGetModelCollaboratorsLazyQuery>;
export type GetModelCollaboratorsSuspenseQueryHookResult = ReturnType<typeof useGetModelCollaboratorsSuspenseQuery>;
export type GetModelCollaboratorsQueryResult = Apollo.QueryResult<GetModelCollaboratorsQuery, GetModelCollaboratorsQueryVariables>;
export const UpdateModelPlanCollaboratorDocument = gql`
    mutation UpdateModelPlanCollaborator($id: UUID!, $newRole: [TeamRole!]!) {
  updatePlanCollaborator(id: $id, newRoles: $newRole) {
    teamRoles
    userAccount {
      commonName
      email
      username
    }
    userID
    modelPlanID
  }
}
    `;
export type UpdateModelPlanCollaboratorMutationFn = Apollo.MutationFunction<UpdateModelPlanCollaboratorMutation, UpdateModelPlanCollaboratorMutationVariables>;

/**
 * __useUpdateModelPlanCollaboratorMutation__
 *
 * To run a mutation, you first call `useUpdateModelPlanCollaboratorMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateModelPlanCollaboratorMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateModelPlanCollaboratorMutation, { data, loading, error }] = useUpdateModelPlanCollaboratorMutation({
 *   variables: {
 *      id: // value for 'id'
 *      newRole: // value for 'newRole'
 *   },
 * });
 */
export function useUpdateModelPlanCollaboratorMutation(baseOptions?: Apollo.MutationHookOptions<UpdateModelPlanCollaboratorMutation, UpdateModelPlanCollaboratorMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateModelPlanCollaboratorMutation, UpdateModelPlanCollaboratorMutationVariables>(UpdateModelPlanCollaboratorDocument, options);
      }
export type UpdateModelPlanCollaboratorMutationHookResult = ReturnType<typeof useUpdateModelPlanCollaboratorMutation>;
export type UpdateModelPlanCollaboratorMutationResult = Apollo.MutationResult<UpdateModelPlanCollaboratorMutation>;
export type UpdateModelPlanCollaboratorMutationOptions = Apollo.BaseMutationOptions<UpdateModelPlanCollaboratorMutation, UpdateModelPlanCollaboratorMutationVariables>;
export const CreateModelPlanDiscussionDocument = gql`
    mutation CreateModelPlanDiscussion($input: PlanDiscussionCreateInput!) {
  createPlanDiscussion(input: $input) {
    id
    content {
      rawContent
    }
    createdBy
    createdDts
  }
}
    `;
export type CreateModelPlanDiscussionMutationFn = Apollo.MutationFunction<CreateModelPlanDiscussionMutation, CreateModelPlanDiscussionMutationVariables>;

/**
 * __useCreateModelPlanDiscussionMutation__
 *
 * To run a mutation, you first call `useCreateModelPlanDiscussionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateModelPlanDiscussionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createModelPlanDiscussionMutation, { data, loading, error }] = useCreateModelPlanDiscussionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateModelPlanDiscussionMutation(baseOptions?: Apollo.MutationHookOptions<CreateModelPlanDiscussionMutation, CreateModelPlanDiscussionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateModelPlanDiscussionMutation, CreateModelPlanDiscussionMutationVariables>(CreateModelPlanDiscussionDocument, options);
      }
export type CreateModelPlanDiscussionMutationHookResult = ReturnType<typeof useCreateModelPlanDiscussionMutation>;
export type CreateModelPlanDiscussionMutationResult = Apollo.MutationResult<CreateModelPlanDiscussionMutation>;
export type CreateModelPlanDiscussionMutationOptions = Apollo.BaseMutationOptions<CreateModelPlanDiscussionMutation, CreateModelPlanDiscussionMutationVariables>;
export const GetModelPlanDiscussionsDocument = gql`
    query GetModelPlanDiscussions($id: UUID!) {
  modelPlan(id: $id) {
    id
    isCollaborator
    discussions {
      id
      content {
        rawContent
      }
      createdBy
      createdDts
      userRole
      userRoleDescription
      isAssessment
      createdByUserAccount {
        commonName
      }
      replies {
        id
        discussionID
        content {
          rawContent
        }
        userRole
        userRoleDescription
        isAssessment
        createdBy
        createdDts
        createdByUserAccount {
          commonName
        }
      }
    }
  }
}
    `;

/**
 * __useGetModelPlanDiscussionsQuery__
 *
 * To run a query within a React component, call `useGetModelPlanDiscussionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModelPlanDiscussionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModelPlanDiscussionsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetModelPlanDiscussionsQuery(baseOptions: Apollo.QueryHookOptions<GetModelPlanDiscussionsQuery, GetModelPlanDiscussionsQueryVariables> & ({ variables: GetModelPlanDiscussionsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModelPlanDiscussionsQuery, GetModelPlanDiscussionsQueryVariables>(GetModelPlanDiscussionsDocument, options);
      }
export function useGetModelPlanDiscussionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModelPlanDiscussionsQuery, GetModelPlanDiscussionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModelPlanDiscussionsQuery, GetModelPlanDiscussionsQueryVariables>(GetModelPlanDiscussionsDocument, options);
        }
export function useGetModelPlanDiscussionsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetModelPlanDiscussionsQuery, GetModelPlanDiscussionsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetModelPlanDiscussionsQuery, GetModelPlanDiscussionsQueryVariables>(GetModelPlanDiscussionsDocument, options);
        }
export type GetModelPlanDiscussionsQueryHookResult = ReturnType<typeof useGetModelPlanDiscussionsQuery>;
export type GetModelPlanDiscussionsLazyQueryHookResult = ReturnType<typeof useGetModelPlanDiscussionsLazyQuery>;
export type GetModelPlanDiscussionsSuspenseQueryHookResult = ReturnType<typeof useGetModelPlanDiscussionsSuspenseQuery>;
export type GetModelPlanDiscussionsQueryResult = Apollo.QueryResult<GetModelPlanDiscussionsQuery, GetModelPlanDiscussionsQueryVariables>;
export const GetMostRecentRoleSelectionDocument = gql`
    query GetMostRecentRoleSelection {
  mostRecentDiscussionRoleSelection {
    userRole
    userRoleDescription
  }
}
    `;

/**
 * __useGetMostRecentRoleSelectionQuery__
 *
 * To run a query within a React component, call `useGetMostRecentRoleSelectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMostRecentRoleSelectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMostRecentRoleSelectionQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetMostRecentRoleSelectionQuery(baseOptions?: Apollo.QueryHookOptions<GetMostRecentRoleSelectionQuery, GetMostRecentRoleSelectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetMostRecentRoleSelectionQuery, GetMostRecentRoleSelectionQueryVariables>(GetMostRecentRoleSelectionDocument, options);
      }
export function useGetMostRecentRoleSelectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMostRecentRoleSelectionQuery, GetMostRecentRoleSelectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetMostRecentRoleSelectionQuery, GetMostRecentRoleSelectionQueryVariables>(GetMostRecentRoleSelectionDocument, options);
        }
export function useGetMostRecentRoleSelectionSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetMostRecentRoleSelectionQuery, GetMostRecentRoleSelectionQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetMostRecentRoleSelectionQuery, GetMostRecentRoleSelectionQueryVariables>(GetMostRecentRoleSelectionDocument, options);
        }
export type GetMostRecentRoleSelectionQueryHookResult = ReturnType<typeof useGetMostRecentRoleSelectionQuery>;
export type GetMostRecentRoleSelectionLazyQueryHookResult = ReturnType<typeof useGetMostRecentRoleSelectionLazyQuery>;
export type GetMostRecentRoleSelectionSuspenseQueryHookResult = ReturnType<typeof useGetMostRecentRoleSelectionSuspenseQuery>;
export type GetMostRecentRoleSelectionQueryResult = Apollo.QueryResult<GetMostRecentRoleSelectionQuery, GetMostRecentRoleSelectionQueryVariables>;
export const DeleteModelPlanDocumentDocument = gql`
    mutation DeleteModelPlanDocument($id: UUID!) {
  deletePlanDocument(id: $id)
}
    `;
export type DeleteModelPlanDocumentMutationFn = Apollo.MutationFunction<DeleteModelPlanDocumentMutation, DeleteModelPlanDocumentMutationVariables>;

/**
 * __useDeleteModelPlanDocumentMutation__
 *
 * To run a mutation, you first call `useDeleteModelPlanDocumentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteModelPlanDocumentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteModelPlanDocumentMutation, { data, loading, error }] = useDeleteModelPlanDocumentMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteModelPlanDocumentMutation(baseOptions?: Apollo.MutationHookOptions<DeleteModelPlanDocumentMutation, DeleteModelPlanDocumentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteModelPlanDocumentMutation, DeleteModelPlanDocumentMutationVariables>(DeleteModelPlanDocumentDocument, options);
      }
export type DeleteModelPlanDocumentMutationHookResult = ReturnType<typeof useDeleteModelPlanDocumentMutation>;
export type DeleteModelPlanDocumentMutationResult = Apollo.MutationResult<DeleteModelPlanDocumentMutation>;
export type DeleteModelPlanDocumentMutationOptions = Apollo.BaseMutationOptions<DeleteModelPlanDocumentMutation, DeleteModelPlanDocumentMutationVariables>;
export const GetModelPlanDocumentDocument = gql`
    query GetModelPlanDocument($id: UUID!) {
  planDocument(id: $id) {
    id
    modelPlanID
    fileType
    bucket
    fileKey
    virusScanned
    virusClean
    fileName
    fileSize
    restricted
    documentType
    otherType
    createdDts
  }
}
    `;

/**
 * __useGetModelPlanDocumentQuery__
 *
 * To run a query within a React component, call `useGetModelPlanDocumentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModelPlanDocumentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModelPlanDocumentQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetModelPlanDocumentQuery(baseOptions: Apollo.QueryHookOptions<GetModelPlanDocumentQuery, GetModelPlanDocumentQueryVariables> & ({ variables: GetModelPlanDocumentQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModelPlanDocumentQuery, GetModelPlanDocumentQueryVariables>(GetModelPlanDocumentDocument, options);
      }
export function useGetModelPlanDocumentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModelPlanDocumentQuery, GetModelPlanDocumentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModelPlanDocumentQuery, GetModelPlanDocumentQueryVariables>(GetModelPlanDocumentDocument, options);
        }
export function useGetModelPlanDocumentSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetModelPlanDocumentQuery, GetModelPlanDocumentQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetModelPlanDocumentQuery, GetModelPlanDocumentQueryVariables>(GetModelPlanDocumentDocument, options);
        }
export type GetModelPlanDocumentQueryHookResult = ReturnType<typeof useGetModelPlanDocumentQuery>;
export type GetModelPlanDocumentLazyQueryHookResult = ReturnType<typeof useGetModelPlanDocumentLazyQuery>;
export type GetModelPlanDocumentSuspenseQueryHookResult = ReturnType<typeof useGetModelPlanDocumentSuspenseQuery>;
export type GetModelPlanDocumentQueryResult = Apollo.QueryResult<GetModelPlanDocumentQuery, GetModelPlanDocumentQueryVariables>;
export const GetModelPlanDocumentsDocument = gql`
    query GetModelPlanDocuments($id: UUID!) {
  modelPlan(id: $id) {
    id
    isCollaborator
    documents {
      id
      virusScanned
      virusClean
      fileName
      fileType
      downloadUrl
      restricted
      documentType
      createdDts
      optionalNotes
      otherType
      numLinkedSolutions
      isLink
      url
    }
  }
}
    `;

/**
 * __useGetModelPlanDocumentsQuery__
 *
 * To run a query within a React component, call `useGetModelPlanDocumentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModelPlanDocumentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModelPlanDocumentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetModelPlanDocumentsQuery(baseOptions: Apollo.QueryHookOptions<GetModelPlanDocumentsQuery, GetModelPlanDocumentsQueryVariables> & ({ variables: GetModelPlanDocumentsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModelPlanDocumentsQuery, GetModelPlanDocumentsQueryVariables>(GetModelPlanDocumentsDocument, options);
      }
export function useGetModelPlanDocumentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModelPlanDocumentsQuery, GetModelPlanDocumentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModelPlanDocumentsQuery, GetModelPlanDocumentsQueryVariables>(GetModelPlanDocumentsDocument, options);
        }
export function useGetModelPlanDocumentsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetModelPlanDocumentsQuery, GetModelPlanDocumentsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetModelPlanDocumentsQuery, GetModelPlanDocumentsQueryVariables>(GetModelPlanDocumentsDocument, options);
        }
export type GetModelPlanDocumentsQueryHookResult = ReturnType<typeof useGetModelPlanDocumentsQuery>;
export type GetModelPlanDocumentsLazyQueryHookResult = ReturnType<typeof useGetModelPlanDocumentsLazyQuery>;
export type GetModelPlanDocumentsSuspenseQueryHookResult = ReturnType<typeof useGetModelPlanDocumentsSuspenseQuery>;
export type GetModelPlanDocumentsQueryResult = Apollo.QueryResult<GetModelPlanDocumentsQuery, GetModelPlanDocumentsQueryVariables>;
export const LinkNewPlanDocumentDocument = gql`
    mutation LinkNewPlanDocument($input: PlanDocumentLinkInput!) {
  linkNewPlanDocument(input: $input) {
    id
  }
}
    `;
export type LinkNewPlanDocumentMutationFn = Apollo.MutationFunction<LinkNewPlanDocumentMutation, LinkNewPlanDocumentMutationVariables>;

/**
 * __useLinkNewPlanDocumentMutation__
 *
 * To run a mutation, you first call `useLinkNewPlanDocumentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLinkNewPlanDocumentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [linkNewPlanDocumentMutation, { data, loading, error }] = useLinkNewPlanDocumentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLinkNewPlanDocumentMutation(baseOptions?: Apollo.MutationHookOptions<LinkNewPlanDocumentMutation, LinkNewPlanDocumentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LinkNewPlanDocumentMutation, LinkNewPlanDocumentMutationVariables>(LinkNewPlanDocumentDocument, options);
      }
export type LinkNewPlanDocumentMutationHookResult = ReturnType<typeof useLinkNewPlanDocumentMutation>;
export type LinkNewPlanDocumentMutationResult = Apollo.MutationResult<LinkNewPlanDocumentMutation>;
export type LinkNewPlanDocumentMutationOptions = Apollo.BaseMutationOptions<LinkNewPlanDocumentMutation, LinkNewPlanDocumentMutationVariables>;
export const UploadNewPlanDocumentDocument = gql`
    mutation UploadNewPlanDocument($input: PlanDocumentInput!) {
  uploadNewPlanDocument(input: $input) {
    id
  }
}
    `;
export type UploadNewPlanDocumentMutationFn = Apollo.MutationFunction<UploadNewPlanDocumentMutation, UploadNewPlanDocumentMutationVariables>;

/**
 * __useUploadNewPlanDocumentMutation__
 *
 * To run a mutation, you first call `useUploadNewPlanDocumentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUploadNewPlanDocumentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [uploadNewPlanDocumentMutation, { data, loading, error }] = useUploadNewPlanDocumentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUploadNewPlanDocumentMutation(baseOptions?: Apollo.MutationHookOptions<UploadNewPlanDocumentMutation, UploadNewPlanDocumentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UploadNewPlanDocumentMutation, UploadNewPlanDocumentMutationVariables>(UploadNewPlanDocumentDocument, options);
      }
export type UploadNewPlanDocumentMutationHookResult = ReturnType<typeof useUploadNewPlanDocumentMutation>;
export type UploadNewPlanDocumentMutationResult = Apollo.MutationResult<UploadNewPlanDocumentMutation>;
export type UploadNewPlanDocumentMutationOptions = Apollo.BaseMutationOptions<UploadNewPlanDocumentMutation, UploadNewPlanDocumentMutationVariables>;
export const AddPlanFavoriteDocument = gql`
    mutation AddPlanFavorite($modelPlanID: UUID!) {
  addPlanFavorite(modelPlanID: $modelPlanID) {
    modelPlanID
    userID
  }
}
    `;
export type AddPlanFavoriteMutationFn = Apollo.MutationFunction<AddPlanFavoriteMutation, AddPlanFavoriteMutationVariables>;

/**
 * __useAddPlanFavoriteMutation__
 *
 * To run a mutation, you first call `useAddPlanFavoriteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddPlanFavoriteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addPlanFavoriteMutation, { data, loading, error }] = useAddPlanFavoriteMutation({
 *   variables: {
 *      modelPlanID: // value for 'modelPlanID'
 *   },
 * });
 */
export function useAddPlanFavoriteMutation(baseOptions?: Apollo.MutationHookOptions<AddPlanFavoriteMutation, AddPlanFavoriteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AddPlanFavoriteMutation, AddPlanFavoriteMutationVariables>(AddPlanFavoriteDocument, options);
      }
export type AddPlanFavoriteMutationHookResult = ReturnType<typeof useAddPlanFavoriteMutation>;
export type AddPlanFavoriteMutationResult = Apollo.MutationResult<AddPlanFavoriteMutation>;
export type AddPlanFavoriteMutationOptions = Apollo.BaseMutationOptions<AddPlanFavoriteMutation, AddPlanFavoriteMutationVariables>;
export const DeletePlanFavoriteDocument = gql`
    mutation DeletePlanFavorite($modelPlanID: UUID!) {
  deletePlanFavorite(modelPlanID: $modelPlanID) {
    modelPlanID
    userID
  }
}
    `;
export type DeletePlanFavoriteMutationFn = Apollo.MutationFunction<DeletePlanFavoriteMutation, DeletePlanFavoriteMutationVariables>;

/**
 * __useDeletePlanFavoriteMutation__
 *
 * To run a mutation, you first call `useDeletePlanFavoriteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeletePlanFavoriteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deletePlanFavoriteMutation, { data, loading, error }] = useDeletePlanFavoriteMutation({
 *   variables: {
 *      modelPlanID: // value for 'modelPlanID'
 *   },
 * });
 */
export function useDeletePlanFavoriteMutation(baseOptions?: Apollo.MutationHookOptions<DeletePlanFavoriteMutation, DeletePlanFavoriteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeletePlanFavoriteMutation, DeletePlanFavoriteMutationVariables>(DeletePlanFavoriteDocument, options);
      }
export type DeletePlanFavoriteMutationHookResult = ReturnType<typeof useDeletePlanFavoriteMutation>;
export type DeletePlanFavoriteMutationResult = Apollo.MutationResult<DeletePlanFavoriteMutation>;
export type DeletePlanFavoriteMutationOptions = Apollo.BaseMutationOptions<DeletePlanFavoriteMutation, DeletePlanFavoriteMutationVariables>;
export const CreatReportAProblemDocument = gql`
    mutation CreatReportAProblem($input: ReportAProblemInput!) {
  reportAProblem(input: $input)
}
    `;
export type CreatReportAProblemMutationFn = Apollo.MutationFunction<CreatReportAProblemMutation, CreatReportAProblemMutationVariables>;

/**
 * __useCreatReportAProblemMutation__
 *
 * To run a mutation, you first call `useCreatReportAProblemMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatReportAProblemMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [creatReportAProblemMutation, { data, loading, error }] = useCreatReportAProblemMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreatReportAProblemMutation(baseOptions?: Apollo.MutationHookOptions<CreatReportAProblemMutation, CreatReportAProblemMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreatReportAProblemMutation, CreatReportAProblemMutationVariables>(CreatReportAProblemDocument, options);
      }
export type CreatReportAProblemMutationHookResult = ReturnType<typeof useCreatReportAProblemMutation>;
export type CreatReportAProblemMutationResult = Apollo.MutationResult<CreatReportAProblemMutation>;
export type CreatReportAProblemMutationOptions = Apollo.BaseMutationOptions<CreatReportAProblemMutation, CreatReportAProblemMutationVariables>;
export const CreatSendFeedbackDocument = gql`
    mutation CreatSendFeedback($input: SendFeedbackEmailInput!) {
  sendFeedbackEmail(input: $input)
}
    `;
export type CreatSendFeedbackMutationFn = Apollo.MutationFunction<CreatSendFeedbackMutation, CreatSendFeedbackMutationVariables>;

/**
 * __useCreatSendFeedbackMutation__
 *
 * To run a mutation, you first call `useCreatSendFeedbackMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatSendFeedbackMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [creatSendFeedbackMutation, { data, loading, error }] = useCreatSendFeedbackMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreatSendFeedbackMutation(baseOptions?: Apollo.MutationHookOptions<CreatSendFeedbackMutation, CreatSendFeedbackMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreatSendFeedbackMutation, CreatSendFeedbackMutationVariables>(CreatSendFeedbackDocument, options);
      }
export type CreatSendFeedbackMutationHookResult = ReturnType<typeof useCreatSendFeedbackMutation>;
export type CreatSendFeedbackMutationResult = Apollo.MutationResult<CreatSendFeedbackMutation>;
export type CreatSendFeedbackMutationOptions = Apollo.BaseMutationOptions<CreatSendFeedbackMutation, CreatSendFeedbackMutationVariables>;
export const GetAllGeneralCharacteristicsDocument = gql`
    query GetAllGeneralCharacteristics($id: UUID!) {
  modelPlan(id: $id) {
    id
    generalCharacteristics {
      id
      isNewModel
      existingModel
      resemblesExistingModel
      resemblesExistingModelWhyHow
      resemblesExistingModelHow
      resemblesExistingModelNote
      resemblesExistingModelWhich {
        names
      }
      resemblesExistingModelOtherSpecify
      resemblesExistingModelOtherSelected
      resemblesExistingModelOtherOption
      participationInModelPrecondition
      participationInModelPreconditionWhich {
        names
      }
      participationInModelPreconditionOtherSpecify
      participationInModelPreconditionOtherSelected
      participationInModelPreconditionOtherOption
      participationInModelPreconditionWhyHow
      participationInModelPreconditionNote
      hasComponentsOrTracks
      hasComponentsOrTracksDiffer
      hasComponentsOrTracksNote
      agencyOrStateHelp
      agencyOrStateHelpOther
      agencyOrStateHelpNote
      alternativePaymentModelTypes
      alternativePaymentModelNote
      keyCharacteristics
      keyCharacteristicsOther
      keyCharacteristicsNote
      collectPlanBids
      collectPlanBidsNote
      managePartCDEnrollment
      managePartCDEnrollmentNote
      planContractUpdated
      planContractUpdatedNote
      careCoordinationInvolved
      careCoordinationInvolvedDescription
      careCoordinationInvolvedNote
      additionalServicesInvolved
      additionalServicesInvolvedDescription
      additionalServicesInvolvedNote
      communityPartnersInvolved
      communityPartnersInvolvedDescription
      communityPartnersInvolvedNote
      geographiesTargeted
      geographiesTargetedTypes
      geographiesStatesAndTerritories
      geographiesRegionTypes
      geographiesTargetedTypesOther
      geographiesTargetedAppliedTo
      geographiesTargetedAppliedToOther
      geographiesTargetedNote
      participationOptions
      participationOptionsNote
      agreementTypes
      agreementTypesOther
      multiplePatricipationAgreementsNeeded
      multiplePatricipationAgreementsNeededNote
      rulemakingRequired
      rulemakingRequiredDescription
      rulemakingRequiredNote
      authorityAllowances
      authorityAllowancesOther
      authorityAllowancesNote
      waiversRequired
      waiversRequiredTypes
      waiversRequiredNote
      createdDts
      modifiedDts
      status
    }
  }
}
    `;

/**
 * __useGetAllGeneralCharacteristicsQuery__
 *
 * To run a query within a React component, call `useGetAllGeneralCharacteristicsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllGeneralCharacteristicsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllGeneralCharacteristicsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAllGeneralCharacteristicsQuery(baseOptions: Apollo.QueryHookOptions<GetAllGeneralCharacteristicsQuery, GetAllGeneralCharacteristicsQueryVariables> & ({ variables: GetAllGeneralCharacteristicsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllGeneralCharacteristicsQuery, GetAllGeneralCharacteristicsQueryVariables>(GetAllGeneralCharacteristicsDocument, options);
      }
export function useGetAllGeneralCharacteristicsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllGeneralCharacteristicsQuery, GetAllGeneralCharacteristicsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllGeneralCharacteristicsQuery, GetAllGeneralCharacteristicsQueryVariables>(GetAllGeneralCharacteristicsDocument, options);
        }
export function useGetAllGeneralCharacteristicsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAllGeneralCharacteristicsQuery, GetAllGeneralCharacteristicsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAllGeneralCharacteristicsQuery, GetAllGeneralCharacteristicsQueryVariables>(GetAllGeneralCharacteristicsDocument, options);
        }
export type GetAllGeneralCharacteristicsQueryHookResult = ReturnType<typeof useGetAllGeneralCharacteristicsQuery>;
export type GetAllGeneralCharacteristicsLazyQueryHookResult = ReturnType<typeof useGetAllGeneralCharacteristicsLazyQuery>;
export type GetAllGeneralCharacteristicsSuspenseQueryHookResult = ReturnType<typeof useGetAllGeneralCharacteristicsSuspenseQuery>;
export type GetAllGeneralCharacteristicsQueryResult = Apollo.QueryResult<GetAllGeneralCharacteristicsQuery, GetAllGeneralCharacteristicsQueryVariables>;
export const GetAuthorityDocument = gql`
    query GetAuthority($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    generalCharacteristics {
      id
      rulemakingRequired
      rulemakingRequiredDescription
      rulemakingRequiredNote
      authorityAllowances
      authorityAllowancesOther
      authorityAllowancesNote
      waiversRequired
      waiversRequiredTypes
      waiversRequiredNote
      readyForReviewByUserAccount {
        id
        commonName
      }
      readyForReviewDts
      status
    }
  }
}
    `;

/**
 * __useGetAuthorityQuery__
 *
 * To run a query within a React component, call `useGetAuthorityQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAuthorityQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAuthorityQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAuthorityQuery(baseOptions: Apollo.QueryHookOptions<GetAuthorityQuery, GetAuthorityQueryVariables> & ({ variables: GetAuthorityQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAuthorityQuery, GetAuthorityQueryVariables>(GetAuthorityDocument, options);
      }
export function useGetAuthorityLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAuthorityQuery, GetAuthorityQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAuthorityQuery, GetAuthorityQueryVariables>(GetAuthorityDocument, options);
        }
export function useGetAuthoritySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAuthorityQuery, GetAuthorityQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAuthorityQuery, GetAuthorityQueryVariables>(GetAuthorityDocument, options);
        }
export type GetAuthorityQueryHookResult = ReturnType<typeof useGetAuthorityQuery>;
export type GetAuthorityLazyQueryHookResult = ReturnType<typeof useGetAuthorityLazyQuery>;
export type GetAuthoritySuspenseQueryHookResult = ReturnType<typeof useGetAuthoritySuspenseQuery>;
export type GetAuthorityQueryResult = Apollo.QueryResult<GetAuthorityQuery, GetAuthorityQueryVariables>;
export const GetGeneralCharacteristicsDocument = gql`
    query GetGeneralCharacteristics($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    generalCharacteristics {
      id
      isNewModel
      currentModelPlanID
      existingModelID
      resemblesExistingModel
      resemblesExistingModelWhyHow
      resemblesExistingModelHow
      resemblesExistingModelNote
      resemblesExistingModelWhich {
        links {
          id
          existingModelID
          currentModelPlanID
        }
      }
      resemblesExistingModelOtherSpecify
      resemblesExistingModelOtherSelected
      resemblesExistingModelOtherOption
      participationInModelPrecondition
      participationInModelPreconditionWhich {
        links {
          id
          existingModelID
          currentModelPlanID
        }
      }
      participationInModelPreconditionOtherSpecify
      participationInModelPreconditionOtherSelected
      participationInModelPreconditionOtherOption
      participationInModelPreconditionWhyHow
      participationInModelPreconditionNote
      hasComponentsOrTracks
      hasComponentsOrTracksDiffer
      hasComponentsOrTracksNote
    }
  }
}
    `;

/**
 * __useGetGeneralCharacteristicsQuery__
 *
 * To run a query within a React component, call `useGetGeneralCharacteristicsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetGeneralCharacteristicsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetGeneralCharacteristicsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetGeneralCharacteristicsQuery(baseOptions: Apollo.QueryHookOptions<GetGeneralCharacteristicsQuery, GetGeneralCharacteristicsQueryVariables> & ({ variables: GetGeneralCharacteristicsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetGeneralCharacteristicsQuery, GetGeneralCharacteristicsQueryVariables>(GetGeneralCharacteristicsDocument, options);
      }
export function useGetGeneralCharacteristicsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetGeneralCharacteristicsQuery, GetGeneralCharacteristicsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetGeneralCharacteristicsQuery, GetGeneralCharacteristicsQueryVariables>(GetGeneralCharacteristicsDocument, options);
        }
export function useGetGeneralCharacteristicsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetGeneralCharacteristicsQuery, GetGeneralCharacteristicsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetGeneralCharacteristicsQuery, GetGeneralCharacteristicsQueryVariables>(GetGeneralCharacteristicsDocument, options);
        }
export type GetGeneralCharacteristicsQueryHookResult = ReturnType<typeof useGetGeneralCharacteristicsQuery>;
export type GetGeneralCharacteristicsLazyQueryHookResult = ReturnType<typeof useGetGeneralCharacteristicsLazyQuery>;
export type GetGeneralCharacteristicsSuspenseQueryHookResult = ReturnType<typeof useGetGeneralCharacteristicsSuspenseQuery>;
export type GetGeneralCharacteristicsQueryResult = Apollo.QueryResult<GetGeneralCharacteristicsQuery, GetGeneralCharacteristicsQueryVariables>;
export const GetInvolvementsDocument = gql`
    query GetInvolvements($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    generalCharacteristics {
      id
      careCoordinationInvolved
      careCoordinationInvolvedDescription
      careCoordinationInvolvedNote
      additionalServicesInvolved
      additionalServicesInvolvedDescription
      additionalServicesInvolvedNote
      communityPartnersInvolved
      communityPartnersInvolvedDescription
      communityPartnersInvolvedNote
    }
  }
}
    `;

/**
 * __useGetInvolvementsQuery__
 *
 * To run a query within a React component, call `useGetInvolvementsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetInvolvementsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetInvolvementsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetInvolvementsQuery(baseOptions: Apollo.QueryHookOptions<GetInvolvementsQuery, GetInvolvementsQueryVariables> & ({ variables: GetInvolvementsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetInvolvementsQuery, GetInvolvementsQueryVariables>(GetInvolvementsDocument, options);
      }
export function useGetInvolvementsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetInvolvementsQuery, GetInvolvementsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetInvolvementsQuery, GetInvolvementsQueryVariables>(GetInvolvementsDocument, options);
        }
export function useGetInvolvementsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetInvolvementsQuery, GetInvolvementsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetInvolvementsQuery, GetInvolvementsQueryVariables>(GetInvolvementsDocument, options);
        }
export type GetInvolvementsQueryHookResult = ReturnType<typeof useGetInvolvementsQuery>;
export type GetInvolvementsLazyQueryHookResult = ReturnType<typeof useGetInvolvementsLazyQuery>;
export type GetInvolvementsSuspenseQueryHookResult = ReturnType<typeof useGetInvolvementsSuspenseQuery>;
export type GetInvolvementsQueryResult = Apollo.QueryResult<GetInvolvementsQuery, GetInvolvementsQueryVariables>;
export const GetKeyCharacteristicsDocument = gql`
    query GetKeyCharacteristics($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    generalCharacteristics {
      id
      agencyOrStateHelp
      agencyOrStateHelpOther
      agencyOrStateHelpNote
      alternativePaymentModelTypes
      alternativePaymentModelNote
      keyCharacteristics
      keyCharacteristicsNote
      keyCharacteristicsOther
      collectPlanBids
      collectPlanBidsNote
      managePartCDEnrollment
      managePartCDEnrollmentNote
      planContractUpdated
      planContractUpdatedNote
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetKeyCharacteristicsQuery__
 *
 * To run a query within a React component, call `useGetKeyCharacteristicsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetKeyCharacteristicsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetKeyCharacteristicsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetKeyCharacteristicsQuery(baseOptions: Apollo.QueryHookOptions<GetKeyCharacteristicsQuery, GetKeyCharacteristicsQueryVariables> & ({ variables: GetKeyCharacteristicsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetKeyCharacteristicsQuery, GetKeyCharacteristicsQueryVariables>(GetKeyCharacteristicsDocument, options);
      }
export function useGetKeyCharacteristicsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetKeyCharacteristicsQuery, GetKeyCharacteristicsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetKeyCharacteristicsQuery, GetKeyCharacteristicsQueryVariables>(GetKeyCharacteristicsDocument, options);
        }
export function useGetKeyCharacteristicsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetKeyCharacteristicsQuery, GetKeyCharacteristicsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetKeyCharacteristicsQuery, GetKeyCharacteristicsQueryVariables>(GetKeyCharacteristicsDocument, options);
        }
export type GetKeyCharacteristicsQueryHookResult = ReturnType<typeof useGetKeyCharacteristicsQuery>;
export type GetKeyCharacteristicsLazyQueryHookResult = ReturnType<typeof useGetKeyCharacteristicsLazyQuery>;
export type GetKeyCharacteristicsSuspenseQueryHookResult = ReturnType<typeof useGetKeyCharacteristicsSuspenseQuery>;
export type GetKeyCharacteristicsQueryResult = Apollo.QueryResult<GetKeyCharacteristicsQuery, GetKeyCharacteristicsQueryVariables>;
export const GetTargetsAndOptionsDocument = gql`
    query GetTargetsAndOptions($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    generalCharacteristics {
      id
      geographiesTargeted
      geographiesTargetedTypes
      geographiesStatesAndTerritories
      geographiesRegionTypes
      geographiesTargetedTypesOther
      geographiesTargetedAppliedTo
      geographiesTargetedAppliedToOther
      geographiesTargetedNote
      participationOptions
      participationOptionsNote
      agreementTypes
      agreementTypesOther
      multiplePatricipationAgreementsNeeded
      multiplePatricipationAgreementsNeededNote
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetTargetsAndOptionsQuery__
 *
 * To run a query within a React component, call `useGetTargetsAndOptionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTargetsAndOptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTargetsAndOptionsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetTargetsAndOptionsQuery(baseOptions: Apollo.QueryHookOptions<GetTargetsAndOptionsQuery, GetTargetsAndOptionsQueryVariables> & ({ variables: GetTargetsAndOptionsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetTargetsAndOptionsQuery, GetTargetsAndOptionsQueryVariables>(GetTargetsAndOptionsDocument, options);
      }
export function useGetTargetsAndOptionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTargetsAndOptionsQuery, GetTargetsAndOptionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetTargetsAndOptionsQuery, GetTargetsAndOptionsQueryVariables>(GetTargetsAndOptionsDocument, options);
        }
export function useGetTargetsAndOptionsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetTargetsAndOptionsQuery, GetTargetsAndOptionsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetTargetsAndOptionsQuery, GetTargetsAndOptionsQueryVariables>(GetTargetsAndOptionsDocument, options);
        }
export type GetTargetsAndOptionsQueryHookResult = ReturnType<typeof useGetTargetsAndOptionsQuery>;
export type GetTargetsAndOptionsLazyQueryHookResult = ReturnType<typeof useGetTargetsAndOptionsLazyQuery>;
export type GetTargetsAndOptionsSuspenseQueryHookResult = ReturnType<typeof useGetTargetsAndOptionsSuspenseQuery>;
export type GetTargetsAndOptionsQueryResult = Apollo.QueryResult<GetTargetsAndOptionsQuery, GetTargetsAndOptionsQueryVariables>;
export const UpdateExistingModelLinksDocument = gql`
    mutation UpdateExistingModelLinks($modelPlanID: UUID!, $fieldName: ExisitingModelLinkFieldType!, $existingModelIDs: [Int!], $currentModelPlanIDs: [UUID!]) {
  updateExistingModelLinks(
    modelPlanID: $modelPlanID
    fieldName: $fieldName
    existingModelIDs: $existingModelIDs
    currentModelPlanIDs: $currentModelPlanIDs
  ) {
    links {
      id
      existingModelID
      model {
        ... on ExistingModel {
          modelName
          stage
          numberOfParticipants
          keywords
        }
        ... on ModelPlan {
          modelName
          abbreviation
        }
      }
    }
  }
}
    `;
export type UpdateExistingModelLinksMutationFn = Apollo.MutationFunction<UpdateExistingModelLinksMutation, UpdateExistingModelLinksMutationVariables>;

/**
 * __useUpdateExistingModelLinksMutation__
 *
 * To run a mutation, you first call `useUpdateExistingModelLinksMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateExistingModelLinksMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateExistingModelLinksMutation, { data, loading, error }] = useUpdateExistingModelLinksMutation({
 *   variables: {
 *      modelPlanID: // value for 'modelPlanID'
 *      fieldName: // value for 'fieldName'
 *      existingModelIDs: // value for 'existingModelIDs'
 *      currentModelPlanIDs: // value for 'currentModelPlanIDs'
 *   },
 * });
 */
export function useUpdateExistingModelLinksMutation(baseOptions?: Apollo.MutationHookOptions<UpdateExistingModelLinksMutation, UpdateExistingModelLinksMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateExistingModelLinksMutation, UpdateExistingModelLinksMutationVariables>(UpdateExistingModelLinksDocument, options);
      }
export type UpdateExistingModelLinksMutationHookResult = ReturnType<typeof useUpdateExistingModelLinksMutation>;
export type UpdateExistingModelLinksMutationResult = Apollo.MutationResult<UpdateExistingModelLinksMutation>;
export type UpdateExistingModelLinksMutationOptions = Apollo.BaseMutationOptions<UpdateExistingModelLinksMutation, UpdateExistingModelLinksMutationVariables>;
export const UpdatePlanGeneralCharacteristicsDocument = gql`
    mutation UpdatePlanGeneralCharacteristics($id: UUID!, $changes: PlanGeneralCharacteristicsChanges!) {
  updatePlanGeneralCharacteristics(id: $id, changes: $changes) {
    id
  }
}
    `;
export type UpdatePlanGeneralCharacteristicsMutationFn = Apollo.MutationFunction<UpdatePlanGeneralCharacteristicsMutation, UpdatePlanGeneralCharacteristicsMutationVariables>;

/**
 * __useUpdatePlanGeneralCharacteristicsMutation__
 *
 * To run a mutation, you first call `useUpdatePlanGeneralCharacteristicsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePlanGeneralCharacteristicsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePlanGeneralCharacteristicsMutation, { data, loading, error }] = useUpdatePlanGeneralCharacteristicsMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdatePlanGeneralCharacteristicsMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePlanGeneralCharacteristicsMutation, UpdatePlanGeneralCharacteristicsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdatePlanGeneralCharacteristicsMutation, UpdatePlanGeneralCharacteristicsMutationVariables>(UpdatePlanGeneralCharacteristicsDocument, options);
      }
export type UpdatePlanGeneralCharacteristicsMutationHookResult = ReturnType<typeof useUpdatePlanGeneralCharacteristicsMutation>;
export type UpdatePlanGeneralCharacteristicsMutationResult = Apollo.MutationResult<UpdatePlanGeneralCharacteristicsMutation>;
export type UpdatePlanGeneralCharacteristicsMutationOptions = Apollo.BaseMutationOptions<UpdatePlanGeneralCharacteristicsMutation, UpdatePlanGeneralCharacteristicsMutationVariables>;
export const GetHomepageSettingsDocument = gql`
    query GetHomepageSettings {
  userViewCustomization {
    id
    viewCustomization
    possibleOperationalSolutions
  }
}
    `;

/**
 * __useGetHomepageSettingsQuery__
 *
 * To run a query within a React component, call `useGetHomepageSettingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetHomepageSettingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetHomepageSettingsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetHomepageSettingsQuery(baseOptions?: Apollo.QueryHookOptions<GetHomepageSettingsQuery, GetHomepageSettingsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetHomepageSettingsQuery, GetHomepageSettingsQueryVariables>(GetHomepageSettingsDocument, options);
      }
export function useGetHomepageSettingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetHomepageSettingsQuery, GetHomepageSettingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetHomepageSettingsQuery, GetHomepageSettingsQueryVariables>(GetHomepageSettingsDocument, options);
        }
export function useGetHomepageSettingsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetHomepageSettingsQuery, GetHomepageSettingsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetHomepageSettingsQuery, GetHomepageSettingsQueryVariables>(GetHomepageSettingsDocument, options);
        }
export type GetHomepageSettingsQueryHookResult = ReturnType<typeof useGetHomepageSettingsQuery>;
export type GetHomepageSettingsLazyQueryHookResult = ReturnType<typeof useGetHomepageSettingsLazyQuery>;
export type GetHomepageSettingsSuspenseQueryHookResult = ReturnType<typeof useGetHomepageSettingsSuspenseQuery>;
export type GetHomepageSettingsQueryResult = Apollo.QueryResult<GetHomepageSettingsQuery, GetHomepageSettingsQueryVariables>;
export const UpdateHomepageSettingsDocument = gql`
    mutation UpdateHomepageSettings($changes: UserViewCustomizationChanges!) {
  updateUserViewCustomization(changes: $changes) {
    id
  }
}
    `;
export type UpdateHomepageSettingsMutationFn = Apollo.MutationFunction<UpdateHomepageSettingsMutation, UpdateHomepageSettingsMutationVariables>;

/**
 * __useUpdateHomepageSettingsMutation__
 *
 * To run a mutation, you first call `useUpdateHomepageSettingsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateHomepageSettingsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateHomepageSettingsMutation, { data, loading, error }] = useUpdateHomepageSettingsMutation({
 *   variables: {
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdateHomepageSettingsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateHomepageSettingsMutation, UpdateHomepageSettingsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateHomepageSettingsMutation, UpdateHomepageSettingsMutationVariables>(UpdateHomepageSettingsDocument, options);
      }
export type UpdateHomepageSettingsMutationHookResult = ReturnType<typeof useUpdateHomepageSettingsMutation>;
export type UpdateHomepageSettingsMutationResult = Apollo.MutationResult<UpdateHomepageSettingsMutation>;
export type UpdateHomepageSettingsMutationOptions = Apollo.BaseMutationOptions<UpdateHomepageSettingsMutation, UpdateHomepageSettingsMutationVariables>;
export const CreateDocumentSolutionLinksDocument = gql`
    mutation CreateDocumentSolutionLinks($solutionID: UUID!, $documentIDs: [UUID!]!) {
  createPlanDocumentSolutionLinks(
    solutionID: $solutionID
    documentIDs: $documentIDs
  ) {
    id
  }
}
    `;
export type CreateDocumentSolutionLinksMutationFn = Apollo.MutationFunction<CreateDocumentSolutionLinksMutation, CreateDocumentSolutionLinksMutationVariables>;

/**
 * __useCreateDocumentSolutionLinksMutation__
 *
 * To run a mutation, you first call `useCreateDocumentSolutionLinksMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateDocumentSolutionLinksMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createDocumentSolutionLinksMutation, { data, loading, error }] = useCreateDocumentSolutionLinksMutation({
 *   variables: {
 *      solutionID: // value for 'solutionID'
 *      documentIDs: // value for 'documentIDs'
 *   },
 * });
 */
export function useCreateDocumentSolutionLinksMutation(baseOptions?: Apollo.MutationHookOptions<CreateDocumentSolutionLinksMutation, CreateDocumentSolutionLinksMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateDocumentSolutionLinksMutation, CreateDocumentSolutionLinksMutationVariables>(CreateDocumentSolutionLinksDocument, options);
      }
export type CreateDocumentSolutionLinksMutationHookResult = ReturnType<typeof useCreateDocumentSolutionLinksMutation>;
export type CreateDocumentSolutionLinksMutationResult = Apollo.MutationResult<CreateDocumentSolutionLinksMutation>;
export type CreateDocumentSolutionLinksMutationOptions = Apollo.BaseMutationOptions<CreateDocumentSolutionLinksMutation, CreateDocumentSolutionLinksMutationVariables>;
export const CreateOperationalSolutionDocument = gql`
    mutation CreateOperationalSolution($operationalNeedID: UUID!, $solutionType: OperationalSolutionKey, $changes: OperationalSolutionChanges!) {
  createOperationalSolution(
    operationalNeedID: $operationalNeedID
    solutionType: $solutionType
    changes: $changes
  ) {
    id
    nameOther
    needed
    key
  }
}
    `;
export type CreateOperationalSolutionMutationFn = Apollo.MutationFunction<CreateOperationalSolutionMutation, CreateOperationalSolutionMutationVariables>;

/**
 * __useCreateOperationalSolutionMutation__
 *
 * To run a mutation, you first call `useCreateOperationalSolutionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOperationalSolutionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOperationalSolutionMutation, { data, loading, error }] = useCreateOperationalSolutionMutation({
 *   variables: {
 *      operationalNeedID: // value for 'operationalNeedID'
 *      solutionType: // value for 'solutionType'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useCreateOperationalSolutionMutation(baseOptions?: Apollo.MutationHookOptions<CreateOperationalSolutionMutation, CreateOperationalSolutionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateOperationalSolutionMutation, CreateOperationalSolutionMutationVariables>(CreateOperationalSolutionDocument, options);
      }
export type CreateOperationalSolutionMutationHookResult = ReturnType<typeof useCreateOperationalSolutionMutation>;
export type CreateOperationalSolutionMutationResult = Apollo.MutationResult<CreateOperationalSolutionMutation>;
export type CreateOperationalSolutionMutationOptions = Apollo.BaseMutationOptions<CreateOperationalSolutionMutation, CreateOperationalSolutionMutationVariables>;
export const CreateOperationalSolutionSubtasksDocument = gql`
    mutation CreateOperationalSolutionSubtasks($solutionID: UUID!, $inputs: [CreateOperationalSolutionSubtaskInput!]!) {
  createOperationalSolutionSubtasks(solutionID: $solutionID, inputs: $inputs) {
    name
    status
  }
}
    `;
export type CreateOperationalSolutionSubtasksMutationFn = Apollo.MutationFunction<CreateOperationalSolutionSubtasksMutation, CreateOperationalSolutionSubtasksMutationVariables>;

/**
 * __useCreateOperationalSolutionSubtasksMutation__
 *
 * To run a mutation, you first call `useCreateOperationalSolutionSubtasksMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOperationalSolutionSubtasksMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOperationalSolutionSubtasksMutation, { data, loading, error }] = useCreateOperationalSolutionSubtasksMutation({
 *   variables: {
 *      solutionID: // value for 'solutionID'
 *      inputs: // value for 'inputs'
 *   },
 * });
 */
export function useCreateOperationalSolutionSubtasksMutation(baseOptions?: Apollo.MutationHookOptions<CreateOperationalSolutionSubtasksMutation, CreateOperationalSolutionSubtasksMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateOperationalSolutionSubtasksMutation, CreateOperationalSolutionSubtasksMutationVariables>(CreateOperationalSolutionSubtasksDocument, options);
      }
export type CreateOperationalSolutionSubtasksMutationHookResult = ReturnType<typeof useCreateOperationalSolutionSubtasksMutation>;
export type CreateOperationalSolutionSubtasksMutationResult = Apollo.MutationResult<CreateOperationalSolutionSubtasksMutation>;
export type CreateOperationalSolutionSubtasksMutationOptions = Apollo.BaseMutationOptions<CreateOperationalSolutionSubtasksMutation, CreateOperationalSolutionSubtasksMutationVariables>;
export const DeleteDocumentSolutionLinkDocument = gql`
    mutation DeleteDocumentSolutionLink($solutionID: UUID!, $documentIDs: [UUID!]!) {
  removePlanDocumentSolutionLinks(
    solutionID: $solutionID
    documentIDs: $documentIDs
  )
}
    `;
export type DeleteDocumentSolutionLinkMutationFn = Apollo.MutationFunction<DeleteDocumentSolutionLinkMutation, DeleteDocumentSolutionLinkMutationVariables>;

/**
 * __useDeleteDocumentSolutionLinkMutation__
 *
 * To run a mutation, you first call `useDeleteDocumentSolutionLinkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteDocumentSolutionLinkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteDocumentSolutionLinkMutation, { data, loading, error }] = useDeleteDocumentSolutionLinkMutation({
 *   variables: {
 *      solutionID: // value for 'solutionID'
 *      documentIDs: // value for 'documentIDs'
 *   },
 * });
 */
export function useDeleteDocumentSolutionLinkMutation(baseOptions?: Apollo.MutationHookOptions<DeleteDocumentSolutionLinkMutation, DeleteDocumentSolutionLinkMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteDocumentSolutionLinkMutation, DeleteDocumentSolutionLinkMutationVariables>(DeleteDocumentSolutionLinkDocument, options);
      }
export type DeleteDocumentSolutionLinkMutationHookResult = ReturnType<typeof useDeleteDocumentSolutionLinkMutation>;
export type DeleteDocumentSolutionLinkMutationResult = Apollo.MutationResult<DeleteDocumentSolutionLinkMutation>;
export type DeleteDocumentSolutionLinkMutationOptions = Apollo.BaseMutationOptions<DeleteDocumentSolutionLinkMutation, DeleteDocumentSolutionLinkMutationVariables>;
export const DeleteOperationalSolutionSubtaskDocument = gql`
    mutation DeleteOperationalSolutionSubtask($id: UUID!) {
  deleteOperationalSolutionSubtask(id: $id)
}
    `;
export type DeleteOperationalSolutionSubtaskMutationFn = Apollo.MutationFunction<DeleteOperationalSolutionSubtaskMutation, DeleteOperationalSolutionSubtaskMutationVariables>;

/**
 * __useDeleteOperationalSolutionSubtaskMutation__
 *
 * To run a mutation, you first call `useDeleteOperationalSolutionSubtaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteOperationalSolutionSubtaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteOperationalSolutionSubtaskMutation, { data, loading, error }] = useDeleteOperationalSolutionSubtaskMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteOperationalSolutionSubtaskMutation(baseOptions?: Apollo.MutationHookOptions<DeleteOperationalSolutionSubtaskMutation, DeleteOperationalSolutionSubtaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteOperationalSolutionSubtaskMutation, DeleteOperationalSolutionSubtaskMutationVariables>(DeleteOperationalSolutionSubtaskDocument, options);
      }
export type DeleteOperationalSolutionSubtaskMutationHookResult = ReturnType<typeof useDeleteOperationalSolutionSubtaskMutation>;
export type DeleteOperationalSolutionSubtaskMutationResult = Apollo.MutationResult<DeleteOperationalSolutionSubtaskMutation>;
export type DeleteOperationalSolutionSubtaskMutationOptions = Apollo.BaseMutationOptions<DeleteOperationalSolutionSubtaskMutation, DeleteOperationalSolutionSubtaskMutationVariables>;
export const GetModelsBySolutionDocument = gql`
    query GetModelsBySolution($operationalSolutionKey: OperationalSolutionKey!) {
  modelPlansByOperationalSolutionKey(
    operationalSolutionKey: $operationalSolutionKey
  ) {
    modelPlan {
      id
      modelName
      abbreviation
      status
      modelBySolutionStatus
      basics {
        id
        modelCategory
        performancePeriodStarts
        performancePeriodEnds
      }
    }
  }
}
    `;

/**
 * __useGetModelsBySolutionQuery__
 *
 * To run a query within a React component, call `useGetModelsBySolutionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModelsBySolutionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModelsBySolutionQuery({
 *   variables: {
 *      operationalSolutionKey: // value for 'operationalSolutionKey'
 *   },
 * });
 */
export function useGetModelsBySolutionQuery(baseOptions: Apollo.QueryHookOptions<GetModelsBySolutionQuery, GetModelsBySolutionQueryVariables> & ({ variables: GetModelsBySolutionQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModelsBySolutionQuery, GetModelsBySolutionQueryVariables>(GetModelsBySolutionDocument, options);
      }
export function useGetModelsBySolutionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModelsBySolutionQuery, GetModelsBySolutionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModelsBySolutionQuery, GetModelsBySolutionQueryVariables>(GetModelsBySolutionDocument, options);
        }
export function useGetModelsBySolutionSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetModelsBySolutionQuery, GetModelsBySolutionQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetModelsBySolutionQuery, GetModelsBySolutionQueryVariables>(GetModelsBySolutionDocument, options);
        }
export type GetModelsBySolutionQueryHookResult = ReturnType<typeof useGetModelsBySolutionQuery>;
export type GetModelsBySolutionLazyQueryHookResult = ReturnType<typeof useGetModelsBySolutionLazyQuery>;
export type GetModelsBySolutionSuspenseQueryHookResult = ReturnType<typeof useGetModelsBySolutionSuspenseQuery>;
export type GetModelsBySolutionQueryResult = Apollo.QueryResult<GetModelsBySolutionQuery, GetModelsBySolutionQueryVariables>;
export const GetOperationalNeedDocument = gql`
    query GetOperationalNeed($id: UUID!, $includeNotNeeded: Boolean = true) {
  operationalNeed(id: $id) {
    id
    modelPlanID
    name
    key
    nameOther
    needed
    solutions(includeNotNeeded: $includeNotNeeded) {
      id
      name
      key
      pocName
      pocEmail
      needed
      nameOther
      isOther
      isCommonSolution
      otherHeader
      mustStartDts
      mustFinishDts
      status
    }
  }
}
    `;

/**
 * __useGetOperationalNeedQuery__
 *
 * To run a query within a React component, call `useGetOperationalNeedQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOperationalNeedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOperationalNeedQuery({
 *   variables: {
 *      id: // value for 'id'
 *      includeNotNeeded: // value for 'includeNotNeeded'
 *   },
 * });
 */
export function useGetOperationalNeedQuery(baseOptions: Apollo.QueryHookOptions<GetOperationalNeedQuery, GetOperationalNeedQueryVariables> & ({ variables: GetOperationalNeedQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOperationalNeedQuery, GetOperationalNeedQueryVariables>(GetOperationalNeedDocument, options);
      }
export function useGetOperationalNeedLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOperationalNeedQuery, GetOperationalNeedQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOperationalNeedQuery, GetOperationalNeedQueryVariables>(GetOperationalNeedDocument, options);
        }
export function useGetOperationalNeedSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetOperationalNeedQuery, GetOperationalNeedQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetOperationalNeedQuery, GetOperationalNeedQueryVariables>(GetOperationalNeedDocument, options);
        }
export type GetOperationalNeedQueryHookResult = ReturnType<typeof useGetOperationalNeedQuery>;
export type GetOperationalNeedLazyQueryHookResult = ReturnType<typeof useGetOperationalNeedLazyQuery>;
export type GetOperationalNeedSuspenseQueryHookResult = ReturnType<typeof useGetOperationalNeedSuspenseQuery>;
export type GetOperationalNeedQueryResult = Apollo.QueryResult<GetOperationalNeedQuery, GetOperationalNeedQueryVariables>;
export const GetOperationalNeedAnswerDocument = gql`
    query GetOperationalNeedAnswer($id: UUID!, $generalCharacteristics: Boolean!, $participantsAndProviders: Boolean!, $beneficiaries: Boolean!, $opsEvalAndLearning: Boolean!, $payments: Boolean!, $managePartCDEnrollment: Boolean!, $collectPlanBids: Boolean!, $planContractUpdated: Boolean!, $agreementTypes: Boolean!, $recruitmentMethod: Boolean!, $selectionMethod: Boolean!, $communicationMethod: Boolean!, $providerOverlap: Boolean!, $participantsIds: Boolean!, $beneficiaryOverlap: Boolean!, $helpdeskUse: Boolean!, $iddocSupport: Boolean!, $benchmarkForPerformance: Boolean!, $appealPerformance: Boolean!, $appealFeedback: Boolean!, $appealPayments: Boolean!, $appealOther: Boolean!, $evaluationApproaches: Boolean!, $dataNeededForMonitoring: Boolean!, $dataToSendParticicipants: Boolean!, $modelLearningSystems: Boolean!, $developNewQualityMeasures: Boolean!, $payType: Boolean!, $shouldAnyProvidersExcludedFFSSystems: Boolean!, $nonClaimsPayments: Boolean!, $willRecoverPayments: Boolean!) {
  modelPlan(id: $id) {
    id
    modelName
    generalCharacteristics @include(if: $generalCharacteristics) {
      managePartCDEnrollment @include(if: $managePartCDEnrollment)
      collectPlanBids @include(if: $collectPlanBids)
      planContractUpdated @include(if: $planContractUpdated)
      agreementTypes @include(if: $agreementTypes)
    }
    participantsAndProviders @include(if: $participantsAndProviders) {
      recruitmentMethod @include(if: $recruitmentMethod)
      selectionMethod @include(if: $selectionMethod)
      communicationMethod @include(if: $communicationMethod)
      providerOverlap @include(if: $providerOverlap)
      participantsIds @include(if: $participantsIds)
    }
    beneficiaries @include(if: $beneficiaries) {
      beneficiaryOverlap @include(if: $beneficiaryOverlap)
    }
    opsEvalAndLearning @include(if: $opsEvalAndLearning) {
      helpdeskUse @include(if: $helpdeskUse)
      iddocSupport @include(if: $iddocSupport)
      benchmarkForPerformance @include(if: $benchmarkForPerformance)
      appealPerformance @include(if: $appealPerformance)
      appealFeedback @include(if: $appealFeedback)
      appealPayments @include(if: $appealPayments)
      appealOther @include(if: $appealOther)
      evaluationApproaches @include(if: $evaluationApproaches)
      dataNeededForMonitoring @include(if: $dataNeededForMonitoring)
      dataToSendParticicipants @include(if: $dataToSendParticicipants)
      modelLearningSystems @include(if: $modelLearningSystems)
      developNewQualityMeasures @include(if: $developNewQualityMeasures)
    }
    payments @include(if: $payments) {
      payType @include(if: $payType)
      shouldAnyProvidersExcludedFFSSystems @include(if: $shouldAnyProvidersExcludedFFSSystems)
      nonClaimsPayments @include(if: $nonClaimsPayments)
      willRecoverPayments @include(if: $willRecoverPayments)
    }
  }
}
    `;

/**
 * __useGetOperationalNeedAnswerQuery__
 *
 * To run a query within a React component, call `useGetOperationalNeedAnswerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOperationalNeedAnswerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOperationalNeedAnswerQuery({
 *   variables: {
 *      id: // value for 'id'
 *      generalCharacteristics: // value for 'generalCharacteristics'
 *      participantsAndProviders: // value for 'participantsAndProviders'
 *      beneficiaries: // value for 'beneficiaries'
 *      opsEvalAndLearning: // value for 'opsEvalAndLearning'
 *      payments: // value for 'payments'
 *      managePartCDEnrollment: // value for 'managePartCDEnrollment'
 *      collectPlanBids: // value for 'collectPlanBids'
 *      planContractUpdated: // value for 'planContractUpdated'
 *      agreementTypes: // value for 'agreementTypes'
 *      recruitmentMethod: // value for 'recruitmentMethod'
 *      selectionMethod: // value for 'selectionMethod'
 *      communicationMethod: // value for 'communicationMethod'
 *      providerOverlap: // value for 'providerOverlap'
 *      participantsIds: // value for 'participantsIds'
 *      beneficiaryOverlap: // value for 'beneficiaryOverlap'
 *      helpdeskUse: // value for 'helpdeskUse'
 *      iddocSupport: // value for 'iddocSupport'
 *      benchmarkForPerformance: // value for 'benchmarkForPerformance'
 *      appealPerformance: // value for 'appealPerformance'
 *      appealFeedback: // value for 'appealFeedback'
 *      appealPayments: // value for 'appealPayments'
 *      appealOther: // value for 'appealOther'
 *      evaluationApproaches: // value for 'evaluationApproaches'
 *      dataNeededForMonitoring: // value for 'dataNeededForMonitoring'
 *      dataToSendParticicipants: // value for 'dataToSendParticicipants'
 *      modelLearningSystems: // value for 'modelLearningSystems'
 *      developNewQualityMeasures: // value for 'developNewQualityMeasures'
 *      payType: // value for 'payType'
 *      shouldAnyProvidersExcludedFFSSystems: // value for 'shouldAnyProvidersExcludedFFSSystems'
 *      nonClaimsPayments: // value for 'nonClaimsPayments'
 *      willRecoverPayments: // value for 'willRecoverPayments'
 *   },
 * });
 */
export function useGetOperationalNeedAnswerQuery(baseOptions: Apollo.QueryHookOptions<GetOperationalNeedAnswerQuery, GetOperationalNeedAnswerQueryVariables> & ({ variables: GetOperationalNeedAnswerQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOperationalNeedAnswerQuery, GetOperationalNeedAnswerQueryVariables>(GetOperationalNeedAnswerDocument, options);
      }
export function useGetOperationalNeedAnswerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOperationalNeedAnswerQuery, GetOperationalNeedAnswerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOperationalNeedAnswerQuery, GetOperationalNeedAnswerQueryVariables>(GetOperationalNeedAnswerDocument, options);
        }
export function useGetOperationalNeedAnswerSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetOperationalNeedAnswerQuery, GetOperationalNeedAnswerQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetOperationalNeedAnswerQuery, GetOperationalNeedAnswerQueryVariables>(GetOperationalNeedAnswerDocument, options);
        }
export type GetOperationalNeedAnswerQueryHookResult = ReturnType<typeof useGetOperationalNeedAnswerQuery>;
export type GetOperationalNeedAnswerLazyQueryHookResult = ReturnType<typeof useGetOperationalNeedAnswerLazyQuery>;
export type GetOperationalNeedAnswerSuspenseQueryHookResult = ReturnType<typeof useGetOperationalNeedAnswerSuspenseQuery>;
export type GetOperationalNeedAnswerQueryResult = Apollo.QueryResult<GetOperationalNeedAnswerQuery, GetOperationalNeedAnswerQueryVariables>;
export const GetOperationalNeedsDocument = gql`
    query GetOperationalNeeds($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    isCollaborator
    opSolutionLastModifiedDts
    operationalNeeds {
      id
      modelPlanID
      name
      key
      nameOther
      needed
      modifiedDts
      solutions {
        id
        status
        name
        mustStartDts
        mustFinishDts
        needed
        nameOther
        key
        otherHeader
        operationalSolutionSubtasks {
          id
        }
        pocEmail
        pocName
        createdBy
        createdDts
      }
    }
  }
}
    `;

/**
 * __useGetOperationalNeedsQuery__
 *
 * To run a query within a React component, call `useGetOperationalNeedsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOperationalNeedsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOperationalNeedsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetOperationalNeedsQuery(baseOptions: Apollo.QueryHookOptions<GetOperationalNeedsQuery, GetOperationalNeedsQueryVariables> & ({ variables: GetOperationalNeedsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOperationalNeedsQuery, GetOperationalNeedsQueryVariables>(GetOperationalNeedsDocument, options);
      }
export function useGetOperationalNeedsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOperationalNeedsQuery, GetOperationalNeedsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOperationalNeedsQuery, GetOperationalNeedsQueryVariables>(GetOperationalNeedsDocument, options);
        }
export function useGetOperationalNeedsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetOperationalNeedsQuery, GetOperationalNeedsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetOperationalNeedsQuery, GetOperationalNeedsQueryVariables>(GetOperationalNeedsDocument, options);
        }
export type GetOperationalNeedsQueryHookResult = ReturnType<typeof useGetOperationalNeedsQuery>;
export type GetOperationalNeedsLazyQueryHookResult = ReturnType<typeof useGetOperationalNeedsLazyQuery>;
export type GetOperationalNeedsSuspenseQueryHookResult = ReturnType<typeof useGetOperationalNeedsSuspenseQuery>;
export type GetOperationalNeedsQueryResult = Apollo.QueryResult<GetOperationalNeedsQuery, GetOperationalNeedsQueryVariables>;
export const GetOperationalSolutionDocument = gql`
    query GetOperationalSolution($id: UUID!) {
  operationalSolution(id: $id) {
    id
    key
    needed
    name
    nameOther
    pocName
    pocEmail
    status
    isOther
    isCommonSolution
    otherHeader
    mustFinishDts
    mustStartDts
    documents {
      id
      virusScanned
      virusClean
      fileName
      fileType
      downloadUrl
      restricted
      documentType
      createdDts
      optionalNotes
      otherType
      numLinkedSolutions
      isLink
      url
    }
    operationalSolutionSubtasks {
      id
      name
      status
    }
  }
}
    `;

/**
 * __useGetOperationalSolutionQuery__
 *
 * To run a query within a React component, call `useGetOperationalSolutionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOperationalSolutionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOperationalSolutionQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetOperationalSolutionQuery(baseOptions: Apollo.QueryHookOptions<GetOperationalSolutionQuery, GetOperationalSolutionQueryVariables> & ({ variables: GetOperationalSolutionQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOperationalSolutionQuery, GetOperationalSolutionQueryVariables>(GetOperationalSolutionDocument, options);
      }
export function useGetOperationalSolutionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOperationalSolutionQuery, GetOperationalSolutionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOperationalSolutionQuery, GetOperationalSolutionQueryVariables>(GetOperationalSolutionDocument, options);
        }
export function useGetOperationalSolutionSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetOperationalSolutionQuery, GetOperationalSolutionQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetOperationalSolutionQuery, GetOperationalSolutionQueryVariables>(GetOperationalSolutionDocument, options);
        }
export type GetOperationalSolutionQueryHookResult = ReturnType<typeof useGetOperationalSolutionQuery>;
export type GetOperationalSolutionLazyQueryHookResult = ReturnType<typeof useGetOperationalSolutionLazyQuery>;
export type GetOperationalSolutionSuspenseQueryHookResult = ReturnType<typeof useGetOperationalSolutionSuspenseQuery>;
export type GetOperationalSolutionQueryResult = Apollo.QueryResult<GetOperationalSolutionQuery, GetOperationalSolutionQueryVariables>;
export const GetOperationalSolutionSubtasksDocument = gql`
    query GetOperationalSolutionSubtasks($id: UUID!) {
  operationalSolution(id: $id) {
    id
    operationalSolutionSubtasks {
      id
      solutionID
      name
      status
    }
  }
}
    `;

/**
 * __useGetOperationalSolutionSubtasksQuery__
 *
 * To run a query within a React component, call `useGetOperationalSolutionSubtasksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOperationalSolutionSubtasksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOperationalSolutionSubtasksQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetOperationalSolutionSubtasksQuery(baseOptions: Apollo.QueryHookOptions<GetOperationalSolutionSubtasksQuery, GetOperationalSolutionSubtasksQueryVariables> & ({ variables: GetOperationalSolutionSubtasksQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOperationalSolutionSubtasksQuery, GetOperationalSolutionSubtasksQueryVariables>(GetOperationalSolutionSubtasksDocument, options);
      }
export function useGetOperationalSolutionSubtasksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOperationalSolutionSubtasksQuery, GetOperationalSolutionSubtasksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOperationalSolutionSubtasksQuery, GetOperationalSolutionSubtasksQueryVariables>(GetOperationalSolutionSubtasksDocument, options);
        }
export function useGetOperationalSolutionSubtasksSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetOperationalSolutionSubtasksQuery, GetOperationalSolutionSubtasksQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetOperationalSolutionSubtasksQuery, GetOperationalSolutionSubtasksQueryVariables>(GetOperationalSolutionSubtasksDocument, options);
        }
export type GetOperationalSolutionSubtasksQueryHookResult = ReturnType<typeof useGetOperationalSolutionSubtasksQuery>;
export type GetOperationalSolutionSubtasksLazyQueryHookResult = ReturnType<typeof useGetOperationalSolutionSubtasksLazyQuery>;
export type GetOperationalSolutionSubtasksSuspenseQueryHookResult = ReturnType<typeof useGetOperationalSolutionSubtasksSuspenseQuery>;
export type GetOperationalSolutionSubtasksQueryResult = Apollo.QueryResult<GetOperationalSolutionSubtasksQuery, GetOperationalSolutionSubtasksQueryVariables>;
export const GetPossibleOperationalSolutionsDocument = gql`
    query GetPossibleOperationalSolutions {
  possibleOperationalSolutions {
    id
    name
    key
  }
}
    `;

/**
 * __useGetPossibleOperationalSolutionsQuery__
 *
 * To run a query within a React component, call `useGetPossibleOperationalSolutionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPossibleOperationalSolutionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPossibleOperationalSolutionsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetPossibleOperationalSolutionsQuery(baseOptions?: Apollo.QueryHookOptions<GetPossibleOperationalSolutionsQuery, GetPossibleOperationalSolutionsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPossibleOperationalSolutionsQuery, GetPossibleOperationalSolutionsQueryVariables>(GetPossibleOperationalSolutionsDocument, options);
      }
export function useGetPossibleOperationalSolutionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPossibleOperationalSolutionsQuery, GetPossibleOperationalSolutionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPossibleOperationalSolutionsQuery, GetPossibleOperationalSolutionsQueryVariables>(GetPossibleOperationalSolutionsDocument, options);
        }
export function useGetPossibleOperationalSolutionsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetPossibleOperationalSolutionsQuery, GetPossibleOperationalSolutionsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPossibleOperationalSolutionsQuery, GetPossibleOperationalSolutionsQueryVariables>(GetPossibleOperationalSolutionsDocument, options);
        }
export type GetPossibleOperationalSolutionsQueryHookResult = ReturnType<typeof useGetPossibleOperationalSolutionsQuery>;
export type GetPossibleOperationalSolutionsLazyQueryHookResult = ReturnType<typeof useGetPossibleOperationalSolutionsLazyQuery>;
export type GetPossibleOperationalSolutionsSuspenseQueryHookResult = ReturnType<typeof useGetPossibleOperationalSolutionsSuspenseQuery>;
export type GetPossibleOperationalSolutionsQueryResult = Apollo.QueryResult<GetPossibleOperationalSolutionsQuery, GetPossibleOperationalSolutionsQueryVariables>;
export const UpdateCustomOperationalNeedDocument = gql`
    mutation UpdateCustomOperationalNeed($modelPlanID: UUID!, $customNeedType: String!, $needed: Boolean!) {
  addOrUpdateCustomOperationalNeed(
    modelPlanID: $modelPlanID
    customNeedType: $customNeedType
    needed: $needed
  ) {
    id
    nameOther
    needed
    key
  }
}
    `;
export type UpdateCustomOperationalNeedMutationFn = Apollo.MutationFunction<UpdateCustomOperationalNeedMutation, UpdateCustomOperationalNeedMutationVariables>;

/**
 * __useUpdateCustomOperationalNeedMutation__
 *
 * To run a mutation, you first call `useUpdateCustomOperationalNeedMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCustomOperationalNeedMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCustomOperationalNeedMutation, { data, loading, error }] = useUpdateCustomOperationalNeedMutation({
 *   variables: {
 *      modelPlanID: // value for 'modelPlanID'
 *      customNeedType: // value for 'customNeedType'
 *      needed: // value for 'needed'
 *   },
 * });
 */
export function useUpdateCustomOperationalNeedMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCustomOperationalNeedMutation, UpdateCustomOperationalNeedMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCustomOperationalNeedMutation, UpdateCustomOperationalNeedMutationVariables>(UpdateCustomOperationalNeedDocument, options);
      }
export type UpdateCustomOperationalNeedMutationHookResult = ReturnType<typeof useUpdateCustomOperationalNeedMutation>;
export type UpdateCustomOperationalNeedMutationResult = Apollo.MutationResult<UpdateCustomOperationalNeedMutation>;
export type UpdateCustomOperationalNeedMutationOptions = Apollo.BaseMutationOptions<UpdateCustomOperationalNeedMutation, UpdateCustomOperationalNeedMutationVariables>;
export const UpdateCustomOperationalNeedByIdDocument = gql`
    mutation UpdateCustomOperationalNeedById($id: UUID!, $customNeedType: String!, $needed: Boolean!) {
  updateCustomOperationalNeedByID(
    id: $id
    customNeedType: $customNeedType
    needed: $needed
  ) {
    id
    nameOther
    needed
    key
  }
}
    `;
export type UpdateCustomOperationalNeedByIdMutationFn = Apollo.MutationFunction<UpdateCustomOperationalNeedByIdMutation, UpdateCustomOperationalNeedByIdMutationVariables>;

/**
 * __useUpdateCustomOperationalNeedByIdMutation__
 *
 * To run a mutation, you first call `useUpdateCustomOperationalNeedByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCustomOperationalNeedByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCustomOperationalNeedByIdMutation, { data, loading, error }] = useUpdateCustomOperationalNeedByIdMutation({
 *   variables: {
 *      id: // value for 'id'
 *      customNeedType: // value for 'customNeedType'
 *      needed: // value for 'needed'
 *   },
 * });
 */
export function useUpdateCustomOperationalNeedByIdMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCustomOperationalNeedByIdMutation, UpdateCustomOperationalNeedByIdMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCustomOperationalNeedByIdMutation, UpdateCustomOperationalNeedByIdMutationVariables>(UpdateCustomOperationalNeedByIdDocument, options);
      }
export type UpdateCustomOperationalNeedByIdMutationHookResult = ReturnType<typeof useUpdateCustomOperationalNeedByIdMutation>;
export type UpdateCustomOperationalNeedByIdMutationResult = Apollo.MutationResult<UpdateCustomOperationalNeedByIdMutation>;
export type UpdateCustomOperationalNeedByIdMutationOptions = Apollo.BaseMutationOptions<UpdateCustomOperationalNeedByIdMutation, UpdateCustomOperationalNeedByIdMutationVariables>;
export const UpdateOperationalSolutionDocument = gql`
    mutation UpdateOperationalSolution($id: UUID!, $changes: OperationalSolutionChanges!) {
  updateOperationalSolution(id: $id, changes: $changes) {
    id
    nameOther
    needed
    key
  }
}
    `;
export type UpdateOperationalSolutionMutationFn = Apollo.MutationFunction<UpdateOperationalSolutionMutation, UpdateOperationalSolutionMutationVariables>;

/**
 * __useUpdateOperationalSolutionMutation__
 *
 * To run a mutation, you first call `useUpdateOperationalSolutionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateOperationalSolutionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateOperationalSolutionMutation, { data, loading, error }] = useUpdateOperationalSolutionMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdateOperationalSolutionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateOperationalSolutionMutation, UpdateOperationalSolutionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateOperationalSolutionMutation, UpdateOperationalSolutionMutationVariables>(UpdateOperationalSolutionDocument, options);
      }
export type UpdateOperationalSolutionMutationHookResult = ReturnType<typeof useUpdateOperationalSolutionMutation>;
export type UpdateOperationalSolutionMutationResult = Apollo.MutationResult<UpdateOperationalSolutionMutation>;
export type UpdateOperationalSolutionMutationOptions = Apollo.BaseMutationOptions<UpdateOperationalSolutionMutation, UpdateOperationalSolutionMutationVariables>;
export const UpdateOperationalSolutionSubtasksDocument = gql`
    mutation UpdateOperationalSolutionSubtasks($inputs: [UpdateOperationalSolutionSubtaskInput!]!) {
  updateOperationalSolutionSubtasks(inputs: $inputs) {
    id
    solutionID
    name
    status
  }
}
    `;
export type UpdateOperationalSolutionSubtasksMutationFn = Apollo.MutationFunction<UpdateOperationalSolutionSubtasksMutation, UpdateOperationalSolutionSubtasksMutationVariables>;

/**
 * __useUpdateOperationalSolutionSubtasksMutation__
 *
 * To run a mutation, you first call `useUpdateOperationalSolutionSubtasksMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateOperationalSolutionSubtasksMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateOperationalSolutionSubtasksMutation, { data, loading, error }] = useUpdateOperationalSolutionSubtasksMutation({
 *   variables: {
 *      inputs: // value for 'inputs'
 *   },
 * });
 */
export function useUpdateOperationalSolutionSubtasksMutation(baseOptions?: Apollo.MutationHookOptions<UpdateOperationalSolutionSubtasksMutation, UpdateOperationalSolutionSubtasksMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateOperationalSolutionSubtasksMutation, UpdateOperationalSolutionSubtasksMutationVariables>(UpdateOperationalSolutionSubtasksDocument, options);
      }
export type UpdateOperationalSolutionSubtasksMutationHookResult = ReturnType<typeof useUpdateOperationalSolutionSubtasksMutation>;
export type UpdateOperationalSolutionSubtasksMutationResult = Apollo.MutationResult<UpdateOperationalSolutionSubtasksMutation>;
export type UpdateOperationalSolutionSubtasksMutationOptions = Apollo.BaseMutationOptions<UpdateOperationalSolutionSubtasksMutation, UpdateOperationalSolutionSubtasksMutationVariables>;
export const GetExistingModelPlansDocument = gql`
    query GetExistingModelPlans {
  existingModelCollection {
    id
    modelName
  }
}
    `;

/**
 * __useGetExistingModelPlansQuery__
 *
 * To run a query within a React component, call `useGetExistingModelPlansQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetExistingModelPlansQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetExistingModelPlansQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetExistingModelPlansQuery(baseOptions?: Apollo.QueryHookOptions<GetExistingModelPlansQuery, GetExistingModelPlansQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetExistingModelPlansQuery, GetExistingModelPlansQueryVariables>(GetExistingModelPlansDocument, options);
      }
export function useGetExistingModelPlansLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetExistingModelPlansQuery, GetExistingModelPlansQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetExistingModelPlansQuery, GetExistingModelPlansQueryVariables>(GetExistingModelPlansDocument, options);
        }
export function useGetExistingModelPlansSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetExistingModelPlansQuery, GetExistingModelPlansQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetExistingModelPlansQuery, GetExistingModelPlansQueryVariables>(GetExistingModelPlansDocument, options);
        }
export type GetExistingModelPlansQueryHookResult = ReturnType<typeof useGetExistingModelPlansQuery>;
export type GetExistingModelPlansLazyQueryHookResult = ReturnType<typeof useGetExistingModelPlansLazyQuery>;
export type GetExistingModelPlansSuspenseQueryHookResult = ReturnType<typeof useGetExistingModelPlansSuspenseQuery>;
export type GetExistingModelPlansQueryResult = Apollo.QueryResult<GetExistingModelPlansQuery, GetExistingModelPlansQueryVariables>;
export const GetModelPlansBaseDocument = gql`
    query GetModelPlansBase($filter: ModelPlanFilter!) {
  modelPlanCollection(filter: $filter) {
    id
    modelName
  }
}
    `;

/**
 * __useGetModelPlansBaseQuery__
 *
 * To run a query within a React component, call `useGetModelPlansBaseQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModelPlansBaseQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModelPlansBaseQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetModelPlansBaseQuery(baseOptions: Apollo.QueryHookOptions<GetModelPlansBaseQuery, GetModelPlansBaseQueryVariables> & ({ variables: GetModelPlansBaseQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModelPlansBaseQuery, GetModelPlansBaseQueryVariables>(GetModelPlansBaseDocument, options);
      }
export function useGetModelPlansBaseLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModelPlansBaseQuery, GetModelPlansBaseQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModelPlansBaseQuery, GetModelPlansBaseQueryVariables>(GetModelPlansBaseDocument, options);
        }
export function useGetModelPlansBaseSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetModelPlansBaseQuery, GetModelPlansBaseQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetModelPlansBaseQuery, GetModelPlansBaseQueryVariables>(GetModelPlansBaseDocument, options);
        }
export type GetModelPlansBaseQueryHookResult = ReturnType<typeof useGetModelPlansBaseQuery>;
export type GetModelPlansBaseLazyQueryHookResult = ReturnType<typeof useGetModelPlansBaseLazyQuery>;
export type GetModelPlansBaseSuspenseQueryHookResult = ReturnType<typeof useGetModelPlansBaseSuspenseQuery>;
export type GetModelPlansBaseQueryResult = Apollo.QueryResult<GetModelPlansBaseQuery, GetModelPlansBaseQueryVariables>;
export const GetNdaDocument = gql`
    query GetNDA {
  ndaInfo {
    agreed
    agreedDts
  }
}
    `;

/**
 * __useGetNdaQuery__
 *
 * To run a query within a React component, call `useGetNdaQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNdaQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNdaQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetNdaQuery(baseOptions?: Apollo.QueryHookOptions<GetNdaQuery, GetNdaQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetNdaQuery, GetNdaQueryVariables>(GetNdaDocument, options);
      }
export function useGetNdaLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetNdaQuery, GetNdaQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetNdaQuery, GetNdaQueryVariables>(GetNdaDocument, options);
        }
export function useGetNdaSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetNdaQuery, GetNdaQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetNdaQuery, GetNdaQueryVariables>(GetNdaDocument, options);
        }
export type GetNdaQueryHookResult = ReturnType<typeof useGetNdaQuery>;
export type GetNdaLazyQueryHookResult = ReturnType<typeof useGetNdaLazyQuery>;
export type GetNdaSuspenseQueryHookResult = ReturnType<typeof useGetNdaSuspenseQuery>;
export type GetNdaQueryResult = Apollo.QueryResult<GetNdaQuery, GetNdaQueryVariables>;
export const ArchiveModelPlanDocument = gql`
    mutation ArchiveModelPlan($id: UUID!, $archived: Boolean!) {
  updateModelPlan(id: $id, changes: {archived: $archived}) {
    id
  }
}
    `;
export type ArchiveModelPlanMutationFn = Apollo.MutationFunction<ArchiveModelPlanMutation, ArchiveModelPlanMutationVariables>;

/**
 * __useArchiveModelPlanMutation__
 *
 * To run a mutation, you first call `useArchiveModelPlanMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useArchiveModelPlanMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [archiveModelPlanMutation, { data, loading, error }] = useArchiveModelPlanMutation({
 *   variables: {
 *      id: // value for 'id'
 *      archived: // value for 'archived'
 *   },
 * });
 */
export function useArchiveModelPlanMutation(baseOptions?: Apollo.MutationHookOptions<ArchiveModelPlanMutation, ArchiveModelPlanMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ArchiveModelPlanMutation, ArchiveModelPlanMutationVariables>(ArchiveModelPlanDocument, options);
      }
export type ArchiveModelPlanMutationHookResult = ReturnType<typeof useArchiveModelPlanMutation>;
export type ArchiveModelPlanMutationResult = Apollo.MutationResult<ArchiveModelPlanMutation>;
export type ArchiveModelPlanMutationOptions = Apollo.BaseMutationOptions<ArchiveModelPlanMutation, ArchiveModelPlanMutationVariables>;
export const CreateModelPlanDocument = gql`
    mutation CreateModelPlan($modelName: String!) {
  createModelPlan(modelName: $modelName) {
    id
    createdBy
    modelName
    basics {
      id
      modelPlanID
      modelCategory
      cmsCenters
      cmmiGroups
      modelType
      problem
      goal
      testInterventions
      note
      completeICIP
      clearanceStarts
      clearanceEnds
      announced
      applicationsStart
      applicationsEnd
      performancePeriodStarts
      performancePeriodEnds
      wrapUpEnds
      highLevelNote
      phasedIn
      phasedInNote
      createdBy
      createdDts
      modifiedBy
      modifiedDts
      status
    }
    collaborators {
      id
      userAccount {
        id
        commonName
        email
        username
      }
      userID
      teamRoles
    }
  }
}
    `;
export type CreateModelPlanMutationFn = Apollo.MutationFunction<CreateModelPlanMutation, CreateModelPlanMutationVariables>;

/**
 * __useCreateModelPlanMutation__
 *
 * To run a mutation, you first call `useCreateModelPlanMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateModelPlanMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createModelPlanMutation, { data, loading, error }] = useCreateModelPlanMutation({
 *   variables: {
 *      modelName: // value for 'modelName'
 *   },
 * });
 */
export function useCreateModelPlanMutation(baseOptions?: Apollo.MutationHookOptions<CreateModelPlanMutation, CreateModelPlanMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateModelPlanMutation, CreateModelPlanMutationVariables>(CreateModelPlanDocument, options);
      }
export type CreateModelPlanMutationHookResult = ReturnType<typeof useCreateModelPlanMutation>;
export type CreateModelPlanMutationResult = Apollo.MutationResult<CreateModelPlanMutation>;
export type CreateModelPlanMutationOptions = Apollo.BaseMutationOptions<CreateModelPlanMutation, CreateModelPlanMutationVariables>;
export const CreateModelPlanReplyDocument = gql`
    mutation CreateModelPlanReply($input: DiscussionReplyCreateInput!) {
  createDiscussionReply(input: $input) {
    id
    discussionID
    content {
      rawContent
    }
    createdBy
    createdDts
  }
}
    `;
export type CreateModelPlanReplyMutationFn = Apollo.MutationFunction<CreateModelPlanReplyMutation, CreateModelPlanReplyMutationVariables>;

/**
 * __useCreateModelPlanReplyMutation__
 *
 * To run a mutation, you first call `useCreateModelPlanReplyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateModelPlanReplyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createModelPlanReplyMutation, { data, loading, error }] = useCreateModelPlanReplyMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateModelPlanReplyMutation(baseOptions?: Apollo.MutationHookOptions<CreateModelPlanReplyMutation, CreateModelPlanReplyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateModelPlanReplyMutation, CreateModelPlanReplyMutationVariables>(CreateModelPlanReplyDocument, options);
      }
export type CreateModelPlanReplyMutationHookResult = ReturnType<typeof useCreateModelPlanReplyMutation>;
export type CreateModelPlanReplyMutationResult = Apollo.MutationResult<CreateModelPlanReplyMutation>;
export type CreateModelPlanReplyMutationOptions = Apollo.BaseMutationOptions<CreateModelPlanReplyMutation, CreateModelPlanReplyMutationVariables>;
export const GetAllModelDataDocument = gql`
    query GetAllModelData {
  modelPlanCollection(filter: INCLUDE_ALL) {
    id
    modelName
    nameHistory(sort: DESC)
    abbreviation
    archived
    createdByUserAccount {
      commonName
    }
    createdDts
    status
    basics {
      id
      modelCategory
      amsModelID
      demoCode
      cmsCenters
      cmmiGroups
      modelType
      modelTypeOther
      problem
      goal
      testInterventions
      note
      completeICIP
      clearanceStarts
      clearanceEnds
      announced
      applicationsStart
      applicationsEnd
      performancePeriodStarts
      performancePeriodEnds
      highLevelNote
      wrapUpEnds
      phasedIn
      phasedInNote
      readyForReviewByUserAccount {
        commonName
      }
      readyForReviewDts
      status
    }
    generalCharacteristics {
      id
      rulemakingRequired
      rulemakingRequiredDescription
      rulemakingRequiredNote
      authorityAllowances
      authorityAllowancesOther
      authorityAllowancesNote
      waiversRequired
      waiversRequiredTypes
      waiversRequiredNote
      isNewModel
      existingModel
      resemblesExistingModel
      resemblesExistingModelWhyHow
      resemblesExistingModelHow
      resemblesExistingModelNote
      resemblesExistingModelWhich {
        names
      }
      resemblesExistingModelOtherSpecify
      resemblesExistingModelOtherOption
      participationInModelPrecondition
      participationInModelPreconditionWhich {
        names
      }
      participationInModelPreconditionOtherSpecify
      participationInModelPreconditionOtherOption
      participationInModelPreconditionWhyHow
      participationInModelPreconditionNote
      hasComponentsOrTracks
      hasComponentsOrTracksDiffer
      hasComponentsOrTracksNote
      careCoordinationInvolved
      careCoordinationInvolvedDescription
      careCoordinationInvolvedNote
      additionalServicesInvolved
      additionalServicesInvolvedDescription
      additionalServicesInvolvedNote
      communityPartnersInvolved
      communityPartnersInvolvedDescription
      communityPartnersInvolvedNote
      agencyOrStateHelp
      agencyOrStateHelpOther
      agencyOrStateHelpNote
      alternativePaymentModelTypes
      alternativePaymentModelNote
      keyCharacteristics
      keyCharacteristicsNote
      keyCharacteristicsOther
      collectPlanBids
      collectPlanBidsNote
      managePartCDEnrollment
      managePartCDEnrollmentNote
      planContractUpdated
      planContractUpdatedNote
      geographiesTargeted
      geographiesTargetedTypes
      geographiesStatesAndTerritories
      geographiesRegionTypes
      geographiesTargetedTypesOther
      geographiesTargetedAppliedTo
      geographiesTargetedAppliedToOther
      geographiesTargetedNote
      participationOptions
      participationOptionsNote
      agreementTypes
      agreementTypesOther
      multiplePatricipationAgreementsNeeded
      multiplePatricipationAgreementsNeededNote
      readyForReviewByUserAccount {
        commonName
      }
      readyForReviewDts
      status
    }
    participantsAndProviders {
      id
      participantAddedFrequency
      participantAddedFrequencyContinually
      participantAddedFrequencyOther
      participantAddedFrequencyNote
      participantRemovedFrequency
      participantRemovedFrequencyContinually
      participantRemovedFrequencyOther
      participantRemovedFrequencyNote
      communicationMethod
      communicationMethodOther
      communicationNote
      riskType
      riskOther
      riskNote
      willRiskChange
      willRiskChangeNote
      participantRequireFinancialGuarantee
      participantRequireFinancialGuaranteeType
      participantRequireFinancialGuaranteeOther
      participantRequireFinancialGuaranteeNote
      coordinateWork
      coordinateWorkNote
      gainsharePayments
      gainsharePaymentsTrack
      gainsharePaymentsEligibility
      gainsharePaymentsEligibilityOther
      gainsharePaymentsNote
      participantsIds
      participantsIdsOther
      participantsIDSNote
      expectedNumberOfParticipants
      estimateConfidence
      confidenceNote
      recruitmentMethod
      recruitmentOther
      recruitmentNote
      selectionMethod
      selectionOther
      selectionNote
      participants
      medicareProviderType
      isNewTypeOfProvidersOrSuppliers
      statesEngagement
      participantsOther
      participantsNote
      participantsCurrentlyInModels
      participantsCurrentlyInModelsNote
      modelApplicationLevel
      providerAdditionFrequency
      providerAdditionFrequencyContinually
      providerAdditionFrequencyOther
      providerAdditionFrequencyNote
      providerAddMethod
      providerAddMethodOther
      providerAddMethodNote
      providerLeaveMethod
      providerLeaveMethodOther
      providerLeaveMethodNote
      providerRemovalFrequency
      providerRemovalFrequencyContinually
      providerRemovalFrequencyOther
      providerRemovalFrequencyNote
      providerOverlap
      providerOverlapHierarchy
      providerOverlapNote
      readyForReviewByUserAccount {
        commonName
      }
      readyForReviewDts
      status
    }
    beneficiaries {
      id
      beneficiaries
      beneficiariesNote
      beneficiariesOther
      beneficiaryOverlap
      beneficiaryOverlapNote
      beneficiarySelectionNote
      beneficiarySelectionOther
      beneficiarySelectionMethod
      treatDualElligibleDifferent
      treatDualElligibleDifferentHow
      treatDualElligibleDifferentNote
      excludeCertainCharacteristics
      excludeCertainCharacteristicsCriteria
      excludeCertainCharacteristicsNote
      beneficiarySelectionFrequency
      beneficiarySelectionFrequencyContinually
      beneficiarySelectionFrequencyNote
      beneficiarySelectionFrequencyOther
      beneficiaryRemovalFrequency
      beneficiaryRemovalFrequencyContinually
      beneficiaryRemovalFrequencyNote
      beneficiaryRemovalFrequencyOther
      precedenceRules
      precedenceRulesYes
      precedenceRulesNo
      precedenceRulesNote
      numberPeopleImpacted
      estimateConfidence
      confidenceNote
      readyForReviewByUserAccount {
        commonName
      }
      readyForReviewDts
      status
    }
    opsEvalAndLearning {
      id
      ccmInvolvment
      ccmInvolvmentOther
      ccmInvolvmentNote
      iddocSupport
      iddocSupportNote
      sendFilesBetweenCcw
      sendFilesBetweenCcwNote
      appToSendFilesToKnown
      appToSendFilesToWhich
      appToSendFilesToNote
      useCcwForFileDistribiutionToParticipants
      useCcwForFileDistribiutionToParticipantsNote
      developNewQualityMeasures
      developNewQualityMeasuresNote
      qualityPerformanceImpactsPayment
      qualityPerformanceImpactsPaymentOther
      qualityPerformanceImpactsPaymentNote
      dataSharingStarts
      dataSharingStartsOther
      dataSharingFrequency
      dataSharingFrequencyContinually
      dataSharingFrequencyOther
      dataSharingStartsNote
      dataCollectionStarts
      dataCollectionStartsOther
      dataCollectionFrequency
      dataCollectionFrequencyContinually
      dataCollectionFrequencyOther
      dataCollectionFrequencyNote
      qualityReportingStarts
      qualityReportingStartsOther
      qualityReportingStartsNote
      qualityReportingFrequency
      qualityReportingFrequencyContinually
      qualityReportingFrequencyOther
      evaluationApproaches
      evaluationApproachOther
      evalutaionApproachNote
      dataNeededForMonitoring
      dataNeededForMonitoringOther
      dataNeededForMonitoringNote
      dataToSendParticicipants
      dataToSendParticicipantsOther
      dataToSendParticicipantsNote
      shareCclfData
      shareCclfDataNote
      technicalContactsIdentified
      technicalContactsIdentifiedDetail
      technicalContactsIdentifiedNote
      captureParticipantInfo
      captureParticipantInfoNote
      icdOwner
      draftIcdDueDate
      icdNote
      dataFullTimeOrIncremental
      eftSetUp
      unsolicitedAdjustmentsIncluded
      dataFlowDiagramsNeeded
      produceBenefitEnhancementFiles
      fileNamingConventions
      dataMonitoringNote
      uatNeeds
      stcNeeds
      testingTimelines
      testingNote
      dataMonitoringFileTypes
      dataMonitoringFileOther
      dataResponseType
      dataResponseFileFrequency
      modelLearningSystems
      modelLearningSystemsOther
      modelLearningSystemsNote
      anticipatedChallenges
      stakeholders
      stakeholdersOther
      stakeholdersNote
      helpdeskUse
      helpdeskUseNote
      contractorSupport
      contractorSupportOther
      contractorSupportHow
      contractorSupportNote
      benchmarkForPerformance
      benchmarkForPerformanceNote
      computePerformanceScores
      computePerformanceScoresNote
      riskAdjustPerformance
      riskAdjustFeedback
      riskAdjustPayments
      riskAdjustOther
      riskAdjustNote
      appealPerformance
      appealFeedback
      appealPayments
      appealOther
      appealNote
      readyForReviewByUserAccount {
        commonName
      }
      readyForReviewDts
      status
    }
    payments {
      id
      payType
      payClaims
      creatingDependenciesBetweenServices
      creatingDependenciesBetweenServicesNote
      needsClaimsDataCollection
      needsClaimsDataCollectionNote
      providingThirdPartyFile
      isContractorAwareTestDataRequirements
      beneficiaryCostSharingLevelAndHandling
      waiveBeneficiaryCostSharingForAnyServices
      waiveBeneficiaryCostSharingServiceSpecification
      waiverOnlyAppliesPartOfPayment
      waiveBeneficiaryCostSharingNote
      payClaimsNote
      payClaimsOther
      shouldAnyProvidersExcludedFFSSystems
      shouldAnyProviderExcludedFFSSystemsNote
      changesMedicarePhysicianFeeSchedule
      changesMedicarePhysicianFeeScheduleNote
      affectsMedicareSecondaryPayerClaims
      affectsMedicareSecondaryPayerClaimsHow
      affectsMedicareSecondaryPayerClaimsNote
      payModelDifferentiation
      willBePaymentAdjustments
      willBePaymentAdjustmentsNote
      expectedCalculationComplexityLevel
      expectedCalculationComplexityLevelNote
      claimsProcessingPrecedence
      claimsProcessingPrecedenceOther
      claimsProcessingPrecedenceNote
      canParticipantsSelectBetweenPaymentMechanisms
      canParticipantsSelectBetweenPaymentMechanismsHow
      canParticipantsSelectBetweenPaymentMechanismsNote
      anticipatedPaymentFrequency
      anticipatedPaymentFrequencyContinually
      anticipatedPaymentFrequencyOther
      anticipatedPaymentFrequencyNote
      fundingSource
      fundingSourcePatientProtectionInfo
      fundingSourceMedicareAInfo
      fundingSourceMedicareBInfo
      fundingSourceOther
      fundingSourceNote
      fundingSourceR
      fundingSourceRPatientProtectionInfo
      fundingSourceRMedicareAInfo
      fundingSourceRMedicareBInfo
      fundingSourceROther
      fundingSourceRNote
      payRecipients
      payRecipientsOtherSpecification
      payRecipientsNote
      payTypeNote
      nonClaimsPayments
      nonClaimsPaymentOther
      paymentCalculationOwner
      numberPaymentsPerPayCycle
      numberPaymentsPerPayCycleNote
      sharedSystemsInvolvedAdditionalClaimPayment
      sharedSystemsInvolvedAdditionalClaimPaymentNote
      planningToUseInnovationPaymentContractor
      planningToUseInnovationPaymentContractorNote
      willRecoverPayments
      willRecoverPaymentsNote
      anticipateReconcilingPaymentsRetrospectively
      anticipateReconcilingPaymentsRetrospectivelyNote
      paymentReconciliationFrequency
      paymentReconciliationFrequencyContinually
      paymentReconciliationFrequencyOther
      paymentReconciliationFrequencyNote
      paymentDemandRecoupmentFrequency
      paymentDemandRecoupmentFrequencyContinually
      paymentDemandRecoupmentFrequencyOther
      paymentDemandRecoupmentFrequencyNote
      paymentStartDate
      paymentStartDateNote
      readyForReviewByUserAccount {
        commonName
      }
      readyForReviewDts
      status
    }
    collaborators {
      id
      userAccount {
        id
        commonName
        email
        username
      }
      userID
      teamRoles
      modelPlanID
      createdDts
    }
    discussions {
      id
      content {
        rawContent
      }
      createdByUserAccount {
        commonName
      }
      userRole
      userRoleDescription
      createdDts
      replies {
        id
        discussionID
        content {
          rawContent
        }
        createdByUserAccount {
          commonName
        }
        userRole
        userRoleDescription
        createdDts
      }
    }
  }
}
    `;

/**
 * __useGetAllModelDataQuery__
 *
 * To run a query within a React component, call `useGetAllModelDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllModelDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllModelDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllModelDataQuery(baseOptions?: Apollo.QueryHookOptions<GetAllModelDataQuery, GetAllModelDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllModelDataQuery, GetAllModelDataQueryVariables>(GetAllModelDataDocument, options);
      }
export function useGetAllModelDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllModelDataQuery, GetAllModelDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllModelDataQuery, GetAllModelDataQueryVariables>(GetAllModelDataDocument, options);
        }
export function useGetAllModelDataSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAllModelDataQuery, GetAllModelDataQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAllModelDataQuery, GetAllModelDataQueryVariables>(GetAllModelDataDocument, options);
        }
export type GetAllModelDataQueryHookResult = ReturnType<typeof useGetAllModelDataQuery>;
export type GetAllModelDataLazyQueryHookResult = ReturnType<typeof useGetAllModelDataLazyQuery>;
export type GetAllModelDataSuspenseQueryHookResult = ReturnType<typeof useGetAllModelDataSuspenseQuery>;
export type GetAllModelDataQueryResult = Apollo.QueryResult<GetAllModelDataQuery, GetAllModelDataQueryVariables>;
export const GetAllSingleModelDataDocument = gql`
    query GetAllSingleModelData($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    nameHistory(sort: DESC)
    abbreviation
    archived
    createdByUserAccount {
      commonName
    }
    createdDts
    status
    basics {
      id
      modelCategory
      amsModelID
      demoCode
      cmsCenters
      cmmiGroups
      modelType
      modelTypeOther
      problem
      goal
      testInterventions
      note
      completeICIP
      clearanceStarts
      clearanceEnds
      announced
      applicationsStart
      applicationsEnd
      performancePeriodStarts
      performancePeriodEnds
      highLevelNote
      wrapUpEnds
      phasedIn
      phasedInNote
      readyForReviewByUserAccount {
        commonName
      }
      readyForReviewDts
      status
    }
    generalCharacteristics {
      id
      rulemakingRequired
      rulemakingRequiredDescription
      rulemakingRequiredNote
      authorityAllowances
      authorityAllowancesOther
      authorityAllowancesNote
      waiversRequired
      waiversRequiredTypes
      waiversRequiredNote
      isNewModel
      existingModel
      resemblesExistingModel
      resemblesExistingModelWhyHow
      resemblesExistingModelHow
      resemblesExistingModelNote
      resemblesExistingModelWhich {
        names
      }
      resemblesExistingModelOtherSpecify
      resemblesExistingModelOtherOption
      participationInModelPrecondition
      participationInModelPreconditionWhich {
        names
      }
      participationInModelPreconditionOtherSpecify
      participationInModelPreconditionOtherOption
      participationInModelPreconditionWhyHow
      participationInModelPreconditionNote
      hasComponentsOrTracks
      hasComponentsOrTracksDiffer
      hasComponentsOrTracksNote
      careCoordinationInvolved
      careCoordinationInvolvedDescription
      careCoordinationInvolvedNote
      additionalServicesInvolved
      additionalServicesInvolvedDescription
      additionalServicesInvolvedNote
      communityPartnersInvolved
      communityPartnersInvolvedDescription
      communityPartnersInvolvedNote
      agencyOrStateHelp
      agencyOrStateHelpOther
      agencyOrStateHelpNote
      alternativePaymentModelTypes
      alternativePaymentModelNote
      keyCharacteristics
      keyCharacteristicsNote
      keyCharacteristicsOther
      collectPlanBids
      collectPlanBidsNote
      managePartCDEnrollment
      managePartCDEnrollmentNote
      planContractUpdated
      planContractUpdatedNote
      geographiesTargeted
      geographiesTargetedTypes
      geographiesStatesAndTerritories
      geographiesRegionTypes
      geographiesTargetedTypesOther
      geographiesTargetedAppliedTo
      geographiesTargetedAppliedToOther
      geographiesTargetedNote
      participationOptions
      participationOptionsNote
      agreementTypes
      agreementTypesOther
      multiplePatricipationAgreementsNeeded
      multiplePatricipationAgreementsNeededNote
      readyForReviewByUserAccount {
        commonName
      }
      readyForReviewDts
      status
    }
    participantsAndProviders {
      id
      participantAddedFrequency
      participantAddedFrequencyContinually
      participantAddedFrequencyOther
      participantAddedFrequencyNote
      participantRemovedFrequency
      participantRemovedFrequencyContinually
      participantRemovedFrequencyOther
      participantRemovedFrequencyNote
      communicationMethod
      communicationMethodOther
      communicationNote
      riskType
      riskOther
      riskNote
      willRiskChange
      willRiskChangeNote
      participantRequireFinancialGuarantee
      participantRequireFinancialGuaranteeType
      participantRequireFinancialGuaranteeOther
      participantRequireFinancialGuaranteeNote
      coordinateWork
      coordinateWorkNote
      gainsharePayments
      gainsharePaymentsTrack
      gainsharePaymentsEligibility
      gainsharePaymentsEligibilityOther
      gainsharePaymentsNote
      participantsIds
      participantsIdsOther
      participantsIDSNote
      expectedNumberOfParticipants
      estimateConfidence
      confidenceNote
      recruitmentMethod
      recruitmentOther
      recruitmentNote
      selectionMethod
      selectionOther
      selectionNote
      participants
      medicareProviderType
      isNewTypeOfProvidersOrSuppliers
      statesEngagement
      participantsOther
      participantsNote
      participantsCurrentlyInModels
      participantsCurrentlyInModelsNote
      modelApplicationLevel
      providerAdditionFrequency
      providerAdditionFrequencyContinually
      providerAdditionFrequencyOther
      providerAdditionFrequencyNote
      providerAddMethod
      providerAddMethodOther
      providerAddMethodNote
      providerLeaveMethod
      providerLeaveMethodOther
      providerLeaveMethodNote
      providerRemovalFrequency
      providerRemovalFrequencyContinually
      providerRemovalFrequencyOther
      providerRemovalFrequencyNote
      providerOverlap
      providerOverlapHierarchy
      providerOverlapNote
      readyForReviewByUserAccount {
        commonName
      }
      readyForReviewDts
      status
    }
    beneficiaries {
      id
      beneficiaries
      beneficiariesNote
      beneficiariesOther
      beneficiaryOverlap
      beneficiaryOverlapNote
      beneficiarySelectionNote
      beneficiarySelectionOther
      beneficiarySelectionMethod
      treatDualElligibleDifferent
      treatDualElligibleDifferentHow
      treatDualElligibleDifferentNote
      excludeCertainCharacteristics
      excludeCertainCharacteristicsCriteria
      excludeCertainCharacteristicsNote
      beneficiarySelectionFrequency
      beneficiarySelectionFrequencyContinually
      beneficiarySelectionFrequencyNote
      beneficiarySelectionFrequencyOther
      beneficiaryRemovalFrequency
      beneficiaryRemovalFrequencyContinually
      beneficiaryRemovalFrequencyNote
      beneficiaryRemovalFrequencyOther
      precedenceRules
      precedenceRulesYes
      precedenceRulesNo
      precedenceRulesNote
      numberPeopleImpacted
      estimateConfidence
      confidenceNote
      readyForReviewByUserAccount {
        commonName
      }
      readyForReviewDts
      status
    }
    opsEvalAndLearning {
      id
      ccmInvolvment
      ccmInvolvmentOther
      ccmInvolvmentNote
      iddocSupport
      iddocSupportNote
      sendFilesBetweenCcw
      sendFilesBetweenCcwNote
      appToSendFilesToKnown
      appToSendFilesToWhich
      appToSendFilesToNote
      useCcwForFileDistribiutionToParticipants
      useCcwForFileDistribiutionToParticipantsNote
      developNewQualityMeasures
      developNewQualityMeasuresNote
      qualityPerformanceImpactsPayment
      qualityPerformanceImpactsPaymentOther
      qualityPerformanceImpactsPaymentNote
      dataSharingStarts
      dataSharingStartsOther
      dataSharingFrequency
      dataSharingFrequencyContinually
      dataSharingFrequencyOther
      dataSharingStartsNote
      dataCollectionStarts
      dataCollectionStartsOther
      dataCollectionFrequency
      dataCollectionFrequencyContinually
      dataCollectionFrequencyOther
      dataCollectionFrequencyNote
      qualityReportingStarts
      qualityReportingStartsOther
      qualityReportingStartsNote
      qualityReportingFrequency
      qualityReportingFrequencyContinually
      qualityReportingFrequencyOther
      evaluationApproaches
      evaluationApproachOther
      evalutaionApproachNote
      dataNeededForMonitoring
      dataNeededForMonitoringOther
      dataNeededForMonitoringNote
      dataToSendParticicipants
      dataToSendParticicipantsOther
      dataToSendParticicipantsNote
      shareCclfData
      shareCclfDataNote
      technicalContactsIdentified
      technicalContactsIdentifiedDetail
      technicalContactsIdentifiedNote
      captureParticipantInfo
      captureParticipantInfoNote
      icdOwner
      draftIcdDueDate
      icdNote
      dataFullTimeOrIncremental
      eftSetUp
      unsolicitedAdjustmentsIncluded
      dataFlowDiagramsNeeded
      produceBenefitEnhancementFiles
      fileNamingConventions
      dataMonitoringNote
      uatNeeds
      stcNeeds
      testingTimelines
      testingNote
      dataMonitoringFileTypes
      dataMonitoringFileOther
      dataResponseType
      dataResponseFileFrequency
      modelLearningSystems
      modelLearningSystemsOther
      modelLearningSystemsNote
      anticipatedChallenges
      stakeholders
      stakeholdersOther
      stakeholdersNote
      helpdeskUse
      helpdeskUseNote
      contractorSupport
      contractorSupportOther
      contractorSupportHow
      contractorSupportNote
      benchmarkForPerformance
      benchmarkForPerformanceNote
      computePerformanceScores
      computePerformanceScoresNote
      riskAdjustPerformance
      riskAdjustFeedback
      riskAdjustPayments
      riskAdjustOther
      riskAdjustNote
      appealPerformance
      appealFeedback
      appealPayments
      appealOther
      appealNote
      readyForReviewByUserAccount {
        commonName
      }
      readyForReviewDts
      status
    }
    payments {
      id
      payType
      payClaims
      creatingDependenciesBetweenServices
      creatingDependenciesBetweenServicesNote
      needsClaimsDataCollection
      needsClaimsDataCollectionNote
      providingThirdPartyFile
      isContractorAwareTestDataRequirements
      beneficiaryCostSharingLevelAndHandling
      waiveBeneficiaryCostSharingForAnyServices
      waiveBeneficiaryCostSharingServiceSpecification
      waiverOnlyAppliesPartOfPayment
      waiveBeneficiaryCostSharingNote
      payClaimsNote
      payClaimsOther
      shouldAnyProvidersExcludedFFSSystems
      shouldAnyProviderExcludedFFSSystemsNote
      changesMedicarePhysicianFeeSchedule
      changesMedicarePhysicianFeeScheduleNote
      affectsMedicareSecondaryPayerClaims
      affectsMedicareSecondaryPayerClaimsHow
      affectsMedicareSecondaryPayerClaimsNote
      payModelDifferentiation
      willBePaymentAdjustments
      willBePaymentAdjustmentsNote
      expectedCalculationComplexityLevel
      expectedCalculationComplexityLevelNote
      claimsProcessingPrecedence
      claimsProcessingPrecedenceOther
      claimsProcessingPrecedenceNote
      canParticipantsSelectBetweenPaymentMechanisms
      canParticipantsSelectBetweenPaymentMechanismsHow
      canParticipantsSelectBetweenPaymentMechanismsNote
      anticipatedPaymentFrequency
      anticipatedPaymentFrequencyContinually
      anticipatedPaymentFrequencyOther
      anticipatedPaymentFrequencyNote
      fundingSource
      fundingSourcePatientProtectionInfo
      fundingSourceMedicareAInfo
      fundingSourceMedicareBInfo
      fundingSourceOther
      fundingSourceNote
      fundingSourceR
      fundingSourceRPatientProtectionInfo
      fundingSourceRMedicareAInfo
      fundingSourceRMedicareBInfo
      fundingSourceROther
      fundingSourceRNote
      payRecipients
      payRecipientsOtherSpecification
      payRecipientsNote
      payTypeNote
      nonClaimsPayments
      nonClaimsPaymentOther
      paymentCalculationOwner
      numberPaymentsPerPayCycle
      numberPaymentsPerPayCycleNote
      sharedSystemsInvolvedAdditionalClaimPayment
      sharedSystemsInvolvedAdditionalClaimPaymentNote
      planningToUseInnovationPaymentContractor
      planningToUseInnovationPaymentContractorNote
      willRecoverPayments
      willRecoverPaymentsNote
      anticipateReconcilingPaymentsRetrospectively
      anticipateReconcilingPaymentsRetrospectivelyNote
      paymentReconciliationFrequency
      paymentReconciliationFrequencyContinually
      paymentReconciliationFrequencyOther
      paymentReconciliationFrequencyNote
      paymentDemandRecoupmentFrequency
      paymentDemandRecoupmentFrequencyContinually
      paymentDemandRecoupmentFrequencyOther
      paymentDemandRecoupmentFrequencyNote
      paymentStartDate
      paymentStartDateNote
      readyForReviewByUserAccount {
        commonName
      }
      readyForReviewDts
      status
    }
    collaborators {
      id
      userAccount {
        id
        commonName
        email
        username
      }
      userID
      teamRoles
      modelPlanID
      createdDts
    }
    discussions {
      id
      content {
        rawContent
      }
      createdByUserAccount {
        commonName
      }
      userRole
      userRoleDescription
      createdDts
      replies {
        id
        discussionID
        content {
          rawContent
        }
        createdByUserAccount {
          commonName
        }
        userRole
        userRoleDescription
        createdDts
      }
    }
  }
}
    `;

/**
 * __useGetAllSingleModelDataQuery__
 *
 * To run a query within a React component, call `useGetAllSingleModelDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllSingleModelDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllSingleModelDataQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAllSingleModelDataQuery(baseOptions: Apollo.QueryHookOptions<GetAllSingleModelDataQuery, GetAllSingleModelDataQueryVariables> & ({ variables: GetAllSingleModelDataQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllSingleModelDataQuery, GetAllSingleModelDataQueryVariables>(GetAllSingleModelDataDocument, options);
      }
export function useGetAllSingleModelDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllSingleModelDataQuery, GetAllSingleModelDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllSingleModelDataQuery, GetAllSingleModelDataQueryVariables>(GetAllSingleModelDataDocument, options);
        }
export function useGetAllSingleModelDataSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAllSingleModelDataQuery, GetAllSingleModelDataQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAllSingleModelDataQuery, GetAllSingleModelDataQueryVariables>(GetAllSingleModelDataDocument, options);
        }
export type GetAllSingleModelDataQueryHookResult = ReturnType<typeof useGetAllSingleModelDataQuery>;
export type GetAllSingleModelDataLazyQueryHookResult = ReturnType<typeof useGetAllSingleModelDataLazyQuery>;
export type GetAllSingleModelDataSuspenseQueryHookResult = ReturnType<typeof useGetAllSingleModelDataSuspenseQuery>;
export type GetAllSingleModelDataQueryResult = Apollo.QueryResult<GetAllSingleModelDataQuery, GetAllSingleModelDataQueryVariables>;
export const GetCurrentUserDocument = gql`
    query GetCurrentUser {
  currentUser {
    launchDarkly {
      userKey
      signedHash
    }
  }
}
    `;

/**
 * __useGetCurrentUserQuery__
 *
 * To run a query within a React component, call `useGetCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurrentUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCurrentUserQuery(baseOptions?: Apollo.QueryHookOptions<GetCurrentUserQuery, GetCurrentUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCurrentUserQuery, GetCurrentUserQueryVariables>(GetCurrentUserDocument, options);
      }
export function useGetCurrentUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCurrentUserQuery, GetCurrentUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCurrentUserQuery, GetCurrentUserQueryVariables>(GetCurrentUserDocument, options);
        }
export function useGetCurrentUserSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCurrentUserQuery, GetCurrentUserQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCurrentUserQuery, GetCurrentUserQueryVariables>(GetCurrentUserDocument, options);
        }
export type GetCurrentUserQueryHookResult = ReturnType<typeof useGetCurrentUserQuery>;
export type GetCurrentUserLazyQueryHookResult = ReturnType<typeof useGetCurrentUserLazyQuery>;
export type GetCurrentUserSuspenseQueryHookResult = ReturnType<typeof useGetCurrentUserSuspenseQuery>;
export type GetCurrentUserQueryResult = Apollo.QueryResult<GetCurrentUserQuery, GetCurrentUserQueryVariables>;
export const GetEchimpCrandTdlDocument = gql`
    query GetEchimpCrandTDL($id: UUID!) {
  modelPlan(id: $id) {
    echimpCRsAndTDLs {
      ... on EChimpCR {
        id
        title
        emergencyCrFlag
        sensitiveFlag
        crStatus
        implementationDate
      }
      ... on EChimpTDL {
        id
        title
        issuedDate
      }
    }
  }
}
    `;

/**
 * __useGetEchimpCrandTdlQuery__
 *
 * To run a query within a React component, call `useGetEchimpCrandTdlQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEchimpCrandTdlQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEchimpCrandTdlQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetEchimpCrandTdlQuery(baseOptions: Apollo.QueryHookOptions<GetEchimpCrandTdlQuery, GetEchimpCrandTdlQueryVariables> & ({ variables: GetEchimpCrandTdlQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetEchimpCrandTdlQuery, GetEchimpCrandTdlQueryVariables>(GetEchimpCrandTdlDocument, options);
      }
export function useGetEchimpCrandTdlLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetEchimpCrandTdlQuery, GetEchimpCrandTdlQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetEchimpCrandTdlQuery, GetEchimpCrandTdlQueryVariables>(GetEchimpCrandTdlDocument, options);
        }
export function useGetEchimpCrandTdlSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetEchimpCrandTdlQuery, GetEchimpCrandTdlQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetEchimpCrandTdlQuery, GetEchimpCrandTdlQueryVariables>(GetEchimpCrandTdlDocument, options);
        }
export type GetEchimpCrandTdlQueryHookResult = ReturnType<typeof useGetEchimpCrandTdlQuery>;
export type GetEchimpCrandTdlLazyQueryHookResult = ReturnType<typeof useGetEchimpCrandTdlLazyQuery>;
export type GetEchimpCrandTdlSuspenseQueryHookResult = ReturnType<typeof useGetEchimpCrandTdlSuspenseQuery>;
export type GetEchimpCrandTdlQueryResult = Apollo.QueryResult<GetEchimpCrandTdlQuery, GetEchimpCrandTdlQueryVariables>;
export const GetFavoritesDocument = gql`
    query GetFavorites($filter: ModelPlanFilter!, $isMAC: Boolean!) {
  modelPlanCollection(filter: $filter) {
    id
    modelName
    isFavorite
    nameHistory(sort: DESC)
    isCollaborator
    status
    basics {
      id
      goal
      performancePeriodStarts
    }
    collaborators {
      id
      userAccount {
        id
        commonName
      }
      teamRoles
    }
    crs @include(if: $isMAC) {
      idNumber
    }
    tdls @include(if: $isMAC) {
      idNumber
    }
  }
}
    `;

/**
 * __useGetFavoritesQuery__
 *
 * To run a query within a React component, call `useGetFavoritesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFavoritesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFavoritesQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      isMAC: // value for 'isMAC'
 *   },
 * });
 */
export function useGetFavoritesQuery(baseOptions: Apollo.QueryHookOptions<GetFavoritesQuery, GetFavoritesQueryVariables> & ({ variables: GetFavoritesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFavoritesQuery, GetFavoritesQueryVariables>(GetFavoritesDocument, options);
      }
export function useGetFavoritesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFavoritesQuery, GetFavoritesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFavoritesQuery, GetFavoritesQueryVariables>(GetFavoritesDocument, options);
        }
export function useGetFavoritesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetFavoritesQuery, GetFavoritesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetFavoritesQuery, GetFavoritesQueryVariables>(GetFavoritesDocument, options);
        }
export type GetFavoritesQueryHookResult = ReturnType<typeof useGetFavoritesQuery>;
export type GetFavoritesLazyQueryHookResult = ReturnType<typeof useGetFavoritesLazyQuery>;
export type GetFavoritesSuspenseQueryHookResult = ReturnType<typeof useGetFavoritesSuspenseQuery>;
export type GetFavoritesQueryResult = Apollo.QueryResult<GetFavoritesQuery, GetFavoritesQueryVariables>;
export const GetModelPlanDocument = gql`
    query GetModelPlan($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    modifiedDts
    modifiedByUserAccount {
      commonName
    }
    opSolutionLastModifiedDts
    archived
    status
    taskListStatus
    isFavorite
    suggestedPhase {
      phase
      suggestedStatuses
    }
    basics {
      id
      clearanceStarts
      modifiedDts
      modifiedByUserAccount {
        commonName
      }
      readyForClearanceDts
      status
    }
    collaborators {
      id
      userAccount {
        id
        commonName
        email
        username
      }
      userID
      teamRoles
      modelPlanID
      createdDts
    }
    documents {
      id
      fileName
      fileType
    }
    crs {
      id
      idNumber
    }
    tdls {
      id
      idNumber
    }
    echimpCRsAndTDLs {
      ... on EChimpCR {
        id
      }
      ... on EChimpTDL {
        id
      }
    }
    discussions {
      id
      content {
        rawContent
      }
      createdBy
      createdDts
      replies {
        id
        discussionID
        content {
          rawContent
        }
        createdBy
        createdDts
      }
    }
    generalCharacteristics {
      id
      createdBy
      createdDts
      modifiedBy
      modifiedDts
      modifiedByUserAccount {
        commonName
      }
      readyForClearanceDts
      status
    }
    participantsAndProviders {
      id
      createdBy
      createdDts
      modifiedBy
      modifiedDts
      modifiedByUserAccount {
        commonName
      }
      readyForClearanceDts
      status
    }
    beneficiaries {
      id
      createdBy
      createdDts
      modifiedBy
      modifiedDts
      modifiedByUserAccount {
        commonName
      }
      readyForClearanceDts
      status
    }
    opsEvalAndLearning {
      id
      createdBy
      createdDts
      modifiedBy
      modifiedDts
      modifiedByUserAccount {
        commonName
      }
      readyForClearanceDts
      status
    }
    payments {
      id
      createdBy
      createdDts
      modifiedBy
      modifiedDts
      modifiedByUserAccount {
        commonName
      }
      readyForClearanceDts
      status
    }
    operationalNeeds {
      id
      modifiedDts
    }
    prepareForClearance {
      status
      modifiedDts: latestClearanceDts
    }
  }
}
    `;

/**
 * __useGetModelPlanQuery__
 *
 * To run a query within a React component, call `useGetModelPlanQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModelPlanQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModelPlanQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetModelPlanQuery(baseOptions: Apollo.QueryHookOptions<GetModelPlanQuery, GetModelPlanQueryVariables> & ({ variables: GetModelPlanQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModelPlanQuery, GetModelPlanQueryVariables>(GetModelPlanDocument, options);
      }
export function useGetModelPlanLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModelPlanQuery, GetModelPlanQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModelPlanQuery, GetModelPlanQueryVariables>(GetModelPlanDocument, options);
        }
export function useGetModelPlanSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetModelPlanQuery, GetModelPlanQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetModelPlanQuery, GetModelPlanQueryVariables>(GetModelPlanDocument, options);
        }
export type GetModelPlanQueryHookResult = ReturnType<typeof useGetModelPlanQuery>;
export type GetModelPlanLazyQueryHookResult = ReturnType<typeof useGetModelPlanLazyQuery>;
export type GetModelPlanSuspenseQueryHookResult = ReturnType<typeof useGetModelPlanSuspenseQuery>;
export type GetModelPlanQueryResult = Apollo.QueryResult<GetModelPlanQuery, GetModelPlanQueryVariables>;
export const GetModelPlanBaseDocument = gql`
    query GetModelPlanBase($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    modifiedDts
    createdDts
    status
  }
}
    `;

/**
 * __useGetModelPlanBaseQuery__
 *
 * To run a query within a React component, call `useGetModelPlanBaseQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModelPlanBaseQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModelPlanBaseQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetModelPlanBaseQuery(baseOptions: Apollo.QueryHookOptions<GetModelPlanBaseQuery, GetModelPlanBaseQueryVariables> & ({ variables: GetModelPlanBaseQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModelPlanBaseQuery, GetModelPlanBaseQueryVariables>(GetModelPlanBaseDocument, options);
      }
export function useGetModelPlanBaseLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModelPlanBaseQuery, GetModelPlanBaseQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModelPlanBaseQuery, GetModelPlanBaseQueryVariables>(GetModelPlanBaseDocument, options);
        }
export function useGetModelPlanBaseSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetModelPlanBaseQuery, GetModelPlanBaseQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetModelPlanBaseQuery, GetModelPlanBaseQueryVariables>(GetModelPlanBaseDocument, options);
        }
export type GetModelPlanBaseQueryHookResult = ReturnType<typeof useGetModelPlanBaseQuery>;
export type GetModelPlanBaseLazyQueryHookResult = ReturnType<typeof useGetModelPlanBaseLazyQuery>;
export type GetModelPlanBaseSuspenseQueryHookResult = ReturnType<typeof useGetModelPlanBaseSuspenseQuery>;
export type GetModelPlanBaseQueryResult = Apollo.QueryResult<GetModelPlanBaseQuery, GetModelPlanBaseQueryVariables>;
export const GetModelPlansDocument = gql`
    query GetModelPlans($filter: ModelPlanFilter!, $isMAC: Boolean!) {
  modelPlanCollection(filter: $filter) {
    id
    modelName
    status
    abbreviation
    nameHistory(sort: DESC)
    createdBy
    createdDts
    modifiedDts
    isFavorite
    isCollaborator
    basics {
      id
      demoCode
      amsModelID
      modelCategory
      clearanceStarts
      performancePeriodStarts
      additionalModelCategories
      applicationsStart @include(if: $isMAC)
    }
    generalCharacteristics @include(if: $isMAC) {
      id
      keyCharacteristics
    }
    payments @include(if: $isMAC) {
      id
      paymentStartDate
    }
    collaborators {
      id
      userID
      userAccount {
        id
        commonName
        email
        username
      }
      teamRoles
    }
    discussions {
      id
      replies {
        id
      }
    }
    crs @include(if: $isMAC) {
      idNumber
    }
    tdls @include(if: $isMAC) {
      idNumber
    }
  }
}
    `;

/**
 * __useGetModelPlansQuery__
 *
 * To run a query within a React component, call `useGetModelPlansQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModelPlansQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModelPlansQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      isMAC: // value for 'isMAC'
 *   },
 * });
 */
export function useGetModelPlansQuery(baseOptions: Apollo.QueryHookOptions<GetModelPlansQuery, GetModelPlansQueryVariables> & ({ variables: GetModelPlansQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModelPlansQuery, GetModelPlansQueryVariables>(GetModelPlansDocument, options);
      }
export function useGetModelPlansLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModelPlansQuery, GetModelPlansQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModelPlansQuery, GetModelPlansQueryVariables>(GetModelPlansDocument, options);
        }
export function useGetModelPlansSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetModelPlansQuery, GetModelPlansQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetModelPlansQuery, GetModelPlansQueryVariables>(GetModelPlansDocument, options);
        }
export type GetModelPlansQueryHookResult = ReturnType<typeof useGetModelPlansQuery>;
export type GetModelPlansLazyQueryHookResult = ReturnType<typeof useGetModelPlansLazyQuery>;
export type GetModelPlansSuspenseQueryHookResult = ReturnType<typeof useGetModelPlansSuspenseQuery>;
export type GetModelPlansQueryResult = Apollo.QueryResult<GetModelPlansQuery, GetModelPlansQueryVariables>;
export const GetUserInfoDocument = gql`
    query GetUserInfo($username: String!) {
  userAccount(username: $username) {
    id
    username
    commonName
    email
    givenName
    familyName
  }
}
    `;

/**
 * __useGetUserInfoQuery__
 *
 * To run a query within a React component, call `useGetUserInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserInfoQuery({
 *   variables: {
 *      username: // value for 'username'
 *   },
 * });
 */
export function useGetUserInfoQuery(baseOptions: Apollo.QueryHookOptions<GetUserInfoQuery, GetUserInfoQueryVariables> & ({ variables: GetUserInfoQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserInfoQuery, GetUserInfoQueryVariables>(GetUserInfoDocument, options);
      }
export function useGetUserInfoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserInfoQuery, GetUserInfoQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserInfoQuery, GetUserInfoQueryVariables>(GetUserInfoDocument, options);
        }
export function useGetUserInfoSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetUserInfoQuery, GetUserInfoQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetUserInfoQuery, GetUserInfoQueryVariables>(GetUserInfoDocument, options);
        }
export type GetUserInfoQueryHookResult = ReturnType<typeof useGetUserInfoQuery>;
export type GetUserInfoLazyQueryHookResult = ReturnType<typeof useGetUserInfoLazyQuery>;
export type GetUserInfoSuspenseQueryHookResult = ReturnType<typeof useGetUserInfoSuspenseQuery>;
export type GetUserInfoQueryResult = Apollo.QueryResult<GetUserInfoQuery, GetUserInfoQueryVariables>;
export const SearchOktaUsersDocument = gql`
    query SearchOktaUsers($searchTerm: String!) {
  searchOktaUsers(searchTerm: $searchTerm) {
    displayName
    username
    email
  }
}
    `;

/**
 * __useSearchOktaUsersQuery__
 *
 * To run a query within a React component, call `useSearchOktaUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchOktaUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchOktaUsersQuery({
 *   variables: {
 *      searchTerm: // value for 'searchTerm'
 *   },
 * });
 */
export function useSearchOktaUsersQuery(baseOptions: Apollo.QueryHookOptions<SearchOktaUsersQuery, SearchOktaUsersQueryVariables> & ({ variables: SearchOktaUsersQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SearchOktaUsersQuery, SearchOktaUsersQueryVariables>(SearchOktaUsersDocument, options);
      }
export function useSearchOktaUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SearchOktaUsersQuery, SearchOktaUsersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SearchOktaUsersQuery, SearchOktaUsersQueryVariables>(SearchOktaUsersDocument, options);
        }
export function useSearchOktaUsersSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<SearchOktaUsersQuery, SearchOktaUsersQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<SearchOktaUsersQuery, SearchOktaUsersQueryVariables>(SearchOktaUsersDocument, options);
        }
export type SearchOktaUsersQueryHookResult = ReturnType<typeof useSearchOktaUsersQuery>;
export type SearchOktaUsersLazyQueryHookResult = ReturnType<typeof useSearchOktaUsersLazyQuery>;
export type SearchOktaUsersSuspenseQueryHookResult = ReturnType<typeof useSearchOktaUsersSuspenseQuery>;
export type SearchOktaUsersQueryResult = Apollo.QueryResult<SearchOktaUsersQuery, SearchOktaUsersQueryVariables>;
export const UpdateModelPlanDocument = gql`
    mutation UpdateModelPlan($id: UUID!, $changes: ModelPlanChanges!) {
  updateModelPlan(id: $id, changes: $changes) {
    id
  }
}
    `;
export type UpdateModelPlanMutationFn = Apollo.MutationFunction<UpdateModelPlanMutation, UpdateModelPlanMutationVariables>;

/**
 * __useUpdateModelPlanMutation__
 *
 * To run a mutation, you first call `useUpdateModelPlanMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateModelPlanMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateModelPlanMutation, { data, loading, error }] = useUpdateModelPlanMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdateModelPlanMutation(baseOptions?: Apollo.MutationHookOptions<UpdateModelPlanMutation, UpdateModelPlanMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateModelPlanMutation, UpdateModelPlanMutationVariables>(UpdateModelPlanDocument, options);
      }
export type UpdateModelPlanMutationHookResult = ReturnType<typeof useUpdateModelPlanMutation>;
export type UpdateModelPlanMutationResult = Apollo.MutationResult<UpdateModelPlanMutation>;
export type UpdateModelPlanMutationOptions = Apollo.BaseMutationOptions<UpdateModelPlanMutation, UpdateModelPlanMutationVariables>;
export const UpdateNdaDocument = gql`
    mutation UpdateNDA {
  agreeToNDA(agree: true) {
    agreed
    agreedDts
  }
}
    `;
export type UpdateNdaMutationFn = Apollo.MutationFunction<UpdateNdaMutation, UpdateNdaMutationVariables>;

/**
 * __useUpdateNdaMutation__
 *
 * To run a mutation, you first call `useUpdateNdaMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateNdaMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateNdaMutation, { data, loading, error }] = useUpdateNdaMutation({
 *   variables: {
 *   },
 * });
 */
export function useUpdateNdaMutation(baseOptions?: Apollo.MutationHookOptions<UpdateNdaMutation, UpdateNdaMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateNdaMutation, UpdateNdaMutationVariables>(UpdateNdaDocument, options);
      }
export type UpdateNdaMutationHookResult = ReturnType<typeof useUpdateNdaMutation>;
export type UpdateNdaMutationResult = Apollo.MutationResult<UpdateNdaMutation>;
export type UpdateNdaMutationOptions = Apollo.BaseMutationOptions<UpdateNdaMutation, UpdateNdaMutationVariables>;
export const GetNotificationSettingsDocument = gql`
    query GetNotificationSettings {
  currentUser {
    notificationPreferences {
      id
      dailyDigestComplete
      addedAsCollaborator
      taggedInDiscussion
      taggedInDiscussionReply
      newDiscussionReply
      modelPlanShared
      newModelPlan
      datesChanged
      datesChangedNotificationType
    }
  }
}
    `;

/**
 * __useGetNotificationSettingsQuery__
 *
 * To run a query within a React component, call `useGetNotificationSettingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNotificationSettingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNotificationSettingsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetNotificationSettingsQuery(baseOptions?: Apollo.QueryHookOptions<GetNotificationSettingsQuery, GetNotificationSettingsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetNotificationSettingsQuery, GetNotificationSettingsQueryVariables>(GetNotificationSettingsDocument, options);
      }
export function useGetNotificationSettingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetNotificationSettingsQuery, GetNotificationSettingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetNotificationSettingsQuery, GetNotificationSettingsQueryVariables>(GetNotificationSettingsDocument, options);
        }
export function useGetNotificationSettingsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetNotificationSettingsQuery, GetNotificationSettingsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetNotificationSettingsQuery, GetNotificationSettingsQueryVariables>(GetNotificationSettingsDocument, options);
        }
export type GetNotificationSettingsQueryHookResult = ReturnType<typeof useGetNotificationSettingsQuery>;
export type GetNotificationSettingsLazyQueryHookResult = ReturnType<typeof useGetNotificationSettingsLazyQuery>;
export type GetNotificationSettingsSuspenseQueryHookResult = ReturnType<typeof useGetNotificationSettingsSuspenseQuery>;
export type GetNotificationSettingsQueryResult = Apollo.QueryResult<GetNotificationSettingsQuery, GetNotificationSettingsQueryVariables>;
export const GetNotificationsDocument = gql`
    query GetNotifications {
  currentUser {
    notifications {
      numUnreadNotifications
      notifications {
        __typename
        id
        isRead
        inAppSent
        emailSent
        createdDts
        activity {
          activityType
          entityID
          actorID
          actorUserAccount {
            commonName
          }
          metaData {
            __typename
            ... on NewDiscussionRepliedActivityMeta {
              version
              type
              discussionID
              replyID
              modelPlanID
              modelPlan {
                modelName
              }
              content
            }
            ... on DatesChangedActivityMeta {
              version
              type
              modelPlan {
                modelName
              }
              modelPlanID
              dateChanges {
                isChanged
                field
                isRange
                oldDate
                newDate
                oldRangeStart
                oldRangeEnd
                newRangeStart
                newRangeEnd
              }
            }
            ... on TaggedInPlanDiscussionActivityMeta {
              version
              type
              modelPlanID
              modelPlan {
                modelName
              }
              discussionID
              content
            }
            ... on AddedAsCollaboratorMeta {
              version
              type
              modelPlanID
              modelPlan {
                modelName
              }
            }
            ... on TaggedInDiscussionReplyActivityMeta {
              version
              type
              modelPlanID
              modelPlan {
                modelName
              }
              discussionID
              replyID
              content
            }
            ... on ModelPlanSharedActivityMeta {
              version
              type
              modelPlanID
              modelPlan {
                modelName
              }
              optionalMessage
            }
            ... on NewModelPlanActivityMeta {
              version
              type
              modelPlanID
              modelPlan {
                modelName
              }
            }
            ... on DailyDigestCompleteActivityMeta {
              version
              type
              modelPlanIDs
              date
              analyzedAudits {
                id
                modelPlanID
                modelName
                date
                changes {
                  modelPlan {
                    oldName
                    statusChanges
                  }
                  documents {
                    count
                  }
                  crTdls {
                    activity
                  }
                  planSections {
                    updated
                    readyForReview
                    readyForClearance
                  }
                  modelLeads {
                    added {
                      id
                      commonName
                    }
                  }
                  planDiscussions {
                    activity
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
    `;

/**
 * __useGetNotificationsQuery__
 *
 * To run a query within a React component, call `useGetNotificationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNotificationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNotificationsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetNotificationsQuery(baseOptions?: Apollo.QueryHookOptions<GetNotificationsQuery, GetNotificationsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetNotificationsQuery, GetNotificationsQueryVariables>(GetNotificationsDocument, options);
      }
export function useGetNotificationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetNotificationsQuery, GetNotificationsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetNotificationsQuery, GetNotificationsQueryVariables>(GetNotificationsDocument, options);
        }
export function useGetNotificationsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetNotificationsQuery, GetNotificationsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetNotificationsQuery, GetNotificationsQueryVariables>(GetNotificationsDocument, options);
        }
export type GetNotificationsQueryHookResult = ReturnType<typeof useGetNotificationsQuery>;
export type GetNotificationsLazyQueryHookResult = ReturnType<typeof useGetNotificationsLazyQuery>;
export type GetNotificationsSuspenseQueryHookResult = ReturnType<typeof useGetNotificationsSuspenseQuery>;
export type GetNotificationsQueryResult = Apollo.QueryResult<GetNotificationsQuery, GetNotificationsQueryVariables>;
export const GetPollNotificationsDocument = gql`
    query GetPollNotifications {
  currentUser {
    notifications {
      numUnreadNotifications
    }
  }
}
    `;

/**
 * __useGetPollNotificationsQuery__
 *
 * To run a query within a React component, call `useGetPollNotificationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPollNotificationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPollNotificationsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetPollNotificationsQuery(baseOptions?: Apollo.QueryHookOptions<GetPollNotificationsQuery, GetPollNotificationsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPollNotificationsQuery, GetPollNotificationsQueryVariables>(GetPollNotificationsDocument, options);
      }
export function useGetPollNotificationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPollNotificationsQuery, GetPollNotificationsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPollNotificationsQuery, GetPollNotificationsQueryVariables>(GetPollNotificationsDocument, options);
        }
export function useGetPollNotificationsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetPollNotificationsQuery, GetPollNotificationsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPollNotificationsQuery, GetPollNotificationsQueryVariables>(GetPollNotificationsDocument, options);
        }
export type GetPollNotificationsQueryHookResult = ReturnType<typeof useGetPollNotificationsQuery>;
export type GetPollNotificationsLazyQueryHookResult = ReturnType<typeof useGetPollNotificationsLazyQuery>;
export type GetPollNotificationsSuspenseQueryHookResult = ReturnType<typeof useGetPollNotificationsSuspenseQuery>;
export type GetPollNotificationsQueryResult = Apollo.QueryResult<GetPollNotificationsQuery, GetPollNotificationsQueryVariables>;
export const UpdateAllNotificationsAsReadDocument = gql`
    mutation UpdateAllNotificationsAsRead {
  markAllNotificationsAsRead {
    id
  }
}
    `;
export type UpdateAllNotificationsAsReadMutationFn = Apollo.MutationFunction<UpdateAllNotificationsAsReadMutation, UpdateAllNotificationsAsReadMutationVariables>;

/**
 * __useUpdateAllNotificationsAsReadMutation__
 *
 * To run a mutation, you first call `useUpdateAllNotificationsAsReadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAllNotificationsAsReadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAllNotificationsAsReadMutation, { data, loading, error }] = useUpdateAllNotificationsAsReadMutation({
 *   variables: {
 *   },
 * });
 */
export function useUpdateAllNotificationsAsReadMutation(baseOptions?: Apollo.MutationHookOptions<UpdateAllNotificationsAsReadMutation, UpdateAllNotificationsAsReadMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateAllNotificationsAsReadMutation, UpdateAllNotificationsAsReadMutationVariables>(UpdateAllNotificationsAsReadDocument, options);
      }
export type UpdateAllNotificationsAsReadMutationHookResult = ReturnType<typeof useUpdateAllNotificationsAsReadMutation>;
export type UpdateAllNotificationsAsReadMutationResult = Apollo.MutationResult<UpdateAllNotificationsAsReadMutation>;
export type UpdateAllNotificationsAsReadMutationOptions = Apollo.BaseMutationOptions<UpdateAllNotificationsAsReadMutation, UpdateAllNotificationsAsReadMutationVariables>;
export const UpdateNotificationSettingsDocument = gql`
    mutation UpdateNotificationSettings($changes: UserNotificationPreferencesChanges!) {
  updateUserNotificationPreferences(changes: $changes) {
    id
    dailyDigestComplete
    addedAsCollaborator
    taggedInDiscussion
    taggedInDiscussionReply
    newDiscussionReply
    modelPlanShared
    newModelPlan
    datesChanged
    datesChangedNotificationType
  }
}
    `;
export type UpdateNotificationSettingsMutationFn = Apollo.MutationFunction<UpdateNotificationSettingsMutation, UpdateNotificationSettingsMutationVariables>;

/**
 * __useUpdateNotificationSettingsMutation__
 *
 * To run a mutation, you first call `useUpdateNotificationSettingsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateNotificationSettingsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateNotificationSettingsMutation, { data, loading, error }] = useUpdateNotificationSettingsMutation({
 *   variables: {
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdateNotificationSettingsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateNotificationSettingsMutation, UpdateNotificationSettingsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateNotificationSettingsMutation, UpdateNotificationSettingsMutationVariables>(UpdateNotificationSettingsDocument, options);
      }
export type UpdateNotificationSettingsMutationHookResult = ReturnType<typeof useUpdateNotificationSettingsMutation>;
export type UpdateNotificationSettingsMutationResult = Apollo.MutationResult<UpdateNotificationSettingsMutation>;
export type UpdateNotificationSettingsMutationOptions = Apollo.BaseMutationOptions<UpdateNotificationSettingsMutation, UpdateNotificationSettingsMutationVariables>;
export const MarkNotificationAsReadDocument = gql`
    mutation MarkNotificationAsRead($notificationID: UUID!) {
  markNotificationAsRead(notificationID: $notificationID) {
    id
    isRead
  }
}
    `;
export type MarkNotificationAsReadMutationFn = Apollo.MutationFunction<MarkNotificationAsReadMutation, MarkNotificationAsReadMutationVariables>;

/**
 * __useMarkNotificationAsReadMutation__
 *
 * To run a mutation, you first call `useMarkNotificationAsReadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMarkNotificationAsReadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [markNotificationAsReadMutation, { data, loading, error }] = useMarkNotificationAsReadMutation({
 *   variables: {
 *      notificationID: // value for 'notificationID'
 *   },
 * });
 */
export function useMarkNotificationAsReadMutation(baseOptions?: Apollo.MutationHookOptions<MarkNotificationAsReadMutation, MarkNotificationAsReadMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<MarkNotificationAsReadMutation, MarkNotificationAsReadMutationVariables>(MarkNotificationAsReadDocument, options);
      }
export type MarkNotificationAsReadMutationHookResult = ReturnType<typeof useMarkNotificationAsReadMutation>;
export type MarkNotificationAsReadMutationResult = Apollo.MutationResult<MarkNotificationAsReadMutation>;
export type MarkNotificationAsReadMutationOptions = Apollo.BaseMutationOptions<MarkNotificationAsReadMutation, MarkNotificationAsReadMutationVariables>;
export const GetAllOpsEvalAndLearningDocument = gql`
    query GetAllOpsEvalAndLearning($id: UUID!) {
  modelPlan(id: $id) {
    id
    opsEvalAndLearning {
      id
      modelPlanID
      stakeholders
      stakeholdersOther
      stakeholdersNote
      helpdeskUse
      helpdeskUseNote
      contractorSupport
      contractorSupportOther
      contractorSupportHow
      contractorSupportNote
      iddocSupport
      iddocSupportNote
      technicalContactsIdentified
      technicalContactsIdentifiedDetail
      technicalContactsIdentifiedNote
      captureParticipantInfo
      captureParticipantInfoNote
      icdOwner
      draftIcdDueDate
      icdNote
      uatNeeds
      stcNeeds
      testingTimelines
      testingNote
      dataMonitoringFileTypes
      dataMonitoringFileOther
      dataResponseType
      dataResponseFileFrequency
      dataFullTimeOrIncremental
      eftSetUp
      unsolicitedAdjustmentsIncluded
      dataFlowDiagramsNeeded
      produceBenefitEnhancementFiles
      fileNamingConventions
      dataMonitoringNote
      benchmarkForPerformance
      benchmarkForPerformanceNote
      computePerformanceScores
      computePerformanceScoresNote
      riskAdjustPerformance
      riskAdjustFeedback
      riskAdjustPayments
      riskAdjustOther
      riskAdjustNote
      appealPerformance
      appealFeedback
      appealPayments
      appealOther
      appealNote
      evaluationApproaches
      evaluationApproachOther
      evalutaionApproachNote
      ccmInvolvment
      ccmInvolvmentOther
      ccmInvolvmentNote
      dataNeededForMonitoring
      dataNeededForMonitoringOther
      dataNeededForMonitoringNote
      dataToSendParticicipants
      dataToSendParticicipantsOther
      dataToSendParticicipantsNote
      shareCclfData
      shareCclfDataNote
      sendFilesBetweenCcw
      sendFilesBetweenCcwNote
      appToSendFilesToKnown
      appToSendFilesToWhich
      appToSendFilesToNote
      useCcwForFileDistribiutionToParticipants
      useCcwForFileDistribiutionToParticipantsNote
      developNewQualityMeasures
      developNewQualityMeasuresNote
      qualityPerformanceImpactsPayment
      qualityPerformanceImpactsPaymentOther
      qualityPerformanceImpactsPaymentNote
      dataSharingStarts
      dataSharingStartsOther
      dataSharingFrequency
      dataSharingFrequencyContinually
      dataSharingFrequencyOther
      dataSharingStartsNote
      dataCollectionStarts
      dataCollectionStartsOther
      dataCollectionFrequency
      dataCollectionFrequencyContinually
      dataCollectionFrequencyOther
      dataCollectionFrequencyNote
      qualityReportingStarts
      qualityReportingStartsOther
      qualityReportingStartsNote
      qualityReportingFrequency
      qualityReportingFrequencyContinually
      qualityReportingFrequencyOther
      modelLearningSystems
      modelLearningSystemsOther
      modelLearningSystemsNote
      anticipatedChallenges
      createdDts
      modifiedDts
      status
    }
  }
}
    `;

/**
 * __useGetAllOpsEvalAndLearningQuery__
 *
 * To run a query within a React component, call `useGetAllOpsEvalAndLearningQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllOpsEvalAndLearningQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllOpsEvalAndLearningQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAllOpsEvalAndLearningQuery(baseOptions: Apollo.QueryHookOptions<GetAllOpsEvalAndLearningQuery, GetAllOpsEvalAndLearningQueryVariables> & ({ variables: GetAllOpsEvalAndLearningQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllOpsEvalAndLearningQuery, GetAllOpsEvalAndLearningQueryVariables>(GetAllOpsEvalAndLearningDocument, options);
      }
export function useGetAllOpsEvalAndLearningLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllOpsEvalAndLearningQuery, GetAllOpsEvalAndLearningQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllOpsEvalAndLearningQuery, GetAllOpsEvalAndLearningQueryVariables>(GetAllOpsEvalAndLearningDocument, options);
        }
export function useGetAllOpsEvalAndLearningSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAllOpsEvalAndLearningQuery, GetAllOpsEvalAndLearningQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAllOpsEvalAndLearningQuery, GetAllOpsEvalAndLearningQueryVariables>(GetAllOpsEvalAndLearningDocument, options);
        }
export type GetAllOpsEvalAndLearningQueryHookResult = ReturnType<typeof useGetAllOpsEvalAndLearningQuery>;
export type GetAllOpsEvalAndLearningLazyQueryHookResult = ReturnType<typeof useGetAllOpsEvalAndLearningLazyQuery>;
export type GetAllOpsEvalAndLearningSuspenseQueryHookResult = ReturnType<typeof useGetAllOpsEvalAndLearningSuspenseQuery>;
export type GetAllOpsEvalAndLearningQueryResult = Apollo.QueryResult<GetAllOpsEvalAndLearningQuery, GetAllOpsEvalAndLearningQueryVariables>;
export const GetCcwAndQualityDocument = gql`
    query GetCCWAndQuality($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    opsEvalAndLearning {
      id
      ccmInvolvment
      dataNeededForMonitoring
      iddocSupport
      sendFilesBetweenCcw
      sendFilesBetweenCcwNote
      appToSendFilesToKnown
      appToSendFilesToWhich
      appToSendFilesToNote
      useCcwForFileDistribiutionToParticipants
      useCcwForFileDistribiutionToParticipantsNote
      developNewQualityMeasures
      developNewQualityMeasuresNote
      qualityPerformanceImpactsPayment
      qualityPerformanceImpactsPaymentOther
      qualityPerformanceImpactsPaymentNote
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetCcwAndQualityQuery__
 *
 * To run a query within a React component, call `useGetCcwAndQualityQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCcwAndQualityQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCcwAndQualityQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCcwAndQualityQuery(baseOptions: Apollo.QueryHookOptions<GetCcwAndQualityQuery, GetCcwAndQualityQueryVariables> & ({ variables: GetCcwAndQualityQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCcwAndQualityQuery, GetCcwAndQualityQueryVariables>(GetCcwAndQualityDocument, options);
      }
export function useGetCcwAndQualityLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCcwAndQualityQuery, GetCcwAndQualityQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCcwAndQualityQuery, GetCcwAndQualityQueryVariables>(GetCcwAndQualityDocument, options);
        }
export function useGetCcwAndQualitySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCcwAndQualityQuery, GetCcwAndQualityQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCcwAndQualityQuery, GetCcwAndQualityQueryVariables>(GetCcwAndQualityDocument, options);
        }
export type GetCcwAndQualityQueryHookResult = ReturnType<typeof useGetCcwAndQualityQuery>;
export type GetCcwAndQualityLazyQueryHookResult = ReturnType<typeof useGetCcwAndQualityLazyQuery>;
export type GetCcwAndQualitySuspenseQueryHookResult = ReturnType<typeof useGetCcwAndQualitySuspenseQuery>;
export type GetCcwAndQualityQueryResult = Apollo.QueryResult<GetCcwAndQualityQuery, GetCcwAndQualityQueryVariables>;
export const GetDataSharingDocument = gql`
    query GetDataSharing($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    opsEvalAndLearning {
      id
      ccmInvolvment
      dataNeededForMonitoring
      iddocSupport
      dataSharingStarts
      dataSharingStartsOther
      dataSharingFrequency
      dataSharingFrequencyContinually
      dataSharingFrequencyOther
      dataSharingStartsNote
      dataCollectionStarts
      dataCollectionStartsOther
      dataCollectionFrequency
      dataCollectionFrequencyContinually
      dataCollectionFrequencyOther
      dataCollectionFrequencyNote
      qualityReportingStarts
      qualityReportingStartsOther
      qualityReportingStartsNote
      qualityReportingFrequency
      qualityReportingFrequencyContinually
      qualityReportingFrequencyOther
    }
  }
}
    `;

/**
 * __useGetDataSharingQuery__
 *
 * To run a query within a React component, call `useGetDataSharingQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDataSharingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDataSharingQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetDataSharingQuery(baseOptions: Apollo.QueryHookOptions<GetDataSharingQuery, GetDataSharingQueryVariables> & ({ variables: GetDataSharingQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetDataSharingQuery, GetDataSharingQueryVariables>(GetDataSharingDocument, options);
      }
export function useGetDataSharingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetDataSharingQuery, GetDataSharingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetDataSharingQuery, GetDataSharingQueryVariables>(GetDataSharingDocument, options);
        }
export function useGetDataSharingSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetDataSharingQuery, GetDataSharingQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetDataSharingQuery, GetDataSharingQueryVariables>(GetDataSharingDocument, options);
        }
export type GetDataSharingQueryHookResult = ReturnType<typeof useGetDataSharingQuery>;
export type GetDataSharingLazyQueryHookResult = ReturnType<typeof useGetDataSharingLazyQuery>;
export type GetDataSharingSuspenseQueryHookResult = ReturnType<typeof useGetDataSharingSuspenseQuery>;
export type GetDataSharingQueryResult = Apollo.QueryResult<GetDataSharingQuery, GetDataSharingQueryVariables>;
export const GetEvaluationDocument = gql`
    query GetEvaluation($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    opsEvalAndLearning {
      id
      ccmInvolvment
      dataNeededForMonitoring
      iddocSupport
      evaluationApproaches
      evaluationApproachOther
      evalutaionApproachNote
      ccmInvolvment
      ccmInvolvmentOther
      ccmInvolvmentNote
      dataNeededForMonitoring
      dataNeededForMonitoringOther
      dataNeededForMonitoringNote
      dataToSendParticicipants
      dataToSendParticicipantsOther
      dataToSendParticicipantsNote
      shareCclfData
      shareCclfDataNote
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetEvaluationQuery__
 *
 * To run a query within a React component, call `useGetEvaluationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEvaluationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEvaluationQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetEvaluationQuery(baseOptions: Apollo.QueryHookOptions<GetEvaluationQuery, GetEvaluationQueryVariables> & ({ variables: GetEvaluationQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetEvaluationQuery, GetEvaluationQueryVariables>(GetEvaluationDocument, options);
      }
export function useGetEvaluationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetEvaluationQuery, GetEvaluationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetEvaluationQuery, GetEvaluationQueryVariables>(GetEvaluationDocument, options);
        }
export function useGetEvaluationSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetEvaluationQuery, GetEvaluationQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetEvaluationQuery, GetEvaluationQueryVariables>(GetEvaluationDocument, options);
        }
export type GetEvaluationQueryHookResult = ReturnType<typeof useGetEvaluationQuery>;
export type GetEvaluationLazyQueryHookResult = ReturnType<typeof useGetEvaluationLazyQuery>;
export type GetEvaluationSuspenseQueryHookResult = ReturnType<typeof useGetEvaluationSuspenseQuery>;
export type GetEvaluationQueryResult = Apollo.QueryResult<GetEvaluationQuery, GetEvaluationQueryVariables>;
export const GetIddocDocument = gql`
    query GetIDDOC($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    opsEvalAndLearning {
      id
      ccmInvolvment
      dataNeededForMonitoring
      iddocSupport
      technicalContactsIdentified
      technicalContactsIdentifiedDetail
      technicalContactsIdentifiedNote
      captureParticipantInfo
      captureParticipantInfoNote
      icdOwner
      draftIcdDueDate
      icdNote
    }
  }
}
    `;

/**
 * __useGetIddocQuery__
 *
 * To run a query within a React component, call `useGetIddocQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIddocQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIddocQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetIddocQuery(baseOptions: Apollo.QueryHookOptions<GetIddocQuery, GetIddocQueryVariables> & ({ variables: GetIddocQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetIddocQuery, GetIddocQueryVariables>(GetIddocDocument, options);
      }
export function useGetIddocLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetIddocQuery, GetIddocQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetIddocQuery, GetIddocQueryVariables>(GetIddocDocument, options);
        }
export function useGetIddocSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetIddocQuery, GetIddocQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetIddocQuery, GetIddocQueryVariables>(GetIddocDocument, options);
        }
export type GetIddocQueryHookResult = ReturnType<typeof useGetIddocQuery>;
export type GetIddocLazyQueryHookResult = ReturnType<typeof useGetIddocLazyQuery>;
export type GetIddocSuspenseQueryHookResult = ReturnType<typeof useGetIddocSuspenseQuery>;
export type GetIddocQueryResult = Apollo.QueryResult<GetIddocQuery, GetIddocQueryVariables>;
export const GetIddocMonitoringDocument = gql`
    query GetIDDOCMonitoring($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    opsEvalAndLearning {
      id
      ccmInvolvment
      dataNeededForMonitoring
      iddocSupport
      dataFullTimeOrIncremental
      eftSetUp
      unsolicitedAdjustmentsIncluded
      dataFlowDiagramsNeeded
      produceBenefitEnhancementFiles
      fileNamingConventions
      dataMonitoringNote
    }
  }
}
    `;

/**
 * __useGetIddocMonitoringQuery__
 *
 * To run a query within a React component, call `useGetIddocMonitoringQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIddocMonitoringQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIddocMonitoringQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetIddocMonitoringQuery(baseOptions: Apollo.QueryHookOptions<GetIddocMonitoringQuery, GetIddocMonitoringQueryVariables> & ({ variables: GetIddocMonitoringQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetIddocMonitoringQuery, GetIddocMonitoringQueryVariables>(GetIddocMonitoringDocument, options);
      }
export function useGetIddocMonitoringLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetIddocMonitoringQuery, GetIddocMonitoringQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetIddocMonitoringQuery, GetIddocMonitoringQueryVariables>(GetIddocMonitoringDocument, options);
        }
export function useGetIddocMonitoringSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetIddocMonitoringQuery, GetIddocMonitoringQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetIddocMonitoringQuery, GetIddocMonitoringQueryVariables>(GetIddocMonitoringDocument, options);
        }
export type GetIddocMonitoringQueryHookResult = ReturnType<typeof useGetIddocMonitoringQuery>;
export type GetIddocMonitoringLazyQueryHookResult = ReturnType<typeof useGetIddocMonitoringLazyQuery>;
export type GetIddocMonitoringSuspenseQueryHookResult = ReturnType<typeof useGetIddocMonitoringSuspenseQuery>;
export type GetIddocMonitoringQueryResult = Apollo.QueryResult<GetIddocMonitoringQuery, GetIddocMonitoringQueryVariables>;
export const GetIddocTestingDocument = gql`
    query GetIDDOCTesting($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    opsEvalAndLearning {
      id
      ccmInvolvment
      dataNeededForMonitoring
      iddocSupport
      uatNeeds
      stcNeeds
      testingTimelines
      testingNote
      dataMonitoringFileTypes
      dataMonitoringFileOther
      dataResponseType
      dataResponseFileFrequency
    }
  }
}
    `;

/**
 * __useGetIddocTestingQuery__
 *
 * To run a query within a React component, call `useGetIddocTestingQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIddocTestingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIddocTestingQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetIddocTestingQuery(baseOptions: Apollo.QueryHookOptions<GetIddocTestingQuery, GetIddocTestingQueryVariables> & ({ variables: GetIddocTestingQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetIddocTestingQuery, GetIddocTestingQueryVariables>(GetIddocTestingDocument, options);
      }
export function useGetIddocTestingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetIddocTestingQuery, GetIddocTestingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetIddocTestingQuery, GetIddocTestingQueryVariables>(GetIddocTestingDocument, options);
        }
export function useGetIddocTestingSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetIddocTestingQuery, GetIddocTestingQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetIddocTestingQuery, GetIddocTestingQueryVariables>(GetIddocTestingDocument, options);
        }
export type GetIddocTestingQueryHookResult = ReturnType<typeof useGetIddocTestingQuery>;
export type GetIddocTestingLazyQueryHookResult = ReturnType<typeof useGetIddocTestingLazyQuery>;
export type GetIddocTestingSuspenseQueryHookResult = ReturnType<typeof useGetIddocTestingSuspenseQuery>;
export type GetIddocTestingQueryResult = Apollo.QueryResult<GetIddocTestingQuery, GetIddocTestingQueryVariables>;
export const GetLearningDocument = gql`
    query GetLearning($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    opsEvalAndLearning {
      id
      ccmInvolvment
      dataNeededForMonitoring
      iddocSupport
      modelLearningSystems
      modelLearningSystemsOther
      modelLearningSystemsNote
      anticipatedChallenges
      readyForReviewByUserAccount {
        id
        commonName
      }
      readyForReviewDts
      status
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetLearningQuery__
 *
 * To run a query within a React component, call `useGetLearningQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLearningQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLearningQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetLearningQuery(baseOptions: Apollo.QueryHookOptions<GetLearningQuery, GetLearningQueryVariables> & ({ variables: GetLearningQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetLearningQuery, GetLearningQueryVariables>(GetLearningDocument, options);
      }
export function useGetLearningLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLearningQuery, GetLearningQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetLearningQuery, GetLearningQueryVariables>(GetLearningDocument, options);
        }
export function useGetLearningSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetLearningQuery, GetLearningQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetLearningQuery, GetLearningQueryVariables>(GetLearningDocument, options);
        }
export type GetLearningQueryHookResult = ReturnType<typeof useGetLearningQuery>;
export type GetLearningLazyQueryHookResult = ReturnType<typeof useGetLearningLazyQuery>;
export type GetLearningSuspenseQueryHookResult = ReturnType<typeof useGetLearningSuspenseQuery>;
export type GetLearningQueryResult = Apollo.QueryResult<GetLearningQuery, GetLearningQueryVariables>;
export const GetOpsEvalAndLearningDocument = gql`
    query GetOpsEvalAndLearning($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    opsEvalAndLearning {
      id
      ccmInvolvment
      dataNeededForMonitoring
      stakeholders
      stakeholdersOther
      stakeholdersNote
      helpdeskUse
      helpdeskUseNote
      contractorSupport
      contractorSupportOther
      contractorSupportHow
      contractorSupportNote
      iddocSupport
      iddocSupportNote
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetOpsEvalAndLearningQuery__
 *
 * To run a query within a React component, call `useGetOpsEvalAndLearningQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOpsEvalAndLearningQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOpsEvalAndLearningQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetOpsEvalAndLearningQuery(baseOptions: Apollo.QueryHookOptions<GetOpsEvalAndLearningQuery, GetOpsEvalAndLearningQueryVariables> & ({ variables: GetOpsEvalAndLearningQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOpsEvalAndLearningQuery, GetOpsEvalAndLearningQueryVariables>(GetOpsEvalAndLearningDocument, options);
      }
export function useGetOpsEvalAndLearningLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOpsEvalAndLearningQuery, GetOpsEvalAndLearningQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOpsEvalAndLearningQuery, GetOpsEvalAndLearningQueryVariables>(GetOpsEvalAndLearningDocument, options);
        }
export function useGetOpsEvalAndLearningSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetOpsEvalAndLearningQuery, GetOpsEvalAndLearningQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetOpsEvalAndLearningQuery, GetOpsEvalAndLearningQueryVariables>(GetOpsEvalAndLearningDocument, options);
        }
export type GetOpsEvalAndLearningQueryHookResult = ReturnType<typeof useGetOpsEvalAndLearningQuery>;
export type GetOpsEvalAndLearningLazyQueryHookResult = ReturnType<typeof useGetOpsEvalAndLearningLazyQuery>;
export type GetOpsEvalAndLearningSuspenseQueryHookResult = ReturnType<typeof useGetOpsEvalAndLearningSuspenseQuery>;
export type GetOpsEvalAndLearningQueryResult = Apollo.QueryResult<GetOpsEvalAndLearningQuery, GetOpsEvalAndLearningQueryVariables>;
export const GetPerformanceDocument = gql`
    query GetPerformance($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    opsEvalAndLearning {
      id
      ccmInvolvment
      dataNeededForMonitoring
      iddocSupport
      benchmarkForPerformance
      benchmarkForPerformanceNote
      computePerformanceScores
      computePerformanceScoresNote
      riskAdjustPerformance
      riskAdjustFeedback
      riskAdjustPayments
      riskAdjustOther
      riskAdjustNote
      appealPerformance
      appealFeedback
      appealPayments
      appealOther
      appealNote
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetPerformanceQuery__
 *
 * To run a query within a React component, call `useGetPerformanceQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPerformanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPerformanceQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetPerformanceQuery(baseOptions: Apollo.QueryHookOptions<GetPerformanceQuery, GetPerformanceQueryVariables> & ({ variables: GetPerformanceQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPerformanceQuery, GetPerformanceQueryVariables>(GetPerformanceDocument, options);
      }
export function useGetPerformanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPerformanceQuery, GetPerformanceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPerformanceQuery, GetPerformanceQueryVariables>(GetPerformanceDocument, options);
        }
export function useGetPerformanceSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetPerformanceQuery, GetPerformanceQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPerformanceQuery, GetPerformanceQueryVariables>(GetPerformanceDocument, options);
        }
export type GetPerformanceQueryHookResult = ReturnType<typeof useGetPerformanceQuery>;
export type GetPerformanceLazyQueryHookResult = ReturnType<typeof useGetPerformanceLazyQuery>;
export type GetPerformanceSuspenseQueryHookResult = ReturnType<typeof useGetPerformanceSuspenseQuery>;
export type GetPerformanceQueryResult = Apollo.QueryResult<GetPerformanceQuery, GetPerformanceQueryVariables>;
export const UpdatePlanOpsEvalAndLearningDocument = gql`
    mutation UpdatePlanOpsEvalAndLearning($id: UUID!, $changes: PlanOpsEvalAndLearningChanges!) {
  updatePlanOpsEvalAndLearning(id: $id, changes: $changes) {
    id
  }
}
    `;
export type UpdatePlanOpsEvalAndLearningMutationFn = Apollo.MutationFunction<UpdatePlanOpsEvalAndLearningMutation, UpdatePlanOpsEvalAndLearningMutationVariables>;

/**
 * __useUpdatePlanOpsEvalAndLearningMutation__
 *
 * To run a mutation, you first call `useUpdatePlanOpsEvalAndLearningMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePlanOpsEvalAndLearningMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePlanOpsEvalAndLearningMutation, { data, loading, error }] = useUpdatePlanOpsEvalAndLearningMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdatePlanOpsEvalAndLearningMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePlanOpsEvalAndLearningMutation, UpdatePlanOpsEvalAndLearningMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdatePlanOpsEvalAndLearningMutation, UpdatePlanOpsEvalAndLearningMutationVariables>(UpdatePlanOpsEvalAndLearningDocument, options);
      }
export type UpdatePlanOpsEvalAndLearningMutationHookResult = ReturnType<typeof useUpdatePlanOpsEvalAndLearningMutation>;
export type UpdatePlanOpsEvalAndLearningMutationResult = Apollo.MutationResult<UpdatePlanOpsEvalAndLearningMutation>;
export type UpdatePlanOpsEvalAndLearningMutationOptions = Apollo.BaseMutationOptions<UpdatePlanOpsEvalAndLearningMutation, UpdatePlanOpsEvalAndLearningMutationVariables>;
export const GetAllParticipantsAndProvidersDocument = gql`
    query GetAllParticipantsAndProviders($id: UUID!) {
  modelPlan(id: $id) {
    id
    participantsAndProviders {
      id
      participants
      medicareProviderType
      isNewTypeOfProvidersOrSuppliers
      statesEngagement
      participantsOther
      participantsNote
      participantsCurrentlyInModels
      participantsCurrentlyInModelsNote
      modelApplicationLevel
      expectedNumberOfParticipants
      estimateConfidence
      confidenceNote
      recruitmentMethod
      recruitmentOther
      recruitmentNote
      selectionMethod
      selectionOther
      selectionNote
      participantAddedFrequency
      participantAddedFrequencyContinually
      participantAddedFrequencyOther
      participantAddedFrequencyNote
      participantRemovedFrequency
      participantRemovedFrequencyContinually
      participantRemovedFrequencyOther
      participantRemovedFrequencyNote
      communicationMethod
      communicationMethodOther
      communicationNote
      riskType
      riskOther
      riskNote
      willRiskChange
      willRiskChangeNote
      participantRequireFinancialGuarantee
      participantRequireFinancialGuaranteeType
      participantRequireFinancialGuaranteeOther
      participantRequireFinancialGuaranteeNote
      coordinateWork
      coordinateWorkNote
      gainsharePayments
      gainsharePaymentsTrack
      gainsharePaymentsNote
      gainsharePaymentsEligibility
      gainsharePaymentsEligibilityOther
      participantsIds
      participantsIdsOther
      participantsIDSNote
      providerAdditionFrequency
      providerAdditionFrequencyContinually
      providerAdditionFrequencyOther
      providerAdditionFrequencyNote
      providerAddMethod
      providerAddMethodOther
      providerAddMethodNote
      providerLeaveMethod
      providerLeaveMethodOther
      providerLeaveMethodNote
      providerRemovalFrequency
      providerRemovalFrequencyContinually
      providerRemovalFrequencyOther
      providerRemovalFrequencyNote
      providerOverlap
      providerOverlapHierarchy
      providerOverlapNote
      createdDts
      modifiedDts
      status
    }
  }
}
    `;

/**
 * __useGetAllParticipantsAndProvidersQuery__
 *
 * To run a query within a React component, call `useGetAllParticipantsAndProvidersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllParticipantsAndProvidersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllParticipantsAndProvidersQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAllParticipantsAndProvidersQuery(baseOptions: Apollo.QueryHookOptions<GetAllParticipantsAndProvidersQuery, GetAllParticipantsAndProvidersQueryVariables> & ({ variables: GetAllParticipantsAndProvidersQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllParticipantsAndProvidersQuery, GetAllParticipantsAndProvidersQueryVariables>(GetAllParticipantsAndProvidersDocument, options);
      }
export function useGetAllParticipantsAndProvidersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllParticipantsAndProvidersQuery, GetAllParticipantsAndProvidersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllParticipantsAndProvidersQuery, GetAllParticipantsAndProvidersQueryVariables>(GetAllParticipantsAndProvidersDocument, options);
        }
export function useGetAllParticipantsAndProvidersSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAllParticipantsAndProvidersQuery, GetAllParticipantsAndProvidersQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAllParticipantsAndProvidersQuery, GetAllParticipantsAndProvidersQueryVariables>(GetAllParticipantsAndProvidersDocument, options);
        }
export type GetAllParticipantsAndProvidersQueryHookResult = ReturnType<typeof useGetAllParticipantsAndProvidersQuery>;
export type GetAllParticipantsAndProvidersLazyQueryHookResult = ReturnType<typeof useGetAllParticipantsAndProvidersLazyQuery>;
export type GetAllParticipantsAndProvidersSuspenseQueryHookResult = ReturnType<typeof useGetAllParticipantsAndProvidersSuspenseQuery>;
export type GetAllParticipantsAndProvidersQueryResult = Apollo.QueryResult<GetAllParticipantsAndProvidersQuery, GetAllParticipantsAndProvidersQueryVariables>;
export const GetCommunicationDocument = gql`
    query GetCommunication($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    participantsAndProviders {
      id
      participantAddedFrequency
      participantAddedFrequencyContinually
      participantAddedFrequencyOther
      participantAddedFrequencyNote
      participantRemovedFrequency
      participantRemovedFrequencyContinually
      participantRemovedFrequencyOther
      participantRemovedFrequencyNote
      communicationMethod
      communicationMethodOther
      communicationNote
      riskType
      riskOther
      riskNote
      willRiskChange
      willRiskChangeNote
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetCommunicationQuery__
 *
 * To run a query within a React component, call `useGetCommunicationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCommunicationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCommunicationQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCommunicationQuery(baseOptions: Apollo.QueryHookOptions<GetCommunicationQuery, GetCommunicationQueryVariables> & ({ variables: GetCommunicationQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCommunicationQuery, GetCommunicationQueryVariables>(GetCommunicationDocument, options);
      }
export function useGetCommunicationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCommunicationQuery, GetCommunicationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCommunicationQuery, GetCommunicationQueryVariables>(GetCommunicationDocument, options);
        }
export function useGetCommunicationSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCommunicationQuery, GetCommunicationQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCommunicationQuery, GetCommunicationQueryVariables>(GetCommunicationDocument, options);
        }
export type GetCommunicationQueryHookResult = ReturnType<typeof useGetCommunicationQuery>;
export type GetCommunicationLazyQueryHookResult = ReturnType<typeof useGetCommunicationLazyQuery>;
export type GetCommunicationSuspenseQueryHookResult = ReturnType<typeof useGetCommunicationSuspenseQuery>;
export type GetCommunicationQueryResult = Apollo.QueryResult<GetCommunicationQuery, GetCommunicationQueryVariables>;
export const GetCoordinationDocument = gql`
    query GetCoordination($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    participantsAndProviders {
      id
      participantRequireFinancialGuarantee
      participantRequireFinancialGuaranteeType
      participantRequireFinancialGuaranteeOther
      participantRequireFinancialGuaranteeNote
      coordinateWork
      coordinateWorkNote
      gainsharePayments
      gainsharePaymentsEligibility
      gainsharePaymentsEligibilityOther
      gainsharePaymentsTrack
      gainsharePaymentsNote
      participantsIds
      participantsIdsOther
      participantsIDSNote
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetCoordinationQuery__
 *
 * To run a query within a React component, call `useGetCoordinationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCoordinationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCoordinationQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCoordinationQuery(baseOptions: Apollo.QueryHookOptions<GetCoordinationQuery, GetCoordinationQueryVariables> & ({ variables: GetCoordinationQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCoordinationQuery, GetCoordinationQueryVariables>(GetCoordinationDocument, options);
      }
export function useGetCoordinationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCoordinationQuery, GetCoordinationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCoordinationQuery, GetCoordinationQueryVariables>(GetCoordinationDocument, options);
        }
export function useGetCoordinationSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCoordinationQuery, GetCoordinationQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCoordinationQuery, GetCoordinationQueryVariables>(GetCoordinationDocument, options);
        }
export type GetCoordinationQueryHookResult = ReturnType<typeof useGetCoordinationQuery>;
export type GetCoordinationLazyQueryHookResult = ReturnType<typeof useGetCoordinationLazyQuery>;
export type GetCoordinationSuspenseQueryHookResult = ReturnType<typeof useGetCoordinationSuspenseQuery>;
export type GetCoordinationQueryResult = Apollo.QueryResult<GetCoordinationQuery, GetCoordinationQueryVariables>;
export const GetParticipantOptionsDocument = gql`
    query GetParticipantOptions($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    participantsAndProviders {
      id
      expectedNumberOfParticipants
      estimateConfidence
      confidenceNote
      recruitmentMethod
      recruitmentOther
      recruitmentNote
      selectionMethod
      selectionOther
      selectionNote
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetParticipantOptionsQuery__
 *
 * To run a query within a React component, call `useGetParticipantOptionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetParticipantOptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetParticipantOptionsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetParticipantOptionsQuery(baseOptions: Apollo.QueryHookOptions<GetParticipantOptionsQuery, GetParticipantOptionsQueryVariables> & ({ variables: GetParticipantOptionsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetParticipantOptionsQuery, GetParticipantOptionsQueryVariables>(GetParticipantOptionsDocument, options);
      }
export function useGetParticipantOptionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetParticipantOptionsQuery, GetParticipantOptionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetParticipantOptionsQuery, GetParticipantOptionsQueryVariables>(GetParticipantOptionsDocument, options);
        }
export function useGetParticipantOptionsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetParticipantOptionsQuery, GetParticipantOptionsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetParticipantOptionsQuery, GetParticipantOptionsQueryVariables>(GetParticipantOptionsDocument, options);
        }
export type GetParticipantOptionsQueryHookResult = ReturnType<typeof useGetParticipantOptionsQuery>;
export type GetParticipantOptionsLazyQueryHookResult = ReturnType<typeof useGetParticipantOptionsLazyQuery>;
export type GetParticipantOptionsSuspenseQueryHookResult = ReturnType<typeof useGetParticipantOptionsSuspenseQuery>;
export type GetParticipantOptionsQueryResult = Apollo.QueryResult<GetParticipantOptionsQuery, GetParticipantOptionsQueryVariables>;
export const GetParticipantsAndProvidersDocument = gql`
    query GetParticipantsAndProviders($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    participantsAndProviders {
      id
      participants
      medicareProviderType
      isNewTypeOfProvidersOrSuppliers
      statesEngagement
      participantsOther
      participantsNote
      participantsCurrentlyInModels
      participantsCurrentlyInModelsNote
      modelApplicationLevel
    }
  }
}
    `;

/**
 * __useGetParticipantsAndProvidersQuery__
 *
 * To run a query within a React component, call `useGetParticipantsAndProvidersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetParticipantsAndProvidersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetParticipantsAndProvidersQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetParticipantsAndProvidersQuery(baseOptions: Apollo.QueryHookOptions<GetParticipantsAndProvidersQuery, GetParticipantsAndProvidersQueryVariables> & ({ variables: GetParticipantsAndProvidersQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetParticipantsAndProvidersQuery, GetParticipantsAndProvidersQueryVariables>(GetParticipantsAndProvidersDocument, options);
      }
export function useGetParticipantsAndProvidersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetParticipantsAndProvidersQuery, GetParticipantsAndProvidersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetParticipantsAndProvidersQuery, GetParticipantsAndProvidersQueryVariables>(GetParticipantsAndProvidersDocument, options);
        }
export function useGetParticipantsAndProvidersSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetParticipantsAndProvidersQuery, GetParticipantsAndProvidersQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetParticipantsAndProvidersQuery, GetParticipantsAndProvidersQueryVariables>(GetParticipantsAndProvidersDocument, options);
        }
export type GetParticipantsAndProvidersQueryHookResult = ReturnType<typeof useGetParticipantsAndProvidersQuery>;
export type GetParticipantsAndProvidersLazyQueryHookResult = ReturnType<typeof useGetParticipantsAndProvidersLazyQuery>;
export type GetParticipantsAndProvidersSuspenseQueryHookResult = ReturnType<typeof useGetParticipantsAndProvidersSuspenseQuery>;
export type GetParticipantsAndProvidersQueryResult = Apollo.QueryResult<GetParticipantsAndProvidersQuery, GetParticipantsAndProvidersQueryVariables>;
export const GetProviderOptionsDocument = gql`
    query GetProviderOptions($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    participantsAndProviders {
      id
      providerAdditionFrequency
      providerAdditionFrequencyContinually
      providerAdditionFrequencyOther
      providerAdditionFrequencyNote
      providerAddMethod
      providerAddMethodOther
      providerAddMethodNote
      providerLeaveMethod
      providerLeaveMethodOther
      providerLeaveMethodNote
      providerRemovalFrequency
      providerRemovalFrequencyContinually
      providerRemovalFrequencyOther
      providerRemovalFrequencyNote
      providerOverlap
      providerOverlapHierarchy
      providerOverlapNote
      readyForReviewByUserAccount {
        id
        commonName
      }
      readyForReviewDts
      status
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetProviderOptionsQuery__
 *
 * To run a query within a React component, call `useGetProviderOptionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProviderOptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProviderOptionsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetProviderOptionsQuery(baseOptions: Apollo.QueryHookOptions<GetProviderOptionsQuery, GetProviderOptionsQueryVariables> & ({ variables: GetProviderOptionsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetProviderOptionsQuery, GetProviderOptionsQueryVariables>(GetProviderOptionsDocument, options);
      }
export function useGetProviderOptionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProviderOptionsQuery, GetProviderOptionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetProviderOptionsQuery, GetProviderOptionsQueryVariables>(GetProviderOptionsDocument, options);
        }
export function useGetProviderOptionsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetProviderOptionsQuery, GetProviderOptionsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetProviderOptionsQuery, GetProviderOptionsQueryVariables>(GetProviderOptionsDocument, options);
        }
export type GetProviderOptionsQueryHookResult = ReturnType<typeof useGetProviderOptionsQuery>;
export type GetProviderOptionsLazyQueryHookResult = ReturnType<typeof useGetProviderOptionsLazyQuery>;
export type GetProviderOptionsSuspenseQueryHookResult = ReturnType<typeof useGetProviderOptionsSuspenseQuery>;
export type GetProviderOptionsQueryResult = Apollo.QueryResult<GetProviderOptionsQuery, GetProviderOptionsQueryVariables>;
export const UpdatePlanParticipantsAndProvidersDocument = gql`
    mutation UpdatePlanParticipantsAndProviders($id: UUID!, $changes: PlanParticipantsAndProvidersChanges!) {
  updatePlanParticipantsAndProviders(id: $id, changes: $changes) {
    id
  }
}
    `;
export type UpdatePlanParticipantsAndProvidersMutationFn = Apollo.MutationFunction<UpdatePlanParticipantsAndProvidersMutation, UpdatePlanParticipantsAndProvidersMutationVariables>;

/**
 * __useUpdatePlanParticipantsAndProvidersMutation__
 *
 * To run a mutation, you first call `useUpdatePlanParticipantsAndProvidersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePlanParticipantsAndProvidersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePlanParticipantsAndProvidersMutation, { data, loading, error }] = useUpdatePlanParticipantsAndProvidersMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdatePlanParticipantsAndProvidersMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePlanParticipantsAndProvidersMutation, UpdatePlanParticipantsAndProvidersMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdatePlanParticipantsAndProvidersMutation, UpdatePlanParticipantsAndProvidersMutationVariables>(UpdatePlanParticipantsAndProvidersDocument, options);
      }
export type UpdatePlanParticipantsAndProvidersMutationHookResult = ReturnType<typeof useUpdatePlanParticipantsAndProvidersMutation>;
export type UpdatePlanParticipantsAndProvidersMutationResult = Apollo.MutationResult<UpdatePlanParticipantsAndProvidersMutation>;
export type UpdatePlanParticipantsAndProvidersMutationOptions = Apollo.BaseMutationOptions<UpdatePlanParticipantsAndProvidersMutation, UpdatePlanParticipantsAndProvidersMutationVariables>;
export const GetAllPaymentsDocument = gql`
    query GetAllPayments($id: UUID!) {
  modelPlan(id: $id) {
    id
    payments {
      fundingSource
      fundingSourcePatientProtectionInfo
      fundingSourceMedicareAInfo
      fundingSourceMedicareBInfo
      fundingSourceOther
      fundingSourceNote
      fundingSourceR
      fundingSourceRPatientProtectionInfo
      fundingSourceRMedicareAInfo
      fundingSourceRMedicareBInfo
      fundingSourceROther
      fundingSourceRNote
      payRecipients
      payRecipientsOtherSpecification
      payRecipientsNote
      payType
      payTypeNote
      payClaims
      payClaimsOther
      payClaimsNote
      shouldAnyProvidersExcludedFFSSystems
      shouldAnyProviderExcludedFFSSystemsNote
      changesMedicarePhysicianFeeSchedule
      changesMedicarePhysicianFeeScheduleNote
      affectsMedicareSecondaryPayerClaims
      affectsMedicareSecondaryPayerClaimsHow
      affectsMedicareSecondaryPayerClaimsNote
      payModelDifferentiation
      willBePaymentAdjustments
      willBePaymentAdjustmentsNote
      creatingDependenciesBetweenServices
      creatingDependenciesBetweenServicesNote
      needsClaimsDataCollection
      needsClaimsDataCollectionNote
      providingThirdPartyFile
      isContractorAwareTestDataRequirements
      beneficiaryCostSharingLevelAndHandling
      waiveBeneficiaryCostSharingForAnyServices
      waiveBeneficiaryCostSharingServiceSpecification
      waiverOnlyAppliesPartOfPayment
      waiveBeneficiaryCostSharingNote
      nonClaimsPayments
      nonClaimsPaymentsNote
      nonClaimsPaymentOther
      paymentCalculationOwner
      numberPaymentsPerPayCycle
      numberPaymentsPerPayCycleNote
      sharedSystemsInvolvedAdditionalClaimPayment
      sharedSystemsInvolvedAdditionalClaimPaymentNote
      planningToUseInnovationPaymentContractor
      planningToUseInnovationPaymentContractorNote
      expectedCalculationComplexityLevel
      expectedCalculationComplexityLevelNote
      claimsProcessingPrecedence
      claimsProcessingPrecedenceOther
      claimsProcessingPrecedenceNote
      canParticipantsSelectBetweenPaymentMechanisms
      canParticipantsSelectBetweenPaymentMechanismsHow
      canParticipantsSelectBetweenPaymentMechanismsNote
      anticipatedPaymentFrequency
      anticipatedPaymentFrequencyContinually
      anticipatedPaymentFrequencyOther
      anticipatedPaymentFrequencyNote
      willRecoverPayments
      willRecoverPaymentsNote
      anticipateReconcilingPaymentsRetrospectively
      anticipateReconcilingPaymentsRetrospectivelyNote
      paymentReconciliationFrequency
      paymentReconciliationFrequencyContinually
      paymentReconciliationFrequencyOther
      paymentReconciliationFrequencyNote
      paymentDemandRecoupmentFrequency
      paymentDemandRecoupmentFrequencyContinually
      paymentDemandRecoupmentFrequencyOther
      paymentDemandRecoupmentFrequencyNote
      paymentStartDate
      paymentStartDateNote
      createdDts
      modifiedDts
      status
    }
  }
}
    `;

/**
 * __useGetAllPaymentsQuery__
 *
 * To run a query within a React component, call `useGetAllPaymentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllPaymentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllPaymentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAllPaymentsQuery(baseOptions: Apollo.QueryHookOptions<GetAllPaymentsQuery, GetAllPaymentsQueryVariables> & ({ variables: GetAllPaymentsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAllPaymentsQuery, GetAllPaymentsQueryVariables>(GetAllPaymentsDocument, options);
      }
export function useGetAllPaymentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllPaymentsQuery, GetAllPaymentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAllPaymentsQuery, GetAllPaymentsQueryVariables>(GetAllPaymentsDocument, options);
        }
export function useGetAllPaymentsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAllPaymentsQuery, GetAllPaymentsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAllPaymentsQuery, GetAllPaymentsQueryVariables>(GetAllPaymentsDocument, options);
        }
export type GetAllPaymentsQueryHookResult = ReturnType<typeof useGetAllPaymentsQuery>;
export type GetAllPaymentsLazyQueryHookResult = ReturnType<typeof useGetAllPaymentsLazyQuery>;
export type GetAllPaymentsSuspenseQueryHookResult = ReturnType<typeof useGetAllPaymentsSuspenseQuery>;
export type GetAllPaymentsQueryResult = Apollo.QueryResult<GetAllPaymentsQuery, GetAllPaymentsQueryVariables>;
export const GetAnticipateDependenciesDocument = gql`
    query GetAnticipateDependencies($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    payments {
      id
      payType
      payClaims
      willBePaymentAdjustments
      willBePaymentAdjustmentsNote
      creatingDependenciesBetweenServices
      creatingDependenciesBetweenServicesNote
      needsClaimsDataCollection
      needsClaimsDataCollectionNote
      providingThirdPartyFile
      isContractorAwareTestDataRequirements
    }
  }
}
    `;

/**
 * __useGetAnticipateDependenciesQuery__
 *
 * To run a query within a React component, call `useGetAnticipateDependenciesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAnticipateDependenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAnticipateDependenciesQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAnticipateDependenciesQuery(baseOptions: Apollo.QueryHookOptions<GetAnticipateDependenciesQuery, GetAnticipateDependenciesQueryVariables> & ({ variables: GetAnticipateDependenciesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAnticipateDependenciesQuery, GetAnticipateDependenciesQueryVariables>(GetAnticipateDependenciesDocument, options);
      }
export function useGetAnticipateDependenciesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAnticipateDependenciesQuery, GetAnticipateDependenciesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAnticipateDependenciesQuery, GetAnticipateDependenciesQueryVariables>(GetAnticipateDependenciesDocument, options);
        }
export function useGetAnticipateDependenciesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAnticipateDependenciesQuery, GetAnticipateDependenciesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAnticipateDependenciesQuery, GetAnticipateDependenciesQueryVariables>(GetAnticipateDependenciesDocument, options);
        }
export type GetAnticipateDependenciesQueryHookResult = ReturnType<typeof useGetAnticipateDependenciesQuery>;
export type GetAnticipateDependenciesLazyQueryHookResult = ReturnType<typeof useGetAnticipateDependenciesLazyQuery>;
export type GetAnticipateDependenciesSuspenseQueryHookResult = ReturnType<typeof useGetAnticipateDependenciesSuspenseQuery>;
export type GetAnticipateDependenciesQueryResult = Apollo.QueryResult<GetAnticipateDependenciesQuery, GetAnticipateDependenciesQueryVariables>;
export const GetBeneficiaryCostSharingDocument = gql`
    query GetBeneficiaryCostSharing($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    payments {
      id
      payType
      payClaims
      beneficiaryCostSharingLevelAndHandling
      waiveBeneficiaryCostSharingForAnyServices
      waiveBeneficiaryCostSharingServiceSpecification
      waiverOnlyAppliesPartOfPayment
      waiveBeneficiaryCostSharingNote
    }
  }
}
    `;

/**
 * __useGetBeneficiaryCostSharingQuery__
 *
 * To run a query within a React component, call `useGetBeneficiaryCostSharingQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBeneficiaryCostSharingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBeneficiaryCostSharingQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetBeneficiaryCostSharingQuery(baseOptions: Apollo.QueryHookOptions<GetBeneficiaryCostSharingQuery, GetBeneficiaryCostSharingQueryVariables> & ({ variables: GetBeneficiaryCostSharingQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetBeneficiaryCostSharingQuery, GetBeneficiaryCostSharingQueryVariables>(GetBeneficiaryCostSharingDocument, options);
      }
export function useGetBeneficiaryCostSharingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetBeneficiaryCostSharingQuery, GetBeneficiaryCostSharingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetBeneficiaryCostSharingQuery, GetBeneficiaryCostSharingQueryVariables>(GetBeneficiaryCostSharingDocument, options);
        }
export function useGetBeneficiaryCostSharingSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetBeneficiaryCostSharingQuery, GetBeneficiaryCostSharingQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetBeneficiaryCostSharingQuery, GetBeneficiaryCostSharingQueryVariables>(GetBeneficiaryCostSharingDocument, options);
        }
export type GetBeneficiaryCostSharingQueryHookResult = ReturnType<typeof useGetBeneficiaryCostSharingQuery>;
export type GetBeneficiaryCostSharingLazyQueryHookResult = ReturnType<typeof useGetBeneficiaryCostSharingLazyQuery>;
export type GetBeneficiaryCostSharingSuspenseQueryHookResult = ReturnType<typeof useGetBeneficiaryCostSharingSuspenseQuery>;
export type GetBeneficiaryCostSharingQueryResult = Apollo.QueryResult<GetBeneficiaryCostSharingQuery, GetBeneficiaryCostSharingQueryVariables>;
export const GetClaimsBasedPaymentDocument = gql`
    query GetClaimsBasedPayment($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    payments {
      id
      payType
      payClaims
      payClaimsNote
      payClaimsOther
      shouldAnyProvidersExcludedFFSSystems
      shouldAnyProviderExcludedFFSSystemsNote
      changesMedicarePhysicianFeeSchedule
      changesMedicarePhysicianFeeScheduleNote
      affectsMedicareSecondaryPayerClaims
      affectsMedicareSecondaryPayerClaimsHow
      affectsMedicareSecondaryPayerClaimsNote
      payModelDifferentiation
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetClaimsBasedPaymentQuery__
 *
 * To run a query within a React component, call `useGetClaimsBasedPaymentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClaimsBasedPaymentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClaimsBasedPaymentQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetClaimsBasedPaymentQuery(baseOptions: Apollo.QueryHookOptions<GetClaimsBasedPaymentQuery, GetClaimsBasedPaymentQueryVariables> & ({ variables: GetClaimsBasedPaymentQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetClaimsBasedPaymentQuery, GetClaimsBasedPaymentQueryVariables>(GetClaimsBasedPaymentDocument, options);
      }
export function useGetClaimsBasedPaymentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetClaimsBasedPaymentQuery, GetClaimsBasedPaymentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetClaimsBasedPaymentQuery, GetClaimsBasedPaymentQueryVariables>(GetClaimsBasedPaymentDocument, options);
        }
export function useGetClaimsBasedPaymentSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetClaimsBasedPaymentQuery, GetClaimsBasedPaymentQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetClaimsBasedPaymentQuery, GetClaimsBasedPaymentQueryVariables>(GetClaimsBasedPaymentDocument, options);
        }
export type GetClaimsBasedPaymentQueryHookResult = ReturnType<typeof useGetClaimsBasedPaymentQuery>;
export type GetClaimsBasedPaymentLazyQueryHookResult = ReturnType<typeof useGetClaimsBasedPaymentLazyQuery>;
export type GetClaimsBasedPaymentSuspenseQueryHookResult = ReturnType<typeof useGetClaimsBasedPaymentSuspenseQuery>;
export type GetClaimsBasedPaymentQueryResult = Apollo.QueryResult<GetClaimsBasedPaymentQuery, GetClaimsBasedPaymentQueryVariables>;
export const GetComplexityDocument = gql`
    query GetComplexity($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    payments {
      id
      payType
      payClaims
      expectedCalculationComplexityLevel
      expectedCalculationComplexityLevelNote
      claimsProcessingPrecedence
      claimsProcessingPrecedenceOther
      claimsProcessingPrecedenceNote
      canParticipantsSelectBetweenPaymentMechanisms
      canParticipantsSelectBetweenPaymentMechanismsHow
      canParticipantsSelectBetweenPaymentMechanismsNote
      anticipatedPaymentFrequency
      anticipatedPaymentFrequencyContinually
      anticipatedPaymentFrequencyOther
      anticipatedPaymentFrequencyNote
    }
  }
}
    `;

/**
 * __useGetComplexityQuery__
 *
 * To run a query within a React component, call `useGetComplexityQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetComplexityQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetComplexityQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetComplexityQuery(baseOptions: Apollo.QueryHookOptions<GetComplexityQuery, GetComplexityQueryVariables> & ({ variables: GetComplexityQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetComplexityQuery, GetComplexityQueryVariables>(GetComplexityDocument, options);
      }
export function useGetComplexityLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetComplexityQuery, GetComplexityQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetComplexityQuery, GetComplexityQueryVariables>(GetComplexityDocument, options);
        }
export function useGetComplexitySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetComplexityQuery, GetComplexityQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetComplexityQuery, GetComplexityQueryVariables>(GetComplexityDocument, options);
        }
export type GetComplexityQueryHookResult = ReturnType<typeof useGetComplexityQuery>;
export type GetComplexityLazyQueryHookResult = ReturnType<typeof useGetComplexityLazyQuery>;
export type GetComplexitySuspenseQueryHookResult = ReturnType<typeof useGetComplexitySuspenseQuery>;
export type GetComplexityQueryResult = Apollo.QueryResult<GetComplexityQuery, GetComplexityQueryVariables>;
export const GetFundingDocument = gql`
    query GetFunding($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    payments {
      id
      fundingSource
      fundingSourcePatientProtectionInfo
      fundingSourceMedicareAInfo
      fundingSourceMedicareBInfo
      fundingSourceOther
      fundingSourceNote
      fundingSourceR
      fundingSourceRPatientProtectionInfo
      fundingSourceRMedicareAInfo
      fundingSourceRMedicareBInfo
      fundingSourceROther
      fundingSourceRNote
      payRecipients
      payRecipientsOtherSpecification
      payRecipientsNote
      payType
      payTypeNote
      payClaims
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetFundingQuery__
 *
 * To run a query within a React component, call `useGetFundingQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFundingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFundingQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetFundingQuery(baseOptions: Apollo.QueryHookOptions<GetFundingQuery, GetFundingQueryVariables> & ({ variables: GetFundingQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFundingQuery, GetFundingQueryVariables>(GetFundingDocument, options);
      }
export function useGetFundingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFundingQuery, GetFundingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFundingQuery, GetFundingQueryVariables>(GetFundingDocument, options);
        }
export function useGetFundingSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetFundingQuery, GetFundingQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetFundingQuery, GetFundingQueryVariables>(GetFundingDocument, options);
        }
export type GetFundingQueryHookResult = ReturnType<typeof useGetFundingQuery>;
export type GetFundingLazyQueryHookResult = ReturnType<typeof useGetFundingLazyQuery>;
export type GetFundingSuspenseQueryHookResult = ReturnType<typeof useGetFundingSuspenseQuery>;
export type GetFundingQueryResult = Apollo.QueryResult<GetFundingQuery, GetFundingQueryVariables>;
export const GetNonClaimsBasedPaymentDocument = gql`
    query GetNonClaimsBasedPayment($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    payments {
      id
      payType
      payClaims
      nonClaimsPayments
      nonClaimsPaymentsNote
      nonClaimsPaymentOther
      paymentCalculationOwner
      numberPaymentsPerPayCycle
      numberPaymentsPerPayCycleNote
      sharedSystemsInvolvedAdditionalClaimPayment
      sharedSystemsInvolvedAdditionalClaimPaymentNote
      planningToUseInnovationPaymentContractor
      planningToUseInnovationPaymentContractorNote
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetNonClaimsBasedPaymentQuery__
 *
 * To run a query within a React component, call `useGetNonClaimsBasedPaymentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNonClaimsBasedPaymentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNonClaimsBasedPaymentQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetNonClaimsBasedPaymentQuery(baseOptions: Apollo.QueryHookOptions<GetNonClaimsBasedPaymentQuery, GetNonClaimsBasedPaymentQueryVariables> & ({ variables: GetNonClaimsBasedPaymentQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetNonClaimsBasedPaymentQuery, GetNonClaimsBasedPaymentQueryVariables>(GetNonClaimsBasedPaymentDocument, options);
      }
export function useGetNonClaimsBasedPaymentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetNonClaimsBasedPaymentQuery, GetNonClaimsBasedPaymentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetNonClaimsBasedPaymentQuery, GetNonClaimsBasedPaymentQueryVariables>(GetNonClaimsBasedPaymentDocument, options);
        }
export function useGetNonClaimsBasedPaymentSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetNonClaimsBasedPaymentQuery, GetNonClaimsBasedPaymentQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetNonClaimsBasedPaymentQuery, GetNonClaimsBasedPaymentQueryVariables>(GetNonClaimsBasedPaymentDocument, options);
        }
export type GetNonClaimsBasedPaymentQueryHookResult = ReturnType<typeof useGetNonClaimsBasedPaymentQuery>;
export type GetNonClaimsBasedPaymentLazyQueryHookResult = ReturnType<typeof useGetNonClaimsBasedPaymentLazyQuery>;
export type GetNonClaimsBasedPaymentSuspenseQueryHookResult = ReturnType<typeof useGetNonClaimsBasedPaymentSuspenseQuery>;
export type GetNonClaimsBasedPaymentQueryResult = Apollo.QueryResult<GetNonClaimsBasedPaymentQuery, GetNonClaimsBasedPaymentQueryVariables>;
export const GetRecoverDocument = gql`
    query GetRecover($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    payments {
      id
      payType
      payClaims
      willRecoverPayments
      willRecoverPaymentsNote
      anticipateReconcilingPaymentsRetrospectively
      anticipateReconcilingPaymentsRetrospectivelyNote
      paymentReconciliationFrequency
      paymentReconciliationFrequencyContinually
      paymentReconciliationFrequencyOther
      paymentReconciliationFrequencyNote
      paymentDemandRecoupmentFrequency
      paymentDemandRecoupmentFrequencyContinually
      paymentDemandRecoupmentFrequencyOther
      paymentDemandRecoupmentFrequencyNote
      paymentStartDate
      paymentStartDateNote
      readyForReviewByUserAccount {
        id
        commonName
      }
      readyForReviewDts
      status
    }
    operationalNeeds {
      id
      modifiedDts
    }
  }
}
    `;

/**
 * __useGetRecoverQuery__
 *
 * To run a query within a React component, call `useGetRecoverQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecoverQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecoverQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetRecoverQuery(baseOptions: Apollo.QueryHookOptions<GetRecoverQuery, GetRecoverQueryVariables> & ({ variables: GetRecoverQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetRecoverQuery, GetRecoverQueryVariables>(GetRecoverDocument, options);
      }
export function useGetRecoverLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetRecoverQuery, GetRecoverQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetRecoverQuery, GetRecoverQueryVariables>(GetRecoverDocument, options);
        }
export function useGetRecoverSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetRecoverQuery, GetRecoverQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetRecoverQuery, GetRecoverQueryVariables>(GetRecoverDocument, options);
        }
export type GetRecoverQueryHookResult = ReturnType<typeof useGetRecoverQuery>;
export type GetRecoverLazyQueryHookResult = ReturnType<typeof useGetRecoverLazyQuery>;
export type GetRecoverSuspenseQueryHookResult = ReturnType<typeof useGetRecoverSuspenseQuery>;
export type GetRecoverQueryResult = Apollo.QueryResult<GetRecoverQuery, GetRecoverQueryVariables>;
export const UpdatePaymentsDocument = gql`
    mutation UpdatePayments($id: UUID!, $changes: PlanPaymentsChanges!) {
  updatePlanPayments(id: $id, changes: $changes) {
    id
  }
}
    `;
export type UpdatePaymentsMutationFn = Apollo.MutationFunction<UpdatePaymentsMutation, UpdatePaymentsMutationVariables>;

/**
 * __useUpdatePaymentsMutation__
 *
 * To run a mutation, you first call `useUpdatePaymentsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePaymentsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePaymentsMutation, { data, loading, error }] = useUpdatePaymentsMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdatePaymentsMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePaymentsMutation, UpdatePaymentsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdatePaymentsMutation, UpdatePaymentsMutationVariables>(UpdatePaymentsDocument, options);
      }
export type UpdatePaymentsMutationHookResult = ReturnType<typeof useUpdatePaymentsMutation>;
export type UpdatePaymentsMutationResult = Apollo.MutationResult<UpdatePaymentsMutation>;
export type UpdatePaymentsMutationOptions = Apollo.BaseMutationOptions<UpdatePaymentsMutation, UpdatePaymentsMutationVariables>;
export const GetClearanceStatusesDocument = gql`
    query GetClearanceStatuses($id: UUID!, $includePrepareForClearance: Boolean!) {
  modelPlan(id: $id) {
    id
    basics {
      id
      readyForClearanceByUserAccount {
        id
        commonName
      }
      readyForClearanceDts
      status
    }
    generalCharacteristics {
      id
      readyForClearanceByUserAccount {
        id
        commonName
      }
      readyForClearanceDts
      status
    }
    participantsAndProviders {
      id
      readyForClearanceByUserAccount {
        id
        commonName
      }
      readyForClearanceDts
      status
    }
    beneficiaries {
      id
      readyForClearanceByUserAccount {
        id
        commonName
      }
      readyForClearanceDts
      status
    }
    opsEvalAndLearning {
      id
      readyForClearanceByUserAccount {
        id
        commonName
      }
      readyForClearanceDts
      status
    }
    payments {
      id
      readyForClearanceByUserAccount {
        id
        commonName
      }
      readyForClearanceDts
      status
    }
    prepareForClearance @include(if: $includePrepareForClearance) {
      status
    }
  }
}
    `;

/**
 * __useGetClearanceStatusesQuery__
 *
 * To run a query within a React component, call `useGetClearanceStatusesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClearanceStatusesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClearanceStatusesQuery({
 *   variables: {
 *      id: // value for 'id'
 *      includePrepareForClearance: // value for 'includePrepareForClearance'
 *   },
 * });
 */
export function useGetClearanceStatusesQuery(baseOptions: Apollo.QueryHookOptions<GetClearanceStatusesQuery, GetClearanceStatusesQueryVariables> & ({ variables: GetClearanceStatusesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetClearanceStatusesQuery, GetClearanceStatusesQueryVariables>(GetClearanceStatusesDocument, options);
      }
export function useGetClearanceStatusesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetClearanceStatusesQuery, GetClearanceStatusesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetClearanceStatusesQuery, GetClearanceStatusesQueryVariables>(GetClearanceStatusesDocument, options);
        }
export function useGetClearanceStatusesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetClearanceStatusesQuery, GetClearanceStatusesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetClearanceStatusesQuery, GetClearanceStatusesQueryVariables>(GetClearanceStatusesDocument, options);
        }
export type GetClearanceStatusesQueryHookResult = ReturnType<typeof useGetClearanceStatusesQuery>;
export type GetClearanceStatusesLazyQueryHookResult = ReturnType<typeof useGetClearanceStatusesLazyQuery>;
export type GetClearanceStatusesSuspenseQueryHookResult = ReturnType<typeof useGetClearanceStatusesSuspenseQuery>;
export type GetClearanceStatusesQueryResult = Apollo.QueryResult<GetClearanceStatusesQuery, GetClearanceStatusesQueryVariables>;
export const UpdateClearanceBasicsDocument = gql`
    mutation UpdateClearanceBasics($id: UUID!, $changes: PlanBasicsChanges!) {
  updatePlanBasics(id: $id, changes: $changes) {
    readyForClearanceByUserAccount {
      id
      commonName
    }
    readyForClearanceDts
    status
  }
}
    `;
export type UpdateClearanceBasicsMutationFn = Apollo.MutationFunction<UpdateClearanceBasicsMutation, UpdateClearanceBasicsMutationVariables>;

/**
 * __useUpdateClearanceBasicsMutation__
 *
 * To run a mutation, you first call `useUpdateClearanceBasicsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateClearanceBasicsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateClearanceBasicsMutation, { data, loading, error }] = useUpdateClearanceBasicsMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdateClearanceBasicsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateClearanceBasicsMutation, UpdateClearanceBasicsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateClearanceBasicsMutation, UpdateClearanceBasicsMutationVariables>(UpdateClearanceBasicsDocument, options);
      }
export type UpdateClearanceBasicsMutationHookResult = ReturnType<typeof useUpdateClearanceBasicsMutation>;
export type UpdateClearanceBasicsMutationResult = Apollo.MutationResult<UpdateClearanceBasicsMutation>;
export type UpdateClearanceBasicsMutationOptions = Apollo.BaseMutationOptions<UpdateClearanceBasicsMutation, UpdateClearanceBasicsMutationVariables>;
export const UpdateClearanceBeneficiariesDocument = gql`
    mutation UpdateClearanceBeneficiaries($id: UUID!, $changes: PlanBeneficiariesChanges!) {
  updatePlanBeneficiaries(id: $id, changes: $changes) {
    readyForClearanceByUserAccount {
      id
      commonName
    }
    readyForClearanceDts
    status
  }
}
    `;
export type UpdateClearanceBeneficiariesMutationFn = Apollo.MutationFunction<UpdateClearanceBeneficiariesMutation, UpdateClearanceBeneficiariesMutationVariables>;

/**
 * __useUpdateClearanceBeneficiariesMutation__
 *
 * To run a mutation, you first call `useUpdateClearanceBeneficiariesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateClearanceBeneficiariesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateClearanceBeneficiariesMutation, { data, loading, error }] = useUpdateClearanceBeneficiariesMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdateClearanceBeneficiariesMutation(baseOptions?: Apollo.MutationHookOptions<UpdateClearanceBeneficiariesMutation, UpdateClearanceBeneficiariesMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateClearanceBeneficiariesMutation, UpdateClearanceBeneficiariesMutationVariables>(UpdateClearanceBeneficiariesDocument, options);
      }
export type UpdateClearanceBeneficiariesMutationHookResult = ReturnType<typeof useUpdateClearanceBeneficiariesMutation>;
export type UpdateClearanceBeneficiariesMutationResult = Apollo.MutationResult<UpdateClearanceBeneficiariesMutation>;
export type UpdateClearanceBeneficiariesMutationOptions = Apollo.BaseMutationOptions<UpdateClearanceBeneficiariesMutation, UpdateClearanceBeneficiariesMutationVariables>;
export const UpdateClearanceCharacteristicsDocument = gql`
    mutation UpdateClearanceCharacteristics($id: UUID!, $changes: PlanGeneralCharacteristicsChanges!) {
  updatePlanGeneralCharacteristics(id: $id, changes: $changes) {
    readyForClearanceByUserAccount {
      id
      commonName
    }
    readyForClearanceDts
    status
  }
}
    `;
export type UpdateClearanceCharacteristicsMutationFn = Apollo.MutationFunction<UpdateClearanceCharacteristicsMutation, UpdateClearanceCharacteristicsMutationVariables>;

/**
 * __useUpdateClearanceCharacteristicsMutation__
 *
 * To run a mutation, you first call `useUpdateClearanceCharacteristicsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateClearanceCharacteristicsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateClearanceCharacteristicsMutation, { data, loading, error }] = useUpdateClearanceCharacteristicsMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdateClearanceCharacteristicsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateClearanceCharacteristicsMutation, UpdateClearanceCharacteristicsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateClearanceCharacteristicsMutation, UpdateClearanceCharacteristicsMutationVariables>(UpdateClearanceCharacteristicsDocument, options);
      }
export type UpdateClearanceCharacteristicsMutationHookResult = ReturnType<typeof useUpdateClearanceCharacteristicsMutation>;
export type UpdateClearanceCharacteristicsMutationResult = Apollo.MutationResult<UpdateClearanceCharacteristicsMutation>;
export type UpdateClearanceCharacteristicsMutationOptions = Apollo.BaseMutationOptions<UpdateClearanceCharacteristicsMutation, UpdateClearanceCharacteristicsMutationVariables>;
export const UpdateClearanceOpsEvalAndLearningDocument = gql`
    mutation UpdateClearanceOpsEvalAndLearning($id: UUID!, $changes: PlanOpsEvalAndLearningChanges!) {
  updatePlanOpsEvalAndLearning(id: $id, changes: $changes) {
    readyForClearanceByUserAccount {
      id
      commonName
    }
    readyForClearanceDts
    status
  }
}
    `;
export type UpdateClearanceOpsEvalAndLearningMutationFn = Apollo.MutationFunction<UpdateClearanceOpsEvalAndLearningMutation, UpdateClearanceOpsEvalAndLearningMutationVariables>;

/**
 * __useUpdateClearanceOpsEvalAndLearningMutation__
 *
 * To run a mutation, you first call `useUpdateClearanceOpsEvalAndLearningMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateClearanceOpsEvalAndLearningMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateClearanceOpsEvalAndLearningMutation, { data, loading, error }] = useUpdateClearanceOpsEvalAndLearningMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdateClearanceOpsEvalAndLearningMutation(baseOptions?: Apollo.MutationHookOptions<UpdateClearanceOpsEvalAndLearningMutation, UpdateClearanceOpsEvalAndLearningMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateClearanceOpsEvalAndLearningMutation, UpdateClearanceOpsEvalAndLearningMutationVariables>(UpdateClearanceOpsEvalAndLearningDocument, options);
      }
export type UpdateClearanceOpsEvalAndLearningMutationHookResult = ReturnType<typeof useUpdateClearanceOpsEvalAndLearningMutation>;
export type UpdateClearanceOpsEvalAndLearningMutationResult = Apollo.MutationResult<UpdateClearanceOpsEvalAndLearningMutation>;
export type UpdateClearanceOpsEvalAndLearningMutationOptions = Apollo.BaseMutationOptions<UpdateClearanceOpsEvalAndLearningMutation, UpdateClearanceOpsEvalAndLearningMutationVariables>;
export const UpdateClearanceParticipantsAndProvidersDocument = gql`
    mutation UpdateClearanceParticipantsAndProviders($id: UUID!, $changes: PlanParticipantsAndProvidersChanges!) {
  updatePlanParticipantsAndProviders(id: $id, changes: $changes) {
    readyForClearanceByUserAccount {
      id
      commonName
    }
    readyForClearanceDts
    status
  }
}
    `;
export type UpdateClearanceParticipantsAndProvidersMutationFn = Apollo.MutationFunction<UpdateClearanceParticipantsAndProvidersMutation, UpdateClearanceParticipantsAndProvidersMutationVariables>;

/**
 * __useUpdateClearanceParticipantsAndProvidersMutation__
 *
 * To run a mutation, you first call `useUpdateClearanceParticipantsAndProvidersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateClearanceParticipantsAndProvidersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateClearanceParticipantsAndProvidersMutation, { data, loading, error }] = useUpdateClearanceParticipantsAndProvidersMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdateClearanceParticipantsAndProvidersMutation(baseOptions?: Apollo.MutationHookOptions<UpdateClearanceParticipantsAndProvidersMutation, UpdateClearanceParticipantsAndProvidersMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateClearanceParticipantsAndProvidersMutation, UpdateClearanceParticipantsAndProvidersMutationVariables>(UpdateClearanceParticipantsAndProvidersDocument, options);
      }
export type UpdateClearanceParticipantsAndProvidersMutationHookResult = ReturnType<typeof useUpdateClearanceParticipantsAndProvidersMutation>;
export type UpdateClearanceParticipantsAndProvidersMutationResult = Apollo.MutationResult<UpdateClearanceParticipantsAndProvidersMutation>;
export type UpdateClearanceParticipantsAndProvidersMutationOptions = Apollo.BaseMutationOptions<UpdateClearanceParticipantsAndProvidersMutation, UpdateClearanceParticipantsAndProvidersMutationVariables>;
export const UpdateClearancePaymentsDocument = gql`
    mutation UpdateClearancePayments($id: UUID!, $changes: PlanPaymentsChanges!) {
  updatePlanPayments(id: $id, changes: $changes) {
    readyForClearanceByUserAccount {
      id
      commonName
    }
    readyForClearanceDts
    status
  }
}
    `;
export type UpdateClearancePaymentsMutationFn = Apollo.MutationFunction<UpdateClearancePaymentsMutation, UpdateClearancePaymentsMutationVariables>;

/**
 * __useUpdateClearancePaymentsMutation__
 *
 * To run a mutation, you first call `useUpdateClearancePaymentsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateClearancePaymentsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateClearancePaymentsMutation, { data, loading, error }] = useUpdateClearancePaymentsMutation({
 *   variables: {
 *      id: // value for 'id'
 *      changes: // value for 'changes'
 *   },
 * });
 */
export function useUpdateClearancePaymentsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateClearancePaymentsMutation, UpdateClearancePaymentsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateClearancePaymentsMutation, UpdateClearancePaymentsMutationVariables>(UpdateClearancePaymentsDocument, options);
      }
export type UpdateClearancePaymentsMutationHookResult = ReturnType<typeof useUpdateClearancePaymentsMutation>;
export type UpdateClearancePaymentsMutationResult = Apollo.MutationResult<UpdateClearancePaymentsMutation>;
export type UpdateClearancePaymentsMutationOptions = Apollo.BaseMutationOptions<UpdateClearancePaymentsMutation, UpdateClearancePaymentsMutationVariables>;
export const UpdatePrepareForClearanceDocument = gql`
    mutation UpdatePrepareForClearance($basicsID: UUID!, $basicsChanges: PlanBasicsChanges!, $characteristicsID: UUID!, $characteristicsChanges: PlanGeneralCharacteristicsChanges!, $participantsAndProvidersID: UUID!, $participantsAndProvidersChanges: PlanParticipantsAndProvidersChanges!, $beneficiariesID: UUID!, $benficiariesChanges: PlanBeneficiariesChanges!, $opsEvalAndLearningID: UUID!, $opsEvalAndLearningChanges: PlanOpsEvalAndLearningChanges!, $paymentsID: UUID!, $paymentsChanges: PlanPaymentsChanges!) {
  updatePlanBasics(id: $basicsID, changes: $basicsChanges) {
    readyForClearanceByUserAccount {
      id
      commonName
    }
    readyForClearanceDts
    status
  }
  updatePlanGeneralCharacteristics(
    id: $characteristicsID
    changes: $characteristicsChanges
  ) {
    readyForClearanceByUserAccount {
      id
      commonName
    }
    readyForClearanceDts
    status
  }
  updatePlanParticipantsAndProviders(
    id: $participantsAndProvidersID
    changes: $participantsAndProvidersChanges
  ) {
    readyForClearanceByUserAccount {
      id
      commonName
    }
    readyForClearanceDts
    status
  }
  updatePlanBeneficiaries(id: $beneficiariesID, changes: $benficiariesChanges) {
    readyForClearanceByUserAccount {
      id
      commonName
    }
    readyForClearanceDts
    status
  }
  updatePlanOpsEvalAndLearning(
    id: $opsEvalAndLearningID
    changes: $opsEvalAndLearningChanges
  ) {
    readyForClearanceByUserAccount {
      id
      commonName
    }
    readyForClearanceDts
    status
  }
  updatePlanPayments(id: $paymentsID, changes: $paymentsChanges) {
    readyForClearanceByUserAccount {
      id
      commonName
    }
    readyForClearanceDts
    status
  }
}
    `;
export type UpdatePrepareForClearanceMutationFn = Apollo.MutationFunction<UpdatePrepareForClearanceMutation, UpdatePrepareForClearanceMutationVariables>;

/**
 * __useUpdatePrepareForClearanceMutation__
 *
 * To run a mutation, you first call `useUpdatePrepareForClearanceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePrepareForClearanceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePrepareForClearanceMutation, { data, loading, error }] = useUpdatePrepareForClearanceMutation({
 *   variables: {
 *      basicsID: // value for 'basicsID'
 *      basicsChanges: // value for 'basicsChanges'
 *      characteristicsID: // value for 'characteristicsID'
 *      characteristicsChanges: // value for 'characteristicsChanges'
 *      participantsAndProvidersID: // value for 'participantsAndProvidersID'
 *      participantsAndProvidersChanges: // value for 'participantsAndProvidersChanges'
 *      beneficiariesID: // value for 'beneficiariesID'
 *      benficiariesChanges: // value for 'benficiariesChanges'
 *      opsEvalAndLearningID: // value for 'opsEvalAndLearningID'
 *      opsEvalAndLearningChanges: // value for 'opsEvalAndLearningChanges'
 *      paymentsID: // value for 'paymentsID'
 *      paymentsChanges: // value for 'paymentsChanges'
 *   },
 * });
 */
export function useUpdatePrepareForClearanceMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePrepareForClearanceMutation, UpdatePrepareForClearanceMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdatePrepareForClearanceMutation, UpdatePrepareForClearanceMutationVariables>(UpdatePrepareForClearanceDocument, options);
      }
export type UpdatePrepareForClearanceMutationHookResult = ReturnType<typeof useUpdatePrepareForClearanceMutation>;
export type UpdatePrepareForClearanceMutationResult = Apollo.MutationResult<UpdatePrepareForClearanceMutation>;
export type UpdatePrepareForClearanceMutationOptions = Apollo.BaseMutationOptions<UpdatePrepareForClearanceMutation, UpdatePrepareForClearanceMutationVariables>;
export const GetModelSummaryDocument = gql`
    query GetModelSummary($id: UUID!) {
  modelPlan(id: $id) {
    id
    modelName
    abbreviation
    createdDts
    modifiedDts
    status
    isFavorite
    basics {
      goal
      performancePeriodStarts
    }
    generalCharacteristics {
      keyCharacteristics
    }
    isCollaborator
    collaborators {
      userAccount {
        id
        commonName
        email
        username
      }
      teamRoles
    }
    crs {
      id
      idNumber
    }
    tdls {
      id
      idNumber
    }
  }
}
    `;

/**
 * __useGetModelSummaryQuery__
 *
 * To run a query within a React component, call `useGetModelSummaryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetModelSummaryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetModelSummaryQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetModelSummaryQuery(baseOptions: Apollo.QueryHookOptions<GetModelSummaryQuery, GetModelSummaryQueryVariables> & ({ variables: GetModelSummaryQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetModelSummaryQuery, GetModelSummaryQueryVariables>(GetModelSummaryDocument, options);
      }
export function useGetModelSummaryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetModelSummaryQuery, GetModelSummaryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetModelSummaryQuery, GetModelSummaryQueryVariables>(GetModelSummaryDocument, options);
        }
export function useGetModelSummarySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetModelSummaryQuery, GetModelSummaryQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetModelSummaryQuery, GetModelSummaryQueryVariables>(GetModelSummaryDocument, options);
        }
export type GetModelSummaryQueryHookResult = ReturnType<typeof useGetModelSummaryQuery>;
export type GetModelSummaryLazyQueryHookResult = ReturnType<typeof useGetModelSummaryLazyQuery>;
export type GetModelSummarySuspenseQueryHookResult = ReturnType<typeof useGetModelSummarySuspenseQuery>;
export type GetModelSummaryQueryResult = Apollo.QueryResult<GetModelSummaryQuery, GetModelSummaryQueryVariables>;
export const CreateShareModelPlanDocument = gql`
    mutation CreateShareModelPlan($modelPlanID: UUID!, $viewFilter: ModelViewFilter, $usernames: [String!]!, $optionalMessage: String) {
  shareModelPlan(
    modelPlanID: $modelPlanID
    viewFilter: $viewFilter
    usernames: $usernames
    optionalMessage: $optionalMessage
  )
}
    `;
export type CreateShareModelPlanMutationFn = Apollo.MutationFunction<CreateShareModelPlanMutation, CreateShareModelPlanMutationVariables>;

/**
 * __useCreateShareModelPlanMutation__
 *
 * To run a mutation, you first call `useCreateShareModelPlanMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateShareModelPlanMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createShareModelPlanMutation, { data, loading, error }] = useCreateShareModelPlanMutation({
 *   variables: {
 *      modelPlanID: // value for 'modelPlanID'
 *      viewFilter: // value for 'viewFilter'
 *      usernames: // value for 'usernames'
 *      optionalMessage: // value for 'optionalMessage'
 *   },
 * });
 */
export function useCreateShareModelPlanMutation(baseOptions?: Apollo.MutationHookOptions<CreateShareModelPlanMutation, CreateShareModelPlanMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateShareModelPlanMutation, CreateShareModelPlanMutationVariables>(CreateShareModelPlanDocument, options);
      }
export type CreateShareModelPlanMutationHookResult = ReturnType<typeof useCreateShareModelPlanMutation>;
export type CreateShareModelPlanMutationResult = Apollo.MutationResult<CreateShareModelPlanMutation>;
export type CreateShareModelPlanMutationOptions = Apollo.BaseMutationOptions<CreateShareModelPlanMutation, CreateShareModelPlanMutationVariables>;
export const GetPossibleSolutionsDocument = gql`
    query GetPossibleSolutions {
  possibleOperationalSolutions {
    id
    key
    pointsOfContact {
      id
      name
      email
      isTeam
      isPrimary
      role
    }
  }
}
    `;

/**
 * __useGetPossibleSolutionsQuery__
 *
 * To run a query within a React component, call `useGetPossibleSolutionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPossibleSolutionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPossibleSolutionsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetPossibleSolutionsQuery(baseOptions?: Apollo.QueryHookOptions<GetPossibleSolutionsQuery, GetPossibleSolutionsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPossibleSolutionsQuery, GetPossibleSolutionsQueryVariables>(GetPossibleSolutionsDocument, options);
      }
export function useGetPossibleSolutionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPossibleSolutionsQuery, GetPossibleSolutionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPossibleSolutionsQuery, GetPossibleSolutionsQueryVariables>(GetPossibleSolutionsDocument, options);
        }
export function useGetPossibleSolutionsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetPossibleSolutionsQuery, GetPossibleSolutionsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPossibleSolutionsQuery, GetPossibleSolutionsQueryVariables>(GetPossibleSolutionsDocument, options);
        }
export type GetPossibleSolutionsQueryHookResult = ReturnType<typeof useGetPossibleSolutionsQuery>;
export type GetPossibleSolutionsLazyQueryHookResult = ReturnType<typeof useGetPossibleSolutionsLazyQuery>;
export type GetPossibleSolutionsSuspenseQueryHookResult = ReturnType<typeof useGetPossibleSolutionsSuspenseQuery>;
export type GetPossibleSolutionsQueryResult = Apollo.QueryResult<GetPossibleSolutionsQuery, GetPossibleSolutionsQueryVariables>;
export const GetTaskListSubscriptionsDocument = gql`
    query GetTaskListSubscriptions($modelPlanID: UUID!) {
  taskListSectionLocks(modelPlanID: $modelPlanID) {
    modelPlanID
    section
    lockedByUserAccount {
      id
      username
      commonName
    }
    isAssessment
  }
}
    `;

/**
 * __useGetTaskListSubscriptionsQuery__
 *
 * To run a query within a React component, call `useGetTaskListSubscriptionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTaskListSubscriptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTaskListSubscriptionsQuery({
 *   variables: {
 *      modelPlanID: // value for 'modelPlanID'
 *   },
 * });
 */
export function useGetTaskListSubscriptionsQuery(baseOptions: Apollo.QueryHookOptions<GetTaskListSubscriptionsQuery, GetTaskListSubscriptionsQueryVariables> & ({ variables: GetTaskListSubscriptionsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetTaskListSubscriptionsQuery, GetTaskListSubscriptionsQueryVariables>(GetTaskListSubscriptionsDocument, options);
      }
export function useGetTaskListSubscriptionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTaskListSubscriptionsQuery, GetTaskListSubscriptionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetTaskListSubscriptionsQuery, GetTaskListSubscriptionsQueryVariables>(GetTaskListSubscriptionsDocument, options);
        }
export function useGetTaskListSubscriptionsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetTaskListSubscriptionsQuery, GetTaskListSubscriptionsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetTaskListSubscriptionsQuery, GetTaskListSubscriptionsQueryVariables>(GetTaskListSubscriptionsDocument, options);
        }
export type GetTaskListSubscriptionsQueryHookResult = ReturnType<typeof useGetTaskListSubscriptionsQuery>;
export type GetTaskListSubscriptionsLazyQueryHookResult = ReturnType<typeof useGetTaskListSubscriptionsLazyQuery>;
export type GetTaskListSubscriptionsSuspenseQueryHookResult = ReturnType<typeof useGetTaskListSubscriptionsSuspenseQuery>;
export type GetTaskListSubscriptionsQueryResult = Apollo.QueryResult<GetTaskListSubscriptionsQuery, GetTaskListSubscriptionsQueryVariables>;
export const LockTaskListSectionDocument = gql`
    mutation LockTaskListSection($modelPlanID: UUID!, $section: TaskListSection!) {
  lockTaskListSection(modelPlanID: $modelPlanID, section: $section)
}
    `;
export type LockTaskListSectionMutationFn = Apollo.MutationFunction<LockTaskListSectionMutation, LockTaskListSectionMutationVariables>;

/**
 * __useLockTaskListSectionMutation__
 *
 * To run a mutation, you first call `useLockTaskListSectionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLockTaskListSectionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [lockTaskListSectionMutation, { data, loading, error }] = useLockTaskListSectionMutation({
 *   variables: {
 *      modelPlanID: // value for 'modelPlanID'
 *      section: // value for 'section'
 *   },
 * });
 */
export function useLockTaskListSectionMutation(baseOptions?: Apollo.MutationHookOptions<LockTaskListSectionMutation, LockTaskListSectionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LockTaskListSectionMutation, LockTaskListSectionMutationVariables>(LockTaskListSectionDocument, options);
      }
export type LockTaskListSectionMutationHookResult = ReturnType<typeof useLockTaskListSectionMutation>;
export type LockTaskListSectionMutationResult = Apollo.MutationResult<LockTaskListSectionMutation>;
export type LockTaskListSectionMutationOptions = Apollo.BaseMutationOptions<LockTaskListSectionMutation, LockTaskListSectionMutationVariables>;
export const TaskListSubscriptionDocument = gql`
    subscription TaskListSubscription($modelPlanID: UUID!) {
  onLockTaskListSectionContext(modelPlanID: $modelPlanID) {
    changeType
    lockStatus {
      modelPlanID
      section
      lockedByUserAccount {
        id
        username
        commonName
      }
      isAssessment
    }
    actionType
  }
}
    `;

/**
 * __useTaskListSubscriptionSubscription__
 *
 * To run a query within a React component, call `useTaskListSubscriptionSubscription` and pass it any options that fit your needs.
 * When your component renders, `useTaskListSubscriptionSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTaskListSubscriptionSubscription({
 *   variables: {
 *      modelPlanID: // value for 'modelPlanID'
 *   },
 * });
 */
export function useTaskListSubscriptionSubscription(baseOptions: Apollo.SubscriptionHookOptions<TaskListSubscriptionSubscription, TaskListSubscriptionSubscriptionVariables> & ({ variables: TaskListSubscriptionSubscriptionVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useSubscription<TaskListSubscriptionSubscription, TaskListSubscriptionSubscriptionVariables>(TaskListSubscriptionDocument, options);
      }
export type TaskListSubscriptionSubscriptionHookResult = ReturnType<typeof useTaskListSubscriptionSubscription>;
export type TaskListSubscriptionSubscriptionResult = Apollo.SubscriptionResult<TaskListSubscriptionSubscription>;
export const UnlockTaskListSectionDocument = gql`
    mutation UnlockTaskListSection($modelPlanID: UUID!, $section: TaskListSection!) {
  unlockTaskListSection(modelPlanID: $modelPlanID, section: $section)
}
    `;
export type UnlockTaskListSectionMutationFn = Apollo.MutationFunction<UnlockTaskListSectionMutation, UnlockTaskListSectionMutationVariables>;

/**
 * __useUnlockTaskListSectionMutation__
 *
 * To run a mutation, you first call `useUnlockTaskListSectionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUnlockTaskListSectionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [unlockTaskListSectionMutation, { data, loading, error }] = useUnlockTaskListSectionMutation({
 *   variables: {
 *      modelPlanID: // value for 'modelPlanID'
 *      section: // value for 'section'
 *   },
 * });
 */
export function useUnlockTaskListSectionMutation(baseOptions?: Apollo.MutationHookOptions<UnlockTaskListSectionMutation, UnlockTaskListSectionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UnlockTaskListSectionMutation, UnlockTaskListSectionMutationVariables>(UnlockTaskListSectionDocument, options);
      }
export type UnlockTaskListSectionMutationHookResult = ReturnType<typeof useUnlockTaskListSectionMutation>;
export type UnlockTaskListSectionMutationResult = Apollo.MutationResult<UnlockTaskListSectionMutation>;
export type UnlockTaskListSectionMutationOptions = Apollo.BaseMutationOptions<UnlockTaskListSectionMutation, UnlockTaskListSectionMutationVariables>;
export const TypedReadyForReviewUserFragmentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ReadyForReviewUserFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UserAccount"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}}]} as unknown as DocumentNode<ReadyForReviewUserFragmentFragment, unknown>;
export const TypedGetAllBasicsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAllBasics"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"nameHistory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"sort"},"value":{"kind":"EnumValue","value":"DESC"}}]},{"kind":"Field","name":{"kind":"Name","value":"isCollaborator"}},{"kind":"Field","name":{"kind":"Name","value":"basics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"demoCode"}},{"kind":"Field","name":{"kind":"Name","value":"amsModelID"}},{"kind":"Field","name":{"kind":"Name","value":"modelCategory"}},{"kind":"Field","name":{"kind":"Name","value":"additionalModelCategories"}},{"kind":"Field","name":{"kind":"Name","value":"cmsCenters"}},{"kind":"Field","name":{"kind":"Name","value":"cmmiGroups"}},{"kind":"Field","name":{"kind":"Name","value":"modelType"}},{"kind":"Field","name":{"kind":"Name","value":"modelTypeOther"}},{"kind":"Field","name":{"kind":"Name","value":"problem"}},{"kind":"Field","name":{"kind":"Name","value":"goal"}},{"kind":"Field","name":{"kind":"Name","value":"testInterventions"}},{"kind":"Field","name":{"kind":"Name","value":"note"}},{"kind":"Field","name":{"kind":"Name","value":"completeICIP"}},{"kind":"Field","name":{"kind":"Name","value":"clearanceStarts"}},{"kind":"Field","name":{"kind":"Name","value":"clearanceEnds"}},{"kind":"Field","name":{"kind":"Name","value":"announced"}},{"kind":"Field","name":{"kind":"Name","value":"applicationsStart"}},{"kind":"Field","name":{"kind":"Name","value":"applicationsEnd"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodStarts"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodEnds"}},{"kind":"Field","name":{"kind":"Name","value":"wrapUpEnds"}},{"kind":"Field","name":{"kind":"Name","value":"highLevelNote"}},{"kind":"Field","name":{"kind":"Name","value":"phasedIn"}},{"kind":"Field","name":{"kind":"Name","value":"phasedInNote"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]} as unknown as DocumentNode<GetAllBasicsQuery, GetAllBasicsQueryVariables>;
export const TypedGetBasicsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetBasics"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"abbreviation"}},{"kind":"Field","name":{"kind":"Name","value":"nameHistory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"sort"},"value":{"kind":"EnumValue","value":"DESC"}}]},{"kind":"Field","name":{"kind":"Name","value":"basics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"demoCode"}},{"kind":"Field","name":{"kind":"Name","value":"amsModelID"}},{"kind":"Field","name":{"kind":"Name","value":"modelCategory"}},{"kind":"Field","name":{"kind":"Name","value":"additionalModelCategories"}},{"kind":"Field","name":{"kind":"Name","value":"cmsCenters"}},{"kind":"Field","name":{"kind":"Name","value":"cmmiGroups"}}]}}]}}]}}]} as unknown as DocumentNode<GetBasicsQuery, GetBasicsQueryVariables>;
export const TypedGetMilestonesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetMilestones"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"basics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"completeICIP"}},{"kind":"Field","name":{"kind":"Name","value":"clearanceStarts"}},{"kind":"Field","name":{"kind":"Name","value":"clearanceEnds"}},{"kind":"Field","name":{"kind":"Name","value":"announced"}},{"kind":"Field","name":{"kind":"Name","value":"applicationsStart"}},{"kind":"Field","name":{"kind":"Name","value":"applicationsEnd"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodStarts"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodEnds"}},{"kind":"Field","name":{"kind":"Name","value":"highLevelNote"}},{"kind":"Field","name":{"kind":"Name","value":"wrapUpEnds"}},{"kind":"Field","name":{"kind":"Name","value":"phasedIn"}},{"kind":"Field","name":{"kind":"Name","value":"phasedInNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ReadyForReviewUserFragment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ReadyForReviewUserFragment"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UserAccount"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}}]} as unknown as DocumentNode<GetMilestonesQuery, GetMilestonesQueryVariables>;
export const TypedGetOverviewDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetOverview"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"basics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelType"}},{"kind":"Field","name":{"kind":"Name","value":"modelTypeOther"}},{"kind":"Field","name":{"kind":"Name","value":"problem"}},{"kind":"Field","name":{"kind":"Name","value":"goal"}},{"kind":"Field","name":{"kind":"Name","value":"testInterventions"}},{"kind":"Field","name":{"kind":"Name","value":"note"}}]}}]}}]}}]} as unknown as DocumentNode<GetOverviewQuery, GetOverviewQueryVariables>;
export const TypedUpdateBasicsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateBasics"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanBasicsChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanBasics"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateBasicsMutation, UpdateBasicsMutationVariables>;
export const TypedUpdateModelPlanAndBasicsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateModelPlanAndBasics"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ModelPlanChanges"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"basicsId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"basicsChanges"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanBasicsChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateModelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}},{"kind":"Field","name":{"kind":"Name","value":"updatePlanBasics"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"basicsId"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"basicsChanges"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateModelPlanAndBasicsMutation, UpdateModelPlanAndBasicsMutationVariables>;
export const TypedGetAllBeneficiariesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAllBeneficiaries"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaries"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaries"}},{"kind":"Field","name":{"kind":"Name","value":"diseaseSpecificGroup"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiariesOther"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiariesNote"}},{"kind":"Field","name":{"kind":"Name","value":"treatDualElligibleDifferent"}},{"kind":"Field","name":{"kind":"Name","value":"treatDualElligibleDifferentHow"}},{"kind":"Field","name":{"kind":"Name","value":"treatDualElligibleDifferentNote"}},{"kind":"Field","name":{"kind":"Name","value":"excludeCertainCharacteristics"}},{"kind":"Field","name":{"kind":"Name","value":"excludeCertainCharacteristicsCriteria"}},{"kind":"Field","name":{"kind":"Name","value":"excludeCertainCharacteristicsNote"}},{"kind":"Field","name":{"kind":"Name","value":"numberPeopleImpacted"}},{"kind":"Field","name":{"kind":"Name","value":"estimateConfidence"}},{"kind":"Field","name":{"kind":"Name","value":"confidenceNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionMethod"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionOther"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryOverlap"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryOverlapNote"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRules"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRulesYes"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRulesNo"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRulesNote"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]} as unknown as DocumentNode<GetAllBeneficiariesQuery, GetAllBeneficiariesQueryVariables>;
export const TypedGetBeneficiaryIdentificationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetBeneficiaryIdentification"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaries"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaries"}},{"kind":"Field","name":{"kind":"Name","value":"diseaseSpecificGroup"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiariesOther"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiariesNote"}},{"kind":"Field","name":{"kind":"Name","value":"treatDualElligibleDifferent"}},{"kind":"Field","name":{"kind":"Name","value":"treatDualElligibleDifferentHow"}},{"kind":"Field","name":{"kind":"Name","value":"treatDualElligibleDifferentNote"}},{"kind":"Field","name":{"kind":"Name","value":"excludeCertainCharacteristics"}},{"kind":"Field","name":{"kind":"Name","value":"excludeCertainCharacteristicsCriteria"}},{"kind":"Field","name":{"kind":"Name","value":"excludeCertainCharacteristicsNote"}}]}}]}}]}}]} as unknown as DocumentNode<GetBeneficiaryIdentificationQuery, GetBeneficiaryIdentificationQueryVariables>;
export const TypedGetFrequencyDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetFrequency"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaries"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryOverlap"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryOverlapNote"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRules"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRulesYes"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRulesNo"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRulesNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetFrequencyQuery, GetFrequencyQueryVariables>;
export const TypedGetPeopleImpactedDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPeopleImpacted"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaries"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"numberPeopleImpacted"}},{"kind":"Field","name":{"kind":"Name","value":"estimateConfidence"}},{"kind":"Field","name":{"kind":"Name","value":"confidenceNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionOther"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionMethod"}}]}}]}}]}}]} as unknown as DocumentNode<GetPeopleImpactedQuery, GetPeopleImpactedQueryVariables>;
export const TypedUpdateModelPlanBeneficiariesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateModelPlanBeneficiaries"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanBeneficiariesChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanBeneficiaries"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateModelPlanBeneficiariesMutation, UpdateModelPlanBeneficiariesMutationVariables>;
export const TypedCreateCrDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateCR"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanCRCreateInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createPlanCR"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"idNumber"}},{"kind":"Field","name":{"kind":"Name","value":"dateInitiated"}},{"kind":"Field","name":{"kind":"Name","value":"dateImplemented"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"note"}}]}}]}}]} as unknown as DocumentNode<CreateCrMutation, CreateCrMutationVariables>;
export const TypedCreateTdlDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateTDL"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanTDLCreateInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createPlanTDL"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"idNumber"}},{"kind":"Field","name":{"kind":"Name","value":"dateInitiated"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"note"}}]}}]}}]} as unknown as DocumentNode<CreateTdlMutation, CreateTdlMutationVariables>;
export const TypedDeleteCrDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteCR"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deletePlanCR"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"idNumber"}},{"kind":"Field","name":{"kind":"Name","value":"dateInitiated"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"note"}}]}}]}}]} as unknown as DocumentNode<DeleteCrMutation, DeleteCrMutationVariables>;
export const TypedDeleteTdlDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteTDL"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deletePlanTDL"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"idNumber"}},{"kind":"Field","name":{"kind":"Name","value":"dateInitiated"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"note"}}]}}]}}]} as unknown as DocumentNode<DeleteTdlMutation, DeleteTdlMutationVariables>;
export const TypedGetCrDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCR"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"planCR"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"idNumber"}},{"kind":"Field","name":{"kind":"Name","value":"dateInitiated"}},{"kind":"Field","name":{"kind":"Name","value":"dateImplemented"}},{"kind":"Field","name":{"kind":"Name","value":"note"}}]}}]}}]} as unknown as DocumentNode<GetCrQuery, GetCrQueryVariables>;
export const TypedGetCrtdLsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCRTDLs"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"isCollaborator"}},{"kind":"Field","name":{"kind":"Name","value":"crs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"idNumber"}},{"kind":"Field","name":{"kind":"Name","value":"dateInitiated"}},{"kind":"Field","name":{"kind":"Name","value":"dateImplemented"}},{"kind":"Field","name":{"kind":"Name","value":"note"}}]}},{"kind":"Field","name":{"kind":"Name","value":"tdls"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"idNumber"}},{"kind":"Field","name":{"kind":"Name","value":"dateInitiated"}},{"kind":"Field","name":{"kind":"Name","value":"note"}}]}}]}}]}}]} as unknown as DocumentNode<GetCrtdLsQuery, GetCrtdLsQueryVariables>;
export const TypedGetTdlDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetTDL"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"planTDL"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"idNumber"}},{"kind":"Field","name":{"kind":"Name","value":"dateInitiated"}},{"kind":"Field","name":{"kind":"Name","value":"note"}}]}}]}}]} as unknown as DocumentNode<GetTdlQuery, GetTdlQueryVariables>;
export const TypedUpdateCrDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCR"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanCRChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanCR"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"idNumber"}},{"kind":"Field","name":{"kind":"Name","value":"dateInitiated"}},{"kind":"Field","name":{"kind":"Name","value":"dateImplemented"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"note"}}]}}]}}]} as unknown as DocumentNode<UpdateCrMutation, UpdateCrMutationVariables>;
export const TypedUpdateTdlDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateTDL"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanTDLChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanTDL"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"idNumber"}},{"kind":"Field","name":{"kind":"Name","value":"dateInitiated"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"note"}}]}}]}}]} as unknown as DocumentNode<UpdateTdlMutation, UpdateTdlMutationVariables>;
export const TypedGetChangeHistoryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetChangeHistory"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"translatedAuditCollection"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"modelPlanID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"tableName"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"action"}},{"kind":"Field","name":{"kind":"Name","value":"actorName"}},{"kind":"Field","name":{"kind":"Name","value":"translatedFields"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"changeType"}},{"kind":"Field","name":{"kind":"Name","value":"dataType"}},{"kind":"Field","name":{"kind":"Name","value":"fieldName"}},{"kind":"Field","name":{"kind":"Name","value":"fieldNameTranslated"}},{"kind":"Field","name":{"kind":"Name","value":"referenceLabel"}},{"kind":"Field","name":{"kind":"Name","value":"questionType"}},{"kind":"Field","name":{"kind":"Name","value":"notApplicableQuestions"}},{"kind":"Field","name":{"kind":"Name","value":"old"}},{"kind":"Field","name":{"kind":"Name","value":"oldTranslated"}},{"kind":"Field","name":{"kind":"Name","value":"new"}},{"kind":"Field","name":{"kind":"Name","value":"newTranslated"}}]}},{"kind":"Field","name":{"kind":"Name","value":"metaData"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TranslatedAuditMetaBaseStruct"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"tableName"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TranslatedAuditMetaGeneric"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"tableName"}},{"kind":"Field","name":{"kind":"Name","value":"relation"}},{"kind":"Field","name":{"kind":"Name","value":"relationContent"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TranslatedAuditMetaDiscussionReply"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"tableName"}},{"kind":"Field","name":{"kind":"Name","value":"discussionID"}},{"kind":"Field","name":{"kind":"Name","value":"discussionContent"}},{"kind":"Field","name":{"kind":"Name","value":"numberOfReplies"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TranslatedAuditMetaOperationalNeed"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"tableName"}},{"kind":"Field","name":{"kind":"Name","value":"needName"}},{"kind":"Field","name":{"kind":"Name","value":"isOther"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TranslatedAuditMetaOperationalSolution"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"tableName"}},{"kind":"Field","name":{"kind":"Name","value":"needName"}},{"kind":"Field","name":{"kind":"Name","value":"needIsOther"}},{"kind":"Field","name":{"kind":"Name","value":"solutionName"}},{"kind":"Field","name":{"kind":"Name","value":"solutionOtherHeader"}},{"kind":"Field","name":{"kind":"Name","value":"solutionIsOther"}},{"kind":"Field","name":{"kind":"Name","value":"solutionStatus"}},{"kind":"Field","name":{"kind":"Name","value":"solutionMustStart"}},{"kind":"Field","name":{"kind":"Name","value":"solutionMustFinish"}},{"kind":"Field","name":{"kind":"Name","value":"numberOfSubtasks"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TranslatedAuditMetaOperationalSolutionSubtask"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"tableName"}},{"kind":"Field","name":{"kind":"Name","value":"needName"}},{"kind":"Field","name":{"kind":"Name","value":"needIsOther"}},{"kind":"Field","name":{"kind":"Name","value":"solutionName"}},{"kind":"Field","name":{"kind":"Name","value":"solutionOtherHeader"}},{"kind":"Field","name":{"kind":"Name","value":"solutionIsOther"}},{"kind":"Field","name":{"kind":"Name","value":"subtaskName"}},{"kind":"Field","name":{"kind":"Name","value":"numberOfSubtasks"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TranslatedAuditMetaDocumentSolutionLink"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"tableName"}},{"kind":"Field","name":{"kind":"Name","value":"solutionName"}},{"kind":"Field","name":{"kind":"Name","value":"solutionOtherHeader"}},{"kind":"Field","name":{"kind":"Name","value":"solutionIsOther"}},{"kind":"Field","name":{"kind":"Name","value":"needName"}},{"kind":"Field","name":{"kind":"Name","value":"needIsOther"}},{"kind":"Field","name":{"kind":"Name","value":"documentName"}},{"kind":"Field","name":{"kind":"Name","value":"documentType"}},{"kind":"Field","name":{"kind":"Name","value":"documentOtherType"}},{"kind":"Field","name":{"kind":"Name","value":"documentVisibility"}},{"kind":"Field","name":{"kind":"Name","value":"documentNote"}},{"kind":"Field","name":{"kind":"Name","value":"documentURL"}},{"kind":"Field","name":{"kind":"Name","value":"documentID"}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetChangeHistoryQuery, GetChangeHistoryQueryVariables>;
export const TypedCreateModelPlanCollaboratorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateModelPlanCollaborator"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanCollaboratorCreateInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createPlanCollaborator"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamRoles"}},{"kind":"Field","name":{"kind":"Name","value":"userAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userID"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}}]}}]}}]} as unknown as DocumentNode<CreateModelPlanCollaboratorMutation, CreateModelPlanCollaboratorMutationVariables>;
export const TypedDeleteModelPlanCollaboratorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteModelPlanCollaborator"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deletePlanCollaborator"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"teamRoles"}},{"kind":"Field","name":{"kind":"Name","value":"userAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userID"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}}]}}]}}]} as unknown as DocumentNode<DeleteModelPlanCollaboratorMutation, DeleteModelPlanCollaboratorMutationVariables>;
export const TypedGetIndividualModelPlanCollaboratorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetIndividualModelPlanCollaborator"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"planCollaboratorByID"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"userAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userID"}},{"kind":"Field","name":{"kind":"Name","value":"teamRoles"}}]}}]}}]} as unknown as DocumentNode<GetIndividualModelPlanCollaboratorQuery, GetIndividualModelPlanCollaboratorQueryVariables>;
export const TypedGetIsCollaboratorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetIsCollaborator"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"isCollaborator"}}]}}]}}]} as unknown as DocumentNode<GetIsCollaboratorQuery, GetIsCollaboratorQueryVariables>;
export const TypedGetModelCollaboratorsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetModelCollaborators"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"collaborators"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"userAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userID"}},{"kind":"Field","name":{"kind":"Name","value":"teamRoles"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetModelCollaboratorsQuery, GetModelCollaboratorsQueryVariables>;
export const TypedUpdateModelPlanCollaboratorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateModelPlanCollaborator"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"newRole"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"TeamRole"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanCollaborator"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"newRoles"},"value":{"kind":"Variable","name":{"kind":"Name","value":"newRole"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamRoles"}},{"kind":"Field","name":{"kind":"Name","value":"userAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userID"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}}]}}]}}]} as unknown as DocumentNode<UpdateModelPlanCollaboratorMutation, UpdateModelPlanCollaboratorMutationVariables>;
export const TypedCreateModelPlanDiscussionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateModelPlanDiscussion"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanDiscussionCreateInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createPlanDiscussion"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"content"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rawContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}}]}}]}}]} as unknown as DocumentNode<CreateModelPlanDiscussionMutation, CreateModelPlanDiscussionMutationVariables>;
export const TypedGetModelPlanDiscussionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetModelPlanDiscussions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"isCollaborator"}},{"kind":"Field","name":{"kind":"Name","value":"discussions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"content"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rawContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"}},{"kind":"Field","name":{"kind":"Name","value":"userRoleDescription"}},{"kind":"Field","name":{"kind":"Name","value":"isAssessment"}},{"kind":"Field","name":{"kind":"Name","value":"createdByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"replies"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"discussionID"}},{"kind":"Field","name":{"kind":"Name","value":"content"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rawContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userRole"}},{"kind":"Field","name":{"kind":"Name","value":"userRoleDescription"}},{"kind":"Field","name":{"kind":"Name","value":"isAssessment"}},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"createdByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetModelPlanDiscussionsQuery, GetModelPlanDiscussionsQueryVariables>;
export const TypedGetMostRecentRoleSelectionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetMostRecentRoleSelection"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"mostRecentDiscussionRoleSelection"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userRole"}},{"kind":"Field","name":{"kind":"Name","value":"userRoleDescription"}}]}}]}}]} as unknown as DocumentNode<GetMostRecentRoleSelectionQuery, GetMostRecentRoleSelectionQueryVariables>;
export const TypedDeleteModelPlanDocumentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteModelPlanDocument"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deletePlanDocument"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}]}}]} as unknown as DocumentNode<DeleteModelPlanDocumentMutation, DeleteModelPlanDocumentMutationVariables>;
export const TypedGetModelPlanDocumentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetModelPlanDocument"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"planDocument"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"bucket"}},{"kind":"Field","name":{"kind":"Name","value":"fileKey"}},{"kind":"Field","name":{"kind":"Name","value":"virusScanned"}},{"kind":"Field","name":{"kind":"Name","value":"virusClean"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"fileSize"}},{"kind":"Field","name":{"kind":"Name","value":"restricted"}},{"kind":"Field","name":{"kind":"Name","value":"documentType"}},{"kind":"Field","name":{"kind":"Name","value":"otherType"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}}]}}]}}]} as unknown as DocumentNode<GetModelPlanDocumentQuery, GetModelPlanDocumentQueryVariables>;
export const TypedGetModelPlanDocumentsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetModelPlanDocuments"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"isCollaborator"}},{"kind":"Field","name":{"kind":"Name","value":"documents"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"virusScanned"}},{"kind":"Field","name":{"kind":"Name","value":"virusClean"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"downloadUrl"}},{"kind":"Field","name":{"kind":"Name","value":"restricted"}},{"kind":"Field","name":{"kind":"Name","value":"documentType"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"optionalNotes"}},{"kind":"Field","name":{"kind":"Name","value":"otherType"}},{"kind":"Field","name":{"kind":"Name","value":"numLinkedSolutions"}},{"kind":"Field","name":{"kind":"Name","value":"isLink"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]}}]} as unknown as DocumentNode<GetModelPlanDocumentsQuery, GetModelPlanDocumentsQueryVariables>;
export const TypedLinkNewPlanDocumentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"LinkNewPlanDocument"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanDocumentLinkInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"linkNewPlanDocument"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<LinkNewPlanDocumentMutation, LinkNewPlanDocumentMutationVariables>;
export const TypedUploadNewPlanDocumentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UploadNewPlanDocument"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanDocumentInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"uploadNewPlanDocument"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UploadNewPlanDocumentMutation, UploadNewPlanDocumentMutationVariables>;
export const TypedAddPlanFavoriteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AddPlanFavorite"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"addPlanFavorite"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"modelPlanID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"userID"}}]}}]}}]} as unknown as DocumentNode<AddPlanFavoriteMutation, AddPlanFavoriteMutationVariables>;
export const TypedDeletePlanFavoriteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeletePlanFavorite"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deletePlanFavorite"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"modelPlanID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"userID"}}]}}]}}]} as unknown as DocumentNode<DeletePlanFavoriteMutation, DeletePlanFavoriteMutationVariables>;
export const TypedCreatReportAProblemDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreatReportAProblem"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ReportAProblemInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"reportAProblem"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}]}]}}]} as unknown as DocumentNode<CreatReportAProblemMutation, CreatReportAProblemMutationVariables>;
export const TypedCreatSendFeedbackDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreatSendFeedback"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"SendFeedbackEmailInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"sendFeedbackEmail"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}]}]}}]} as unknown as DocumentNode<CreatSendFeedbackMutation, CreatSendFeedbackMutationVariables>;
export const TypedGetAllGeneralCharacteristicsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAllGeneralCharacteristics"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"generalCharacteristics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"isNewModel"}},{"kind":"Field","name":{"kind":"Name","value":"existingModel"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModel"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelWhyHow"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelHow"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelNote"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelWhich"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"names"}}]}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelOtherSpecify"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelOtherSelected"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelOtherOption"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPrecondition"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionWhich"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"names"}}]}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionOtherSpecify"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionOtherSelected"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionOtherOption"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionWhyHow"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionNote"}},{"kind":"Field","name":{"kind":"Name","value":"hasComponentsOrTracks"}},{"kind":"Field","name":{"kind":"Name","value":"hasComponentsOrTracksDiffer"}},{"kind":"Field","name":{"kind":"Name","value":"hasComponentsOrTracksNote"}},{"kind":"Field","name":{"kind":"Name","value":"agencyOrStateHelp"}},{"kind":"Field","name":{"kind":"Name","value":"agencyOrStateHelpOther"}},{"kind":"Field","name":{"kind":"Name","value":"agencyOrStateHelpNote"}},{"kind":"Field","name":{"kind":"Name","value":"alternativePaymentModelTypes"}},{"kind":"Field","name":{"kind":"Name","value":"alternativePaymentModelNote"}},{"kind":"Field","name":{"kind":"Name","value":"keyCharacteristics"}},{"kind":"Field","name":{"kind":"Name","value":"keyCharacteristicsOther"}},{"kind":"Field","name":{"kind":"Name","value":"keyCharacteristicsNote"}},{"kind":"Field","name":{"kind":"Name","value":"collectPlanBids"}},{"kind":"Field","name":{"kind":"Name","value":"collectPlanBidsNote"}},{"kind":"Field","name":{"kind":"Name","value":"managePartCDEnrollment"}},{"kind":"Field","name":{"kind":"Name","value":"managePartCDEnrollmentNote"}},{"kind":"Field","name":{"kind":"Name","value":"planContractUpdated"}},{"kind":"Field","name":{"kind":"Name","value":"planContractUpdatedNote"}},{"kind":"Field","name":{"kind":"Name","value":"careCoordinationInvolved"}},{"kind":"Field","name":{"kind":"Name","value":"careCoordinationInvolvedDescription"}},{"kind":"Field","name":{"kind":"Name","value":"careCoordinationInvolvedNote"}},{"kind":"Field","name":{"kind":"Name","value":"additionalServicesInvolved"}},{"kind":"Field","name":{"kind":"Name","value":"additionalServicesInvolvedDescription"}},{"kind":"Field","name":{"kind":"Name","value":"additionalServicesInvolvedNote"}},{"kind":"Field","name":{"kind":"Name","value":"communityPartnersInvolved"}},{"kind":"Field","name":{"kind":"Name","value":"communityPartnersInvolvedDescription"}},{"kind":"Field","name":{"kind":"Name","value":"communityPartnersInvolvedNote"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargeted"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedTypes"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesStatesAndTerritories"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesRegionTypes"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedTypesOther"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedAppliedTo"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedAppliedToOther"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedNote"}},{"kind":"Field","name":{"kind":"Name","value":"participationOptions"}},{"kind":"Field","name":{"kind":"Name","value":"participationOptionsNote"}},{"kind":"Field","name":{"kind":"Name","value":"agreementTypes"}},{"kind":"Field","name":{"kind":"Name","value":"agreementTypesOther"}},{"kind":"Field","name":{"kind":"Name","value":"multiplePatricipationAgreementsNeeded"}},{"kind":"Field","name":{"kind":"Name","value":"multiplePatricipationAgreementsNeededNote"}},{"kind":"Field","name":{"kind":"Name","value":"rulemakingRequired"}},{"kind":"Field","name":{"kind":"Name","value":"rulemakingRequiredDescription"}},{"kind":"Field","name":{"kind":"Name","value":"rulemakingRequiredNote"}},{"kind":"Field","name":{"kind":"Name","value":"authorityAllowances"}},{"kind":"Field","name":{"kind":"Name","value":"authorityAllowancesOther"}},{"kind":"Field","name":{"kind":"Name","value":"authorityAllowancesNote"}},{"kind":"Field","name":{"kind":"Name","value":"waiversRequired"}},{"kind":"Field","name":{"kind":"Name","value":"waiversRequiredTypes"}},{"kind":"Field","name":{"kind":"Name","value":"waiversRequiredNote"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]} as unknown as DocumentNode<GetAllGeneralCharacteristicsQuery, GetAllGeneralCharacteristicsQueryVariables>;
export const TypedGetAuthorityDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAuthority"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"generalCharacteristics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"rulemakingRequired"}},{"kind":"Field","name":{"kind":"Name","value":"rulemakingRequiredDescription"}},{"kind":"Field","name":{"kind":"Name","value":"rulemakingRequiredNote"}},{"kind":"Field","name":{"kind":"Name","value":"authorityAllowances"}},{"kind":"Field","name":{"kind":"Name","value":"authorityAllowancesOther"}},{"kind":"Field","name":{"kind":"Name","value":"authorityAllowancesNote"}},{"kind":"Field","name":{"kind":"Name","value":"waiversRequired"}},{"kind":"Field","name":{"kind":"Name","value":"waiversRequiredTypes"}},{"kind":"Field","name":{"kind":"Name","value":"waiversRequiredNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]} as unknown as DocumentNode<GetAuthorityQuery, GetAuthorityQueryVariables>;
export const TypedGetGeneralCharacteristicsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetGeneralCharacteristics"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"generalCharacteristics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"isNewModel"}},{"kind":"Field","name":{"kind":"Name","value":"currentModelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"existingModelID"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModel"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelWhyHow"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelHow"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelNote"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelWhich"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"links"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"existingModelID"}},{"kind":"Field","name":{"kind":"Name","value":"currentModelPlanID"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelOtherSpecify"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelOtherSelected"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelOtherOption"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPrecondition"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionWhich"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"links"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"existingModelID"}},{"kind":"Field","name":{"kind":"Name","value":"currentModelPlanID"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionOtherSpecify"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionOtherSelected"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionOtherOption"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionWhyHow"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionNote"}},{"kind":"Field","name":{"kind":"Name","value":"hasComponentsOrTracks"}},{"kind":"Field","name":{"kind":"Name","value":"hasComponentsOrTracksDiffer"}},{"kind":"Field","name":{"kind":"Name","value":"hasComponentsOrTracksNote"}}]}}]}}]}}]} as unknown as DocumentNode<GetGeneralCharacteristicsQuery, GetGeneralCharacteristicsQueryVariables>;
export const TypedGetInvolvementsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetInvolvements"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"generalCharacteristics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"careCoordinationInvolved"}},{"kind":"Field","name":{"kind":"Name","value":"careCoordinationInvolvedDescription"}},{"kind":"Field","name":{"kind":"Name","value":"careCoordinationInvolvedNote"}},{"kind":"Field","name":{"kind":"Name","value":"additionalServicesInvolved"}},{"kind":"Field","name":{"kind":"Name","value":"additionalServicesInvolvedDescription"}},{"kind":"Field","name":{"kind":"Name","value":"additionalServicesInvolvedNote"}},{"kind":"Field","name":{"kind":"Name","value":"communityPartnersInvolved"}},{"kind":"Field","name":{"kind":"Name","value":"communityPartnersInvolvedDescription"}},{"kind":"Field","name":{"kind":"Name","value":"communityPartnersInvolvedNote"}}]}}]}}]}}]} as unknown as DocumentNode<GetInvolvementsQuery, GetInvolvementsQueryVariables>;
export const TypedGetKeyCharacteristicsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetKeyCharacteristics"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"generalCharacteristics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"agencyOrStateHelp"}},{"kind":"Field","name":{"kind":"Name","value":"agencyOrStateHelpOther"}},{"kind":"Field","name":{"kind":"Name","value":"agencyOrStateHelpNote"}},{"kind":"Field","name":{"kind":"Name","value":"alternativePaymentModelTypes"}},{"kind":"Field","name":{"kind":"Name","value":"alternativePaymentModelNote"}},{"kind":"Field","name":{"kind":"Name","value":"keyCharacteristics"}},{"kind":"Field","name":{"kind":"Name","value":"keyCharacteristicsNote"}},{"kind":"Field","name":{"kind":"Name","value":"keyCharacteristicsOther"}},{"kind":"Field","name":{"kind":"Name","value":"collectPlanBids"}},{"kind":"Field","name":{"kind":"Name","value":"collectPlanBidsNote"}},{"kind":"Field","name":{"kind":"Name","value":"managePartCDEnrollment"}},{"kind":"Field","name":{"kind":"Name","value":"managePartCDEnrollmentNote"}},{"kind":"Field","name":{"kind":"Name","value":"planContractUpdated"}},{"kind":"Field","name":{"kind":"Name","value":"planContractUpdatedNote"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetKeyCharacteristicsQuery, GetKeyCharacteristicsQueryVariables>;
export const TypedGetTargetsAndOptionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetTargetsAndOptions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"generalCharacteristics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargeted"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedTypes"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesStatesAndTerritories"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesRegionTypes"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedTypesOther"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedAppliedTo"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedAppliedToOther"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedNote"}},{"kind":"Field","name":{"kind":"Name","value":"participationOptions"}},{"kind":"Field","name":{"kind":"Name","value":"participationOptionsNote"}},{"kind":"Field","name":{"kind":"Name","value":"agreementTypes"}},{"kind":"Field","name":{"kind":"Name","value":"agreementTypesOther"}},{"kind":"Field","name":{"kind":"Name","value":"multiplePatricipationAgreementsNeeded"}},{"kind":"Field","name":{"kind":"Name","value":"multiplePatricipationAgreementsNeededNote"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetTargetsAndOptionsQuery, GetTargetsAndOptionsQueryVariables>;
export const TypedUpdateExistingModelLinksDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateExistingModelLinks"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fieldName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ExisitingModelLinkFieldType"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"existingModelIDs"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"currentModelPlanIDs"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateExistingModelLinks"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"modelPlanID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}}},{"kind":"Argument","name":{"kind":"Name","value":"fieldName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fieldName"}}},{"kind":"Argument","name":{"kind":"Name","value":"existingModelIDs"},"value":{"kind":"Variable","name":{"kind":"Name","value":"existingModelIDs"}}},{"kind":"Argument","name":{"kind":"Name","value":"currentModelPlanIDs"},"value":{"kind":"Variable","name":{"kind":"Name","value":"currentModelPlanIDs"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"links"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"existingModelID"}},{"kind":"Field","name":{"kind":"Name","value":"model"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ExistingModel"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"stage"}},{"kind":"Field","name":{"kind":"Name","value":"numberOfParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"keywords"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ModelPlan"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"abbreviation"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<UpdateExistingModelLinksMutation, UpdateExistingModelLinksMutationVariables>;
export const TypedUpdatePlanGeneralCharacteristicsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdatePlanGeneralCharacteristics"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanGeneralCharacteristicsChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanGeneralCharacteristics"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdatePlanGeneralCharacteristicsMutation, UpdatePlanGeneralCharacteristicsMutationVariables>;
export const TypedGetHomepageSettingsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetHomepageSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userViewCustomization"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"viewCustomization"}},{"kind":"Field","name":{"kind":"Name","value":"possibleOperationalSolutions"}}]}}]}}]} as unknown as DocumentNode<GetHomepageSettingsQuery, GetHomepageSettingsQueryVariables>;
export const TypedUpdateHomepageSettingsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateHomepageSettings"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UserViewCustomizationChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateUserViewCustomization"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateHomepageSettingsMutation, UpdateHomepageSettingsMutationVariables>;
export const TypedCreateDocumentSolutionLinksDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateDocumentSolutionLinks"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"solutionID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"documentIDs"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createPlanDocumentSolutionLinks"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"solutionID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"solutionID"}}},{"kind":"Argument","name":{"kind":"Name","value":"documentIDs"},"value":{"kind":"Variable","name":{"kind":"Name","value":"documentIDs"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<CreateDocumentSolutionLinksMutation, CreateDocumentSolutionLinksMutationVariables>;
export const TypedCreateOperationalSolutionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateOperationalSolution"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"operationalNeedID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"solutionType"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OperationalSolutionKey"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"OperationalSolutionChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createOperationalSolution"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"operationalNeedID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"operationalNeedID"}}},{"kind":"Argument","name":{"kind":"Name","value":"solutionType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"solutionType"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"nameOther"}},{"kind":"Field","name":{"kind":"Name","value":"needed"}},{"kind":"Field","name":{"kind":"Name","value":"key"}}]}}]}}]} as unknown as DocumentNode<CreateOperationalSolutionMutation, CreateOperationalSolutionMutationVariables>;
export const TypedCreateOperationalSolutionSubtasksDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateOperationalSolutionSubtasks"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"solutionID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"inputs"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateOperationalSolutionSubtaskInput"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createOperationalSolutionSubtasks"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"solutionID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"solutionID"}}},{"kind":"Argument","name":{"kind":"Name","value":"inputs"},"value":{"kind":"Variable","name":{"kind":"Name","value":"inputs"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]} as unknown as DocumentNode<CreateOperationalSolutionSubtasksMutation, CreateOperationalSolutionSubtasksMutationVariables>;
export const TypedDeleteDocumentSolutionLinkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteDocumentSolutionLink"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"solutionID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"documentIDs"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"removePlanDocumentSolutionLinks"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"solutionID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"solutionID"}}},{"kind":"Argument","name":{"kind":"Name","value":"documentIDs"},"value":{"kind":"Variable","name":{"kind":"Name","value":"documentIDs"}}}]}]}}]} as unknown as DocumentNode<DeleteDocumentSolutionLinkMutation, DeleteDocumentSolutionLinkMutationVariables>;
export const TypedDeleteOperationalSolutionSubtaskDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteOperationalSolutionSubtask"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteOperationalSolutionSubtask"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}]}}]} as unknown as DocumentNode<DeleteOperationalSolutionSubtaskMutation, DeleteOperationalSolutionSubtaskMutationVariables>;
export const TypedGetModelsBySolutionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetModelsBySolution"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"operationalSolutionKey"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"OperationalSolutionKey"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlansByOperationalSolutionKey"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"operationalSolutionKey"},"value":{"kind":"Variable","name":{"kind":"Name","value":"operationalSolutionKey"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"abbreviation"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"modelBySolutionStatus"}},{"kind":"Field","name":{"kind":"Name","value":"basics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelCategory"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodStarts"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodEnds"}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetModelsBySolutionQuery, GetModelsBySolutionQueryVariables>;
export const TypedGetOperationalNeedDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetOperationalNeed"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"includeNotNeeded"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}},"defaultValue":{"kind":"BooleanValue","value":true}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"operationalNeed"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"nameOther"}},{"kind":"Field","name":{"kind":"Name","value":"needed"}},{"kind":"Field","name":{"kind":"Name","value":"solutions"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"includeNotNeeded"},"value":{"kind":"Variable","name":{"kind":"Name","value":"includeNotNeeded"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"pocName"}},{"kind":"Field","name":{"kind":"Name","value":"pocEmail"}},{"kind":"Field","name":{"kind":"Name","value":"needed"}},{"kind":"Field","name":{"kind":"Name","value":"nameOther"}},{"kind":"Field","name":{"kind":"Name","value":"isOther"}},{"kind":"Field","name":{"kind":"Name","value":"isCommonSolution"}},{"kind":"Field","name":{"kind":"Name","value":"otherHeader"}},{"kind":"Field","name":{"kind":"Name","value":"mustStartDts"}},{"kind":"Field","name":{"kind":"Name","value":"mustFinishDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]} as unknown as DocumentNode<GetOperationalNeedQuery, GetOperationalNeedQueryVariables>;
export const TypedGetOperationalNeedAnswerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetOperationalNeedAnswer"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"generalCharacteristics"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"participantsAndProviders"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"beneficiaries"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"opsEvalAndLearning"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"payments"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"managePartCDEnrollment"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"collectPlanBids"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"planContractUpdated"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"agreementTypes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"recruitmentMethod"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"selectionMethod"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"communicationMethod"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"providerOverlap"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"participantsIds"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"beneficiaryOverlap"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"helpdeskUse"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"iddocSupport"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"benchmarkForPerformance"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"appealPerformance"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"appealFeedback"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"appealPayments"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"appealOther"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"evaluationApproaches"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"dataNeededForMonitoring"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"dataToSendParticicipants"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"modelLearningSystems"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"developNewQualityMeasures"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"payType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"shouldAnyProvidersExcludedFFSSystems"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"nonClaimsPayments"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"willRecoverPayments"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"generalCharacteristics"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"generalCharacteristics"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"managePartCDEnrollment"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"managePartCDEnrollment"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"collectPlanBids"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"collectPlanBids"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"planContractUpdated"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"planContractUpdated"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"agreementTypes"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"agreementTypes"}}}]}]}]}},{"kind":"Field","name":{"kind":"Name","value":"participantsAndProviders"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"participantsAndProviders"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"recruitmentMethod"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"recruitmentMethod"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"selectionMethod"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"selectionMethod"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"communicationMethod"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"communicationMethod"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"providerOverlap"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"providerOverlap"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"participantsIds"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"participantsIds"}}}]}]}]}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaries"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"beneficiaries"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"beneficiaryOverlap"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"beneficiaryOverlap"}}}]}]}]}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"opsEvalAndLearning"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"helpdeskUse"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"helpdeskUse"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"iddocSupport"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"iddocSupport"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"benchmarkForPerformance"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"benchmarkForPerformance"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"appealPerformance"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"appealPerformance"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"appealFeedback"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"appealFeedback"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"appealPayments"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"appealPayments"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"appealOther"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"appealOther"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"evaluationApproaches"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"evaluationApproaches"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoring"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"dataNeededForMonitoring"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"dataToSendParticicipants"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"dataToSendParticicipants"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"modelLearningSystems"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"modelLearningSystems"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"developNewQualityMeasures"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"developNewQualityMeasures"}}}]}]}]}},{"kind":"Field","name":{"kind":"Name","value":"payments"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"payments"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"payType"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"payType"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"shouldAnyProvidersExcludedFFSSystems"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"shouldAnyProvidersExcludedFFSSystems"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"nonClaimsPayments"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"nonClaimsPayments"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"willRecoverPayments"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"willRecoverPayments"}}}]}]}]}}]}}]}}]} as unknown as DocumentNode<GetOperationalNeedAnswerQuery, GetOperationalNeedAnswerQueryVariables>;
export const TypedGetOperationalNeedsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetOperationalNeeds"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"isCollaborator"}},{"kind":"Field","name":{"kind":"Name","value":"opSolutionLastModifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"nameOther"}},{"kind":"Field","name":{"kind":"Name","value":"needed"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"solutions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"mustStartDts"}},{"kind":"Field","name":{"kind":"Name","value":"mustFinishDts"}},{"kind":"Field","name":{"kind":"Name","value":"needed"}},{"kind":"Field","name":{"kind":"Name","value":"nameOther"}},{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"otherHeader"}},{"kind":"Field","name":{"kind":"Name","value":"operationalSolutionSubtasks"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}},{"kind":"Field","name":{"kind":"Name","value":"pocEmail"}},{"kind":"Field","name":{"kind":"Name","value":"pocName"}},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetOperationalNeedsQuery, GetOperationalNeedsQueryVariables>;
export const TypedGetOperationalSolutionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetOperationalSolution"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"operationalSolution"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"needed"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"nameOther"}},{"kind":"Field","name":{"kind":"Name","value":"pocName"}},{"kind":"Field","name":{"kind":"Name","value":"pocEmail"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"isOther"}},{"kind":"Field","name":{"kind":"Name","value":"isCommonSolution"}},{"kind":"Field","name":{"kind":"Name","value":"otherHeader"}},{"kind":"Field","name":{"kind":"Name","value":"mustFinishDts"}},{"kind":"Field","name":{"kind":"Name","value":"mustStartDts"}},{"kind":"Field","name":{"kind":"Name","value":"documents"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"virusScanned"}},{"kind":"Field","name":{"kind":"Name","value":"virusClean"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"downloadUrl"}},{"kind":"Field","name":{"kind":"Name","value":"restricted"}},{"kind":"Field","name":{"kind":"Name","value":"documentType"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"optionalNotes"}},{"kind":"Field","name":{"kind":"Name","value":"otherType"}},{"kind":"Field","name":{"kind":"Name","value":"numLinkedSolutions"}},{"kind":"Field","name":{"kind":"Name","value":"isLink"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalSolutionSubtasks"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]} as unknown as DocumentNode<GetOperationalSolutionQuery, GetOperationalSolutionQueryVariables>;
export const TypedGetOperationalSolutionSubtasksDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetOperationalSolutionSubtasks"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"operationalSolution"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"operationalSolutionSubtasks"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"solutionID"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]} as unknown as DocumentNode<GetOperationalSolutionSubtasksQuery, GetOperationalSolutionSubtasksQueryVariables>;
export const TypedGetPossibleOperationalSolutionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPossibleOperationalSolutions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"possibleOperationalSolutions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"key"}}]}}]}}]} as unknown as DocumentNode<GetPossibleOperationalSolutionsQuery, GetPossibleOperationalSolutionsQueryVariables>;
export const TypedUpdateCustomOperationalNeedDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCustomOperationalNeed"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"customNeedType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"needed"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"addOrUpdateCustomOperationalNeed"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"modelPlanID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}}},{"kind":"Argument","name":{"kind":"Name","value":"customNeedType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"customNeedType"}}},{"kind":"Argument","name":{"kind":"Name","value":"needed"},"value":{"kind":"Variable","name":{"kind":"Name","value":"needed"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"nameOther"}},{"kind":"Field","name":{"kind":"Name","value":"needed"}},{"kind":"Field","name":{"kind":"Name","value":"key"}}]}}]}}]} as unknown as DocumentNode<UpdateCustomOperationalNeedMutation, UpdateCustomOperationalNeedMutationVariables>;
export const TypedUpdateCustomOperationalNeedByIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateCustomOperationalNeedById"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"customNeedType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"needed"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateCustomOperationalNeedByID"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"customNeedType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"customNeedType"}}},{"kind":"Argument","name":{"kind":"Name","value":"needed"},"value":{"kind":"Variable","name":{"kind":"Name","value":"needed"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"nameOther"}},{"kind":"Field","name":{"kind":"Name","value":"needed"}},{"kind":"Field","name":{"kind":"Name","value":"key"}}]}}]}}]} as unknown as DocumentNode<UpdateCustomOperationalNeedByIdMutation, UpdateCustomOperationalNeedByIdMutationVariables>;
export const TypedUpdateOperationalSolutionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateOperationalSolution"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"OperationalSolutionChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateOperationalSolution"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"nameOther"}},{"kind":"Field","name":{"kind":"Name","value":"needed"}},{"kind":"Field","name":{"kind":"Name","value":"key"}}]}}]}}]} as unknown as DocumentNode<UpdateOperationalSolutionMutation, UpdateOperationalSolutionMutationVariables>;
export const TypedUpdateOperationalSolutionSubtasksDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateOperationalSolutionSubtasks"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"inputs"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UpdateOperationalSolutionSubtaskInput"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateOperationalSolutionSubtasks"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"inputs"},"value":{"kind":"Variable","name":{"kind":"Name","value":"inputs"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"solutionID"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]} as unknown as DocumentNode<UpdateOperationalSolutionSubtasksMutation, UpdateOperationalSolutionSubtasksMutationVariables>;
export const TypedGetExistingModelPlansDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetExistingModelPlans"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"existingModelCollection"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}}]}}]}}]} as unknown as DocumentNode<GetExistingModelPlansQuery, GetExistingModelPlansQueryVariables>;
export const TypedGetModelPlansBaseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetModelPlansBase"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filter"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ModelPlanFilter"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlanCollection"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"filter"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filter"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}}]}}]}}]} as unknown as DocumentNode<GetModelPlansBaseQuery, GetModelPlansBaseQueryVariables>;
export const TypedGetNdaDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetNDA"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ndaInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"agreed"}},{"kind":"Field","name":{"kind":"Name","value":"agreedDts"}}]}}]}}]} as unknown as DocumentNode<GetNdaQuery, GetNdaQueryVariables>;
export const TypedArchiveModelPlanDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ArchiveModelPlan"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"archived"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateModelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"archived"},"value":{"kind":"Variable","name":{"kind":"Name","value":"archived"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<ArchiveModelPlanMutation, ArchiveModelPlanMutationVariables>;
export const TypedCreateModelPlanDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateModelPlan"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"modelName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createModelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"modelName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"modelName"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"basics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"modelCategory"}},{"kind":"Field","name":{"kind":"Name","value":"cmsCenters"}},{"kind":"Field","name":{"kind":"Name","value":"cmmiGroups"}},{"kind":"Field","name":{"kind":"Name","value":"modelType"}},{"kind":"Field","name":{"kind":"Name","value":"problem"}},{"kind":"Field","name":{"kind":"Name","value":"goal"}},{"kind":"Field","name":{"kind":"Name","value":"testInterventions"}},{"kind":"Field","name":{"kind":"Name","value":"note"}},{"kind":"Field","name":{"kind":"Name","value":"completeICIP"}},{"kind":"Field","name":{"kind":"Name","value":"clearanceStarts"}},{"kind":"Field","name":{"kind":"Name","value":"clearanceEnds"}},{"kind":"Field","name":{"kind":"Name","value":"announced"}},{"kind":"Field","name":{"kind":"Name","value":"applicationsStart"}},{"kind":"Field","name":{"kind":"Name","value":"applicationsEnd"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodStarts"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodEnds"}},{"kind":"Field","name":{"kind":"Name","value":"wrapUpEnds"}},{"kind":"Field","name":{"kind":"Name","value":"highLevelNote"}},{"kind":"Field","name":{"kind":"Name","value":"phasedIn"}},{"kind":"Field","name":{"kind":"Name","value":"phasedInNote"}},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedBy"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"collaborators"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"userAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userID"}},{"kind":"Field","name":{"kind":"Name","value":"teamRoles"}}]}}]}}]}}]} as unknown as DocumentNode<CreateModelPlanMutation, CreateModelPlanMutationVariables>;
export const TypedCreateModelPlanReplyDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateModelPlanReply"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"DiscussionReplyCreateInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createDiscussionReply"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"discussionID"}},{"kind":"Field","name":{"kind":"Name","value":"content"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rawContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}}]}}]}}]} as unknown as DocumentNode<CreateModelPlanReplyMutation, CreateModelPlanReplyMutationVariables>;
export const TypedGetAllModelDataDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAllModelData"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlanCollection"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"filter"},"value":{"kind":"EnumValue","value":"INCLUDE_ALL"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"nameHistory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"sort"},"value":{"kind":"EnumValue","value":"DESC"}}]},{"kind":"Field","name":{"kind":"Name","value":"abbreviation"}},{"kind":"Field","name":{"kind":"Name","value":"archived"}},{"kind":"Field","name":{"kind":"Name","value":"createdByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"basics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelCategory"}},{"kind":"Field","name":{"kind":"Name","value":"amsModelID"}},{"kind":"Field","name":{"kind":"Name","value":"demoCode"}},{"kind":"Field","name":{"kind":"Name","value":"cmsCenters"}},{"kind":"Field","name":{"kind":"Name","value":"cmmiGroups"}},{"kind":"Field","name":{"kind":"Name","value":"modelType"}},{"kind":"Field","name":{"kind":"Name","value":"modelTypeOther"}},{"kind":"Field","name":{"kind":"Name","value":"problem"}},{"kind":"Field","name":{"kind":"Name","value":"goal"}},{"kind":"Field","name":{"kind":"Name","value":"testInterventions"}},{"kind":"Field","name":{"kind":"Name","value":"note"}},{"kind":"Field","name":{"kind":"Name","value":"completeICIP"}},{"kind":"Field","name":{"kind":"Name","value":"clearanceStarts"}},{"kind":"Field","name":{"kind":"Name","value":"clearanceEnds"}},{"kind":"Field","name":{"kind":"Name","value":"announced"}},{"kind":"Field","name":{"kind":"Name","value":"applicationsStart"}},{"kind":"Field","name":{"kind":"Name","value":"applicationsEnd"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodStarts"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodEnds"}},{"kind":"Field","name":{"kind":"Name","value":"highLevelNote"}},{"kind":"Field","name":{"kind":"Name","value":"wrapUpEnds"}},{"kind":"Field","name":{"kind":"Name","value":"phasedIn"}},{"kind":"Field","name":{"kind":"Name","value":"phasedInNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"generalCharacteristics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"rulemakingRequired"}},{"kind":"Field","name":{"kind":"Name","value":"rulemakingRequiredDescription"}},{"kind":"Field","name":{"kind":"Name","value":"rulemakingRequiredNote"}},{"kind":"Field","name":{"kind":"Name","value":"authorityAllowances"}},{"kind":"Field","name":{"kind":"Name","value":"authorityAllowancesOther"}},{"kind":"Field","name":{"kind":"Name","value":"authorityAllowancesNote"}},{"kind":"Field","name":{"kind":"Name","value":"waiversRequired"}},{"kind":"Field","name":{"kind":"Name","value":"waiversRequiredTypes"}},{"kind":"Field","name":{"kind":"Name","value":"waiversRequiredNote"}},{"kind":"Field","name":{"kind":"Name","value":"isNewModel"}},{"kind":"Field","name":{"kind":"Name","value":"existingModel"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModel"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelWhyHow"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelHow"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelNote"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelWhich"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"names"}}]}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelOtherSpecify"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelOtherOption"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPrecondition"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionWhich"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"names"}}]}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionOtherSpecify"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionOtherOption"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionWhyHow"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionNote"}},{"kind":"Field","name":{"kind":"Name","value":"hasComponentsOrTracks"}},{"kind":"Field","name":{"kind":"Name","value":"hasComponentsOrTracksDiffer"}},{"kind":"Field","name":{"kind":"Name","value":"hasComponentsOrTracksNote"}},{"kind":"Field","name":{"kind":"Name","value":"careCoordinationInvolved"}},{"kind":"Field","name":{"kind":"Name","value":"careCoordinationInvolvedDescription"}},{"kind":"Field","name":{"kind":"Name","value":"careCoordinationInvolvedNote"}},{"kind":"Field","name":{"kind":"Name","value":"additionalServicesInvolved"}},{"kind":"Field","name":{"kind":"Name","value":"additionalServicesInvolvedDescription"}},{"kind":"Field","name":{"kind":"Name","value":"additionalServicesInvolvedNote"}},{"kind":"Field","name":{"kind":"Name","value":"communityPartnersInvolved"}},{"kind":"Field","name":{"kind":"Name","value":"communityPartnersInvolvedDescription"}},{"kind":"Field","name":{"kind":"Name","value":"communityPartnersInvolvedNote"}},{"kind":"Field","name":{"kind":"Name","value":"agencyOrStateHelp"}},{"kind":"Field","name":{"kind":"Name","value":"agencyOrStateHelpOther"}},{"kind":"Field","name":{"kind":"Name","value":"agencyOrStateHelpNote"}},{"kind":"Field","name":{"kind":"Name","value":"alternativePaymentModelTypes"}},{"kind":"Field","name":{"kind":"Name","value":"alternativePaymentModelNote"}},{"kind":"Field","name":{"kind":"Name","value":"keyCharacteristics"}},{"kind":"Field","name":{"kind":"Name","value":"keyCharacteristicsNote"}},{"kind":"Field","name":{"kind":"Name","value":"keyCharacteristicsOther"}},{"kind":"Field","name":{"kind":"Name","value":"collectPlanBids"}},{"kind":"Field","name":{"kind":"Name","value":"collectPlanBidsNote"}},{"kind":"Field","name":{"kind":"Name","value":"managePartCDEnrollment"}},{"kind":"Field","name":{"kind":"Name","value":"managePartCDEnrollmentNote"}},{"kind":"Field","name":{"kind":"Name","value":"planContractUpdated"}},{"kind":"Field","name":{"kind":"Name","value":"planContractUpdatedNote"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargeted"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedTypes"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesStatesAndTerritories"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesRegionTypes"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedTypesOther"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedAppliedTo"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedAppliedToOther"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedNote"}},{"kind":"Field","name":{"kind":"Name","value":"participationOptions"}},{"kind":"Field","name":{"kind":"Name","value":"participationOptionsNote"}},{"kind":"Field","name":{"kind":"Name","value":"agreementTypes"}},{"kind":"Field","name":{"kind":"Name","value":"agreementTypesOther"}},{"kind":"Field","name":{"kind":"Name","value":"multiplePatricipationAgreementsNeeded"}},{"kind":"Field","name":{"kind":"Name","value":"multiplePatricipationAgreementsNeededNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"participantsAndProviders"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"communicationMethod"}},{"kind":"Field","name":{"kind":"Name","value":"communicationMethodOther"}},{"kind":"Field","name":{"kind":"Name","value":"communicationNote"}},{"kind":"Field","name":{"kind":"Name","value":"riskType"}},{"kind":"Field","name":{"kind":"Name","value":"riskOther"}},{"kind":"Field","name":{"kind":"Name","value":"riskNote"}},{"kind":"Field","name":{"kind":"Name","value":"willRiskChange"}},{"kind":"Field","name":{"kind":"Name","value":"willRiskChangeNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuarantee"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuaranteeType"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuaranteeOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuaranteeNote"}},{"kind":"Field","name":{"kind":"Name","value":"coordinateWork"}},{"kind":"Field","name":{"kind":"Name","value":"coordinateWorkNote"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePayments"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsTrack"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsEligibility"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsEligibilityOther"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantsIds"}},{"kind":"Field","name":{"kind":"Name","value":"participantsIdsOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantsIDSNote"}},{"kind":"Field","name":{"kind":"Name","value":"expectedNumberOfParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"estimateConfidence"}},{"kind":"Field","name":{"kind":"Name","value":"confidenceNote"}},{"kind":"Field","name":{"kind":"Name","value":"recruitmentMethod"}},{"kind":"Field","name":{"kind":"Name","value":"recruitmentOther"}},{"kind":"Field","name":{"kind":"Name","value":"recruitmentNote"}},{"kind":"Field","name":{"kind":"Name","value":"selectionMethod"}},{"kind":"Field","name":{"kind":"Name","value":"selectionOther"}},{"kind":"Field","name":{"kind":"Name","value":"selectionNote"}},{"kind":"Field","name":{"kind":"Name","value":"participants"}},{"kind":"Field","name":{"kind":"Name","value":"medicareProviderType"}},{"kind":"Field","name":{"kind":"Name","value":"isNewTypeOfProvidersOrSuppliers"}},{"kind":"Field","name":{"kind":"Name","value":"statesEngagement"}},{"kind":"Field","name":{"kind":"Name","value":"participantsOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantsNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantsCurrentlyInModels"}},{"kind":"Field","name":{"kind":"Name","value":"participantsCurrentlyInModelsNote"}},{"kind":"Field","name":{"kind":"Name","value":"modelApplicationLevel"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerAddMethod"}},{"kind":"Field","name":{"kind":"Name","value":"providerAddMethodOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerAddMethodNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerLeaveMethod"}},{"kind":"Field","name":{"kind":"Name","value":"providerLeaveMethodOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerLeaveMethodNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerOverlap"}},{"kind":"Field","name":{"kind":"Name","value":"providerOverlapHierarchy"}},{"kind":"Field","name":{"kind":"Name","value":"providerOverlapNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaries"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaries"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiariesNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiariesOther"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryOverlap"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryOverlapNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionOther"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionMethod"}},{"kind":"Field","name":{"kind":"Name","value":"treatDualElligibleDifferent"}},{"kind":"Field","name":{"kind":"Name","value":"treatDualElligibleDifferentHow"}},{"kind":"Field","name":{"kind":"Name","value":"treatDualElligibleDifferentNote"}},{"kind":"Field","name":{"kind":"Name","value":"excludeCertainCharacteristics"}},{"kind":"Field","name":{"kind":"Name","value":"excludeCertainCharacteristicsCriteria"}},{"kind":"Field","name":{"kind":"Name","value":"excludeCertainCharacteristicsNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRules"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRulesYes"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRulesNo"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRulesNote"}},{"kind":"Field","name":{"kind":"Name","value":"numberPeopleImpacted"}},{"kind":"Field","name":{"kind":"Name","value":"estimateConfidence"}},{"kind":"Field","name":{"kind":"Name","value":"confidenceNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvment"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvmentOther"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvmentNote"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupport"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupportNote"}},{"kind":"Field","name":{"kind":"Name","value":"sendFilesBetweenCcw"}},{"kind":"Field","name":{"kind":"Name","value":"sendFilesBetweenCcwNote"}},{"kind":"Field","name":{"kind":"Name","value":"appToSendFilesToKnown"}},{"kind":"Field","name":{"kind":"Name","value":"appToSendFilesToWhich"}},{"kind":"Field","name":{"kind":"Name","value":"appToSendFilesToNote"}},{"kind":"Field","name":{"kind":"Name","value":"useCcwForFileDistribiutionToParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"useCcwForFileDistribiutionToParticipantsNote"}},{"kind":"Field","name":{"kind":"Name","value":"developNewQualityMeasures"}},{"kind":"Field","name":{"kind":"Name","value":"developNewQualityMeasuresNote"}},{"kind":"Field","name":{"kind":"Name","value":"qualityPerformanceImpactsPayment"}},{"kind":"Field","name":{"kind":"Name","value":"qualityPerformanceImpactsPaymentOther"}},{"kind":"Field","name":{"kind":"Name","value":"qualityPerformanceImpactsPaymentNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingStarts"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingStartsOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingStartsNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionStarts"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionStartsOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingStarts"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingStartsOther"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingStartsNote"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"evaluationApproaches"}},{"kind":"Field","name":{"kind":"Name","value":"evaluationApproachOther"}},{"kind":"Field","name":{"kind":"Name","value":"evalutaionApproachNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoring"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoringOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoringNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataToSendParticicipants"}},{"kind":"Field","name":{"kind":"Name","value":"dataToSendParticicipantsOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataToSendParticicipantsNote"}},{"kind":"Field","name":{"kind":"Name","value":"shareCclfData"}},{"kind":"Field","name":{"kind":"Name","value":"shareCclfDataNote"}},{"kind":"Field","name":{"kind":"Name","value":"technicalContactsIdentified"}},{"kind":"Field","name":{"kind":"Name","value":"technicalContactsIdentifiedDetail"}},{"kind":"Field","name":{"kind":"Name","value":"technicalContactsIdentifiedNote"}},{"kind":"Field","name":{"kind":"Name","value":"captureParticipantInfo"}},{"kind":"Field","name":{"kind":"Name","value":"captureParticipantInfoNote"}},{"kind":"Field","name":{"kind":"Name","value":"icdOwner"}},{"kind":"Field","name":{"kind":"Name","value":"draftIcdDueDate"}},{"kind":"Field","name":{"kind":"Name","value":"icdNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataFullTimeOrIncremental"}},{"kind":"Field","name":{"kind":"Name","value":"eftSetUp"}},{"kind":"Field","name":{"kind":"Name","value":"unsolicitedAdjustmentsIncluded"}},{"kind":"Field","name":{"kind":"Name","value":"dataFlowDiagramsNeeded"}},{"kind":"Field","name":{"kind":"Name","value":"produceBenefitEnhancementFiles"}},{"kind":"Field","name":{"kind":"Name","value":"fileNamingConventions"}},{"kind":"Field","name":{"kind":"Name","value":"dataMonitoringNote"}},{"kind":"Field","name":{"kind":"Name","value":"uatNeeds"}},{"kind":"Field","name":{"kind":"Name","value":"stcNeeds"}},{"kind":"Field","name":{"kind":"Name","value":"testingTimelines"}},{"kind":"Field","name":{"kind":"Name","value":"testingNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataMonitoringFileTypes"}},{"kind":"Field","name":{"kind":"Name","value":"dataMonitoringFileOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataResponseType"}},{"kind":"Field","name":{"kind":"Name","value":"dataResponseFileFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"modelLearningSystems"}},{"kind":"Field","name":{"kind":"Name","value":"modelLearningSystemsOther"}},{"kind":"Field","name":{"kind":"Name","value":"modelLearningSystemsNote"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedChallenges"}},{"kind":"Field","name":{"kind":"Name","value":"stakeholders"}},{"kind":"Field","name":{"kind":"Name","value":"stakeholdersOther"}},{"kind":"Field","name":{"kind":"Name","value":"stakeholdersNote"}},{"kind":"Field","name":{"kind":"Name","value":"helpdeskUse"}},{"kind":"Field","name":{"kind":"Name","value":"helpdeskUseNote"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupport"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupportOther"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupportHow"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupportNote"}},{"kind":"Field","name":{"kind":"Name","value":"benchmarkForPerformance"}},{"kind":"Field","name":{"kind":"Name","value":"benchmarkForPerformanceNote"}},{"kind":"Field","name":{"kind":"Name","value":"computePerformanceScores"}},{"kind":"Field","name":{"kind":"Name","value":"computePerformanceScoresNote"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustPerformance"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustFeedback"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustPayments"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustOther"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustNote"}},{"kind":"Field","name":{"kind":"Name","value":"appealPerformance"}},{"kind":"Field","name":{"kind":"Name","value":"appealFeedback"}},{"kind":"Field","name":{"kind":"Name","value":"appealPayments"}},{"kind":"Field","name":{"kind":"Name","value":"appealOther"}},{"kind":"Field","name":{"kind":"Name","value":"appealNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"payments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"payType"}},{"kind":"Field","name":{"kind":"Name","value":"payClaims"}},{"kind":"Field","name":{"kind":"Name","value":"creatingDependenciesBetweenServices"}},{"kind":"Field","name":{"kind":"Name","value":"creatingDependenciesBetweenServicesNote"}},{"kind":"Field","name":{"kind":"Name","value":"needsClaimsDataCollection"}},{"kind":"Field","name":{"kind":"Name","value":"needsClaimsDataCollectionNote"}},{"kind":"Field","name":{"kind":"Name","value":"providingThirdPartyFile"}},{"kind":"Field","name":{"kind":"Name","value":"isContractorAwareTestDataRequirements"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryCostSharingLevelAndHandling"}},{"kind":"Field","name":{"kind":"Name","value":"waiveBeneficiaryCostSharingForAnyServices"}},{"kind":"Field","name":{"kind":"Name","value":"waiveBeneficiaryCostSharingServiceSpecification"}},{"kind":"Field","name":{"kind":"Name","value":"waiverOnlyAppliesPartOfPayment"}},{"kind":"Field","name":{"kind":"Name","value":"waiveBeneficiaryCostSharingNote"}},{"kind":"Field","name":{"kind":"Name","value":"payClaimsNote"}},{"kind":"Field","name":{"kind":"Name","value":"payClaimsOther"}},{"kind":"Field","name":{"kind":"Name","value":"shouldAnyProvidersExcludedFFSSystems"}},{"kind":"Field","name":{"kind":"Name","value":"shouldAnyProviderExcludedFFSSystemsNote"}},{"kind":"Field","name":{"kind":"Name","value":"changesMedicarePhysicianFeeSchedule"}},{"kind":"Field","name":{"kind":"Name","value":"changesMedicarePhysicianFeeScheduleNote"}},{"kind":"Field","name":{"kind":"Name","value":"affectsMedicareSecondaryPayerClaims"}},{"kind":"Field","name":{"kind":"Name","value":"affectsMedicareSecondaryPayerClaimsHow"}},{"kind":"Field","name":{"kind":"Name","value":"affectsMedicareSecondaryPayerClaimsNote"}},{"kind":"Field","name":{"kind":"Name","value":"payModelDifferentiation"}},{"kind":"Field","name":{"kind":"Name","value":"willBePaymentAdjustments"}},{"kind":"Field","name":{"kind":"Name","value":"willBePaymentAdjustmentsNote"}},{"kind":"Field","name":{"kind":"Name","value":"expectedCalculationComplexityLevel"}},{"kind":"Field","name":{"kind":"Name","value":"expectedCalculationComplexityLevelNote"}},{"kind":"Field","name":{"kind":"Name","value":"claimsProcessingPrecedence"}},{"kind":"Field","name":{"kind":"Name","value":"claimsProcessingPrecedenceOther"}},{"kind":"Field","name":{"kind":"Name","value":"claimsProcessingPrecedenceNote"}},{"kind":"Field","name":{"kind":"Name","value":"canParticipantsSelectBetweenPaymentMechanisms"}},{"kind":"Field","name":{"kind":"Name","value":"canParticipantsSelectBetweenPaymentMechanismsHow"}},{"kind":"Field","name":{"kind":"Name","value":"canParticipantsSelectBetweenPaymentMechanismsNote"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSource"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourcePatientProtectionInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceMedicareAInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceMedicareBInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceOther"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceNote"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceR"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRPatientProtectionInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRMedicareAInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRMedicareBInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceROther"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRNote"}},{"kind":"Field","name":{"kind":"Name","value":"payRecipients"}},{"kind":"Field","name":{"kind":"Name","value":"payRecipientsOtherSpecification"}},{"kind":"Field","name":{"kind":"Name","value":"payRecipientsNote"}},{"kind":"Field","name":{"kind":"Name","value":"payTypeNote"}},{"kind":"Field","name":{"kind":"Name","value":"nonClaimsPayments"}},{"kind":"Field","name":{"kind":"Name","value":"nonClaimsPaymentOther"}},{"kind":"Field","name":{"kind":"Name","value":"paymentCalculationOwner"}},{"kind":"Field","name":{"kind":"Name","value":"numberPaymentsPerPayCycle"}},{"kind":"Field","name":{"kind":"Name","value":"numberPaymentsPerPayCycleNote"}},{"kind":"Field","name":{"kind":"Name","value":"sharedSystemsInvolvedAdditionalClaimPayment"}},{"kind":"Field","name":{"kind":"Name","value":"sharedSystemsInvolvedAdditionalClaimPaymentNote"}},{"kind":"Field","name":{"kind":"Name","value":"planningToUseInnovationPaymentContractor"}},{"kind":"Field","name":{"kind":"Name","value":"planningToUseInnovationPaymentContractorNote"}},{"kind":"Field","name":{"kind":"Name","value":"willRecoverPayments"}},{"kind":"Field","name":{"kind":"Name","value":"willRecoverPaymentsNote"}},{"kind":"Field","name":{"kind":"Name","value":"anticipateReconcilingPaymentsRetrospectively"}},{"kind":"Field","name":{"kind":"Name","value":"anticipateReconcilingPaymentsRetrospectivelyNote"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"paymentStartDate"}},{"kind":"Field","name":{"kind":"Name","value":"paymentStartDateNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"collaborators"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"userAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userID"}},{"kind":"Field","name":{"kind":"Name","value":"teamRoles"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}}]}},{"kind":"Field","name":{"kind":"Name","value":"discussions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"content"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rawContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userRole"}},{"kind":"Field","name":{"kind":"Name","value":"userRoleDescription"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"replies"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"discussionID"}},{"kind":"Field","name":{"kind":"Name","value":"content"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rawContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userRole"}},{"kind":"Field","name":{"kind":"Name","value":"userRoleDescription"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetAllModelDataQuery, GetAllModelDataQueryVariables>;
export const TypedGetAllSingleModelDataDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAllSingleModelData"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"nameHistory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"sort"},"value":{"kind":"EnumValue","value":"DESC"}}]},{"kind":"Field","name":{"kind":"Name","value":"abbreviation"}},{"kind":"Field","name":{"kind":"Name","value":"archived"}},{"kind":"Field","name":{"kind":"Name","value":"createdByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"basics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelCategory"}},{"kind":"Field","name":{"kind":"Name","value":"amsModelID"}},{"kind":"Field","name":{"kind":"Name","value":"demoCode"}},{"kind":"Field","name":{"kind":"Name","value":"cmsCenters"}},{"kind":"Field","name":{"kind":"Name","value":"cmmiGroups"}},{"kind":"Field","name":{"kind":"Name","value":"modelType"}},{"kind":"Field","name":{"kind":"Name","value":"modelTypeOther"}},{"kind":"Field","name":{"kind":"Name","value":"problem"}},{"kind":"Field","name":{"kind":"Name","value":"goal"}},{"kind":"Field","name":{"kind":"Name","value":"testInterventions"}},{"kind":"Field","name":{"kind":"Name","value":"note"}},{"kind":"Field","name":{"kind":"Name","value":"completeICIP"}},{"kind":"Field","name":{"kind":"Name","value":"clearanceStarts"}},{"kind":"Field","name":{"kind":"Name","value":"clearanceEnds"}},{"kind":"Field","name":{"kind":"Name","value":"announced"}},{"kind":"Field","name":{"kind":"Name","value":"applicationsStart"}},{"kind":"Field","name":{"kind":"Name","value":"applicationsEnd"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodStarts"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodEnds"}},{"kind":"Field","name":{"kind":"Name","value":"highLevelNote"}},{"kind":"Field","name":{"kind":"Name","value":"wrapUpEnds"}},{"kind":"Field","name":{"kind":"Name","value":"phasedIn"}},{"kind":"Field","name":{"kind":"Name","value":"phasedInNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"generalCharacteristics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"rulemakingRequired"}},{"kind":"Field","name":{"kind":"Name","value":"rulemakingRequiredDescription"}},{"kind":"Field","name":{"kind":"Name","value":"rulemakingRequiredNote"}},{"kind":"Field","name":{"kind":"Name","value":"authorityAllowances"}},{"kind":"Field","name":{"kind":"Name","value":"authorityAllowancesOther"}},{"kind":"Field","name":{"kind":"Name","value":"authorityAllowancesNote"}},{"kind":"Field","name":{"kind":"Name","value":"waiversRequired"}},{"kind":"Field","name":{"kind":"Name","value":"waiversRequiredTypes"}},{"kind":"Field","name":{"kind":"Name","value":"waiversRequiredNote"}},{"kind":"Field","name":{"kind":"Name","value":"isNewModel"}},{"kind":"Field","name":{"kind":"Name","value":"existingModel"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModel"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelWhyHow"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelHow"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelNote"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelWhich"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"names"}}]}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelOtherSpecify"}},{"kind":"Field","name":{"kind":"Name","value":"resemblesExistingModelOtherOption"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPrecondition"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionWhich"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"names"}}]}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionOtherSpecify"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionOtherOption"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionWhyHow"}},{"kind":"Field","name":{"kind":"Name","value":"participationInModelPreconditionNote"}},{"kind":"Field","name":{"kind":"Name","value":"hasComponentsOrTracks"}},{"kind":"Field","name":{"kind":"Name","value":"hasComponentsOrTracksDiffer"}},{"kind":"Field","name":{"kind":"Name","value":"hasComponentsOrTracksNote"}},{"kind":"Field","name":{"kind":"Name","value":"careCoordinationInvolved"}},{"kind":"Field","name":{"kind":"Name","value":"careCoordinationInvolvedDescription"}},{"kind":"Field","name":{"kind":"Name","value":"careCoordinationInvolvedNote"}},{"kind":"Field","name":{"kind":"Name","value":"additionalServicesInvolved"}},{"kind":"Field","name":{"kind":"Name","value":"additionalServicesInvolvedDescription"}},{"kind":"Field","name":{"kind":"Name","value":"additionalServicesInvolvedNote"}},{"kind":"Field","name":{"kind":"Name","value":"communityPartnersInvolved"}},{"kind":"Field","name":{"kind":"Name","value":"communityPartnersInvolvedDescription"}},{"kind":"Field","name":{"kind":"Name","value":"communityPartnersInvolvedNote"}},{"kind":"Field","name":{"kind":"Name","value":"agencyOrStateHelp"}},{"kind":"Field","name":{"kind":"Name","value":"agencyOrStateHelpOther"}},{"kind":"Field","name":{"kind":"Name","value":"agencyOrStateHelpNote"}},{"kind":"Field","name":{"kind":"Name","value":"alternativePaymentModelTypes"}},{"kind":"Field","name":{"kind":"Name","value":"alternativePaymentModelNote"}},{"kind":"Field","name":{"kind":"Name","value":"keyCharacteristics"}},{"kind":"Field","name":{"kind":"Name","value":"keyCharacteristicsNote"}},{"kind":"Field","name":{"kind":"Name","value":"keyCharacteristicsOther"}},{"kind":"Field","name":{"kind":"Name","value":"collectPlanBids"}},{"kind":"Field","name":{"kind":"Name","value":"collectPlanBidsNote"}},{"kind":"Field","name":{"kind":"Name","value":"managePartCDEnrollment"}},{"kind":"Field","name":{"kind":"Name","value":"managePartCDEnrollmentNote"}},{"kind":"Field","name":{"kind":"Name","value":"planContractUpdated"}},{"kind":"Field","name":{"kind":"Name","value":"planContractUpdatedNote"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargeted"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedTypes"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesStatesAndTerritories"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesRegionTypes"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedTypesOther"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedAppliedTo"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedAppliedToOther"}},{"kind":"Field","name":{"kind":"Name","value":"geographiesTargetedNote"}},{"kind":"Field","name":{"kind":"Name","value":"participationOptions"}},{"kind":"Field","name":{"kind":"Name","value":"participationOptionsNote"}},{"kind":"Field","name":{"kind":"Name","value":"agreementTypes"}},{"kind":"Field","name":{"kind":"Name","value":"agreementTypesOther"}},{"kind":"Field","name":{"kind":"Name","value":"multiplePatricipationAgreementsNeeded"}},{"kind":"Field","name":{"kind":"Name","value":"multiplePatricipationAgreementsNeededNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"participantsAndProviders"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"communicationMethod"}},{"kind":"Field","name":{"kind":"Name","value":"communicationMethodOther"}},{"kind":"Field","name":{"kind":"Name","value":"communicationNote"}},{"kind":"Field","name":{"kind":"Name","value":"riskType"}},{"kind":"Field","name":{"kind":"Name","value":"riskOther"}},{"kind":"Field","name":{"kind":"Name","value":"riskNote"}},{"kind":"Field","name":{"kind":"Name","value":"willRiskChange"}},{"kind":"Field","name":{"kind":"Name","value":"willRiskChangeNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuarantee"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuaranteeType"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuaranteeOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuaranteeNote"}},{"kind":"Field","name":{"kind":"Name","value":"coordinateWork"}},{"kind":"Field","name":{"kind":"Name","value":"coordinateWorkNote"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePayments"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsTrack"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsEligibility"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsEligibilityOther"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantsIds"}},{"kind":"Field","name":{"kind":"Name","value":"participantsIdsOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantsIDSNote"}},{"kind":"Field","name":{"kind":"Name","value":"expectedNumberOfParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"estimateConfidence"}},{"kind":"Field","name":{"kind":"Name","value":"confidenceNote"}},{"kind":"Field","name":{"kind":"Name","value":"recruitmentMethod"}},{"kind":"Field","name":{"kind":"Name","value":"recruitmentOther"}},{"kind":"Field","name":{"kind":"Name","value":"recruitmentNote"}},{"kind":"Field","name":{"kind":"Name","value":"selectionMethod"}},{"kind":"Field","name":{"kind":"Name","value":"selectionOther"}},{"kind":"Field","name":{"kind":"Name","value":"selectionNote"}},{"kind":"Field","name":{"kind":"Name","value":"participants"}},{"kind":"Field","name":{"kind":"Name","value":"medicareProviderType"}},{"kind":"Field","name":{"kind":"Name","value":"isNewTypeOfProvidersOrSuppliers"}},{"kind":"Field","name":{"kind":"Name","value":"statesEngagement"}},{"kind":"Field","name":{"kind":"Name","value":"participantsOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantsNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantsCurrentlyInModels"}},{"kind":"Field","name":{"kind":"Name","value":"participantsCurrentlyInModelsNote"}},{"kind":"Field","name":{"kind":"Name","value":"modelApplicationLevel"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerAddMethod"}},{"kind":"Field","name":{"kind":"Name","value":"providerAddMethodOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerAddMethodNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerLeaveMethod"}},{"kind":"Field","name":{"kind":"Name","value":"providerLeaveMethodOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerLeaveMethodNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerOverlap"}},{"kind":"Field","name":{"kind":"Name","value":"providerOverlapHierarchy"}},{"kind":"Field","name":{"kind":"Name","value":"providerOverlapNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaries"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaries"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiariesNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiariesOther"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryOverlap"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryOverlapNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionOther"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionMethod"}},{"kind":"Field","name":{"kind":"Name","value":"treatDualElligibleDifferent"}},{"kind":"Field","name":{"kind":"Name","value":"treatDualElligibleDifferentHow"}},{"kind":"Field","name":{"kind":"Name","value":"treatDualElligibleDifferentNote"}},{"kind":"Field","name":{"kind":"Name","value":"excludeCertainCharacteristics"}},{"kind":"Field","name":{"kind":"Name","value":"excludeCertainCharacteristicsCriteria"}},{"kind":"Field","name":{"kind":"Name","value":"excludeCertainCharacteristicsNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiarySelectionFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryRemovalFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRules"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRulesYes"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRulesNo"}},{"kind":"Field","name":{"kind":"Name","value":"precedenceRulesNote"}},{"kind":"Field","name":{"kind":"Name","value":"numberPeopleImpacted"}},{"kind":"Field","name":{"kind":"Name","value":"estimateConfidence"}},{"kind":"Field","name":{"kind":"Name","value":"confidenceNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvment"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvmentOther"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvmentNote"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupport"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupportNote"}},{"kind":"Field","name":{"kind":"Name","value":"sendFilesBetweenCcw"}},{"kind":"Field","name":{"kind":"Name","value":"sendFilesBetweenCcwNote"}},{"kind":"Field","name":{"kind":"Name","value":"appToSendFilesToKnown"}},{"kind":"Field","name":{"kind":"Name","value":"appToSendFilesToWhich"}},{"kind":"Field","name":{"kind":"Name","value":"appToSendFilesToNote"}},{"kind":"Field","name":{"kind":"Name","value":"useCcwForFileDistribiutionToParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"useCcwForFileDistribiutionToParticipantsNote"}},{"kind":"Field","name":{"kind":"Name","value":"developNewQualityMeasures"}},{"kind":"Field","name":{"kind":"Name","value":"developNewQualityMeasuresNote"}},{"kind":"Field","name":{"kind":"Name","value":"qualityPerformanceImpactsPayment"}},{"kind":"Field","name":{"kind":"Name","value":"qualityPerformanceImpactsPaymentOther"}},{"kind":"Field","name":{"kind":"Name","value":"qualityPerformanceImpactsPaymentNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingStarts"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingStartsOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingStartsNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionStarts"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionStartsOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingStarts"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingStartsOther"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingStartsNote"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"evaluationApproaches"}},{"kind":"Field","name":{"kind":"Name","value":"evaluationApproachOther"}},{"kind":"Field","name":{"kind":"Name","value":"evalutaionApproachNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoring"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoringOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoringNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataToSendParticicipants"}},{"kind":"Field","name":{"kind":"Name","value":"dataToSendParticicipantsOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataToSendParticicipantsNote"}},{"kind":"Field","name":{"kind":"Name","value":"shareCclfData"}},{"kind":"Field","name":{"kind":"Name","value":"shareCclfDataNote"}},{"kind":"Field","name":{"kind":"Name","value":"technicalContactsIdentified"}},{"kind":"Field","name":{"kind":"Name","value":"technicalContactsIdentifiedDetail"}},{"kind":"Field","name":{"kind":"Name","value":"technicalContactsIdentifiedNote"}},{"kind":"Field","name":{"kind":"Name","value":"captureParticipantInfo"}},{"kind":"Field","name":{"kind":"Name","value":"captureParticipantInfoNote"}},{"kind":"Field","name":{"kind":"Name","value":"icdOwner"}},{"kind":"Field","name":{"kind":"Name","value":"draftIcdDueDate"}},{"kind":"Field","name":{"kind":"Name","value":"icdNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataFullTimeOrIncremental"}},{"kind":"Field","name":{"kind":"Name","value":"eftSetUp"}},{"kind":"Field","name":{"kind":"Name","value":"unsolicitedAdjustmentsIncluded"}},{"kind":"Field","name":{"kind":"Name","value":"dataFlowDiagramsNeeded"}},{"kind":"Field","name":{"kind":"Name","value":"produceBenefitEnhancementFiles"}},{"kind":"Field","name":{"kind":"Name","value":"fileNamingConventions"}},{"kind":"Field","name":{"kind":"Name","value":"dataMonitoringNote"}},{"kind":"Field","name":{"kind":"Name","value":"uatNeeds"}},{"kind":"Field","name":{"kind":"Name","value":"stcNeeds"}},{"kind":"Field","name":{"kind":"Name","value":"testingTimelines"}},{"kind":"Field","name":{"kind":"Name","value":"testingNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataMonitoringFileTypes"}},{"kind":"Field","name":{"kind":"Name","value":"dataMonitoringFileOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataResponseType"}},{"kind":"Field","name":{"kind":"Name","value":"dataResponseFileFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"modelLearningSystems"}},{"kind":"Field","name":{"kind":"Name","value":"modelLearningSystemsOther"}},{"kind":"Field","name":{"kind":"Name","value":"modelLearningSystemsNote"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedChallenges"}},{"kind":"Field","name":{"kind":"Name","value":"stakeholders"}},{"kind":"Field","name":{"kind":"Name","value":"stakeholdersOther"}},{"kind":"Field","name":{"kind":"Name","value":"stakeholdersNote"}},{"kind":"Field","name":{"kind":"Name","value":"helpdeskUse"}},{"kind":"Field","name":{"kind":"Name","value":"helpdeskUseNote"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupport"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupportOther"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupportHow"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupportNote"}},{"kind":"Field","name":{"kind":"Name","value":"benchmarkForPerformance"}},{"kind":"Field","name":{"kind":"Name","value":"benchmarkForPerformanceNote"}},{"kind":"Field","name":{"kind":"Name","value":"computePerformanceScores"}},{"kind":"Field","name":{"kind":"Name","value":"computePerformanceScoresNote"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustPerformance"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustFeedback"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustPayments"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustOther"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustNote"}},{"kind":"Field","name":{"kind":"Name","value":"appealPerformance"}},{"kind":"Field","name":{"kind":"Name","value":"appealFeedback"}},{"kind":"Field","name":{"kind":"Name","value":"appealPayments"}},{"kind":"Field","name":{"kind":"Name","value":"appealOther"}},{"kind":"Field","name":{"kind":"Name","value":"appealNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"payments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"payType"}},{"kind":"Field","name":{"kind":"Name","value":"payClaims"}},{"kind":"Field","name":{"kind":"Name","value":"creatingDependenciesBetweenServices"}},{"kind":"Field","name":{"kind":"Name","value":"creatingDependenciesBetweenServicesNote"}},{"kind":"Field","name":{"kind":"Name","value":"needsClaimsDataCollection"}},{"kind":"Field","name":{"kind":"Name","value":"needsClaimsDataCollectionNote"}},{"kind":"Field","name":{"kind":"Name","value":"providingThirdPartyFile"}},{"kind":"Field","name":{"kind":"Name","value":"isContractorAwareTestDataRequirements"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryCostSharingLevelAndHandling"}},{"kind":"Field","name":{"kind":"Name","value":"waiveBeneficiaryCostSharingForAnyServices"}},{"kind":"Field","name":{"kind":"Name","value":"waiveBeneficiaryCostSharingServiceSpecification"}},{"kind":"Field","name":{"kind":"Name","value":"waiverOnlyAppliesPartOfPayment"}},{"kind":"Field","name":{"kind":"Name","value":"waiveBeneficiaryCostSharingNote"}},{"kind":"Field","name":{"kind":"Name","value":"payClaimsNote"}},{"kind":"Field","name":{"kind":"Name","value":"payClaimsOther"}},{"kind":"Field","name":{"kind":"Name","value":"shouldAnyProvidersExcludedFFSSystems"}},{"kind":"Field","name":{"kind":"Name","value":"shouldAnyProviderExcludedFFSSystemsNote"}},{"kind":"Field","name":{"kind":"Name","value":"changesMedicarePhysicianFeeSchedule"}},{"kind":"Field","name":{"kind":"Name","value":"changesMedicarePhysicianFeeScheduleNote"}},{"kind":"Field","name":{"kind":"Name","value":"affectsMedicareSecondaryPayerClaims"}},{"kind":"Field","name":{"kind":"Name","value":"affectsMedicareSecondaryPayerClaimsHow"}},{"kind":"Field","name":{"kind":"Name","value":"affectsMedicareSecondaryPayerClaimsNote"}},{"kind":"Field","name":{"kind":"Name","value":"payModelDifferentiation"}},{"kind":"Field","name":{"kind":"Name","value":"willBePaymentAdjustments"}},{"kind":"Field","name":{"kind":"Name","value":"willBePaymentAdjustmentsNote"}},{"kind":"Field","name":{"kind":"Name","value":"expectedCalculationComplexityLevel"}},{"kind":"Field","name":{"kind":"Name","value":"expectedCalculationComplexityLevelNote"}},{"kind":"Field","name":{"kind":"Name","value":"claimsProcessingPrecedence"}},{"kind":"Field","name":{"kind":"Name","value":"claimsProcessingPrecedenceOther"}},{"kind":"Field","name":{"kind":"Name","value":"claimsProcessingPrecedenceNote"}},{"kind":"Field","name":{"kind":"Name","value":"canParticipantsSelectBetweenPaymentMechanisms"}},{"kind":"Field","name":{"kind":"Name","value":"canParticipantsSelectBetweenPaymentMechanismsHow"}},{"kind":"Field","name":{"kind":"Name","value":"canParticipantsSelectBetweenPaymentMechanismsNote"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSource"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourcePatientProtectionInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceMedicareAInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceMedicareBInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceOther"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceNote"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceR"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRPatientProtectionInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRMedicareAInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRMedicareBInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceROther"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRNote"}},{"kind":"Field","name":{"kind":"Name","value":"payRecipients"}},{"kind":"Field","name":{"kind":"Name","value":"payRecipientsOtherSpecification"}},{"kind":"Field","name":{"kind":"Name","value":"payRecipientsNote"}},{"kind":"Field","name":{"kind":"Name","value":"payTypeNote"}},{"kind":"Field","name":{"kind":"Name","value":"nonClaimsPayments"}},{"kind":"Field","name":{"kind":"Name","value":"nonClaimsPaymentOther"}},{"kind":"Field","name":{"kind":"Name","value":"paymentCalculationOwner"}},{"kind":"Field","name":{"kind":"Name","value":"numberPaymentsPerPayCycle"}},{"kind":"Field","name":{"kind":"Name","value":"numberPaymentsPerPayCycleNote"}},{"kind":"Field","name":{"kind":"Name","value":"sharedSystemsInvolvedAdditionalClaimPayment"}},{"kind":"Field","name":{"kind":"Name","value":"sharedSystemsInvolvedAdditionalClaimPaymentNote"}},{"kind":"Field","name":{"kind":"Name","value":"planningToUseInnovationPaymentContractor"}},{"kind":"Field","name":{"kind":"Name","value":"planningToUseInnovationPaymentContractorNote"}},{"kind":"Field","name":{"kind":"Name","value":"willRecoverPayments"}},{"kind":"Field","name":{"kind":"Name","value":"willRecoverPaymentsNote"}},{"kind":"Field","name":{"kind":"Name","value":"anticipateReconcilingPaymentsRetrospectively"}},{"kind":"Field","name":{"kind":"Name","value":"anticipateReconcilingPaymentsRetrospectivelyNote"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"paymentStartDate"}},{"kind":"Field","name":{"kind":"Name","value":"paymentStartDateNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"collaborators"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"userAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userID"}},{"kind":"Field","name":{"kind":"Name","value":"teamRoles"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}}]}},{"kind":"Field","name":{"kind":"Name","value":"discussions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"content"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rawContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userRole"}},{"kind":"Field","name":{"kind":"Name","value":"userRoleDescription"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"replies"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"discussionID"}},{"kind":"Field","name":{"kind":"Name","value":"content"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rawContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userRole"}},{"kind":"Field","name":{"kind":"Name","value":"userRoleDescription"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetAllSingleModelDataQuery, GetAllSingleModelDataQueryVariables>;
export const TypedGetCurrentUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCurrentUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"currentUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"launchDarkly"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userKey"}},{"kind":"Field","name":{"kind":"Name","value":"signedHash"}}]}}]}}]}}]} as unknown as DocumentNode<GetCurrentUserQuery, GetCurrentUserQueryVariables>;
export const TypedGetEchimpCrandTdlDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetEchimpCrandTDL"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"echimpCRsAndTDLs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"EChimpCR"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"emergencyCrFlag"}},{"kind":"Field","name":{"kind":"Name","value":"sensitiveFlag"}},{"kind":"Field","name":{"kind":"Name","value":"crStatus"}},{"kind":"Field","name":{"kind":"Name","value":"implementationDate"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"EChimpTDL"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"issuedDate"}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetEchimpCrandTdlQuery, GetEchimpCrandTdlQueryVariables>;
export const TypedGetFavoritesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetFavorites"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filter"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ModelPlanFilter"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"isMAC"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlanCollection"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"filter"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filter"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"isFavorite"}},{"kind":"Field","name":{"kind":"Name","value":"nameHistory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"sort"},"value":{"kind":"EnumValue","value":"DESC"}}]},{"kind":"Field","name":{"kind":"Name","value":"isCollaborator"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"basics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"goal"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodStarts"}}]}},{"kind":"Field","name":{"kind":"Name","value":"collaborators"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"userAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"teamRoles"}}]}},{"kind":"Field","name":{"kind":"Name","value":"crs"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"isMAC"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"idNumber"}}]}},{"kind":"Field","name":{"kind":"Name","value":"tdls"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"isMAC"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"idNumber"}}]}}]}}]}}]} as unknown as DocumentNode<GetFavoritesQuery, GetFavoritesQueryVariables>;
export const TypedGetModelPlanDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetModelPlan"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"opSolutionLastModifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"archived"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"taskListStatus"}},{"kind":"Field","name":{"kind":"Name","value":"isFavorite"}},{"kind":"Field","name":{"kind":"Name","value":"suggestedPhase"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"phase"}},{"kind":"Field","name":{"kind":"Name","value":"suggestedStatuses"}}]}},{"kind":"Field","name":{"kind":"Name","value":"basics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"clearanceStarts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"collaborators"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"userAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userID"}},{"kind":"Field","name":{"kind":"Name","value":"teamRoles"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}}]}},{"kind":"Field","name":{"kind":"Name","value":"documents"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}}]}},{"kind":"Field","name":{"kind":"Name","value":"crs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"idNumber"}}]}},{"kind":"Field","name":{"kind":"Name","value":"tdls"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"idNumber"}}]}},{"kind":"Field","name":{"kind":"Name","value":"echimpCRsAndTDLs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"EChimpCR"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"EChimpTDL"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"discussions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"content"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rawContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"replies"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"discussionID"}},{"kind":"Field","name":{"kind":"Name","value":"content"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rawContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"generalCharacteristics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedBy"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"participantsAndProviders"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedBy"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaries"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedBy"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedBy"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"payments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedBy"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}},{"kind":"Field","name":{"kind":"Name","value":"prepareForClearance"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","alias":{"kind":"Name","value":"modifiedDts"},"name":{"kind":"Name","value":"latestClearanceDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetModelPlanQuery, GetModelPlanQueryVariables>;
export const TypedGetModelPlanBaseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetModelPlanBase"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]} as unknown as DocumentNode<GetModelPlanBaseQuery, GetModelPlanBaseQueryVariables>;
export const TypedGetModelPlansDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetModelPlans"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filter"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ModelPlanFilter"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"isMAC"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlanCollection"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"filter"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filter"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"abbreviation"}},{"kind":"Field","name":{"kind":"Name","value":"nameHistory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"sort"},"value":{"kind":"EnumValue","value":"DESC"}}]},{"kind":"Field","name":{"kind":"Name","value":"createdBy"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"isFavorite"}},{"kind":"Field","name":{"kind":"Name","value":"isCollaborator"}},{"kind":"Field","name":{"kind":"Name","value":"basics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"demoCode"}},{"kind":"Field","name":{"kind":"Name","value":"amsModelID"}},{"kind":"Field","name":{"kind":"Name","value":"modelCategory"}},{"kind":"Field","name":{"kind":"Name","value":"clearanceStarts"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodStarts"}},{"kind":"Field","name":{"kind":"Name","value":"additionalModelCategories"}},{"kind":"Field","name":{"kind":"Name","value":"applicationsStart"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"isMAC"}}}]}]}]}},{"kind":"Field","name":{"kind":"Name","value":"generalCharacteristics"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"isMAC"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"keyCharacteristics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"payments"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"isMAC"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"paymentStartDate"}}]}},{"kind":"Field","name":{"kind":"Name","value":"collaborators"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"userID"}},{"kind":"Field","name":{"kind":"Name","value":"userAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}}]}},{"kind":"Field","name":{"kind":"Name","value":"teamRoles"}}]}},{"kind":"Field","name":{"kind":"Name","value":"discussions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"replies"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"crs"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"isMAC"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"idNumber"}}]}},{"kind":"Field","name":{"kind":"Name","value":"tdls"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"isMAC"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"idNumber"}}]}}]}}]}}]} as unknown as DocumentNode<GetModelPlansQuery, GetModelPlansQueryVariables>;
export const TypedGetUserInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetUserInfo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"username"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userAccount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"username"},"value":{"kind":"Variable","name":{"kind":"Name","value":"username"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"givenName"}},{"kind":"Field","name":{"kind":"Name","value":"familyName"}}]}}]}}]} as unknown as DocumentNode<GetUserInfoQuery, GetUserInfoQueryVariables>;
export const TypedSearchOktaUsersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SearchOktaUsers"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"searchTerm"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"searchOktaUsers"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"searchTerm"},"value":{"kind":"Variable","name":{"kind":"Name","value":"searchTerm"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"displayName"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"email"}}]}}]}}]} as unknown as DocumentNode<SearchOktaUsersQuery, SearchOktaUsersQueryVariables>;
export const TypedUpdateModelPlanDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateModelPlan"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ModelPlanChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateModelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateModelPlanMutation, UpdateModelPlanMutationVariables>;
export const TypedUpdateNdaDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateNDA"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"agreeToNDA"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"agree"},"value":{"kind":"BooleanValue","value":true}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"agreed"}},{"kind":"Field","name":{"kind":"Name","value":"agreedDts"}}]}}]}}]} as unknown as DocumentNode<UpdateNdaMutation, UpdateNdaMutationVariables>;
export const TypedGetNotificationSettingsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetNotificationSettings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"currentUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"notificationPreferences"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"dailyDigestComplete"}},{"kind":"Field","name":{"kind":"Name","value":"addedAsCollaborator"}},{"kind":"Field","name":{"kind":"Name","value":"taggedInDiscussion"}},{"kind":"Field","name":{"kind":"Name","value":"taggedInDiscussionReply"}},{"kind":"Field","name":{"kind":"Name","value":"newDiscussionReply"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanShared"}},{"kind":"Field","name":{"kind":"Name","value":"newModelPlan"}},{"kind":"Field","name":{"kind":"Name","value":"datesChanged"}},{"kind":"Field","name":{"kind":"Name","value":"datesChangedNotificationType"}}]}}]}}]}}]} as unknown as DocumentNode<GetNotificationSettingsQuery, GetNotificationSettingsQueryVariables>;
export const TypedGetNotificationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetNotifications"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"currentUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"notifications"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"numUnreadNotifications"}},{"kind":"Field","name":{"kind":"Name","value":"notifications"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"isRead"}},{"kind":"Field","name":{"kind":"Name","value":"inAppSent"}},{"kind":"Field","name":{"kind":"Name","value":"emailSent"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"activity"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"activityType"}},{"kind":"Field","name":{"kind":"Name","value":"entityID"}},{"kind":"Field","name":{"kind":"Name","value":"actorID"}},{"kind":"Field","name":{"kind":"Name","value":"actorUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"metaData"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"NewDiscussionRepliedActivityMeta"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"discussionID"}},{"kind":"Field","name":{"kind":"Name","value":"replyID"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"DatesChangedActivityMeta"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"dateChanges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"isChanged"}},{"kind":"Field","name":{"kind":"Name","value":"field"}},{"kind":"Field","name":{"kind":"Name","value":"isRange"}},{"kind":"Field","name":{"kind":"Name","value":"oldDate"}},{"kind":"Field","name":{"kind":"Name","value":"newDate"}},{"kind":"Field","name":{"kind":"Name","value":"oldRangeStart"}},{"kind":"Field","name":{"kind":"Name","value":"oldRangeEnd"}},{"kind":"Field","name":{"kind":"Name","value":"newRangeStart"}},{"kind":"Field","name":{"kind":"Name","value":"newRangeEnd"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TaggedInPlanDiscussionActivityMeta"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"discussionID"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AddedAsCollaboratorMeta"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TaggedInDiscussionReplyActivityMeta"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"discussionID"}},{"kind":"Field","name":{"kind":"Name","value":"replyID"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ModelPlanSharedActivityMeta"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"optionalMessage"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"NewModelPlanActivityMeta"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"DailyDigestCompleteActivityMeta"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanIDs"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"analyzedAudits"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"changes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"oldName"}},{"kind":"Field","name":{"kind":"Name","value":"statusChanges"}}]}},{"kind":"Field","name":{"kind":"Name","value":"documents"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"crTdls"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"activity"}}]}},{"kind":"Field","name":{"kind":"Name","value":"planSections"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updated"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReview"}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearance"}}]}},{"kind":"Field","name":{"kind":"Name","value":"modelLeads"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"added"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"planDiscussions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"activity"}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetNotificationsQuery, GetNotificationsQueryVariables>;
export const TypedGetPollNotificationsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPollNotifications"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"currentUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"notifications"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"numUnreadNotifications"}}]}}]}}]}}]} as unknown as DocumentNode<GetPollNotificationsQuery, GetPollNotificationsQueryVariables>;
export const TypedUpdateAllNotificationsAsReadDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateAllNotificationsAsRead"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"markAllNotificationsAsRead"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateAllNotificationsAsReadMutation, UpdateAllNotificationsAsReadMutationVariables>;
export const TypedUpdateNotificationSettingsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateNotificationSettings"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UserNotificationPreferencesChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateUserNotificationPreferences"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"dailyDigestComplete"}},{"kind":"Field","name":{"kind":"Name","value":"addedAsCollaborator"}},{"kind":"Field","name":{"kind":"Name","value":"taggedInDiscussion"}},{"kind":"Field","name":{"kind":"Name","value":"taggedInDiscussionReply"}},{"kind":"Field","name":{"kind":"Name","value":"newDiscussionReply"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanShared"}},{"kind":"Field","name":{"kind":"Name","value":"newModelPlan"}},{"kind":"Field","name":{"kind":"Name","value":"datesChanged"}},{"kind":"Field","name":{"kind":"Name","value":"datesChangedNotificationType"}}]}}]}}]} as unknown as DocumentNode<UpdateNotificationSettingsMutation, UpdateNotificationSettingsMutationVariables>;
export const TypedMarkNotificationAsReadDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"MarkNotificationAsRead"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"notificationID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"markNotificationAsRead"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"notificationID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"notificationID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"isRead"}}]}}]}}]} as unknown as DocumentNode<MarkNotificationAsReadMutation, MarkNotificationAsReadMutationVariables>;
export const TypedGetAllOpsEvalAndLearningDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAllOpsEvalAndLearning"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"stakeholders"}},{"kind":"Field","name":{"kind":"Name","value":"stakeholdersOther"}},{"kind":"Field","name":{"kind":"Name","value":"stakeholdersNote"}},{"kind":"Field","name":{"kind":"Name","value":"helpdeskUse"}},{"kind":"Field","name":{"kind":"Name","value":"helpdeskUseNote"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupport"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupportOther"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupportHow"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupportNote"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupport"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupportNote"}},{"kind":"Field","name":{"kind":"Name","value":"technicalContactsIdentified"}},{"kind":"Field","name":{"kind":"Name","value":"technicalContactsIdentifiedDetail"}},{"kind":"Field","name":{"kind":"Name","value":"technicalContactsIdentifiedNote"}},{"kind":"Field","name":{"kind":"Name","value":"captureParticipantInfo"}},{"kind":"Field","name":{"kind":"Name","value":"captureParticipantInfoNote"}},{"kind":"Field","name":{"kind":"Name","value":"icdOwner"}},{"kind":"Field","name":{"kind":"Name","value":"draftIcdDueDate"}},{"kind":"Field","name":{"kind":"Name","value":"icdNote"}},{"kind":"Field","name":{"kind":"Name","value":"uatNeeds"}},{"kind":"Field","name":{"kind":"Name","value":"stcNeeds"}},{"kind":"Field","name":{"kind":"Name","value":"testingTimelines"}},{"kind":"Field","name":{"kind":"Name","value":"testingNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataMonitoringFileTypes"}},{"kind":"Field","name":{"kind":"Name","value":"dataMonitoringFileOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataResponseType"}},{"kind":"Field","name":{"kind":"Name","value":"dataResponseFileFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"dataFullTimeOrIncremental"}},{"kind":"Field","name":{"kind":"Name","value":"eftSetUp"}},{"kind":"Field","name":{"kind":"Name","value":"unsolicitedAdjustmentsIncluded"}},{"kind":"Field","name":{"kind":"Name","value":"dataFlowDiagramsNeeded"}},{"kind":"Field","name":{"kind":"Name","value":"produceBenefitEnhancementFiles"}},{"kind":"Field","name":{"kind":"Name","value":"fileNamingConventions"}},{"kind":"Field","name":{"kind":"Name","value":"dataMonitoringNote"}},{"kind":"Field","name":{"kind":"Name","value":"benchmarkForPerformance"}},{"kind":"Field","name":{"kind":"Name","value":"benchmarkForPerformanceNote"}},{"kind":"Field","name":{"kind":"Name","value":"computePerformanceScores"}},{"kind":"Field","name":{"kind":"Name","value":"computePerformanceScoresNote"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustPerformance"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustFeedback"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustPayments"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustOther"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustNote"}},{"kind":"Field","name":{"kind":"Name","value":"appealPerformance"}},{"kind":"Field","name":{"kind":"Name","value":"appealFeedback"}},{"kind":"Field","name":{"kind":"Name","value":"appealPayments"}},{"kind":"Field","name":{"kind":"Name","value":"appealOther"}},{"kind":"Field","name":{"kind":"Name","value":"appealNote"}},{"kind":"Field","name":{"kind":"Name","value":"evaluationApproaches"}},{"kind":"Field","name":{"kind":"Name","value":"evaluationApproachOther"}},{"kind":"Field","name":{"kind":"Name","value":"evalutaionApproachNote"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvment"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvmentOther"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvmentNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoring"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoringOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoringNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataToSendParticicipants"}},{"kind":"Field","name":{"kind":"Name","value":"dataToSendParticicipantsOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataToSendParticicipantsNote"}},{"kind":"Field","name":{"kind":"Name","value":"shareCclfData"}},{"kind":"Field","name":{"kind":"Name","value":"shareCclfDataNote"}},{"kind":"Field","name":{"kind":"Name","value":"sendFilesBetweenCcw"}},{"kind":"Field","name":{"kind":"Name","value":"sendFilesBetweenCcwNote"}},{"kind":"Field","name":{"kind":"Name","value":"appToSendFilesToKnown"}},{"kind":"Field","name":{"kind":"Name","value":"appToSendFilesToWhich"}},{"kind":"Field","name":{"kind":"Name","value":"appToSendFilesToNote"}},{"kind":"Field","name":{"kind":"Name","value":"useCcwForFileDistribiutionToParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"useCcwForFileDistribiutionToParticipantsNote"}},{"kind":"Field","name":{"kind":"Name","value":"developNewQualityMeasures"}},{"kind":"Field","name":{"kind":"Name","value":"developNewQualityMeasuresNote"}},{"kind":"Field","name":{"kind":"Name","value":"qualityPerformanceImpactsPayment"}},{"kind":"Field","name":{"kind":"Name","value":"qualityPerformanceImpactsPaymentOther"}},{"kind":"Field","name":{"kind":"Name","value":"qualityPerformanceImpactsPaymentNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingStarts"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingStartsOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingStartsNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionStarts"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionStartsOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingStarts"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingStartsOther"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingStartsNote"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"modelLearningSystems"}},{"kind":"Field","name":{"kind":"Name","value":"modelLearningSystemsOther"}},{"kind":"Field","name":{"kind":"Name","value":"modelLearningSystemsNote"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedChallenges"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]} as unknown as DocumentNode<GetAllOpsEvalAndLearningQuery, GetAllOpsEvalAndLearningQueryVariables>;
export const TypedGetCcwAndQualityDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCCWAndQuality"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvment"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoring"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupport"}},{"kind":"Field","name":{"kind":"Name","value":"sendFilesBetweenCcw"}},{"kind":"Field","name":{"kind":"Name","value":"sendFilesBetweenCcwNote"}},{"kind":"Field","name":{"kind":"Name","value":"appToSendFilesToKnown"}},{"kind":"Field","name":{"kind":"Name","value":"appToSendFilesToWhich"}},{"kind":"Field","name":{"kind":"Name","value":"appToSendFilesToNote"}},{"kind":"Field","name":{"kind":"Name","value":"useCcwForFileDistribiutionToParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"useCcwForFileDistribiutionToParticipantsNote"}},{"kind":"Field","name":{"kind":"Name","value":"developNewQualityMeasures"}},{"kind":"Field","name":{"kind":"Name","value":"developNewQualityMeasuresNote"}},{"kind":"Field","name":{"kind":"Name","value":"qualityPerformanceImpactsPayment"}},{"kind":"Field","name":{"kind":"Name","value":"qualityPerformanceImpactsPaymentOther"}},{"kind":"Field","name":{"kind":"Name","value":"qualityPerformanceImpactsPaymentNote"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetCcwAndQualityQuery, GetCcwAndQualityQueryVariables>;
export const TypedGetDataSharingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetDataSharing"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvment"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoring"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupport"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingStarts"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingStartsOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataSharingStartsNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionStarts"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionStartsOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataCollectionFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingStarts"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingStartsOther"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingStartsNote"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"qualityReportingFrequencyOther"}}]}}]}}]}}]} as unknown as DocumentNode<GetDataSharingQuery, GetDataSharingQueryVariables>;
export const TypedGetEvaluationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetEvaluation"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvment"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoring"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupport"}},{"kind":"Field","name":{"kind":"Name","value":"evaluationApproaches"}},{"kind":"Field","name":{"kind":"Name","value":"evaluationApproachOther"}},{"kind":"Field","name":{"kind":"Name","value":"evalutaionApproachNote"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvment"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvmentOther"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvmentNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoring"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoringOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoringNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataToSendParticicipants"}},{"kind":"Field","name":{"kind":"Name","value":"dataToSendParticicipantsOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataToSendParticicipantsNote"}},{"kind":"Field","name":{"kind":"Name","value":"shareCclfData"}},{"kind":"Field","name":{"kind":"Name","value":"shareCclfDataNote"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetEvaluationQuery, GetEvaluationQueryVariables>;
export const TypedGetIddocDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetIDDOC"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvment"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoring"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupport"}},{"kind":"Field","name":{"kind":"Name","value":"technicalContactsIdentified"}},{"kind":"Field","name":{"kind":"Name","value":"technicalContactsIdentifiedDetail"}},{"kind":"Field","name":{"kind":"Name","value":"technicalContactsIdentifiedNote"}},{"kind":"Field","name":{"kind":"Name","value":"captureParticipantInfo"}},{"kind":"Field","name":{"kind":"Name","value":"captureParticipantInfoNote"}},{"kind":"Field","name":{"kind":"Name","value":"icdOwner"}},{"kind":"Field","name":{"kind":"Name","value":"draftIcdDueDate"}},{"kind":"Field","name":{"kind":"Name","value":"icdNote"}}]}}]}}]}}]} as unknown as DocumentNode<GetIddocQuery, GetIddocQueryVariables>;
export const TypedGetIddocMonitoringDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetIDDOCMonitoring"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvment"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoring"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupport"}},{"kind":"Field","name":{"kind":"Name","value":"dataFullTimeOrIncremental"}},{"kind":"Field","name":{"kind":"Name","value":"eftSetUp"}},{"kind":"Field","name":{"kind":"Name","value":"unsolicitedAdjustmentsIncluded"}},{"kind":"Field","name":{"kind":"Name","value":"dataFlowDiagramsNeeded"}},{"kind":"Field","name":{"kind":"Name","value":"produceBenefitEnhancementFiles"}},{"kind":"Field","name":{"kind":"Name","value":"fileNamingConventions"}},{"kind":"Field","name":{"kind":"Name","value":"dataMonitoringNote"}}]}}]}}]}}]} as unknown as DocumentNode<GetIddocMonitoringQuery, GetIddocMonitoringQueryVariables>;
export const TypedGetIddocTestingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetIDDOCTesting"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvment"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoring"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupport"}},{"kind":"Field","name":{"kind":"Name","value":"uatNeeds"}},{"kind":"Field","name":{"kind":"Name","value":"stcNeeds"}},{"kind":"Field","name":{"kind":"Name","value":"testingTimelines"}},{"kind":"Field","name":{"kind":"Name","value":"testingNote"}},{"kind":"Field","name":{"kind":"Name","value":"dataMonitoringFileTypes"}},{"kind":"Field","name":{"kind":"Name","value":"dataMonitoringFileOther"}},{"kind":"Field","name":{"kind":"Name","value":"dataResponseType"}},{"kind":"Field","name":{"kind":"Name","value":"dataResponseFileFrequency"}}]}}]}}]}}]} as unknown as DocumentNode<GetIddocTestingQuery, GetIddocTestingQueryVariables>;
export const TypedGetLearningDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetLearning"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvment"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoring"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupport"}},{"kind":"Field","name":{"kind":"Name","value":"modelLearningSystems"}},{"kind":"Field","name":{"kind":"Name","value":"modelLearningSystemsOther"}},{"kind":"Field","name":{"kind":"Name","value":"modelLearningSystemsNote"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedChallenges"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetLearningQuery, GetLearningQueryVariables>;
export const TypedGetOpsEvalAndLearningDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetOpsEvalAndLearning"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvment"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoring"}},{"kind":"Field","name":{"kind":"Name","value":"stakeholders"}},{"kind":"Field","name":{"kind":"Name","value":"stakeholdersOther"}},{"kind":"Field","name":{"kind":"Name","value":"stakeholdersNote"}},{"kind":"Field","name":{"kind":"Name","value":"helpdeskUse"}},{"kind":"Field","name":{"kind":"Name","value":"helpdeskUseNote"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupport"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupportOther"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupportHow"}},{"kind":"Field","name":{"kind":"Name","value":"contractorSupportNote"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupport"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupportNote"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetOpsEvalAndLearningQuery, GetOpsEvalAndLearningQueryVariables>;
export const TypedGetPerformanceDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPerformance"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ccmInvolvment"}},{"kind":"Field","name":{"kind":"Name","value":"dataNeededForMonitoring"}},{"kind":"Field","name":{"kind":"Name","value":"iddocSupport"}},{"kind":"Field","name":{"kind":"Name","value":"benchmarkForPerformance"}},{"kind":"Field","name":{"kind":"Name","value":"benchmarkForPerformanceNote"}},{"kind":"Field","name":{"kind":"Name","value":"computePerformanceScores"}},{"kind":"Field","name":{"kind":"Name","value":"computePerformanceScoresNote"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustPerformance"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustFeedback"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustPayments"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustOther"}},{"kind":"Field","name":{"kind":"Name","value":"riskAdjustNote"}},{"kind":"Field","name":{"kind":"Name","value":"appealPerformance"}},{"kind":"Field","name":{"kind":"Name","value":"appealFeedback"}},{"kind":"Field","name":{"kind":"Name","value":"appealPayments"}},{"kind":"Field","name":{"kind":"Name","value":"appealOther"}},{"kind":"Field","name":{"kind":"Name","value":"appealNote"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetPerformanceQuery, GetPerformanceQueryVariables>;
export const TypedUpdatePlanOpsEvalAndLearningDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdatePlanOpsEvalAndLearning"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanOpsEvalAndLearningChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanOpsEvalAndLearning"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdatePlanOpsEvalAndLearningMutation, UpdatePlanOpsEvalAndLearningMutationVariables>;
export const TypedGetAllParticipantsAndProvidersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAllParticipantsAndProviders"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"participantsAndProviders"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"participants"}},{"kind":"Field","name":{"kind":"Name","value":"medicareProviderType"}},{"kind":"Field","name":{"kind":"Name","value":"isNewTypeOfProvidersOrSuppliers"}},{"kind":"Field","name":{"kind":"Name","value":"statesEngagement"}},{"kind":"Field","name":{"kind":"Name","value":"participantsOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantsNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantsCurrentlyInModels"}},{"kind":"Field","name":{"kind":"Name","value":"participantsCurrentlyInModelsNote"}},{"kind":"Field","name":{"kind":"Name","value":"modelApplicationLevel"}},{"kind":"Field","name":{"kind":"Name","value":"expectedNumberOfParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"estimateConfidence"}},{"kind":"Field","name":{"kind":"Name","value":"confidenceNote"}},{"kind":"Field","name":{"kind":"Name","value":"recruitmentMethod"}},{"kind":"Field","name":{"kind":"Name","value":"recruitmentOther"}},{"kind":"Field","name":{"kind":"Name","value":"recruitmentNote"}},{"kind":"Field","name":{"kind":"Name","value":"selectionMethod"}},{"kind":"Field","name":{"kind":"Name","value":"selectionOther"}},{"kind":"Field","name":{"kind":"Name","value":"selectionNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"communicationMethod"}},{"kind":"Field","name":{"kind":"Name","value":"communicationMethodOther"}},{"kind":"Field","name":{"kind":"Name","value":"communicationNote"}},{"kind":"Field","name":{"kind":"Name","value":"riskType"}},{"kind":"Field","name":{"kind":"Name","value":"riskOther"}},{"kind":"Field","name":{"kind":"Name","value":"riskNote"}},{"kind":"Field","name":{"kind":"Name","value":"willRiskChange"}},{"kind":"Field","name":{"kind":"Name","value":"willRiskChangeNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuarantee"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuaranteeType"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuaranteeOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuaranteeNote"}},{"kind":"Field","name":{"kind":"Name","value":"coordinateWork"}},{"kind":"Field","name":{"kind":"Name","value":"coordinateWorkNote"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePayments"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsTrack"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsNote"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsEligibility"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsEligibilityOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantsIds"}},{"kind":"Field","name":{"kind":"Name","value":"participantsIdsOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantsIDSNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerAddMethod"}},{"kind":"Field","name":{"kind":"Name","value":"providerAddMethodOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerAddMethodNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerLeaveMethod"}},{"kind":"Field","name":{"kind":"Name","value":"providerLeaveMethodOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerLeaveMethodNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerOverlap"}},{"kind":"Field","name":{"kind":"Name","value":"providerOverlapHierarchy"}},{"kind":"Field","name":{"kind":"Name","value":"providerOverlapNote"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]} as unknown as DocumentNode<GetAllParticipantsAndProvidersQuery, GetAllParticipantsAndProvidersQueryVariables>;
export const TypedGetCommunicationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCommunication"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"participantsAndProviders"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantAddedFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantRemovedFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"communicationMethod"}},{"kind":"Field","name":{"kind":"Name","value":"communicationMethodOther"}},{"kind":"Field","name":{"kind":"Name","value":"communicationNote"}},{"kind":"Field","name":{"kind":"Name","value":"riskType"}},{"kind":"Field","name":{"kind":"Name","value":"riskOther"}},{"kind":"Field","name":{"kind":"Name","value":"riskNote"}},{"kind":"Field","name":{"kind":"Name","value":"willRiskChange"}},{"kind":"Field","name":{"kind":"Name","value":"willRiskChangeNote"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetCommunicationQuery, GetCommunicationQueryVariables>;
export const TypedGetCoordinationDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCoordination"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"participantsAndProviders"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuarantee"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuaranteeType"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuaranteeOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantRequireFinancialGuaranteeNote"}},{"kind":"Field","name":{"kind":"Name","value":"coordinateWork"}},{"kind":"Field","name":{"kind":"Name","value":"coordinateWorkNote"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePayments"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsEligibility"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsEligibilityOther"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsTrack"}},{"kind":"Field","name":{"kind":"Name","value":"gainsharePaymentsNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantsIds"}},{"kind":"Field","name":{"kind":"Name","value":"participantsIdsOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantsIDSNote"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetCoordinationQuery, GetCoordinationQueryVariables>;
export const TypedGetParticipantOptionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetParticipantOptions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"participantsAndProviders"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"expectedNumberOfParticipants"}},{"kind":"Field","name":{"kind":"Name","value":"estimateConfidence"}},{"kind":"Field","name":{"kind":"Name","value":"confidenceNote"}},{"kind":"Field","name":{"kind":"Name","value":"recruitmentMethod"}},{"kind":"Field","name":{"kind":"Name","value":"recruitmentOther"}},{"kind":"Field","name":{"kind":"Name","value":"recruitmentNote"}},{"kind":"Field","name":{"kind":"Name","value":"selectionMethod"}},{"kind":"Field","name":{"kind":"Name","value":"selectionOther"}},{"kind":"Field","name":{"kind":"Name","value":"selectionNote"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetParticipantOptionsQuery, GetParticipantOptionsQueryVariables>;
export const TypedGetParticipantsAndProvidersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetParticipantsAndProviders"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"participantsAndProviders"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"participants"}},{"kind":"Field","name":{"kind":"Name","value":"medicareProviderType"}},{"kind":"Field","name":{"kind":"Name","value":"isNewTypeOfProvidersOrSuppliers"}},{"kind":"Field","name":{"kind":"Name","value":"statesEngagement"}},{"kind":"Field","name":{"kind":"Name","value":"participantsOther"}},{"kind":"Field","name":{"kind":"Name","value":"participantsNote"}},{"kind":"Field","name":{"kind":"Name","value":"participantsCurrentlyInModels"}},{"kind":"Field","name":{"kind":"Name","value":"participantsCurrentlyInModelsNote"}},{"kind":"Field","name":{"kind":"Name","value":"modelApplicationLevel"}}]}}]}}]}}]} as unknown as DocumentNode<GetParticipantsAndProvidersQuery, GetParticipantsAndProvidersQueryVariables>;
export const TypedGetProviderOptionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetProviderOptions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"participantsAndProviders"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerAdditionFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerAddMethod"}},{"kind":"Field","name":{"kind":"Name","value":"providerAddMethodOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerAddMethodNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerLeaveMethod"}},{"kind":"Field","name":{"kind":"Name","value":"providerLeaveMethodOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerLeaveMethodNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"providerRemovalFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"providerOverlap"}},{"kind":"Field","name":{"kind":"Name","value":"providerOverlapHierarchy"}},{"kind":"Field","name":{"kind":"Name","value":"providerOverlapNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetProviderOptionsQuery, GetProviderOptionsQueryVariables>;
export const TypedUpdatePlanParticipantsAndProvidersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdatePlanParticipantsAndProviders"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanParticipantsAndProvidersChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanParticipantsAndProviders"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdatePlanParticipantsAndProvidersMutation, UpdatePlanParticipantsAndProvidersMutationVariables>;
export const TypedGetAllPaymentsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAllPayments"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"payments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fundingSource"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourcePatientProtectionInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceMedicareAInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceMedicareBInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceOther"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceNote"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceR"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRPatientProtectionInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRMedicareAInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRMedicareBInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceROther"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRNote"}},{"kind":"Field","name":{"kind":"Name","value":"payRecipients"}},{"kind":"Field","name":{"kind":"Name","value":"payRecipientsOtherSpecification"}},{"kind":"Field","name":{"kind":"Name","value":"payRecipientsNote"}},{"kind":"Field","name":{"kind":"Name","value":"payType"}},{"kind":"Field","name":{"kind":"Name","value":"payTypeNote"}},{"kind":"Field","name":{"kind":"Name","value":"payClaims"}},{"kind":"Field","name":{"kind":"Name","value":"payClaimsOther"}},{"kind":"Field","name":{"kind":"Name","value":"payClaimsNote"}},{"kind":"Field","name":{"kind":"Name","value":"shouldAnyProvidersExcludedFFSSystems"}},{"kind":"Field","name":{"kind":"Name","value":"shouldAnyProviderExcludedFFSSystemsNote"}},{"kind":"Field","name":{"kind":"Name","value":"changesMedicarePhysicianFeeSchedule"}},{"kind":"Field","name":{"kind":"Name","value":"changesMedicarePhysicianFeeScheduleNote"}},{"kind":"Field","name":{"kind":"Name","value":"affectsMedicareSecondaryPayerClaims"}},{"kind":"Field","name":{"kind":"Name","value":"affectsMedicareSecondaryPayerClaimsHow"}},{"kind":"Field","name":{"kind":"Name","value":"affectsMedicareSecondaryPayerClaimsNote"}},{"kind":"Field","name":{"kind":"Name","value":"payModelDifferentiation"}},{"kind":"Field","name":{"kind":"Name","value":"willBePaymentAdjustments"}},{"kind":"Field","name":{"kind":"Name","value":"willBePaymentAdjustmentsNote"}},{"kind":"Field","name":{"kind":"Name","value":"creatingDependenciesBetweenServices"}},{"kind":"Field","name":{"kind":"Name","value":"creatingDependenciesBetweenServicesNote"}},{"kind":"Field","name":{"kind":"Name","value":"needsClaimsDataCollection"}},{"kind":"Field","name":{"kind":"Name","value":"needsClaimsDataCollectionNote"}},{"kind":"Field","name":{"kind":"Name","value":"providingThirdPartyFile"}},{"kind":"Field","name":{"kind":"Name","value":"isContractorAwareTestDataRequirements"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryCostSharingLevelAndHandling"}},{"kind":"Field","name":{"kind":"Name","value":"waiveBeneficiaryCostSharingForAnyServices"}},{"kind":"Field","name":{"kind":"Name","value":"waiveBeneficiaryCostSharingServiceSpecification"}},{"kind":"Field","name":{"kind":"Name","value":"waiverOnlyAppliesPartOfPayment"}},{"kind":"Field","name":{"kind":"Name","value":"waiveBeneficiaryCostSharingNote"}},{"kind":"Field","name":{"kind":"Name","value":"nonClaimsPayments"}},{"kind":"Field","name":{"kind":"Name","value":"nonClaimsPaymentsNote"}},{"kind":"Field","name":{"kind":"Name","value":"nonClaimsPaymentOther"}},{"kind":"Field","name":{"kind":"Name","value":"paymentCalculationOwner"}},{"kind":"Field","name":{"kind":"Name","value":"numberPaymentsPerPayCycle"}},{"kind":"Field","name":{"kind":"Name","value":"numberPaymentsPerPayCycleNote"}},{"kind":"Field","name":{"kind":"Name","value":"sharedSystemsInvolvedAdditionalClaimPayment"}},{"kind":"Field","name":{"kind":"Name","value":"sharedSystemsInvolvedAdditionalClaimPaymentNote"}},{"kind":"Field","name":{"kind":"Name","value":"planningToUseInnovationPaymentContractor"}},{"kind":"Field","name":{"kind":"Name","value":"planningToUseInnovationPaymentContractorNote"}},{"kind":"Field","name":{"kind":"Name","value":"expectedCalculationComplexityLevel"}},{"kind":"Field","name":{"kind":"Name","value":"expectedCalculationComplexityLevelNote"}},{"kind":"Field","name":{"kind":"Name","value":"claimsProcessingPrecedence"}},{"kind":"Field","name":{"kind":"Name","value":"claimsProcessingPrecedenceOther"}},{"kind":"Field","name":{"kind":"Name","value":"claimsProcessingPrecedenceNote"}},{"kind":"Field","name":{"kind":"Name","value":"canParticipantsSelectBetweenPaymentMechanisms"}},{"kind":"Field","name":{"kind":"Name","value":"canParticipantsSelectBetweenPaymentMechanismsHow"}},{"kind":"Field","name":{"kind":"Name","value":"canParticipantsSelectBetweenPaymentMechanismsNote"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"willRecoverPayments"}},{"kind":"Field","name":{"kind":"Name","value":"willRecoverPaymentsNote"}},{"kind":"Field","name":{"kind":"Name","value":"anticipateReconcilingPaymentsRetrospectively"}},{"kind":"Field","name":{"kind":"Name","value":"anticipateReconcilingPaymentsRetrospectivelyNote"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"paymentStartDate"}},{"kind":"Field","name":{"kind":"Name","value":"paymentStartDateNote"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]} as unknown as DocumentNode<GetAllPaymentsQuery, GetAllPaymentsQueryVariables>;
export const TypedGetAnticipateDependenciesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAnticipateDependencies"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"payments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"payType"}},{"kind":"Field","name":{"kind":"Name","value":"payClaims"}},{"kind":"Field","name":{"kind":"Name","value":"willBePaymentAdjustments"}},{"kind":"Field","name":{"kind":"Name","value":"willBePaymentAdjustmentsNote"}},{"kind":"Field","name":{"kind":"Name","value":"creatingDependenciesBetweenServices"}},{"kind":"Field","name":{"kind":"Name","value":"creatingDependenciesBetweenServicesNote"}},{"kind":"Field","name":{"kind":"Name","value":"needsClaimsDataCollection"}},{"kind":"Field","name":{"kind":"Name","value":"needsClaimsDataCollectionNote"}},{"kind":"Field","name":{"kind":"Name","value":"providingThirdPartyFile"}},{"kind":"Field","name":{"kind":"Name","value":"isContractorAwareTestDataRequirements"}}]}}]}}]}}]} as unknown as DocumentNode<GetAnticipateDependenciesQuery, GetAnticipateDependenciesQueryVariables>;
export const TypedGetBeneficiaryCostSharingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetBeneficiaryCostSharing"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"payments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"payType"}},{"kind":"Field","name":{"kind":"Name","value":"payClaims"}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaryCostSharingLevelAndHandling"}},{"kind":"Field","name":{"kind":"Name","value":"waiveBeneficiaryCostSharingForAnyServices"}},{"kind":"Field","name":{"kind":"Name","value":"waiveBeneficiaryCostSharingServiceSpecification"}},{"kind":"Field","name":{"kind":"Name","value":"waiverOnlyAppliesPartOfPayment"}},{"kind":"Field","name":{"kind":"Name","value":"waiveBeneficiaryCostSharingNote"}}]}}]}}]}}]} as unknown as DocumentNode<GetBeneficiaryCostSharingQuery, GetBeneficiaryCostSharingQueryVariables>;
export const TypedGetClaimsBasedPaymentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetClaimsBasedPayment"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"payments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"payType"}},{"kind":"Field","name":{"kind":"Name","value":"payClaims"}},{"kind":"Field","name":{"kind":"Name","value":"payClaimsNote"}},{"kind":"Field","name":{"kind":"Name","value":"payClaimsOther"}},{"kind":"Field","name":{"kind":"Name","value":"shouldAnyProvidersExcludedFFSSystems"}},{"kind":"Field","name":{"kind":"Name","value":"shouldAnyProviderExcludedFFSSystemsNote"}},{"kind":"Field","name":{"kind":"Name","value":"changesMedicarePhysicianFeeSchedule"}},{"kind":"Field","name":{"kind":"Name","value":"changesMedicarePhysicianFeeScheduleNote"}},{"kind":"Field","name":{"kind":"Name","value":"affectsMedicareSecondaryPayerClaims"}},{"kind":"Field","name":{"kind":"Name","value":"affectsMedicareSecondaryPayerClaimsHow"}},{"kind":"Field","name":{"kind":"Name","value":"affectsMedicareSecondaryPayerClaimsNote"}},{"kind":"Field","name":{"kind":"Name","value":"payModelDifferentiation"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetClaimsBasedPaymentQuery, GetClaimsBasedPaymentQueryVariables>;
export const TypedGetComplexityDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetComplexity"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"payments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"payType"}},{"kind":"Field","name":{"kind":"Name","value":"payClaims"}},{"kind":"Field","name":{"kind":"Name","value":"expectedCalculationComplexityLevel"}},{"kind":"Field","name":{"kind":"Name","value":"expectedCalculationComplexityLevelNote"}},{"kind":"Field","name":{"kind":"Name","value":"claimsProcessingPrecedence"}},{"kind":"Field","name":{"kind":"Name","value":"claimsProcessingPrecedenceOther"}},{"kind":"Field","name":{"kind":"Name","value":"claimsProcessingPrecedenceNote"}},{"kind":"Field","name":{"kind":"Name","value":"canParticipantsSelectBetweenPaymentMechanisms"}},{"kind":"Field","name":{"kind":"Name","value":"canParticipantsSelectBetweenPaymentMechanismsHow"}},{"kind":"Field","name":{"kind":"Name","value":"canParticipantsSelectBetweenPaymentMechanismsNote"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"anticipatedPaymentFrequencyNote"}}]}}]}}]}}]} as unknown as DocumentNode<GetComplexityQuery, GetComplexityQueryVariables>;
export const TypedGetFundingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetFunding"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"payments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSource"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourcePatientProtectionInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceMedicareAInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceMedicareBInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceOther"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceNote"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceR"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRPatientProtectionInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRMedicareAInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRMedicareBInfo"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceROther"}},{"kind":"Field","name":{"kind":"Name","value":"fundingSourceRNote"}},{"kind":"Field","name":{"kind":"Name","value":"payRecipients"}},{"kind":"Field","name":{"kind":"Name","value":"payRecipientsOtherSpecification"}},{"kind":"Field","name":{"kind":"Name","value":"payRecipientsNote"}},{"kind":"Field","name":{"kind":"Name","value":"payType"}},{"kind":"Field","name":{"kind":"Name","value":"payTypeNote"}},{"kind":"Field","name":{"kind":"Name","value":"payClaims"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetFundingQuery, GetFundingQueryVariables>;
export const TypedGetNonClaimsBasedPaymentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetNonClaimsBasedPayment"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"payments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"payType"}},{"kind":"Field","name":{"kind":"Name","value":"payClaims"}},{"kind":"Field","name":{"kind":"Name","value":"nonClaimsPayments"}},{"kind":"Field","name":{"kind":"Name","value":"nonClaimsPaymentsNote"}},{"kind":"Field","name":{"kind":"Name","value":"nonClaimsPaymentOther"}},{"kind":"Field","name":{"kind":"Name","value":"paymentCalculationOwner"}},{"kind":"Field","name":{"kind":"Name","value":"numberPaymentsPerPayCycle"}},{"kind":"Field","name":{"kind":"Name","value":"numberPaymentsPerPayCycleNote"}},{"kind":"Field","name":{"kind":"Name","value":"sharedSystemsInvolvedAdditionalClaimPayment"}},{"kind":"Field","name":{"kind":"Name","value":"sharedSystemsInvolvedAdditionalClaimPaymentNote"}},{"kind":"Field","name":{"kind":"Name","value":"planningToUseInnovationPaymentContractor"}},{"kind":"Field","name":{"kind":"Name","value":"planningToUseInnovationPaymentContractorNote"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetNonClaimsBasedPaymentQuery, GetNonClaimsBasedPaymentQueryVariables>;
export const TypedGetRecoverDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetRecover"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"payments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"payType"}},{"kind":"Field","name":{"kind":"Name","value":"payClaims"}},{"kind":"Field","name":{"kind":"Name","value":"willRecoverPayments"}},{"kind":"Field","name":{"kind":"Name","value":"willRecoverPaymentsNote"}},{"kind":"Field","name":{"kind":"Name","value":"anticipateReconcilingPaymentsRetrospectively"}},{"kind":"Field","name":{"kind":"Name","value":"anticipateReconcilingPaymentsRetrospectivelyNote"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"paymentReconciliationFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequency"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequencyContinually"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequencyOther"}},{"kind":"Field","name":{"kind":"Name","value":"paymentDemandRecoupmentFrequencyNote"}},{"kind":"Field","name":{"kind":"Name","value":"paymentStartDate"}},{"kind":"Field","name":{"kind":"Name","value":"paymentStartDateNote"}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForReviewDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operationalNeeds"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}}]}}]}}]}}]} as unknown as DocumentNode<GetRecoverQuery, GetRecoverQueryVariables>;
export const TypedUpdatePaymentsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdatePayments"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanPaymentsChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanPayments"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdatePaymentsMutation, UpdatePaymentsMutationVariables>;
export const TypedGetClearanceStatusesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetClearanceStatuses"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"includePrepareForClearance"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"basics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"generalCharacteristics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"participantsAndProviders"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"beneficiaries"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"opsEvalAndLearning"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"payments"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"prepareForClearance"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"includePrepareForClearance"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]} as unknown as DocumentNode<GetClearanceStatusesQuery, GetClearanceStatusesQueryVariables>;
export const TypedUpdateClearanceBasicsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateClearanceBasics"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanBasicsChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanBasics"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]} as unknown as DocumentNode<UpdateClearanceBasicsMutation, UpdateClearanceBasicsMutationVariables>;
export const TypedUpdateClearanceBeneficiariesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateClearanceBeneficiaries"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanBeneficiariesChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanBeneficiaries"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]} as unknown as DocumentNode<UpdateClearanceBeneficiariesMutation, UpdateClearanceBeneficiariesMutationVariables>;
export const TypedUpdateClearanceCharacteristicsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateClearanceCharacteristics"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanGeneralCharacteristicsChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanGeneralCharacteristics"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]} as unknown as DocumentNode<UpdateClearanceCharacteristicsMutation, UpdateClearanceCharacteristicsMutationVariables>;
export const TypedUpdateClearanceOpsEvalAndLearningDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateClearanceOpsEvalAndLearning"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanOpsEvalAndLearningChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanOpsEvalAndLearning"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]} as unknown as DocumentNode<UpdateClearanceOpsEvalAndLearningMutation, UpdateClearanceOpsEvalAndLearningMutationVariables>;
export const TypedUpdateClearanceParticipantsAndProvidersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateClearanceParticipantsAndProviders"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanParticipantsAndProvidersChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanParticipantsAndProviders"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]} as unknown as DocumentNode<UpdateClearanceParticipantsAndProvidersMutation, UpdateClearanceParticipantsAndProvidersMutationVariables>;
export const TypedUpdateClearancePaymentsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateClearancePayments"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"changes"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanPaymentsChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanPayments"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"changes"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]} as unknown as DocumentNode<UpdateClearancePaymentsMutation, UpdateClearancePaymentsMutationVariables>;
export const TypedUpdatePrepareForClearanceDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdatePrepareForClearance"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"basicsID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"basicsChanges"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanBasicsChanges"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"characteristicsID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"characteristicsChanges"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanGeneralCharacteristicsChanges"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"participantsAndProvidersID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"participantsAndProvidersChanges"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanParticipantsAndProvidersChanges"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"beneficiariesID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"benficiariesChanges"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanBeneficiariesChanges"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"opsEvalAndLearningID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"opsEvalAndLearningChanges"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanOpsEvalAndLearningChanges"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"paymentsID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"paymentsChanges"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PlanPaymentsChanges"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatePlanBasics"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"basicsID"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"basicsChanges"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"updatePlanGeneralCharacteristics"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"characteristicsID"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"characteristicsChanges"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"updatePlanParticipantsAndProviders"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"participantsAndProvidersID"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"participantsAndProvidersChanges"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"updatePlanBeneficiaries"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"beneficiariesID"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"benficiariesChanges"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"updatePlanOpsEvalAndLearning"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"opsEvalAndLearningID"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"opsEvalAndLearningChanges"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"Field","name":{"kind":"Name","value":"updatePlanPayments"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"paymentsID"}}},{"kind":"Argument","name":{"kind":"Name","value":"changes"},"value":{"kind":"Variable","name":{"kind":"Name","value":"paymentsChanges"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"readyForClearanceDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]} as unknown as DocumentNode<UpdatePrepareForClearanceMutation, UpdatePrepareForClearanceMutationVariables>;
export const TypedGetModelSummaryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetModelSummary"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"abbreviation"}},{"kind":"Field","name":{"kind":"Name","value":"createdDts"}},{"kind":"Field","name":{"kind":"Name","value":"modifiedDts"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"isFavorite"}},{"kind":"Field","name":{"kind":"Name","value":"basics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"goal"}},{"kind":"Field","name":{"kind":"Name","value":"performancePeriodStarts"}}]}},{"kind":"Field","name":{"kind":"Name","value":"generalCharacteristics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"keyCharacteristics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"isCollaborator"}},{"kind":"Field","name":{"kind":"Name","value":"collaborators"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}}]}},{"kind":"Field","name":{"kind":"Name","value":"teamRoles"}}]}},{"kind":"Field","name":{"kind":"Name","value":"crs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"idNumber"}}]}},{"kind":"Field","name":{"kind":"Name","value":"tdls"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"idNumber"}}]}}]}}]}}]} as unknown as DocumentNode<GetModelSummaryQuery, GetModelSummaryQueryVariables>;
export const TypedCreateShareModelPlanDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateShareModelPlan"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"viewFilter"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ModelViewFilter"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"usernames"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"optionalMessage"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"shareModelPlan"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"modelPlanID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}}},{"kind":"Argument","name":{"kind":"Name","value":"viewFilter"},"value":{"kind":"Variable","name":{"kind":"Name","value":"viewFilter"}}},{"kind":"Argument","name":{"kind":"Name","value":"usernames"},"value":{"kind":"Variable","name":{"kind":"Name","value":"usernames"}}},{"kind":"Argument","name":{"kind":"Name","value":"optionalMessage"},"value":{"kind":"Variable","name":{"kind":"Name","value":"optionalMessage"}}}]}]}}]} as unknown as DocumentNode<CreateShareModelPlanMutation, CreateShareModelPlanMutationVariables>;
export const TypedGetPossibleSolutionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPossibleSolutions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"possibleOperationalSolutions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"pointsOfContact"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"isTeam"}},{"kind":"Field","name":{"kind":"Name","value":"isPrimary"}},{"kind":"Field","name":{"kind":"Name","value":"role"}}]}}]}}]}}]} as unknown as DocumentNode<GetPossibleSolutionsQuery, GetPossibleSolutionsQueryVariables>;
export const TypedGetTaskListSubscriptionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetTaskListSubscriptions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"taskListSectionLocks"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"modelPlanID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"section"}},{"kind":"Field","name":{"kind":"Name","value":"lockedByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"isAssessment"}}]}}]}}]} as unknown as DocumentNode<GetTaskListSubscriptionsQuery, GetTaskListSubscriptionsQueryVariables>;
export const TypedLockTaskListSectionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"LockTaskListSection"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"section"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"TaskListSection"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lockTaskListSection"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"modelPlanID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}}},{"kind":"Argument","name":{"kind":"Name","value":"section"},"value":{"kind":"Variable","name":{"kind":"Name","value":"section"}}}]}]}}]} as unknown as DocumentNode<LockTaskListSectionMutation, LockTaskListSectionMutationVariables>;
export const TypedTaskListSubscriptionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"subscription","name":{"kind":"Name","value":"TaskListSubscription"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"onLockTaskListSectionContext"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"modelPlanID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"changeType"}},{"kind":"Field","name":{"kind":"Name","value":"lockStatus"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelPlanID"}},{"kind":"Field","name":{"kind":"Name","value":"section"}},{"kind":"Field","name":{"kind":"Name","value":"lockedByUserAccount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"commonName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"isAssessment"}}]}},{"kind":"Field","name":{"kind":"Name","value":"actionType"}}]}}]}}]} as unknown as DocumentNode<TaskListSubscriptionSubscription, TaskListSubscriptionSubscriptionVariables>;
export const TypedUnlockTaskListSectionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UnlockTaskListSection"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UUID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"section"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"TaskListSection"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"unlockTaskListSection"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"modelPlanID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"modelPlanID"}}},{"kind":"Argument","name":{"kind":"Name","value":"section"},"value":{"kind":"Variable","name":{"kind":"Name","value":"section"}}}]}]}}]} as unknown as DocumentNode<UnlockTaskListSectionMutation, UnlockTaskListSectionMutationVariables>;