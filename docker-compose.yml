---
version: '3.7'
services:
  db:
    image: postgres:14.4
    command:
      - 'postgres'
      - '-c'
      - 'log_statement=all'
      - '-c'
      - 'max_connections=25'
      - '-c'
      - 'wal_level=logical'
      - '-c'
      - 'max_wal_senders=2'
      - '-c'
      - 'max_replication_slots=2'
    environment:
      - POSTGRES_PASSWORD=mysecretpassword
    networks:
      - elastic

  db_migrate:
    image: mint-db-migrate:latest
    platform: linux/amd64
    environment:
      - FLYWAY_USER=postgres
      - FLYWAY_PASSWORD=mysecretpassword
      - FLYWAY_URL=jdbc:postgresql://db/postgres
      - FLYWAY_PLACEHOLDERS_APP_USER_PASSWORD=supersecretapp
    depends_on:
      - db
    networks:
      - elastic

  mint:
    environment:
      - CEDAR_API_KEY
      - CEDAR_API_URL
      - OKTA_API_URL
      - OKTA_API_TOKEN
      - HTTP_PROXY
      - HTTPS_PROXY
      - APP_ENV
      - APPLICATION_VERSION
      - APPLICATION_DATETIME
      - APPLICATION_TS
      - CLIENT_PROTOCOL=http
      - CLIENT_DOMAIN=localhost
      - CLIENT_PORT=3005
      - CLIENT_HOSTNAME=localhost:3005
      - CLIENT_ADDRESS=http://localhost:3005
      - API_PORT=8080
      - OKTA_CLIENT_ID=0oad9awvebnsMwWNa297
      - OKTA_ISSUER=https://test.idp.idm.cms.gov/oauth2/ausd980kt2CBBzStG297
      - EMAIL_HOST=email
      - EMAIL_PORT=1025
      - MINT_TEAM_EMAIL
      - EMAIL_SENDER
      - EMAIL_ENABLED
      - GRT_EMAIL=success@simulator.amazonses.com
      - ACCESSIBILITY_TEAM_EMAIL=success@simluator.amazonses.com
      - EMAIL_TEMPLATE_DIR=./pkg/email/templates
      - AWS_REGION=us-west-2
      - AWS_S3_FILE_UPLOAD_BUCKET=mint-app-file-uploads
      - AWS_ACCESS_KEY_ID=1
      - AWS_SECRET_ACCESS_KEY=1
      - PGHOST=db
      - PGPORT=5432
      - PGDATABASE=postgres
      - PGUSER=postgres
      - PGPASS=mysecretpassword
      - PGSSLMODE=disable
      - DB_MAX_CONNECTIONS=20
      - FLAG_SOURCE
      - FLAGDATA_FILE
      - LD_SDK_KEY
      - LD_TIMEOUT_SECONDS=30
      - LD_ENV_USER
      - LAMBDA_FUNCTION_PRINCE=handler
      - LAMBDA_ENDPOINT=http://prince:9001
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_ADDRESS=http://minio:9005
      - SERVER_CERT
      - SERVER_KEY
      - USE_TLS
      - FAKTORY_URL
      - FAKTORY_PROCESS_JOBS
      - FAKTORY_CONNECTIONS

    depends_on:
      db_migrate:
        condition: service_completed_successfully # Only start if migrations completed successfully
    networks:
      - elastic

  mint_client:
    image: mint-frontend:latest
    networks:
      - elastic

  minio:
    restart: always
    image: minio/minio:latest
    entrypoint: minio server /data --console-address ":9966" --address ":9005"
    networks:
      - elastic

  minio_mc:
    image: minio/mc:latest
    volumes:
      - ./minio_config.json:/root/.mc/config.json
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc rb --force s3local/mint-app-file-uploads/;
      /usr/bin/mc mb --quiet s3local/mint-app-file-uploads/;
      /usr/bin/mc policy set public s3local/mint-app-file-uploads;
      "
    networks:
      - elastic

  email:
    image: dockage/mailcatcher:0.7.1
    platform: linux/amd64
    ports:
      - "1085:1080"
      - "1030:1025"
    networks:
      - elastic

  faktory:
    image: docker.contribsys.com/contribsys/faktory-ent:latest
    ports:
      - 7419:7419
      - 7420:7420
    volumes:
      - faktory:/var/lib/faktory
      - type: bind
        source: ./.faktory/conf.d
        target: /root/.faktory/conf.d
    restart: always
    networks:
      - elastic

  elasticsearch:
    image: elasticsearch:7.16.1
    container_name: Elasticsearch
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - elastic

  logstash:
    image: logstash:7.16.1
    container_name: Logstash
    environment:
      discovery.seed_hosts: logstash
      LS_JAVA_OPTS: "-Xms512m -Xmx512m"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    volumes:
      - ./config/connectors/postgresql-42.6.0.jar:/usr/share/logstash/postgresql-42.6.0.jar
      - ./config/logstash/logstash.conf:/usr/share/logstash/logstash.config
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      - elastic
    command: logstash -f /usr/share/logstash/logstash.config

  kibana:
    image: kibana:7.16.1
    container_name: Kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - elastic

  # The buffer database
  statetrace_db:
    image: postgres
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    command:
      - "postgres"
      - "-p"
      - "5438"
    ports:
      - "5438:5438"

  statetrace:
    image: statetraceofficial/statetrace-beta
    container_name: StateTrace
    environment:
      STATETRACE_DATABASE_URL: postgres://postgres:postgres@statetrace_db:5438/postgres
      STATETRACE_SECRET_KEY_BASE: "O7fjqRWWsxS3d51mVHH1UJkANxLwTr06MZANMF6FnBWfqpWffB6B2cFaGWRxy0Kq"
      STATETRACE_LICENSE: "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJKb2tlbiIsImNvcmVfbGljZW5zZV9pZCI6OTAsImV4cCI6MTcxMTA5NTk2NywiaWF0IjoxNjc5NTU5OTY3LCJpc3MiOiJKb2tlbiIsImp0aSI6IjJ0N2Z0cDJ1Nm0yczZwMGVhZzA2NjgzaSIsIm5iZiI6MTY3OTU1OTk2N30.D92s8f0amrkyz_9SGwgvq4NEFnnxSwH8Gh6WQGZShzvso0qzUpk9sKWm1iHVYQbSyM6GbFWOl6wusyWSKXwZrumlg4eq35kad0710WIjjUgaYXsCgnRihyJ_-tvpvrjwk9hscxiYvhCxzCgPOoT0p1qBisQDCwkvxPRFVuc5src"
      STATETRACE_INBOUND_CONFIG: |
        inbounds:
          - name: Postgres DB
            database_type: postgres
            username: postgres
            password: mysecretpassword
            database: postgres
            host: db
            publication: "statetrace"
            slot: "statetrace"
            port: 5437
            log_new_attributes: true
            tables:
              - schema: public
                name: model_plan
            outbounds:
                - name: Webhook
                  handler: webhook
                  target_url: "http://Elasticsearch:9200/logs-statetrace_dump/_bulk"
                  middleware: |
                    fn
                      %{relation_name: tn} when tn in ["model_plan"] -> :ok
                      _ -> :skip
                    end
                  request_builder: |
                      fn rows ->
                        payload =
                          rows
                          |> Enum.flat_map(fn row ->
                              [
                                  Jason.encode_to_iodata!(%{"create" => %{}}),
                                  "\n",
                                  Jason.encode_to_iodata!(Map.merge(%{"@timestamp" => row.row_timestamp}, row)),
                                  "\n"
                              ]
                          end)
                        %WebhookRequest{method: "POST", headers: [{"content-type", "application/json"}], payload: payload}
                      end
    depends_on:
      - db
      - statetrace_db
      - elasticsearch

volumes:
  faktory:

networks:
  elastic:
    driver: bridge
